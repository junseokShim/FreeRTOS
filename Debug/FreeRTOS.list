
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800edf8  0800edf8  0000fdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f468  0800f468  000111e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f468  0800f468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f470  0800f470  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f470  0800f470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f474  0800f474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800f478  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003570  200001e4  0800f65c  000111e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003754  0800f65c  00011754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a08d  00000000  00000000  00011214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b6c  00000000  00000000  0003b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  00040e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cb4  00000000  00000000  00043320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007079  00000000  00000000  00044fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b6a7  00000000  00000000  0004c04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c176  00000000  00000000  000776f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018386a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b320  00000000  00000000  001838b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eddc 	.word	0x0800eddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800eddc 	.word	0x0800eddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000200 	.word	0x20000200
 8001014:	200002a0 	.word	0x200002a0

08001018 <__io_putchar>:

TaskHandle_t xTask1Handle;
TaskHandle_t xTask2Handle;

int __io_putchar(int ch)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100))
 8001020:	bf00      	nop
 8001022:	1d39      	adds	r1, r7, #4
 8001024:	2364      	movs	r3, #100	@ 0x64
 8001026:	2201      	movs	r2, #1
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <__io_putchar+0x28>)
 800102a:	f005 fba3 	bl	8006774 <HAL_UART_Transmit>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f6      	bne.n	8001022 <__io_putchar+0xa>
	{

	}
	return ch;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200005d4 	.word	0x200005d4

08001044 <__io_getchar>:

int __io_getchar(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <__io_getchar+0x30>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2208      	movs	r2, #8
 8001054:	621a      	str	r2, [r3, #32]
	while(HAL_UART_Receive(&huart1, &ch, 1, 10) != HAL_OK){
 8001056:	bf00      	nop
 8001058:	1df9      	adds	r1, r7, #7
 800105a:	230a      	movs	r3, #10
 800105c:	2201      	movs	r2, #1
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <__io_getchar+0x30>)
 8001060:	f005 fc11 	bl	8006886 <HAL_UART_Receive>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f6      	bne.n	8001058 <__io_getchar+0x14>

	}
	return ch;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200005d4 	.word	0x200005d4

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f001 fe5c 	bl	8002d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f84b 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fa1b 	bl	80014c0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800108a:	f000 f8a9 	bl	80011e0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108e:	f000 f8df 	bl	8001250 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001092:	f000 f91b 	bl	80012cc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001096:	f000 f93f 	bl	8001318 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800109a:	f000 f97b 	bl	8001394 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109e:	f000 f9b1 	bl	8001404 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a2:	f000 f9df 	bl	8001464 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  printf("Start!! \r\n");
 80010a6:	4816      	ldr	r0, [pc, #88]	@ (8001100 <main+0x88>)
 80010a8:	f00a f9cc 	bl	800b444 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <main+0x8c>)
 80010ae:	1d3c      	adds	r4, r7, #4
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f007 fa84 	bl	80085d0 <osThreadCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001108 <main+0x90>)
 80010cc:	6013      	str	r3, [r2, #0]
  /*
  xTaskCreate(vTask1, "Task1", 128, NULL, 3, &xTask1Handle);
  xTaskCreate(vTask2, "Task2", 128, NULL, 4, &xTask2Handle);
  */
 
  if (xTaskCreate(vTaskUARTReceiver, "UART Receiver", 256, NULL, 5, NULL) == pdPASS)
 80010ce:	2300      	movs	r3, #0
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2305      	movs	r3, #5
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010dc:	490b      	ldr	r1, [pc, #44]	@ (800110c <main+0x94>)
 80010de:	480c      	ldr	r0, [pc, #48]	@ (8001110 <main+0x98>)
 80010e0:	f007 ff26 	bl	8008f30 <xTaskCreate>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d103      	bne.n	80010f2 <main+0x7a>
  {
      printf("UART Receiver Task created successfully.\r\n");
 80010ea:	480a      	ldr	r0, [pc, #40]	@ (8001114 <main+0x9c>)
 80010ec:	f00a f9aa 	bl	800b444 <puts>
 80010f0:	e002      	b.n	80010f8 <main+0x80>
  }
  else
  {
      printf("Failed to create UART Receiver Task.\r\n");
 80010f2:	4809      	ldr	r0, [pc, #36]	@ (8001118 <main+0xa0>)
 80010f4:	f00a f9a6 	bl	800b444 <puts>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010f8:	f007 fa63 	bl	80085c2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <main+0x84>
 8001100:	0800edf8 	.word	0x0800edf8
 8001104:	0800ee74 	.word	0x0800ee74
 8001108:	20000bc8 	.word	0x20000bc8
 800110c:	0800ee04 	.word	0x0800ee04
 8001110:	08001b1d 	.word	0x08001b1d
 8001114:	0800ee14 	.word	0x0800ee14
 8001118:	0800ee40 	.word	0x0800ee40

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	@ 0x58
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2244      	movs	r2, #68	@ 0x44
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00a fabe 	bl	800b6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001142:	f003 fb41 	bl	80047c8 <HAL_PWREx_ControlVoltageScaling>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800114c:	f000 fb84 	bl	8001858 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001150:	f003 fb1c 	bl	800478c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <SystemClock_Config+0xc0>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115a:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <SystemClock_Config+0xc0>)
 800115c:	f023 0318 	bic.w	r3, r3, #24
 8001160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001164:	2314      	movs	r3, #20
 8001166:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001174:	2360      	movs	r3, #96	@ 0x60
 8001176:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800117c:	2301      	movs	r3, #1
 800117e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001184:	2328      	movs	r3, #40	@ 0x28
 8001186:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001188:	2307      	movs	r3, #7
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118c:	2302      	movs	r3, #2
 800118e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fc37 	bl	8004a0c <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011a4:	f000 fb58 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2303      	movs	r3, #3
 80011ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2104      	movs	r1, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 ffff 	bl	80051c4 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011cc:	f000 fb44 	bl	8001858 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011d0:	f004 fd38 	bl	8005c44 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011d4:	bf00      	nop
 80011d6:	3758      	adds	r7, #88	@ 0x58
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 80011e6:	4a19      	ldr	r2, [pc, #100]	@ (800124c <MX_DFSDM1_Init+0x6c>)
 80011e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011ea:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 800120a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800120e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 8001218:	2204      	movs	r2, #4
 800121a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 8001224:	2201      	movs	r2, #1
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_DFSDM1_Init+0x68>)
 8001236:	f001 febf 	bl	8002fb8 <HAL_DFSDM_ChannelInit>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001240:	f000 fb0a 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200004a0 	.word	0x200004a0
 800124c:	40016020 	.word	0x40016020

08001250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_I2C2_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <MX_I2C2_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_I2C2_Init+0x74>)
 800125c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001260:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_I2C2_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_I2C2_Init+0x74>)
 800126a:	2201      	movs	r2, #1
 800126c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_I2C2_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_I2C2_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_I2C2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_I2C2_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_I2C2_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_I2C2_Init+0x74>)
 800128e:	f002 faf8 	bl	8003882 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 fade 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <MX_I2C2_Init+0x74>)
 80012a0:	f003 f8aa 	bl	80043f8 <HAL_I2CEx_ConfigAnalogFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012aa:	f000 fad5 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <MX_I2C2_Init+0x74>)
 80012b2:	f003 f8ec 	bl	800448e <HAL_I2CEx_ConfigDigitalFilter>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 facc 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200004d8 	.word	0x200004d8
 80012c8:	40005800 	.word	0x40005800

080012cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <MX_QUADSPI_Init+0x48>)
 80012d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012d8:	2202      	movs	r2, #2
 80012da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012de:	2204      	movs	r2, #4
 80012e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012e4:	2210      	movs	r2, #16
 80012e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012ea:	2217      	movs	r2, #23
 80012ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_QUADSPI_Init+0x44>)
 80012fc:	f003 faca 	bl	8004894 <HAL_QSPI_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001306:	f000 faa7 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000052c 	.word	0x2000052c
 8001314:	a0001000 	.word	0xa0001000

08001318 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_SPI3_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <MX_SPI3_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_SPI3_Init+0x74>)
 8001324:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001328:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_SPI3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_SPI3_Init+0x74>)
 8001332:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001336:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_SPI3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <MX_SPI3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_SPI3_Init+0x74>)
 8001346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_SPI3_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_SPI3_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_SPI3_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_SPI3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_SPI3_Init+0x74>)
 8001366:	2207      	movs	r2, #7
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <MX_SPI3_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_SPI3_Init+0x74>)
 8001372:	2208      	movs	r2, #8
 8001374:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_SPI3_Init+0x74>)
 8001378:	f004 fe46 	bl	8006008 <HAL_SPI_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 fa69 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000570 	.word	0x20000570
 8001390:	40003c00 	.word	0x40003c00

08001394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 800139a:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <MX_USART1_UART_Init+0x6c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <MX_USART1_UART_Init+0x68>)
 80013d8:	f005 f97e 	bl	80066d8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 fa39 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2025      	movs	r0, #37	@ 0x25
 80013ec:	f001 fdba 	bl	8002f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f0:	2025      	movs	r0, #37	@ 0x25
 80013f2:	f001 fdd3 	bl	8002f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200005d4 	.word	0x200005d4
 8001400:	40013800 	.word	0x40013800

08001404 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_USART3_UART_Init+0x58>)
 800140a:	4a15      	ldr	r2, [pc, #84]	@ (8001460 <MX_USART3_UART_Init+0x5c>)
 800140c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_USART3_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_USART3_UART_Init+0x58>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <MX_USART3_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_USART3_UART_Init+0x58>)
 8001448:	f005 f946 	bl	80066d8 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001452:	f000 fa01 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000065c 	.word	0x2000065c
 8001460:	40004800 	.word	0x40004800

08001464 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800146e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001472:	2206      	movs	r2, #6
 8001474:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001478:	2202      	movs	r2, #2
 800147a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147e:	2202      	movs	r2, #2
 8001480:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a8:	f003 f83d 	bl	8004526 <HAL_PCD_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014b2:	f000 f9d1 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200006e4 	.word	0x200006e4

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d6:	4bbd      	ldr	r3, [pc, #756]	@ (80017cc <MX_GPIO_Init+0x30c>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4abc      	ldr	r2, [pc, #752]	@ (80017cc <MX_GPIO_Init+0x30c>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4bba      	ldr	r3, [pc, #744]	@ (80017cc <MX_GPIO_Init+0x30c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4bb7      	ldr	r3, [pc, #732]	@ (80017cc <MX_GPIO_Init+0x30c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4ab6      	ldr	r2, [pc, #728]	@ (80017cc <MX_GPIO_Init+0x30c>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4bb4      	ldr	r3, [pc, #720]	@ (80017cc <MX_GPIO_Init+0x30c>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4bb1      	ldr	r3, [pc, #708]	@ (80017cc <MX_GPIO_Init+0x30c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4ab0      	ldr	r2, [pc, #704]	@ (80017cc <MX_GPIO_Init+0x30c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4bae      	ldr	r3, [pc, #696]	@ (80017cc <MX_GPIO_Init+0x30c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4bab      	ldr	r3, [pc, #684]	@ (80017cc <MX_GPIO_Init+0x30c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	4aaa      	ldr	r2, [pc, #680]	@ (80017cc <MX_GPIO_Init+0x30c>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152a:	4ba8      	ldr	r3, [pc, #672]	@ (80017cc <MX_GPIO_Init+0x30c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	4ba5      	ldr	r3, [pc, #660]	@ (80017cc <MX_GPIO_Init+0x30c>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	4aa4      	ldr	r2, [pc, #656]	@ (80017cc <MX_GPIO_Init+0x30c>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001542:	4ba2      	ldr	r3, [pc, #648]	@ (80017cc <MX_GPIO_Init+0x30c>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001554:	489e      	ldr	r0, [pc, #632]	@ (80017d0 <MX_GPIO_Init+0x310>)
 8001556:	f002 f959 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001564:	f002 f952 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001568:	2200      	movs	r2, #0
 800156a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800156e:	4899      	ldr	r0, [pc, #612]	@ (80017d4 <MX_GPIO_Init+0x314>)
 8001570:	f002 f94c 	bl	800380c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f241 0181 	movw	r1, #4225	@ 0x1081
 800157a:	4897      	ldr	r0, [pc, #604]	@ (80017d8 <MX_GPIO_Init+0x318>)
 800157c:	f002 f946 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001586:	4894      	ldr	r0, [pc, #592]	@ (80017d8 <MX_GPIO_Init+0x318>)
 8001588:	f002 f940 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001592:	4892      	ldr	r0, [pc, #584]	@ (80017dc <MX_GPIO_Init+0x31c>)
 8001594:	f002 f93a 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2120      	movs	r1, #32
 800159c:	488d      	ldr	r0, [pc, #564]	@ (80017d4 <MX_GPIO_Init+0x314>)
 800159e:	f002 f935 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2101      	movs	r1, #1
 80015a6:	488a      	ldr	r0, [pc, #552]	@ (80017d0 <MX_GPIO_Init+0x310>)
 80015a8:	f002 f930 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015ac:	f240 1315 	movw	r3, #277	@ 0x115
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4882      	ldr	r0, [pc, #520]	@ (80017d0 <MX_GPIO_Init+0x310>)
 80015c6:	f001 fe83 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015ca:	236a      	movs	r3, #106	@ 0x6a
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	487c      	ldr	r0, [pc, #496]	@ (80017d0 <MX_GPIO_Init+0x310>)
 80015e0:	f001 fe76 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4878      	ldr	r0, [pc, #480]	@ (80017dc <MX_GPIO_Init+0x31c>)
 80015fc:	f001 fe68 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001600:	233f      	movs	r3, #63	@ 0x3f
 8001602:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001604:	230b      	movs	r3, #11
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4872      	ldr	r0, [pc, #456]	@ (80017dc <MX_GPIO_Init+0x31c>)
 8001614:	f001 fe5c 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001618:	2303      	movs	r3, #3
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001628:	2308      	movs	r3, #8
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001636:	f001 fe4b 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800163a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f001 fe3b 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800165a:	2308      	movs	r3, #8
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800166a:	2301      	movs	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001678:	f001 fe2a 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800167c:	2310      	movs	r3, #16
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001680:	230b      	movs	r3, #11
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001692:	f001 fe1d 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001696:	23e0      	movs	r3, #224	@ 0xe0
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f001 fe0c 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016b8:	2301      	movs	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4841      	ldr	r0, [pc, #260]	@ (80017d4 <MX_GPIO_Init+0x314>)
 80016ce:	f001 fdff 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016d2:	2302      	movs	r3, #2
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016d6:	230b      	movs	r3, #11
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	483b      	ldr	r0, [pc, #236]	@ (80017d4 <MX_GPIO_Init+0x314>)
 80016e6:	f001 fdf3 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016ea:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80016ee:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4834      	ldr	r0, [pc, #208]	@ (80017d4 <MX_GPIO_Init+0x314>)
 8001704:	f001 fde4 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001708:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800170c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	482e      	ldr	r0, [pc, #184]	@ (80017d8 <MX_GPIO_Init+0x318>)
 8001720:	f001 fdd6 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001724:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4826      	ldr	r0, [pc, #152]	@ (80017d8 <MX_GPIO_Init+0x318>)
 800173e:	f001 fdc7 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001742:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4820      	ldr	r0, [pc, #128]	@ (80017dc <MX_GPIO_Init+0x31c>)
 800175c:	f001 fdb8 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001760:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001766:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4819      	ldr	r0, [pc, #100]	@ (80017dc <MX_GPIO_Init+0x31c>)
 8001778:	f001 fdaa 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800177c:	2302      	movs	r3, #2
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800178c:	2305      	movs	r3, #5
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <MX_GPIO_Init+0x318>)
 8001798:	f001 fd9a 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800179c:	2378      	movs	r3, #120	@ 0x78
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ac:	2307      	movs	r3, #7
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <MX_GPIO_Init+0x318>)
 80017b8:	f001 fd8a 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c2:	2312      	movs	r3, #18
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e00a      	b.n	80017e0 <MX_GPIO_Init+0x320>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48001000 	.word	0x48001000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000c00 	.word	0x48000c00
 80017dc:	48000800 	.word	0x48000800
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e6:	2304      	movs	r3, #4
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480b      	ldr	r0, [pc, #44]	@ (8001820 <MX_GPIO_Init+0x360>)
 80017f2:	f001 fd6d 	bl	80032d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2105      	movs	r1, #5
 80017fa:	2017      	movs	r0, #23
 80017fc:	f001 fbb2 	bl	8002f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001800:	2017      	movs	r0, #23
 8001802:	f001 fbcb 	bl	8002f9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	2028      	movs	r0, #40	@ 0x28
 800180c:	f001 fbaa 	bl	8002f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001810:	2028      	movs	r0, #40	@ 0x28
 8001812:	f001 fbc3 	bl	8002f9c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	@ 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	48000400 	.word	0x48000400

08001824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f006 ff1b 	bl	8008668 <osDelay>
 8001832:	e7fb      	b.n	800182c <StartDefaultTask+0x8>

08001834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001846:	f001 fa91 	bl	8002d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40001000 	.word	0x40001000

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <Error_Handler+0x8>

08001864 <initSensorBSP>:
#include "module_sensors.h"

TSENSOR_InitTypeDef gTemp = {};

void initSensorBSP()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	if(BSP_HSENSOR_Init() != 0)
 8001868:	f000 fff4 	bl	8002854 <BSP_HSENSOR_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <initSensorBSP+0x16>
	{
		printf("Error initializing HSENSOR\n");
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <initSensorBSP+0x48>)
 8001874:	f009 fde6 	bl	800b444 <puts>
		return;
 8001878:	e016      	b.n	80018a8 <initSensorBSP+0x44>
	}
	if(0xBC == HTS221_H_ReadID(HTS221_DEVICE_ID))
 800187a:	20be      	movs	r0, #190	@ 0xbe
 800187c:	f001 f836 	bl	80028ec <HTS221_H_ReadID>
 8001880:	4603      	mov	r3, r0
 8001882:	2bbc      	cmp	r3, #188	@ 0xbc
 8001884:	d106      	bne.n	8001894 <initSensorBSP+0x30>
	{
		HTS221_H_Init((uint16_t)HTS221_DEVICE_ID);
 8001886:	20be      	movs	r0, #190	@ 0xbe
 8001888:	f001 f804 	bl	8002894 <HTS221_H_Init>
		HTS221_T_Init((uint16_t)HTS221_DEVICE_ID, &gTemp);
 800188c:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <initSensorBSP+0x4c>)
 800188e:	20be      	movs	r0, #190	@ 0xbe
 8001890:	f001 f8de 	bl	8002a50 <HTS221_T_Init>
	}

	if (LPS22HB_WHO_AL_I_VAL == LPS22HB_P_ReadID(LPS22HB_I2C_ADDRESS))
 8001894:	20ba      	movs	r0, #186	@ 0xba
 8001896:	f001 f99c 	bl	8002bd2 <LPS22HB_P_ReadID>
 800189a:	4603      	mov	r3, r0
 800189c:	22b1      	movs	r2, #177	@ 0xb1
 800189e:	4293      	cmp	r3, r2
 80018a0:	d102      	bne.n	80018a8 <initSensorBSP+0x44>
	{
		LPS22HB_P_Init(LPS22HB_I2C_ADDRESS);
 80018a2:	20ba      	movs	r0, #186	@ 0xba
 80018a4:	f001 f988 	bl	8002bb8 <LPS22HB_P_Init>
	}
}
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800ee90 	.word	0x0800ee90
 80018b0:	20000bcc 	.word	0x20000bcc

080018b4 <seperateRxPacket>:

void seperateRxPacket(UartPacket packet)
{
 80018b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b8:	b0a4      	sub	sp, #144	@ 0x90
 80018ba:	af06      	add	r7, sp, #24
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t length = packet.data[1];
 80018c2:	797b      	ldrb	r3, [r7, #5]
 80018c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t reqType = packet.data[2];
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	uint8_t sensorType = packet.data[3];
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

	char str[100]; // Allocate memory for the string
	switch (sensorType){
 80018d4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80018d8:	2bff      	cmp	r3, #255	@ 0xff
 80018da:	d040      	beq.n	800195e <seperateRxPacket+0xaa>
 80018dc:	2bff      	cmp	r3, #255	@ 0xff
 80018de:	dc66      	bgt.n	80019ae <seperateRxPacket+0xfa>
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d02a      	beq.n	800193a <seperateRxPacket+0x86>
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	dc62      	bgt.n	80019ae <seperateRxPacket+0xfa>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <seperateRxPacket+0x3e>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d012      	beq.n	8001916 <seperateRxPacket+0x62>
 80018f0:	e05d      	b.n	80019ae <seperateRxPacket+0xfa>
		case REQ_SENSOR_TYPE_INDOOR_TEMP:
			snprintf(str, sizeof(str), "temp : %.2f \r\n", get_temp_info());
 80018f2:	f000 f885 	bl	8001a00 <get_temp_info>
 80018f6:	ee10 3a10 	vmov	r3, s0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe24 	bl	8000548 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f107 0010 	add.w	r0, r7, #16
 8001908:	e9cd 2300 	strd	r2, r3, [sp]
 800190c:	4a31      	ldr	r2, [pc, #196]	@ (80019d4 <seperateRxPacket+0x120>)
 800190e:	2164      	movs	r1, #100	@ 0x64
 8001910:	f009 fda0 	bl	800b454 <sniprintf>
			/*
			C 언어에서는 문자열 리터럴("temp : ")과 숫자형(double)을 직접 더하는 연산은 지원하지 않습니다.
			문자열과 숫자를 결합하여 출력하려면 sprintf 또는 snprintf와 같은 함수를 사용해서 포맷팅된 문자열을 만들어야 합니다.
			*/
			break;
 8001914:	e053      	b.n	80019be <seperateRxPacket+0x10a>
		case REQ_SENSOR_TYPE_INDOOR_HUMIDITY:
			snprintf(str, sizeof(str), "humid : %.2f \r\n", get_humidity_info());
 8001916:	f000 f869 	bl	80019ec <get_humidity_info>
 800191a:	ee10 3a10 	vmov	r3, s0
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe12 	bl	8000548 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	f107 0010 	add.w	r0, r7, #16
 800192c:	e9cd 2300 	strd	r2, r3, [sp]
 8001930:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <seperateRxPacket+0x124>)
 8001932:	2164      	movs	r1, #100	@ 0x64
 8001934:	f009 fd8e 	bl	800b454 <sniprintf>
			break;
 8001938:	e041      	b.n	80019be <seperateRxPacket+0x10a>
		case REQ_SENSOR_TYPE_ATMOSPHERIC_PRESSURE:
			snprintf(str, sizeof(str), "atmospheric pressure :%.2f \r\n", get_atmospheric_pressure_info());
 800193a:	f000 f883 	bl	8001a44 <get_atmospheric_pressure_info>
 800193e:	ee10 3a10 	vmov	r3, s0
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f107 0010 	add.w	r0, r7, #16
 8001950:	e9cd 2300 	strd	r2, r3, [sp]
 8001954:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <seperateRxPacket+0x128>)
 8001956:	2164      	movs	r1, #100	@ 0x64
 8001958:	f009 fd7c 	bl	800b454 <sniprintf>
			break;
 800195c:	e02f      	b.n	80019be <seperateRxPacket+0x10a>
		case REQ_SENSOR_TYPE_ALL:
			snprintf(str, sizeof(str), "temp: %.2f \r\n humid : %.2f \r\n atmospheric pressure : %.2f \r\n", get_temp_info(), get_humidity_info(), get_atmospheric_pressure_info());
 800195e:	f000 f84f 	bl	8001a00 <get_temp_info>
 8001962:	ee10 3a10 	vmov	r3, s0
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fdee 	bl	8000548 <__aeabi_f2d>
 800196c:	4604      	mov	r4, r0
 800196e:	460d      	mov	r5, r1
 8001970:	f000 f83c 	bl	80019ec <get_humidity_info>
 8001974:	ee10 3a10 	vmov	r3, s0
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fde5 	bl	8000548 <__aeabi_f2d>
 800197e:	4680      	mov	r8, r0
 8001980:	4689      	mov	r9, r1
 8001982:	f000 f85f 	bl	8001a44 <get_atmospheric_pressure_info>
 8001986:	ee10 3a10 	vmov	r3, s0
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fddc 	bl	8000548 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	f107 0010 	add.w	r0, r7, #16
 8001998:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800199c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80019a0:	e9cd 4500 	strd	r4, r5, [sp]
 80019a4:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <seperateRxPacket+0x12c>)
 80019a6:	2164      	movs	r1, #100	@ 0x64
 80019a8:	f009 fd54 	bl	800b454 <sniprintf>
			break;
 80019ac:	e007      	b.n	80019be <seperateRxPacket+0x10a>
		default:
			snprintf(str, sizeof(str), "DATA ERROR");
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <seperateRxPacket+0x130>)
 80019b4:	2164      	movs	r1, #100	@ 0x64
 80019b6:	4618      	mov	r0, r3
 80019b8:	f009 fd4c 	bl	800b454 <sniprintf>
			break;
 80019bc:	bf00      	nop
	}
	// Print the result after the switch statement
	printf("%s", str);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <seperateRxPacket+0x134>)
 80019c6:	f009 fcd5 	bl	800b374 <iprintf>
	// No need to free str as it is allocated on the stack

}
 80019ca:	bf00      	nop
 80019cc:	3778      	adds	r7, #120	@ 0x78
 80019ce:	46bd      	mov	sp, r7
 80019d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019d4:	0800eeac 	.word	0x0800eeac
 80019d8:	0800eebc 	.word	0x0800eebc
 80019dc:	0800eecc 	.word	0x0800eecc
 80019e0:	0800eeec 	.word	0x0800eeec
 80019e4:	0800ef2c 	.word	0x0800ef2c
 80019e8:	0800ef38 	.word	0x0800ef38

080019ec <get_humidity_info>:

float get_humidity_info()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	return HTS221_H_ReadHumidity((uint16_t)HTS221_DEVICE_ID);
 80019f0:	20be      	movs	r0, #190	@ 0xbe
 80019f2:	f000 ff91 	bl	8002918 <HTS221_H_ReadHumidity>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <get_temp_info>:

float get_temp_info()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	float temp = HTS221_T_ReadTemp((uint16_t)HTS221_DEVICE_ID);
 8001a06:	20be      	movs	r0, #190	@ 0xbe
 8001a08:	f001 f84f 	bl	8002aaa <HTS221_T_ReadTemp>
 8001a0c:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temp == -1) // Assuming -1 indicates an error
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001a18:	eef4 7a47 	vcmp.f32	s15, s14
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d105      	bne.n	8001a2e <get_temp_info+0x2e>
	{
		printf("Error reading temperature\n");
 8001a22:	4807      	ldr	r0, [pc, #28]	@ (8001a40 <get_temp_info+0x40>)
 8001a24:	f009 fd0e 	bl	800b444 <puts>
		return 0.0; // Return a default value or handle the error as needed
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e000      	b.n	8001a30 <get_temp_info+0x30>
	}
	return temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	0800ef3c 	.word	0x0800ef3c

08001a44 <get_atmospheric_pressure_info>:

float get_atmospheric_pressure_info()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	return LPS22HB_P_ReadPressure(LPS22HB_I2C_ADDRESS);
 8001a48:	20ba      	movs	r0, #186	@ 0xba
 8001a4a:	f001 f8d9 	bl	8002c00 <LPS22HB_P_ReadPressure>
 8001a4e:	ee07 0a90 	vmov	s15, r0
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <target_function>:
uint8_t uartBuff[RX_BUFFER_SIZE] = {0x00, };
QueueHandle_t uartQueue;


void target_function(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	printf("Target packet received! Executing function... \r\n");
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <target_function+0x10>)
 8001a62:	f009 fcef 	bl	800b444 <puts>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	0800ef58 	.word	0x0800ef58

08001a70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
	if (huart->Instance == USART1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_UART_RxCpltCallback+0x98>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d130      	bne.n	8001ae8 <HAL_UART_RxCpltCallback+0x78>
	{
		// 수신된 데이터의 크기를 확인
		size_t dataLength = huart->RxXferSize - huart->RxXferCount;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

		// 수신된 데이터를 큐에 넣음
		UartPacket packet;
		memset(packet.data, 0, RX_BUFFER_SIZE); // Initialize packet data buffer
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f009 fe02 	bl	800b6ac <memset>
		memcpy(packet.data, uartBuff, dataLength);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	4917      	ldr	r1, [pc, #92]	@ (8001b0c <HAL_UART_RxCpltCallback+0x9c>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f009 fed0 	bl	800b856 <memcpy>
		packet.length = dataLength;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	617b      	str	r3, [r7, #20]

		// 수신된 데이터가 버퍼 크기를 초과하는지 확인
		if (dataLength > RX_BUFFER_SIZE)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d905      	bls.n	8001acc <HAL_UART_RxCpltCallback+0x5c>
		{
			// 버퍼 초기화
			memset(uartBuff, 0, RX_BUFFER_SIZE);
 8001ac0:	2208      	movs	r2, #8
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4811      	ldr	r0, [pc, #68]	@ (8001b0c <HAL_UART_RxCpltCallback+0x9c>)
 8001ac6:	f009 fdf1 	bl	800b6ac <memset>
 8001aca:	e008      	b.n	8001ade <HAL_UART_RxCpltCallback+0x6e>
		}
		else
		{
			// 수신된 데이터를 큐에 넣음
			xQueueSendFromISR(uartQueue, &packet, &xHigherPriorityTaskWoken);
 8001acc:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_UART_RxCpltCallback+0xa0>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	f107 0218 	add.w	r2, r7, #24
 8001ad4:	f107 010c 	add.w	r1, r7, #12
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f006 ff51 	bl	8008980 <xQueueGenericSendFromISR>
		}

		// 다시 수신 대기
		HAL_UART_Receive_IT(&huart1, uartBuff, RX_BUFFER_SIZE);
 8001ade:	2208      	movs	r2, #8
 8001ae0:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <HAL_UART_RxCpltCallback+0x9c>)
 8001ae2:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <HAL_UART_RxCpltCallback+0xa4>)
 8001ae4:	f004 ff98 	bl	8006a18 <HAL_UART_Receive_IT>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_UART_RxCpltCallback+0x8e>
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_UART_RxCpltCallback+0xa8>)
 8001af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f3bf 8f4f 	dsb	sy
 8001afa:	f3bf 8f6f 	isb	sy
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	20000bd4 	.word	0x20000bd4
 8001b10:	20000bdc 	.word	0x20000bdc
 8001b14:	200005d4 	.word	0x200005d4
 8001b18:	e000ed04 	.word	0xe000ed04

08001b1c <vTaskUARTReceiver>:

void vTaskUARTReceiver(void *pvParameters)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08e      	sub	sp, #56	@ 0x38
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	uartQueue = xQueueCreate(10, sizeof(UartPacket));
 8001b24:	2200      	movs	r2, #0
 8001b26:	210c      	movs	r1, #12
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f006 fecf 	bl	80088cc <xQueueGenericCreate>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a40      	ldr	r2, [pc, #256]	@ (8001c34 <vTaskUARTReceiver+0x118>)
 8001b32:	6013      	str	r3, [r2, #0]
	if (uartQueue == NULL)	return;		// 큐 생성 실패
 8001b34:	4b3f      	ldr	r3, [pc, #252]	@ (8001c34 <vTaskUARTReceiver+0x118>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d075      	beq.n	8001c28 <vTaskUARTReceiver+0x10c>

	// 센서 초기화
	initSensorBSP();
 8001b3c:	f7ff fe92 	bl	8001864 <initSensorBSP>

	// 첫 번째 수신 시작
	if (HAL_UART_Receive_IT(&huart1, uartBuff, RX_BUFFER_SIZE) != HAL_OK)	return;
 8001b40:	2208      	movs	r2, #8
 8001b42:	493d      	ldr	r1, [pc, #244]	@ (8001c38 <vTaskUARTReceiver+0x11c>)
 8001b44:	483d      	ldr	r0, [pc, #244]	@ (8001c3c <vTaskUARTReceiver+0x120>)
 8001b46:	f004 ff67 	bl	8006a18 <HAL_UART_Receive_IT>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d16d      	bne.n	8001c2c <vTaskUARTReceiver+0x110>

	while (1)
	{
		// 큐에서 수신된 데이터를 가져옴
		UartPacket packet;
		if (xQueueReceive(uartQueue, &packet, portMAX_DELAY) == pdPASS)
 8001b50:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <vTaskUARTReceiver+0x118>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f107 0120 	add.w	r1, r7, #32
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f006 ffad 	bl	8008abc <xQueueReceive>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d158      	bne.n	8001c1a <vTaskUARTReceiver+0xfe>
		{
			// 패킷을 문자열 형식으로 변환하여 출력
			char strPacket[RX_BUFFER_SIZE * 2 + 1];
			for (size_t i = 0; i < packet.length; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b6c:	e010      	b.n	8001b90 <vTaskUARTReceiver+0x74>
			{
				sprintf(&strPacket[i * 2], "%02X ", packet.data[i]);
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	f107 020c 	add.w	r2, r7, #12
 8001b76:	18d0      	adds	r0, r2, r3
 8001b78:	f107 0220 	add.w	r2, r7, #32
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	492e      	ldr	r1, [pc, #184]	@ (8001c40 <vTaskUARTReceiver+0x124>)
 8001b86:	f009 fc99 	bl	800b4bc <siprintf>
			for (size_t i = 0; i < packet.length; i++)
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3ea      	bcc.n	8001b6e <vTaskUARTReceiver+0x52>
			}
			strPacket[packet.length * 2] = '\0'; // Null-terminate the string
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	3338      	adds	r3, #56	@ 0x38
 8001b9e:	443b      	add	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f803 2c2c 	strb.w	r2, [r3, #-44]
			printf("PData Receiving Success: %s \r\n", strPacket);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4825      	ldr	r0, [pc, #148]	@ (8001c44 <vTaskUARTReceiver+0x128>)
 8001bae:	f009 fbe1 	bl	800b374 <iprintf>

			// 받은 데이터가 버퍼 크기를 초과하는지 확인
			size_t dataLength = packet.length;
 8001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30

			int reqType = packet.data[2];
 8001bb6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

			if (dataLength < RX_BUFFER_SIZE){
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d806      	bhi.n	8001bd0 <vTaskUARTReceiver+0xb4>
				xQueueReset(uartQueue);    //reset queue
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <vTaskUARTReceiver+0x118>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fe15 	bl	80087f8 <xQueueGenericReset>
 8001bce:	e7bf      	b.n	8001b50 <vTaskUARTReceiver+0x34>
				continue;
			}

			// 받은 데이터를 다시 TX로 전송
			if (HAL_UART_Transmit(&huart1, packet.data, dataLength, HAL_MAX_DELAY) != HAL_OK)
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f107 0120 	add.w	r1, r7, #32
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bdc:	4817      	ldr	r0, [pc, #92]	@ (8001c3c <vTaskUARTReceiver+0x120>)
 8001bde:	f004 fdc9 	bl	8006774 <HAL_UART_Transmit>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <vTaskUARTReceiver+0xd4>
			{
				printf("Failed to transmit data.\r\n");
 8001be8:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <vTaskUARTReceiver+0x12c>)
 8001bea:	f009 fc2b 	bl	800b444 <puts>
 8001bee:	e014      	b.n	8001c1a <vTaskUARTReceiver+0xfe>
			}
			else {
				switch (reqType){
 8001bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <vTaskUARTReceiver+0xe2>
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d007      	beq.n	8001c0c <vTaskUARTReceiver+0xf0>
 8001bfc:	e00a      	b.n	8001c14 <vTaskUARTReceiver+0xf8>
					case REQ_TYPE_SENSOR:
						// Process the received sensor packet
						seperateRxPacket(packet);
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c06:	f7ff fe55 	bl	80018b4 <seperateRxPacket>
						break;
 8001c0a:	e006      	b.n	8001c1a <vTaskUARTReceiver+0xfe>
					case REQ_TYPE_CONTROL:
						printf("Are you request Controller? \r\n");
 8001c0c:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <vTaskUARTReceiver+0x130>)
 8001c0e:	f009 fc19 	bl	800b444 <puts>
						break;
 8001c12:	e002      	b.n	8001c1a <vTaskUARTReceiver+0xfe>
					default:
						target_function();
 8001c14:	f7ff ff22 	bl	8001a5c <target_function>
						break;
 8001c18:	bf00      	nop
				}
			}
		}

		xQueueReset(uartQueue);    //reset queue
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <vTaskUARTReceiver+0x118>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 fde9 	bl	80087f8 <xQueueGenericReset>
	{
 8001c26:	e793      	b.n	8001b50 <vTaskUARTReceiver+0x34>
	if (uartQueue == NULL)	return;		// 큐 생성 실패
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <vTaskUARTReceiver+0x112>
	if (HAL_UART_Receive_IT(&huart1, uartBuff, RX_BUFFER_SIZE) != HAL_OK)	return;
 8001c2c:	bf00      	nop
	}
}
 8001c2e:	3738      	adds	r7, #56	@ 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000bdc 	.word	0x20000bdc
 8001c38:	20000bd4 	.word	0x20000bd4
 8001c3c:	200005d4 	.word	0x200005d4
 8001c40:	0800ef88 	.word	0x0800ef88
 8001c44:	0800ef90 	.word	0x0800ef90
 8001c48:	0800efb0 	.word	0x0800efb0
 8001c4c:	0800efcc 	.word	0x0800efcc

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5a:	4a10      	ldr	r2, [pc, #64]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	210f      	movs	r1, #15
 8001c8a:	f06f 0001 	mvn.w	r0, #1
 8001c8e:	f001 f969 	bl	8002f64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2288      	movs	r2, #136	@ 0x88
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f009 fcf3 	bl	800b6ac <memset>
  if(DFSDM1_Init == 0)
 8001cc6:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d142      	bne.n	8001d54 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fcc6 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001cea:	f7ff fdb5 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d0c:	f043 0310 	orr.w	r3, r3, #16
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d1e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d38:	2306      	movs	r3, #6
 8001d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d3e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4807      	ldr	r0, [pc, #28]	@ (8001d64 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001d46:	f001 fac3 	bl	80032d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4a02      	ldr	r2, [pc, #8]	@ (8001d5c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d52:	6013      	str	r3, [r2, #0]
  }

}
 8001d54:	bf00      	nop
 8001d56:	37b0      	adds	r7, #176	@ 0xb0
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000be0 	.word	0x20000be0
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48001000 	.word	0x48001000

08001d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2288      	movs	r2, #136	@ 0x88
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f009 fc8f 	bl	800b6ac <memset>
  if(hi2c->Instance==I2C2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <HAL_I2C_MspInit+0xb0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d13b      	bne.n	8001e10 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fc63 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001db0:	f7ff fd52 	bl	8001858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_I2C_MspInit+0xb4>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <HAL_I2C_MspInit+0xb4>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_I2C_MspInit+0xb4>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001dcc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd4:	2312      	movs	r3, #18
 8001dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001de6:	2304      	movs	r3, #4
 8001de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001df0:	4619      	mov	r1, r3
 8001df2:	480b      	ldr	r0, [pc, #44]	@ (8001e20 <HAL_I2C_MspInit+0xb8>)
 8001df4:	f001 fa6c 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_I2C_MspInit+0xb4>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_I2C_MspInit+0xb4>)
 8001dfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_I2C_MspInit+0xb4>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001e10:	bf00      	nop
 8001e12:	37b0      	adds	r7, #176	@ 0xb0
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40005800 	.word	0x40005800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400

08001e24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_I2C_MspDeInit+0x3c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10f      	bne.n	8001e56 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_I2C_MspDeInit+0x40>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_I2C_MspDeInit+0x40>)
 8001e3c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e40:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001e42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e46:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <HAL_I2C_MspDeInit+0x44>)
 8001e48:	f001 fbec 	bl	8003624 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <HAL_I2C_MspDeInit+0x44>)
 8001e52:	f001 fbe7 	bl	8003624 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40005800 	.word	0x40005800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	48000400 	.word	0x48000400

08001e6c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	@ 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <HAL_QSPI_MspInit+0x7c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d128      	bne.n	8001ee0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <HAL_QSPI_MspInit+0x80>)
 8001e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_QSPI_MspInit+0x80>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_QSPI_MspInit+0x80>)
 8001e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_QSPI_MspInit+0x80>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	4a10      	ldr	r2, [pc, #64]	@ (8001eec <HAL_QSPI_MspInit+0x80>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <HAL_QSPI_MspInit+0x80>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001ebe:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001ec2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <HAL_QSPI_MspInit+0x84>)
 8001edc:	f001 f9f8 	bl	80032d0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	@ 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	a0001000 	.word	0xa0001000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48001000 	.word	0x48001000

08001ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_SPI_MspInit+0x7c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d128      	bne.n	8001f68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <HAL_SPI_MspInit+0x80>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	4a16      	ldr	r2, [pc, #88]	@ (8001f74 <HAL_SPI_MspInit+0x80>)
 8001f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_SPI_MspInit+0x80>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_SPI_MspInit+0x80>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_SPI_MspInit+0x80>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_SPI_MspInit+0x80>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f46:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f58:	2306      	movs	r3, #6
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_SPI_MspInit+0x84>)
 8001f64:	f001 f9b4 	bl	80032d0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	@ 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40003c00 	.word	0x40003c00
 8001f74:	40021000 	.word	0x40021000
 8001f78:	48000800 	.word	0x48000800

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0ae      	sub	sp, #184	@ 0xb8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2288      	movs	r2, #136	@ 0x88
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f009 fb85 	bl	800b6ac <memset>
  if(huart->Instance==USART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a46      	ldr	r2, [pc, #280]	@ (80020c0 <HAL_UART_MspInit+0x144>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d143      	bne.n	8002034 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 fb59 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc4:	f7ff fc48 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fcc:	4a3d      	ldr	r2, [pc, #244]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe0:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	4a37      	ldr	r2, [pc, #220]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fec:	4b35      	ldr	r3, [pc, #212]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ff8:	23c0      	movs	r3, #192	@ 0xc0
 8001ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002010:	2307      	movs	r3, #7
 8002012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800201a:	4619      	mov	r1, r3
 800201c:	482a      	ldr	r0, [pc, #168]	@ (80020c8 <HAL_UART_MspInit+0x14c>)
 800201e:	f001 f957 	bl	80032d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2025      	movs	r0, #37	@ 0x25
 8002028:	f000 ff9c 	bl	8002f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800202c:	2025      	movs	r0, #37	@ 0x25
 800202e:	f000 ffb5 	bl	8002f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002032:	e040      	b.n	80020b6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <HAL_UART_MspInit+0x150>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d13b      	bne.n	80020b6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800203e:	2304      	movs	r3, #4
 8002040:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002042:	2300      	movs	r3, #0
 8002044:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fb10 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002056:	f7ff fbff 	bl	8001858 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002064:	6593      	str	r3, [r2, #88]	@ 0x58
 8002066:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <HAL_UART_MspInit+0x148>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800208a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800208e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a4:	2307      	movs	r3, #7
 80020a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020aa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <HAL_UART_MspInit+0x154>)
 80020b2:	f001 f90d 	bl	80032d0 <HAL_GPIO_Init>
}
 80020b6:	bf00      	nop
 80020b8:	37b8      	adds	r7, #184	@ 0xb8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	40004800 	.word	0x40004800
 80020d0:	48000c00 	.word	0x48000c00

080020d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0ac      	sub	sp, #176	@ 0xb0
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2288      	movs	r2, #136	@ 0x88
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f009 fad9 	bl	800b6ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002102:	d17c      	bne.n	80021fe <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002108:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800210a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800210e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800211a:	2318      	movs	r3, #24
 800211c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800211e:	2307      	movs	r3, #7
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002122:	2302      	movs	r3, #2
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002126:	2302      	movs	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800212a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fa9b 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002140:	f7ff fb8a 	bl	8001858 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002150:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800215c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800217a:	f001 f8a9 	bl	80032d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800217e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002198:	230a      	movs	r3, #10
 800219a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a8:	f001 f892 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021ac:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d114      	bne.n	80021fa <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021da:	6593      	str	r3, [r2, #88]	@ 0x58
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80021e8:	f002 fb44 	bl	8004874 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <HAL_PCD_MspInit+0x134>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80021f8:	e001      	b.n	80021fe <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80021fa:	f002 fb3b 	bl	8004874 <HAL_PWREx_EnableVddUSB>
}
 80021fe:	bf00      	nop
 8002200:	37b0      	adds	r7, #176	@ 0xb0
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	@ 0x38
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_InitTick+0xe0>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	4a33      	ldr	r2, [pc, #204]	@ (80022ec <HAL_InitTick+0xe0>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6593      	str	r3, [r2, #88]	@ 0x58
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_InitTick+0xe0>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002232:	f107 0210 	add.w	r2, r7, #16
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f985 	bl	800554c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800224c:	f003 f952 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8002250:	6378      	str	r0, [r7, #52]	@ 0x34
 8002252:	e004      	b.n	800225e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002254:	f003 f94e 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8002258:	4603      	mov	r3, r0
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800225e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <HAL_InitTick+0xe4>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	3b01      	subs	r3, #1
 800226a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <HAL_InitTick+0xe8>)
 800226e:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <HAL_InitTick+0xec>)
 8002270:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_InitTick+0xe8>)
 8002274:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002278:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800227a:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <HAL_InitTick+0xe8>)
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002280:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <HAL_InitTick+0xe8>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_InitTick+0xe8>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_InitTick+0xe8>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002292:	4818      	ldr	r0, [pc, #96]	@ (80022f4 <HAL_InitTick+0xe8>)
 8002294:	f003 ff5b 	bl	800614e <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800229e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11b      	bne.n	80022de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022a6:	4813      	ldr	r0, [pc, #76]	@ (80022f4 <HAL_InitTick+0xe8>)
 80022a8:	f003 ffb2 	bl	8006210 <HAL_TIM_Base_Start_IT>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80022b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d111      	bne.n	80022de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022ba:	2036      	movs	r0, #54	@ 0x36
 80022bc:	f000 fe6e 	bl	8002f9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	d808      	bhi.n	80022d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022c6:	2200      	movs	r2, #0
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	2036      	movs	r0, #54	@ 0x36
 80022cc:	f000 fe4a 	bl	8002f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d0:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_InitTick+0xf0>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e002      	b.n	80022de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3738      	adds	r7, #56	@ 0x38
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	20000be4 	.word	0x20000be4
 80022f8:	40001000 	.word	0x40001000
 80022fc:	20000010 	.word	0x20000010

08002300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <NMI_Handler+0x4>

08002308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <HardFault_Handler+0x4>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <MemManage_Handler+0x4>

08002318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <UsageFault_Handler+0x4>

08002328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800233a:	2020      	movs	r0, #32
 800233c:	f001 fa7e 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002340:	2040      	movs	r0, #64	@ 0x40
 8002342:	f001 fa7b 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002346:	2080      	movs	r0, #128	@ 0x80
 8002348:	f001 fa78 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800234c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002350:	f001 fa74 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */

	HAL_UART_IRQHandler(&huart1);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <USART1_IRQHandler+0x10>)
 800235e:	f004 fba7 	bl	8006ab0 <HAL_UART_IRQHandler>
  
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200005d4 	.word	0x200005d4

0800236c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002370:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002374:	f001 fa62 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002378:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800237c:	f001 fa5e 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002380:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002384:	f001 fa5a 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002388:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800238c:	f001 fa56 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002390:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002394:	f001 fa52 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <TIM6_DAC_IRQHandler+0x10>)
 80023a2:	f003 ffa5 	bl	80062f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000be4 	.word	0x20000be4

080023b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_kill>:

int _kill(int pid, int sig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ca:	f009 fa17 	bl	800b7fc <__errno>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2216      	movs	r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
  return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_exit>:

void _exit (int status)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ffe7 	bl	80023c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f2:	bf00      	nop
 80023f4:	e7fd      	b.n	80023f2 <_exit+0x12>

080023f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e00a      	b.n	800241e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002408:	f7fe fe1c 	bl	8001044 <__io_getchar>
 800240c:	4601      	mov	r1, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	60ba      	str	r2, [r7, #8]
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	dbf0      	blt.n	8002408 <_read+0x12>
  }

  return len;
 8002426:	687b      	ldr	r3, [r7, #4]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e009      	b.n	8002456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fde4 	bl	8001018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbf1      	blt.n	8002442 <_write+0x12>
  }
  return len;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_close>:

int _close(int file)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002490:	605a      	str	r2, [r3, #4]
  return 0;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_isatty>:

int _isatty(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	@ (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f009 f97c 	bl	800b7fc <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	@ (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20018000 	.word	0x20018000
 8002530:	00000400 	.word	0x00000400
 8002534:	20000c30 	.word	0x20000c30
 8002538:	20003758 	.word	0x20003758

0800253c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <SystemInit+0x20>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <SystemInit+0x20>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002564:	f7ff ffea 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <LoopForever+0x6>)
  ldr r1, =_edata
 800256a:	490d      	ldr	r1, [pc, #52]	@ (80025a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <LoopForever+0xe>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002580:	4c0a      	ldr	r4, [pc, #40]	@ (80025ac <LoopForever+0x16>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f009 f93b 	bl	800b808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002592:	f7fe fd71 	bl	8001078 <main>

08002596 <LoopForever>:

LoopForever:
    b LoopForever
 8002596:	e7fe      	b.n	8002596 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002598:	20018000 	.word	0x20018000
   ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80025a4:	0800f478 	.word	0x0800f478
  ldr r2, =_sbss
 80025a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80025ac:	20003754 	.word	0x20003754

080025b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC1_2_IRQHandler>
	...

080025b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025bc:	4b27      	ldr	r3, [pc, #156]	@ (800265c <I2Cx_MspInit+0xa8>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	4a26      	ldr	r2, [pc, #152]	@ (800265c <I2Cx_MspInit+0xa8>)
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <I2Cx_MspInit+0xa8>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80025d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025da:	2312      	movs	r3, #18
 80025dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025de:	2301      	movs	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80025e6:	2304      	movs	r3, #4
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	481b      	ldr	r0, [pc, #108]	@ (8002660 <I2Cx_MspInit+0xac>)
 80025f2:	f000 fe6d 	bl	80032d0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4818      	ldr	r0, [pc, #96]	@ (8002660 <I2Cx_MspInit+0xac>)
 80025fe:	f000 fe67 	bl	80032d0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <I2Cx_MspInit+0xa8>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a15      	ldr	r2, [pc, #84]	@ (800265c <I2Cx_MspInit+0xa8>)
 8002608:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <I2Cx_MspInit+0xa8>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <I2Cx_MspInit+0xa8>)
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	4a0f      	ldr	r2, [pc, #60]	@ (800265c <I2Cx_MspInit+0xa8>)
 8002620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002624:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <I2Cx_MspInit+0xa8>)
 8002628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262a:	4a0c      	ldr	r2, [pc, #48]	@ (800265c <I2Cx_MspInit+0xa8>)
 800262c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002630:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	2021      	movs	r0, #33	@ 0x21
 8002638:	f000 fc94 	bl	8002f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800263c:	2021      	movs	r0, #33	@ 0x21
 800263e:	f000 fcad 	bl	8002f9c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	210f      	movs	r1, #15
 8002646:	2022      	movs	r0, #34	@ 0x22
 8002648:	f000 fc8c 	bl	8002f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800264c:	2022      	movs	r0, #34	@ 0x22
 800264e:	f000 fca5 	bl	8002f9c <HAL_NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	@ 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	48000400 	.word	0x48000400

08002664 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <I2Cx_Init+0x54>)
 8002670:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a11      	ldr	r2, [pc, #68]	@ (80026bc <I2Cx_Init+0x58>)
 8002676:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff89 	bl	80025b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f001 f8ed 	bl	8003882 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80026a8:	2100      	movs	r1, #0
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f001 fea4 	bl	80043f8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40005800 	.word	0x40005800
 80026bc:	00702681 	.word	0x00702681

080026c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	72fb      	strb	r3, [r7, #11]
 80026d2:	460b      	mov	r3, r1
 80026d4:	813b      	strh	r3, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	b299      	uxth	r1, r3
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4603      	mov	r3, r0
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f001 faa2 	bl	8003c40 <HAL_I2C_Mem_Read>
 80026fc:	4603      	mov	r3, r0
 80026fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002706:	7afb      	ldrb	r3, [r7, #11]
 8002708:	4619      	mov	r1, r3
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f832 	bl	8002774 <I2Cx_Error>
  }
  return status;
 8002710:	7dfb      	ldrb	r3, [r7, #23]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b08a      	sub	sp, #40	@ 0x28
 800271e:	af04      	add	r7, sp, #16
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	4608      	mov	r0, r1
 8002724:	4611      	mov	r1, r2
 8002726:	461a      	mov	r2, r3
 8002728:	4603      	mov	r3, r0
 800272a:	72fb      	strb	r3, [r7, #11]
 800272c:	460b      	mov	r3, r1
 800272e:	813b      	strh	r3, [r7, #8]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002738:	7afb      	ldrb	r3, [r7, #11]
 800273a:	b299      	uxth	r1, r3
 800273c:	88f8      	ldrh	r0, [r7, #6]
 800273e:	893a      	ldrh	r2, [r7, #8]
 8002740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	4603      	mov	r3, r0
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f001 f961 	bl	8003a18 <HAL_I2C_Mem_Write>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	4619      	mov	r1, r3
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f805 	bl	8002774 <I2Cx_Error>
  }
  return status;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f001 f919 	bl	80039b8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ff6c 	bl	8002664 <I2Cx_Init>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <SENSOR_IO_Init+0x10>)
 800279a:	f7ff ff63 	bl	8002664 <I2Cx_Init>
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000c34 	.word	0x20000c34

080027a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	460b      	mov	r3, r1
 80027b4:	71bb      	strb	r3, [r7, #6]
 80027b6:	4613      	mov	r3, r2
 80027b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	79f9      	ldrb	r1, [r7, #7]
 80027c0:	2301      	movs	r3, #1
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	1d7b      	adds	r3, r7, #5
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2301      	movs	r3, #1
 80027ca:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <SENSOR_IO_Write+0x30>)
 80027cc:	f7ff ffa5 	bl	800271a <I2Cx_WriteMultiple>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000c34 	.word	0x20000c34

080027dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	4603      	mov	r3, r0
 80027e4:	460a      	mov	r2, r1
 80027e6:	71fb      	strb	r3, [r7, #7]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027f0:	79bb      	ldrb	r3, [r7, #6]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	79f9      	ldrb	r1, [r7, #7]
 80027f6:	2301      	movs	r3, #1
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	f107 030f 	add.w	r3, r7, #15
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	4804      	ldr	r0, [pc, #16]	@ (8002814 <SENSOR_IO_Read+0x38>)
 8002804:	f7ff ff5c 	bl	80026c0 <I2Cx_ReadMultiple>

  return read_value;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000c34 	.word	0x20000c34

08002818 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af02      	add	r7, sp, #8
 800281e:	603a      	str	r2, [r7, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	460b      	mov	r3, r1
 8002828:	71bb      	strb	r3, [r7, #6]
 800282a:	4613      	mov	r3, r2
 800282c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	b29a      	uxth	r2, r3
 8002832:	79f9      	ldrb	r1, [r7, #7]
 8002834:	88bb      	ldrh	r3, [r7, #4]
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2301      	movs	r3, #1
 800283e:	4804      	ldr	r0, [pc, #16]	@ (8002850 <SENSOR_IO_ReadMultiple+0x38>)
 8002840:	f7ff ff3e 	bl	80026c0 <I2Cx_ReadMultiple>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000c34 	.word	0x20000c34

08002854 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <BSP_HSENSOR_Init+0x38>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	20be      	movs	r0, #190	@ 0xbe
 8002860:	4798      	blx	r3
 8002862:	4603      	mov	r3, r0
 8002864:	2bbc      	cmp	r3, #188	@ 0xbc
 8002866:	d002      	beq.n	800286e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	e009      	b.n	8002882 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <BSP_HSENSOR_Init+0x3c>)
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <BSP_HSENSOR_Init+0x38>)
 8002872:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <BSP_HSENSOR_Init+0x3c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	20be      	movs	r0, #190	@ 0xbe
 800287c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002882:	687b      	ldr	r3, [r7, #4]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000004 	.word	0x20000004
 8002890:	20000c88 	.word	0x20000c88

08002894 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2120      	movs	r1, #32
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff99 	bl	80027dc <SENSOR_IO_Read>
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028d4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	2120      	movs	r1, #32
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff62 	bl	80027a8 <SENSOR_IO_Write>
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80028fa:	f7ff ff4b 	bl	8002794 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	210f      	movs	r1, #15
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff69 	bl	80027dc <SENSOR_IO_Read>
 800290a:	4603      	mov	r3, r0
 800290c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	f107 020c 	add.w	r2, r7, #12
 800292a:	2302      	movs	r3, #2
 800292c:	21b0      	movs	r1, #176	@ 0xb0
 800292e:	f7ff ff73 	bl	8002818 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002932:	7b3b      	ldrb	r3, [r7, #12]
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800293a:	7b7b      	ldrb	r3, [r7, #13]
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	b2d8      	uxtb	r0, r3
 8002946:	f107 020c 	add.w	r2, r7, #12
 800294a:	2302      	movs	r3, #2
 800294c:	21b6      	movs	r1, #182	@ 0xb6
 800294e:	f7ff ff63 	bl	8002818 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	b21a      	sxth	r2, r3
 8002958:	7b3b      	ldrb	r3, [r7, #12]
 800295a:	b21b      	sxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	b2d8      	uxtb	r0, r3
 8002964:	f107 020c 	add.w	r2, r7, #12
 8002968:	2302      	movs	r3, #2
 800296a:	21ba      	movs	r1, #186	@ 0xba
 800296c:	f7ff ff54 	bl	8002818 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002970:	7b7b      	ldrb	r3, [r7, #13]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b21a      	sxth	r2, r3
 8002976:	7b3b      	ldrb	r3, [r7, #12]
 8002978:	b21b      	sxth	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	b2d8      	uxtb	r0, r3
 8002982:	f107 020c 	add.w	r2, r7, #12
 8002986:	2302      	movs	r3, #2
 8002988:	21a8      	movs	r1, #168	@ 0xa8
 800298a:	f7ff ff45 	bl	8002818 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800298e:	7b7b      	ldrb	r3, [r7, #13]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	7b3b      	ldrb	r3, [r7, #12]
 8002996:	b21b      	sxth	r3, r3
 8002998:	4313      	orrs	r3, r2
 800299a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800299c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80029b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80029c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80029ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80029f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fa:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80029fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a02:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002a48 <HTS221_H_ReadHumidity+0x130>
 8002a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	dd01      	ble.n	8002a14 <HTS221_H_ReadHumidity+0xfc>
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HTS221_H_ReadHumidity+0x134>)
 8002a12:	e00a      	b.n	8002a2a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002a14:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a20:	d502      	bpl.n	8002a28 <HTS221_H_ReadHumidity+0x110>
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e000      	b.n	8002a2a <HTS221_H_ReadHumidity+0x112>
 8002a28:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002a2a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a30:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002a34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a38:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	447a0000 	.word	0x447a0000
 8002a4c:	447a0000 	.word	0x447a0000

08002a50 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2120      	movs	r1, #32
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff feba 	bl	80027dc <SENSOR_IO_Read>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	f023 0304 	bic.w	r3, r3, #4
 8002a72:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a92:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fe83 	bl	80027a8 <SENSOR_IO_Write>
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b088      	sub	sp, #32
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	f107 0208 	add.w	r2, r7, #8
 8002abc:	2302      	movs	r3, #2
 8002abe:	21b2      	movs	r1, #178	@ 0xb2
 8002ac0:	f7ff feaa 	bl	8002818 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2135      	movs	r1, #53	@ 0x35
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fe86 	bl	80027dc <SENSOR_IO_Read>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	7a3b      	ldrb	r3, [r7, #8]
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002ae8:	7ffb      	ldrb	r3, [r7, #31]
 8002aea:	019b      	lsls	r3, r3, #6
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af2:	b21a      	sxth	r2, r3
 8002af4:	7a7b      	ldrb	r3, [r7, #9]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002afc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b00:	10db      	asrs	r3, r3, #3
 8002b02:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002b04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b08:	10db      	asrs	r3, r3, #3
 8002b0a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	f107 0208 	add.w	r2, r7, #8
 8002b14:	2304      	movs	r3, #4
 8002b16:	21bc      	movs	r1, #188	@ 0xbc
 8002b18:	f7ff fe7e 	bl	8002818 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b1c:	7a7b      	ldrb	r3, [r7, #9]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	b21a      	sxth	r2, r3
 8002b22:	7a3b      	ldrb	r3, [r7, #8]
 8002b24:	b21b      	sxth	r3, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	b21a      	sxth	r2, r3
 8002b30:	7abb      	ldrb	r3, [r7, #10]
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	b2d8      	uxtb	r0, r3
 8002b3c:	f107 0208 	add.w	r2, r7, #8
 8002b40:	2302      	movs	r3, #2
 8002b42:	21aa      	movs	r1, #170	@ 0xaa
 8002b44:	f7ff fe68 	bl	8002818 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b48:	7a7b      	ldrb	r3, [r7, #9]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	b21a      	sxth	r2, r3
 8002b4e:	7a3b      	ldrb	r3, [r7, #8]
 8002b50:	b21b      	sxth	r3, r3
 8002b52:	4313      	orrs	r3, r2
 8002b54:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002b56:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b7e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	ee07 3a90 	vmov	s15, r3
}
 8002bae:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f879 	bl	8002cbc <LPS22HB_Init>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002be0:	f7ff fdd8 	bl	8002794 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	210f      	movs	r1, #15
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fdf6 	bl	80027dc <SENSOR_IO_Read>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	74fb      	strb	r3, [r7, #19]
 8002c12:	e013      	b.n	8002c3c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	3328      	adds	r3, #40	@ 0x28
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	7cfc      	ldrb	r4, [r7, #19]
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f7ff fdda 	bl	80027dc <SENSOR_IO_Read>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f104 0318 	add.w	r3, r4, #24
 8002c30:	443b      	add	r3, r7
 8002c32:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	74fb      	strb	r3, [r7, #19]
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d9e8      	bls.n	8002c14 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	74fb      	strb	r3, [r7, #19]
 8002c46:	e00f      	b.n	8002c68 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	443b      	add	r3, r7
 8002c4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c52:	461a      	mov	r2, r3
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002c62:	7cfb      	ldrb	r3, [r7, #19]
 8002c64:	3301      	adds	r3, #1
 8002c66:	74fb      	strb	r3, [r7, #19]
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d9ec      	bls.n	8002c48 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c7e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2264      	movs	r2, #100	@ 0x64
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da01      	bge.n	8002c94 <LPS22HB_P_ReadPressure+0x94>
 8002c90:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002c94:	131b      	asrs	r3, r3, #12
 8002c96:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002cb8 <LPS22HB_P_ReadPressure+0xb8>
 8002ca6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002caa:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cae:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd90      	pop	{r4, r7, pc}
 8002cb8:	42c80000 	.word	0x42c80000

08002cbc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	211a      	movs	r1, #26
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fd85 	bl	80027dc <SENSOR_IO_Read>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	211a      	movs	r1, #26
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fd5a 	bl	80027a8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fd6e 	bl	80027dc <SENSOR_IO_Read>
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002d12:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	f023 0302 	bic.w	r3, r3, #2
 8002d1a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fd3b 	bl	80027a8 <SENSOR_IO_Write>
}  
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 f902 	bl	8002f4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f7ff fa5e 	bl	800220c <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	71fb      	strb	r3, [r7, #7]
 8002d5a:	e001      	b.n	8002d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d5c:	f7fe ff78 	bl	8001c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d60:	79fb      	ldrb	r3, [r7, #7]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000014 	.word	0x20000014
 8002d90:	20000c8c 	.word	0x20000c8c

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000c8c 	.word	0x20000c8c

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffde 	bl	8002d94 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000014 	.word	0x20000014

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	@ (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	@ (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	@ 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff4c 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f76:	f7ff ff61 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002f7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f7ff ffb1 	bl	8002ee8 <NVIC_EncodePriority>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff80 	bl	8002e94 <__NVIC_SetPriority>
}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff54 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0ac      	b.n	8003124 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f8b2 	bl	8003138 <DFSDM_GetChannelFromInstance>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4a55      	ldr	r2, [pc, #340]	@ (800312c <HAL_DFSDM_ChannelInit+0x174>)
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e09f      	b.n	8003124 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe fe5b 	bl	8001ca0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002fea:	4b51      	ldr	r3, [pc, #324]	@ (8003130 <HAL_DFSDM_ChannelInit+0x178>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8003130 <HAL_DFSDM_ChannelInit+0x178>)
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8003130 <HAL_DFSDM_ChannelInit+0x178>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d125      	bne.n	8003048 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a4c      	ldr	r2, [pc, #304]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 8003002:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003006:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003008:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4948      	ldr	r1, [pc, #288]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003016:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a46      	ldr	r2, [pc, #280]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 800301c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003020:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	791b      	ldrb	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800302a:	4b42      	ldr	r3, [pc, #264]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	3b01      	subs	r3, #1
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	493f      	ldr	r1, [pc, #252]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800303c:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <HAL_DFSDM_ChannelInit+0x17c>)
 8003042:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003046:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003056:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003066:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800306c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 020f 	bic.w	r2, r2, #15
 8003084:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6819      	ldr	r1, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80030ac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f002 0207 	and.w	r2, r2, #7
 80030d8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003104:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f810 	bl	8003138 <DFSDM_GetChannelFromInstance>
 8003118:	4602      	mov	r2, r0
 800311a:	4904      	ldr	r1, [pc, #16]	@ (800312c <HAL_DFSDM_ChannelInit+0x174>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000c94 	.word	0x20000c94
 8003130:	20000c90 	.word	0x20000c90
 8003134:	40016000 	.word	0x40016000

08003138 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d102      	bne.n	800314e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e02b      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a19      	ldr	r2, [pc, #100]	@ (80031b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d102      	bne.n	800315c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e024      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <DFSDM_GetChannelFromInstance+0x84>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d102      	bne.n	800316a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003164:	2302      	movs	r3, #2
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e01d      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a14      	ldr	r2, [pc, #80]	@ (80031c0 <DFSDM_GetChannelFromInstance+0x88>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d102      	bne.n	8003178 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003172:	2304      	movs	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e016      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d102      	bne.n	8003186 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003180:	2305      	movs	r3, #5
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e00f      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0f      	ldr	r2, [pc, #60]	@ (80031c8 <DFSDM_GetChannelFromInstance+0x90>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d102      	bne.n	8003194 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800318e:	2306      	movs	r3, #6
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e008      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0d      	ldr	r2, [pc, #52]	@ (80031cc <DFSDM_GetChannelFromInstance+0x94>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d102      	bne.n	80031a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800319c:	2307      	movs	r3, #7
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	e001      	b.n	80031a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80031a2:	2303      	movs	r3, #3
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	40016000 	.word	0x40016000
 80031b8:	40016020 	.word	0x40016020
 80031bc:	40016040 	.word	0x40016040
 80031c0:	40016080 	.word	0x40016080
 80031c4:	400160a0 	.word	0x400160a0
 80031c8:	400160c0 	.word	0x400160c0
 80031cc:	400160e0 	.word	0x400160e0

080031d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d008      	beq.n	80031fa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e022      	b.n	8003240 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 020e 	bic.w	r2, r2, #14
 8003208:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f003 021c 	and.w	r2, r3, #28
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d005      	beq.n	8003270 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2204      	movs	r2, #4
 8003268:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e029      	b.n	80032c4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 020e 	bic.w	r2, r2, #14
 800327e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003294:	f003 021c 	and.w	r2, r3, #28
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
    }
  }
  return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032de:	e17f      	b.n	80035e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8171 	beq.w	80035da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d005      	beq.n	8003310 <HAL_GPIO_Init+0x40>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d130      	bne.n	8003372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003346:	2201      	movs	r2, #1
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 0201 	and.w	r2, r3, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b03      	cmp	r3, #3
 800337c:	d118      	bne.n	80033b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003384:	2201      	movs	r2, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	f003 0201 	and.w	r2, r3, #1
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d017      	beq.n	80033ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d123      	bne.n	8003440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	08da      	lsrs	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3208      	adds	r2, #8
 8003400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	6939      	ldr	r1, [r7, #16]
 800343c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0203 	and.w	r2, r3, #3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80ac 	beq.w	80035da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b5f      	ldr	r3, [pc, #380]	@ (8003600 <HAL_GPIO_Init+0x330>)
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	4a5e      	ldr	r2, [pc, #376]	@ (8003600 <HAL_GPIO_Init+0x330>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6613      	str	r3, [r2, #96]	@ 0x60
 800348e:	4b5c      	ldr	r3, [pc, #368]	@ (8003600 <HAL_GPIO_Init+0x330>)
 8003490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800349a:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_GPIO_Init+0x334>)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034c4:	d025      	beq.n	8003512 <HAL_GPIO_Init+0x242>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003608 <HAL_GPIO_Init+0x338>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <HAL_GPIO_Init+0x23e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <HAL_GPIO_Init+0x33c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x23a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003610 <HAL_GPIO_Init+0x340>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x236>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003614 <HAL_GPIO_Init+0x344>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x232>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003618 <HAL_GPIO_Init+0x348>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x22e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4a      	ldr	r2, [pc, #296]	@ (800361c <HAL_GPIO_Init+0x34c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x22a>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00c      	b.n	8003514 <HAL_GPIO_Init+0x244>
 80034fa:	2307      	movs	r3, #7
 80034fc:	e00a      	b.n	8003514 <HAL_GPIO_Init+0x244>
 80034fe:	2305      	movs	r3, #5
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x244>
 8003502:	2304      	movs	r3, #4
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x244>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x244>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x244>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x244>
 8003512:	2300      	movs	r3, #0
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003524:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_GPIO_Init+0x334>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003532:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003556:	4a32      	ldr	r2, [pc, #200]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800355c:	4b30      	ldr	r3, [pc, #192]	@ (8003620 <HAL_GPIO_Init+0x350>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003580:	4a27      	ldr	r2, [pc, #156]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_GPIO_Init+0x350>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_GPIO_Init+0x350>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d4:	4a12      	ldr	r2, [pc, #72]	@ (8003620 <HAL_GPIO_Init+0x350>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f47f ae78 	bne.w	80032e0 <HAL_GPIO_Init+0x10>
  }
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	40010000 	.word	0x40010000
 8003608:	48000400 	.word	0x48000400
 800360c:	48000800 	.word	0x48000800
 8003610:	48000c00 	.word	0x48000c00
 8003614:	48001000 	.word	0x48001000
 8003618:	48001400 	.word	0x48001400
 800361c:	48001800 	.word	0x48001800
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003632:	e0cd      	b.n	80037d0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003634:	2201      	movs	r2, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80c0 	beq.w	80037ca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800364a:	4a68      	ldr	r2, [pc, #416]	@ (80037ec <HAL_GPIO_DeInit+0x1c8>)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003672:	d025      	beq.n	80036c0 <HAL_GPIO_DeInit+0x9c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a5e      	ldr	r2, [pc, #376]	@ (80037f0 <HAL_GPIO_DeInit+0x1cc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01f      	beq.n	80036bc <HAL_GPIO_DeInit+0x98>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a5d      	ldr	r2, [pc, #372]	@ (80037f4 <HAL_GPIO_DeInit+0x1d0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d019      	beq.n	80036b8 <HAL_GPIO_DeInit+0x94>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_GPIO_DeInit+0x1d4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_GPIO_DeInit+0x90>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_GPIO_DeInit+0x1d8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00d      	beq.n	80036b0 <HAL_GPIO_DeInit+0x8c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a5a      	ldr	r2, [pc, #360]	@ (8003800 <HAL_GPIO_DeInit+0x1dc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <HAL_GPIO_DeInit+0x88>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a59      	ldr	r2, [pc, #356]	@ (8003804 <HAL_GPIO_DeInit+0x1e0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_GPIO_DeInit+0x84>
 80036a4:	2306      	movs	r3, #6
 80036a6:	e00c      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036a8:	2307      	movs	r3, #7
 80036aa:	e00a      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036ac:	2305      	movs	r3, #5
 80036ae:	e008      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036b0:	2304      	movs	r3, #4
 80036b2:	e006      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036b4:	2303      	movs	r3, #3
 80036b6:	e004      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e002      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_GPIO_DeInit+0x9e>
 80036c0:	2300      	movs	r3, #0
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	f002 0203 	and.w	r2, r2, #3
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	4093      	lsls	r3, r2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d132      	bne.n	8003738 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80036d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	494b      	ldr	r1, [pc, #300]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80036e0:	4b49      	ldr	r3, [pc, #292]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	4947      	ldr	r1, [pc, #284]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80036ee:	4b46      	ldr	r3, [pc, #280]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	4944      	ldr	r1, [pc, #272]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80036fc:	4b42      	ldr	r3, [pc, #264]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	4940      	ldr	r1, [pc, #256]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 8003706:	4013      	ands	r3, r2
 8003708:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800371a:	4a34      	ldr	r2, [pc, #208]	@ (80037ec <HAL_GPIO_DeInit+0x1c8>)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43da      	mvns	r2, r3
 800372a:	4830      	ldr	r0, [pc, #192]	@ (80037ec <HAL_GPIO_DeInit+0x1c8>)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	400a      	ands	r2, r1
 8003732:	3302      	adds	r3, #2
 8003734:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2103      	movs	r1, #3
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	08d2      	lsrs	r2, r2, #3
 800376c:	4019      	ands	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2103      	movs	r1, #3
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	2101      	movs	r1, #1
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	401a      	ands	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2103      	movs	r1, #3
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ba:	2101      	movs	r1, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f af2b 	bne.w	8003634 <HAL_GPIO_DeInit+0x10>
  }
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40010000 	.word	0x40010000
 80037f0:	48000400 	.word	0x48000400
 80037f4:	48000800 	.word	0x48000800
 80037f8:	48000c00 	.word	0x48000c00
 80037fc:	48001000 	.word	0x48001000
 8003800:	48001400 	.word	0x48001400
 8003804:	48001800 	.word	0x48001800
 8003808:	40010400 	.word	0x40010400

0800380c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
 8003818:	4613      	mov	r3, r2
 800381a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003828:	e002      	b.n	8003830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003852:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f806 	bl	800386c <HAL_GPIO_EXTI_Callback>
  }
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e08d      	b.n	80039b0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fe fa5d 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2224      	movs	r2, #36	@ 0x24
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	e006      	b.n	800390a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003908:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d108      	bne.n	8003924 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	e007      	b.n	8003934 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003932:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003946:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003956:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69d9      	ldr	r1, [r3, #28]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e021      	b.n	8003a0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2224      	movs	r2, #36	@ 0x24
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe fa1e 	bl	8001e24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	f040 80f9 	bne.w	8003c32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_I2C_Mem_Write+0x34>
 8003a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0ed      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Mem_Write+0x4e>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0e6      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a6e:	f7ff f991 	bl	8002d94 <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2319      	movs	r3, #25
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fac3 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0d1      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2221      	movs	r2, #33	@ 0x21
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab8:	88f8      	ldrh	r0, [r7, #6]
 8003aba:	893a      	ldrh	r2, [r7, #8]
 8003abc:	8979      	ldrh	r1, [r7, #10]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f9d3 	bl	8003e74 <I2C_RequestMemoryWrite>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0a9      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2bff      	cmp	r3, #255	@ 0xff
 8003ae8:	d90e      	bls.n	8003b08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	22ff      	movs	r2, #255	@ 0xff
 8003aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	8979      	ldrh	r1, [r7, #10]
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fc47 	bl	8004394 <I2C_TransferConfig>
 8003b06:	e00f      	b.n	8003b28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	8979      	ldrh	r1, [r7, #10]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fc36 	bl	8004394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fac6 	bl	80040be <I2C_WaitOnTXISFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e07b      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d034      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x1c8>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d130      	bne.n	8003be0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	2200      	movs	r2, #0
 8003b86:	2180      	movs	r1, #128	@ 0x80
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa3f 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e04d      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2bff      	cmp	r3, #255	@ 0xff
 8003ba0:	d90e      	bls.n	8003bc0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	22ff      	movs	r2, #255	@ 0xff
 8003ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fbeb 	bl	8004394 <I2C_TransferConfig>
 8003bbe:	e00f      	b.n	8003be0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	8979      	ldrh	r1, [r7, #10]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fbda 	bl	8004394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d19e      	bne.n	8003b28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 faac 	bl	800414c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e01a      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2220      	movs	r2, #32
 8003c04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_I2C_Mem_Write+0x224>)
 8003c12:	400b      	ands	r3, r1
 8003c14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	fe00e800 	.word	0xfe00e800

08003c40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	817b      	strh	r3, [r7, #10]
 8003c52:	460b      	mov	r3, r1
 8003c54:	813b      	strh	r3, [r7, #8]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	f040 80fd 	bne.w	8003e62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_I2C_Mem_Read+0x34>
 8003c6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0f1      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x4e>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0ea      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c96:	f7ff f87d 	bl	8002d94 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2319      	movs	r3, #25
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f9af 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0d5      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2222      	movs	r2, #34	@ 0x22
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	@ 0x40
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce0:	88f8      	ldrh	r0, [r7, #6]
 8003ce2:	893a      	ldrh	r2, [r7, #8]
 8003ce4:	8979      	ldrh	r1, [r7, #10]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	4603      	mov	r3, r0
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f913 	bl	8003f1c <I2C_RequestMemoryRead>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0ad      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2bff      	cmp	r3, #255	@ 0xff
 8003d10:	d90e      	bls.n	8003d30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	8979      	ldrh	r1, [r7, #10]
 8003d20:	4b52      	ldr	r3, [pc, #328]	@ (8003e6c <HAL_I2C_Mem_Read+0x22c>)
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fb33 	bl	8004394 <I2C_TransferConfig>
 8003d2e:	e00f      	b.n	8003d50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	8979      	ldrh	r1, [r7, #10]
 8003d42:	4b4a      	ldr	r3, [pc, #296]	@ (8003e6c <HAL_I2C_Mem_Read+0x22c>)
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fb22 	bl	8004394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	2200      	movs	r2, #0
 8003d58:	2104      	movs	r1, #4
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f956 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e07c      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d034      	beq.n	8003e10 <HAL_I2C_Mem_Read+0x1d0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d130      	bne.n	8003e10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	2200      	movs	r2, #0
 8003db6:	2180      	movs	r1, #128	@ 0x80
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f927 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e04d      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2bff      	cmp	r3, #255	@ 0xff
 8003dd0:	d90e      	bls.n	8003df0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	8979      	ldrh	r1, [r7, #10]
 8003de0:	2300      	movs	r3, #0
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fad3 	bl	8004394 <I2C_TransferConfig>
 8003dee:	e00f      	b.n	8003e10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	8979      	ldrh	r1, [r7, #10]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fac2 	bl	8004394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d19a      	bne.n	8003d50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f994 	bl	800414c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e01a      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2220      	movs	r2, #32
 8003e34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <HAL_I2C_Mem_Read+0x230>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	80002400 	.word	0x80002400
 8003e70:	fe00e800 	.word	0xfe00e800

08003e74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	8979      	ldrh	r1, [r7, #10]
 8003e94:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <I2C_RequestMemoryWrite+0xa4>)
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fa79 	bl	8004394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f909 	bl	80040be <I2C_WaitOnTXISFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02c      	b.n	8003f10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ec6:	e015      	b.n	8003ef4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f8ef 	bl	80040be <I2C_WaitOnTXISFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e012      	b.n	8003f10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eea:	893b      	ldrh	r3, [r7, #8]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2180      	movs	r1, #128	@ 0x80
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f884 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	80002000 	.word	0x80002000

08003f1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	8979      	ldrh	r1, [r7, #10]
 8003f3c:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <I2C_RequestMemoryRead+0xa4>)
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2300      	movs	r3, #0
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fa26 	bl	8004394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f8b6 	bl	80040be <I2C_WaitOnTXISFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e02c      	b.n	8003fb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f62:	893b      	ldrh	r3, [r7, #8]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f6c:	e015      	b.n	8003f9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f6e:	893b      	ldrh	r3, [r7, #8]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f89c 	bl	80040be <I2C_WaitOnTXISFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e012      	b.n	8003fb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f90:	893b      	ldrh	r3, [r7, #8]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2140      	movs	r1, #64	@ 0x40
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f831 	bl	800400c <I2C_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	80002000 	.word	0x80002000

08003fc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d103      	bne.n	8003fe2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d007      	beq.n	8004000 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	619a      	str	r2, [r3, #24]
  }
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800401c:	e03b      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8d6 	bl	80041d4 <I2C_IsErrorOccurred>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004038:	d02d      	beq.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe feab 	bl	8002d94 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnFlagUntilTimeout+0x44>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d122      	bne.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d113      	bne.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e00f      	b.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d0b4      	beq.n	800401e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040ca:	e033      	b.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f87f 	bl	80041d4 <I2C_IsErrorOccurred>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e031      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040e6:	d025      	beq.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e8:	f7fe fe54 	bl	8002d94 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d302      	bcc.n	80040fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11a      	bne.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d013      	beq.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e007      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d1c4      	bne.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004158:	e02f      	b.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f838 	bl	80041d4 <I2C_IsErrorOccurred>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e02d      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fe fe11 	bl	8002d94 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11a      	bne.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	d013      	beq.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d1c8      	bne.n	800415a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	@ 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d068      	beq.n	80042d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2210      	movs	r2, #16
 8004206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004208:	e049      	b.n	800429e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004210:	d045      	beq.n	800429e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe fdbf 	bl	8002d94 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_IsErrorOccurred+0x54>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d13a      	bne.n	800429e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800423a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800424a:	d121      	bne.n	8004290 <I2C_IsErrorOccurred+0xbc>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004252:	d01d      	beq.n	8004290 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b20      	cmp	r3, #32
 8004258:	d01a      	beq.n	8004290 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004268:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800426a:	f7fe fd93 	bl	8002d94 <HAL_GetTick>
 800426e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004270:	e00e      	b.n	8004290 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004272:	f7fe fd8f 	bl	8002d94 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b19      	cmp	r3, #25
 800427e:	d907      	bls.n	8004290 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800428e:	e006      	b.n	800429e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b20      	cmp	r3, #32
 800429c:	d1e9      	bne.n	8004272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d003      	beq.n	80042b4 <I2C_IsErrorOccurred+0xe0>
 80042ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0aa      	beq.n	800420a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2220      	movs	r2, #32
 80042c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01c      	beq.n	8004382 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff fe3b 	bl	8003fc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <I2C_IsErrorOccurred+0x1bc>)
 800435a:	400b      	ands	r3, r1
 800435c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004386:	4618      	mov	r0, r3
 8004388:	3728      	adds	r7, #40	@ 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	fe00e800 	.word	0xfe00e800

08004394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	460b      	mov	r3, r1
 80043a0:	817b      	strh	r3, [r7, #10]
 80043a2:	4613      	mov	r3, r2
 80043a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043ac:	7a7b      	ldrb	r3, [r7, #9]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	4313      	orrs	r3, r2
 80043be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	0d5b      	lsrs	r3, r3, #21
 80043ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043d2:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <I2C_TransferConfig+0x60>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	43db      	mvns	r3, r3
 80043d8:	ea02 0103 	and.w	r1, r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	03ff63ff 	.word	0x03ff63ff

080043f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b20      	cmp	r3, #32
 800440c:	d138      	bne.n	8004480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004418:	2302      	movs	r3, #2
 800441a:	e032      	b.n	8004482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	@ 0x24
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800444a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d139      	bne.n	8004518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e033      	b.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2224      	movs	r2, #36	@ 0x24
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af02      	add	r7, sp, #8
 800452c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e101      	b.n	800473c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fd fdc1 	bl	80020d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2203      	movs	r2, #3
 8004556:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f003 fd96 	bl	8008096 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7c1a      	ldrb	r2, [r3, #16]
 8004572:	f88d 2000 	strb.w	r2, [sp]
 8004576:	3304      	adds	r3, #4
 8004578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800457a:	f003 fd5f 	bl	800803c <USB_CoreInit>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0d5      	b.n	800473c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f003 fd8e 	bl	80080b8 <USB_SetCurrentMode>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0c6      	b.n	800473c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
 80045b2:	e04a      	b.n	800464a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3315      	adds	r3, #21
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3314      	adds	r3, #20
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	b298      	uxth	r0, r3
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	332e      	adds	r3, #46	@ 0x2e
 80045f0:	4602      	mov	r2, r0
 80045f2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045f4:	7bfa      	ldrb	r2, [r7, #15]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3318      	adds	r3, #24
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	331c      	adds	r3, #28
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3320      	adds	r3, #32
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3324      	adds	r3, #36	@ 0x24
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3301      	adds	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	791b      	ldrb	r3, [r3, #4]
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	429a      	cmp	r2, r3
 8004652:	d3af      	bcc.n	80045b4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	e044      	b.n	80046e4 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004686:	7bfa      	ldrb	r2, [r7, #15]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	3301      	adds	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	791b      	ldrb	r3, [r3, #4]
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d3b5      	bcc.n	800465a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7c1a      	ldrb	r2, [r3, #16]
 80046f6:	f88d 2000 	strb.w	r2, [sp]
 80046fa:	3304      	adds	r3, #4
 80046fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046fe:	f003 fd27 	bl	8008150 <USB_DevInit>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e013      	b.n	800473c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7b1b      	ldrb	r3, [r3, #12]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d102      	bne.n	8004730 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f80a 	bl	8004744 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f003 fecc 	bl	80084d2 <USB_DevDisconnect>

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004776:	f043 0303 	orr.w	r3, r3, #3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40007000 	.word	0x40007000

080047ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047b0:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d6:	d130      	bne.n	800483a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047d8:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e4:	d038      	beq.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e6:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047f6:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2232      	movs	r2, #50	@ 0x32
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	4a1b      	ldr	r2, [pc, #108]	@ (8004870 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0c9b      	lsrs	r3, r3, #18
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800480c:	e002      	b.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b01      	subs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004820:	d102      	bne.n	8004828 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f2      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004828:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004834:	d110      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e00f      	b.n	800485a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800483a:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004846:	d007      	beq.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004848:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004850:	4a05      	ldr	r2, [pc, #20]	@ (8004868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004856:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40007000 	.word	0x40007000
 800486c:	20000000 	.word	0x20000000
 8004870:	431bde83 	.word	0x431bde83

08004874 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a04      	ldr	r2, [pc, #16]	@ (8004890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800487e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004882:	6053      	str	r3, [r2, #4]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40007000 	.word	0x40007000

08004894 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7fe fa7a 	bl	8002d94 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e063      	b.n	8004974 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10b      	bne.n	80048d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fd fad3 	bl	8001e6c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80048c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f858 	bl	8004980 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	3b01      	subs	r3, #1
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2120      	movs	r1, #32
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f850 	bl	800499c <QSPI_WaitFlagStateUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004900:	7afb      	ldrb	r3, [r7, #11]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d131      	bne.n	800496a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004910:	f023 0310 	bic.w	r3, r3, #16
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6852      	ldr	r2, [r2, #4]
 8004918:	0611      	lsls	r1, r2, #24
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68d2      	ldr	r2, [r2, #12]
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	430b      	orrs	r3, r1
 8004926:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b13      	ldr	r3, [pc, #76]	@ (800497c <HAL_QSPI_Init+0xe8>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6912      	ldr	r2, [r2, #16]
 8004936:	0411      	lsls	r1, r2, #16
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6952      	ldr	r2, [r2, #20]
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6992      	ldr	r2, [r2, #24]
 8004942:	4311      	orrs	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004972:	7afb      	ldrb	r3, [r7, #11]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	ffe0f8fe 	.word	0xffe0f8fe

08004980 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049ac:	e01a      	b.n	80049e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b4:	d016      	beq.n	80049e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7fe f9ed 	bl	8002d94 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2204      	movs	r2, #4
 80049d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e00e      	b.n	8004a02 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1d6      	bne.n	80049ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e3ca      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1e:	4b97      	ldr	r3, [pc, #604]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a28:	4b94      	ldr	r3, [pc, #592]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80e4 	beq.w	8004c08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_RCC_OscConfig+0x4a>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	f040 808b 	bne.w	8004b64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 8087 	bne.w	8004b64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a56:	4b89      	ldr	r3, [pc, #548]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_RCC_OscConfig+0x62>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e3a2      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	4b82      	ldr	r3, [pc, #520]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d004      	beq.n	8004a88 <HAL_RCC_OscConfig+0x7c>
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a86:	e005      	b.n	8004a94 <HAL_RCC_OscConfig+0x88>
 8004a88:	4b7c      	ldr	r3, [pc, #496]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d223      	bcs.n	8004ae0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fd87 	bl	80055b0 <RCC_SetFlashLatencyFromMSIRange>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e383      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aac:	4b73      	ldr	r3, [pc, #460]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a72      	ldr	r2, [pc, #456]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ab2:	f043 0308 	orr.w	r3, r3, #8
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b70      	ldr	r3, [pc, #448]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	496d      	ldr	r1, [pc, #436]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aca:	4b6c      	ldr	r3, [pc, #432]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	4968      	ldr	r1, [pc, #416]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
 8004ade:	e025      	b.n	8004b2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae0:	4b66      	ldr	r3, [pc, #408]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a65      	ldr	r2, [pc, #404]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ae6:	f043 0308 	orr.w	r3, r3, #8
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b63      	ldr	r3, [pc, #396]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	4960      	ldr	r1, [pc, #384]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004afe:	4b5f      	ldr	r3, [pc, #380]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	495b      	ldr	r1, [pc, #364]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fd47 	bl	80055b0 <RCC_SetFlashLatencyFromMSIRange>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e343      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b2c:	f000 fc4a 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b52      	ldr	r3, [pc, #328]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	4950      	ldr	r1, [pc, #320]	@ (8004c80 <HAL_RCC_OscConfig+0x274>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	4a4e      	ldr	r2, [pc, #312]	@ (8004c84 <HAL_RCC_OscConfig+0x278>)
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004c88 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fd fb5b 	bl	800220c <HAL_InitTick>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d052      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	e327      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d032      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b6c:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a42      	ldr	r2, [pc, #264]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b78:	f7fe f90c 	bl	8002d94 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b80:	f7fe f908 	bl	8002d94 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e310      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b92:	4b3a      	ldr	r3, [pc, #232]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b9e:	4b37      	ldr	r3, [pc, #220]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a36      	ldr	r2, [pc, #216]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004ba4:	f043 0308 	orr.w	r3, r3, #8
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b34      	ldr	r3, [pc, #208]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4931      	ldr	r1, [pc, #196]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	492c      	ldr	r1, [pc, #176]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
 8004bd0:	e01a      	b.n	8004c08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bde:	f7fe f8d9 	bl	8002d94 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004be6:	f7fe f8d5 	bl	8002d94 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e2dd      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bf8:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x1da>
 8004c04:	e000      	b.n	8004c08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d074      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x21a>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	d10e      	bne.n	8004c3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d10b      	bne.n	8004c3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c26:	4b15      	ldr	r3, [pc, #84]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d064      	beq.n	8004cfc <HAL_RCC_OscConfig+0x2f0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d160      	bne.n	8004cfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e2ba      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x24a>
 8004c48:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e026      	b.n	8004ca4 <HAL_RCC_OscConfig+0x298>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c5e:	d115      	bne.n	8004c8c <HAL_RCC_OscConfig+0x280>
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a05      	ldr	r2, [pc, #20]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b03      	ldr	r3, [pc, #12]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a02      	ldr	r2, [pc, #8]	@ (8004c7c <HAL_RCC_OscConfig+0x270>)
 8004c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e014      	b.n	8004ca4 <HAL_RCC_OscConfig+0x298>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	0800eff4 	.word	0x0800eff4
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20000010 	.word	0x20000010
 8004c8c:	4ba0      	ldr	r3, [pc, #640]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a9f      	ldr	r2, [pc, #636]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b9d      	ldr	r3, [pc, #628]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a9c      	ldr	r2, [pc, #624]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fe f872 	bl	8002d94 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fe f86e 	bl	8002d94 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	@ 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e276      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cc6:	4b92      	ldr	r3, [pc, #584]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x2a8>
 8004cd2:	e014      	b.n	8004cfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe f85e 	bl	8002d94 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fe f85a 	bl	8002d94 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	@ 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e262      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cee:	4b88      	ldr	r3, [pc, #544]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x2d0>
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d060      	beq.n	8004dcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_OscConfig+0x310>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d119      	bne.n	8004d4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d116      	bne.n	8004d4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_OscConfig+0x328>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e23f      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d34:	4b76      	ldr	r3, [pc, #472]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	4973      	ldr	r1, [pc, #460]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d48:	e040      	b.n	8004dcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d52:	4b6f      	ldr	r3, [pc, #444]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6e      	ldr	r2, [pc, #440]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe f819 	bl	8002d94 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fe f815 	bl	8002d94 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e21d      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d78:	4b65      	ldr	r3, [pc, #404]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b62      	ldr	r3, [pc, #392]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	495f      	ldr	r1, [pc, #380]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
 8004d98:	e018      	b.n	8004dcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fd fff5 	bl	8002d94 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dae:	f7fd fff1 	bl	8002d94 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e1f9      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dc0:	4b53      	ldr	r3, [pc, #332]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03c      	beq.n	8004e52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de0:	4b4b      	ldr	r3, [pc, #300]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de6:	4a4a      	ldr	r2, [pc, #296]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fd ffd0 	bl	8002d94 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fd ffcc 	bl	8002d94 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1d4      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e0a:	4b41      	ldr	r3, [pc, #260]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ef      	beq.n	8004df8 <HAL_RCC_OscConfig+0x3ec>
 8004e18:	e01b      	b.n	8004e52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e20:	4a3b      	ldr	r2, [pc, #236]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fd ffb3 	bl	8002d94 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fd ffaf 	bl	8002d94 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e1b7      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e44:	4b32      	ldr	r3, [pc, #200]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ef      	bne.n	8004e32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80a6 	beq.w	8004fac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e64:	4b2a      	ldr	r3, [pc, #168]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10d      	bne.n	8004e8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	4b27      	ldr	r3, [pc, #156]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	4a26      	ldr	r2, [pc, #152]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e7c:	4b24      	ldr	r3, [pc, #144]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e8c:	4b21      	ldr	r3, [pc, #132]	@ (8004f14 <HAL_RCC_OscConfig+0x508>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d118      	bne.n	8004eca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e98:	4b1e      	ldr	r3, [pc, #120]	@ (8004f14 <HAL_RCC_OscConfig+0x508>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <HAL_RCC_OscConfig+0x508>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea4:	f7fd ff76 	bl	8002d94 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fd ff72 	bl	8002d94 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e17a      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ebe:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <HAL_RCC_OscConfig+0x508>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d108      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4d8>
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee2:	e029      	b.n	8004f38 <HAL_RCC_OscConfig+0x52c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d115      	bne.n	8004f18 <HAL_RCC_OscConfig+0x50c>
 8004eec:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	4a07      	ldr	r2, [pc, #28]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	4a03      	ldr	r2, [pc, #12]	@ (8004f10 <HAL_RCC_OscConfig+0x504>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f0c:	e014      	b.n	8004f38 <HAL_RCC_OscConfig+0x52c>
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40007000 	.word	0x40007000
 8004f18:	4b9c      	ldr	r3, [pc, #624]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	4a9b      	ldr	r2, [pc, #620]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f28:	4b98      	ldr	r3, [pc, #608]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	4a97      	ldr	r2, [pc, #604]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d016      	beq.n	8004f6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fd ff28 	bl	8002d94 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f48:	f7fd ff24 	bl	8002d94 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e12a      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ed      	beq.n	8004f48 <HAL_RCC_OscConfig+0x53c>
 8004f6c:	e015      	b.n	8004f9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6e:	f7fd ff11 	bl	8002d94 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f74:	e00a      	b.n	8004f8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f76:	f7fd ff0d 	bl	8002d94 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e113      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f8c:	4b7f      	ldr	r3, [pc, #508]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ed      	bne.n	8004f76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa4:	4a79      	ldr	r2, [pc, #484]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80fe 	beq.w	80051b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	f040 80d0 	bne.w	8005160 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fc0:	4b72      	ldr	r3, [pc, #456]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 0203 	and.w	r2, r3, #3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d130      	bne.n	8005036 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d127      	bne.n	8005036 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d11f      	bne.n	8005036 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005000:	2a07      	cmp	r2, #7
 8005002:	bf14      	ite	ne
 8005004:	2201      	movne	r2, #1
 8005006:	2200      	moveq	r2, #0
 8005008:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800500a:	4293      	cmp	r3, r2
 800500c:	d113      	bne.n	8005036 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	3b01      	subs	r3, #1
 800501c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d109      	bne.n	8005036 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	3b01      	subs	r3, #1
 8005030:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d06e      	beq.n	8005114 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b0c      	cmp	r3, #12
 800503a:	d069      	beq.n	8005110 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800503c:	4b53      	ldr	r3, [pc, #332]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005048:	4b50      	ldr	r3, [pc, #320]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0ad      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005058:	4b4c      	ldr	r3, [pc, #304]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a4b      	ldr	r2, [pc, #300]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800505e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005062:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005064:	f7fd fe96 	bl	8002d94 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506c:	f7fd fe92 	bl	8002d94 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e09a      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507e:	4b43      	ldr	r3, [pc, #268]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508a:	4b40      	ldr	r3, [pc, #256]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	4b40      	ldr	r3, [pc, #256]	@ (8005190 <HAL_RCC_OscConfig+0x784>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800509a:	3a01      	subs	r2, #1
 800509c:	0112      	lsls	r2, r2, #4
 800509e:	4311      	orrs	r1, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050a4:	0212      	lsls	r2, r2, #8
 80050a6:	4311      	orrs	r1, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050ac:	0852      	lsrs	r2, r2, #1
 80050ae:	3a01      	subs	r2, #1
 80050b0:	0552      	lsls	r2, r2, #21
 80050b2:	4311      	orrs	r1, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050b8:	0852      	lsrs	r2, r2, #1
 80050ba:	3a01      	subs	r2, #1
 80050bc:	0652      	lsls	r2, r2, #25
 80050be:	4311      	orrs	r1, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050c4:	0912      	lsrs	r2, r2, #4
 80050c6:	0452      	lsls	r2, r2, #17
 80050c8:	430a      	orrs	r2, r1
 80050ca:	4930      	ldr	r1, [pc, #192]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050d0:	4b2e      	ldr	r3, [pc, #184]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2d      	ldr	r2, [pc, #180]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 80050d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050dc:	4b2b      	ldr	r3, [pc, #172]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4a2a      	ldr	r2, [pc, #168]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 80050e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050e8:	f7fd fe54 	bl	8002d94 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fd fe50 	bl	8002d94 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e058      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005102:	4b22      	ldr	r3, [pc, #136]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800510e:	e050      	b.n	80051b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04f      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005114:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d148      	bne.n	80051b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005120:	4b1a      	ldr	r3, [pc, #104]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a19      	ldr	r2, [pc, #100]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800512a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005138:	f7fd fe2c 	bl	8002d94 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005140:	f7fd fe28 	bl	8002d94 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e030      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005152:	4b0e      	ldr	r3, [pc, #56]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x734>
 800515e:	e028      	b.n	80051b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d023      	beq.n	80051ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a08      	ldr	r2, [pc, #32]	@ (800518c <HAL_RCC_OscConfig+0x780>)
 800516c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fd fe0f 	bl	8002d94 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005178:	e00c      	b.n	8005194 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517a:	f7fd fe0b 	bl	8002d94 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d905      	bls.n	8005194 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e013      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
 800518c:	40021000 	.word	0x40021000
 8005190:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005194:	4b09      	ldr	r3, [pc, #36]	@ (80051bc <HAL_RCC_OscConfig+0x7b0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1ec      	bne.n	800517a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051a0:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <HAL_RCC_OscConfig+0x7b0>)
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	4905      	ldr	r1, [pc, #20]	@ (80051bc <HAL_RCC_OscConfig+0x7b0>)
 80051a6:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_RCC_OscConfig+0x7b4>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	60cb      	str	r3, [r1, #12]
 80051ac:	e001      	b.n	80051b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000
 80051c0:	feeefffc 	.word	0xfeeefffc

080051c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0e7      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d8:	4b75      	ldr	r3, [pc, #468]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d910      	bls.n	8005208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b72      	ldr	r3, [pc, #456]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 0207 	bic.w	r2, r3, #7
 80051ee:	4970      	ldr	r1, [pc, #448]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b6e      	ldr	r3, [pc, #440]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0cf      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	4b66      	ldr	r3, [pc, #408]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005220:	429a      	cmp	r2, r3
 8005222:	d908      	bls.n	8005236 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005224:	4b63      	ldr	r3, [pc, #396]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4960      	ldr	r1, [pc, #384]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04c      	beq.n	80052dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	4b5a      	ldr	r3, [pc, #360]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d121      	bne.n	800529a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0a6      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005262:	4b54      	ldr	r3, [pc, #336]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d115      	bne.n	800529a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e09a      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800527a:	4b4e      	ldr	r3, [pc, #312]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e08e      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528a:	4b4a      	ldr	r3, [pc, #296]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e086      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b46      	ldr	r3, [pc, #280]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4943      	ldr	r1, [pc, #268]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ac:	f7fd fd72 	bl	8002d94 <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fd fd6e 	bl	8002d94 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e06e      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b3a      	ldr	r3, [pc, #232]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d010      	beq.n	800530a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d208      	bcs.n	800530a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f8:	4b2e      	ldr	r3, [pc, #184]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	492b      	ldr	r1, [pc, #172]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800530a:	4b29      	ldr	r3, [pc, #164]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d210      	bcs.n	800533a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005318:	4b25      	ldr	r3, [pc, #148]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f023 0207 	bic.w	r2, r3, #7
 8005320:	4923      	ldr	r1, [pc, #140]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005328:	4b21      	ldr	r3, [pc, #132]	@ (80053b0 <HAL_RCC_ClockConfig+0x1ec>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d001      	beq.n	800533a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e036      	b.n	80053a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005346:	4b1b      	ldr	r3, [pc, #108]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4918      	ldr	r1, [pc, #96]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	4313      	orrs	r3, r2
 8005356:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005364:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4910      	ldr	r1, [pc, #64]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005378:	f000 f824 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	490b      	ldr	r1, [pc, #44]	@ (80053b8 <HAL_RCC_ClockConfig+0x1f4>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
 8005394:	4a09      	ldr	r2, [pc, #36]	@ (80053bc <HAL_RCC_ClockConfig+0x1f8>)
 8005396:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005398:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <HAL_RCC_ClockConfig+0x1fc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f7fc ff35 	bl	800220c <HAL_InitTick>
 80053a2:	4603      	mov	r3, r0
 80053a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80053a6:	7afb      	ldrb	r3, [r7, #11]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40022000 	.word	0x40022000
 80053b4:	40021000 	.word	0x40021000
 80053b8:	0800eff4 	.word	0x0800eff4
 80053bc:	20000000 	.word	0x20000000
 80053c0:	20000010 	.word	0x20000010

080053c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	@ 0x24
 80053c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	2300      	movs	r3, #0
 80053d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d2:	4b3e      	ldr	r3, [pc, #248]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053dc:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x34>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d121      	bne.n	8005436 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d11e      	bne.n	8005436 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053f8:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005404:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	e005      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005414:	4b2d      	ldr	r3, [pc, #180]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005420:	4a2b      	ldr	r2, [pc, #172]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005428:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005434:	e00a      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d102      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800543c:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e004      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d101      	bne.n	800544c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005448:	4b23      	ldr	r3, [pc, #140]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800544a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d134      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005452:	4b1e      	ldr	r3, [pc, #120]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d003      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0xa6>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d003      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0xac>
 8005468:	e005      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800546a:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800546c:	617b      	str	r3, [r7, #20]
      break;
 800546e:	e005      	b.n	800547c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005470:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005472:	617b      	str	r3, [r7, #20]
      break;
 8005474:	e002      	b.n	800547c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	617b      	str	r3, [r7, #20]
      break;
 800547a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800547c:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	3301      	adds	r3, #1
 8005488:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800548a:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	fb03 f202 	mul.w	r2, r3, r2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x108>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	0e5b      	lsrs	r3, r3, #25
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	3301      	adds	r3, #1
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054bc:	69bb      	ldr	r3, [r7, #24]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3724      	adds	r7, #36	@ 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	0800f00c 	.word	0x0800f00c
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	007a1200 	.word	0x007a1200

080054dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e0:	4b03      	ldr	r3, [pc, #12]	@ (80054f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000000 	.word	0x20000000

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054f8:	f7ff fff0 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4904      	ldr	r1, [pc, #16]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x28>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	0800f004 	.word	0x0800f004

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005524:	f7ff ffda 	bl	80054dc <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0adb      	lsrs	r3, r3, #11
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	0800f004 	.word	0x0800f004

0800554c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	220f      	movs	r2, #15
 800555a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800555c:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0203 	and.w	r2, r3, #3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005568:	4b0f      	ldr	r3, [pc, #60]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005574:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005580:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800558e:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <HAL_RCC_GetClockConfig+0x60>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0207 	and.w	r2, r3, #7
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40022000 	.word	0x40022000

080055b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055c8:	f7ff f8f0 	bl	80047ac <HAL_PWREx_GetVoltageRange>
 80055cc:	6178      	str	r0, [r7, #20]
 80055ce:	e014      	b.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055d0:	4b25      	ldr	r3, [pc, #148]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d4:	4a24      	ldr	r2, [pc, #144]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055da:	6593      	str	r3, [r2, #88]	@ 0x58
 80055dc:	4b22      	ldr	r3, [pc, #136]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055e8:	f7ff f8e0 	bl	80047ac <HAL_PWREx_GetVoltageRange>
 80055ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005600:	d10b      	bne.n	800561a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b80      	cmp	r3, #128	@ 0x80
 8005606:	d919      	bls.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2ba0      	cmp	r3, #160	@ 0xa0
 800560c:	d902      	bls.n	8005614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800560e:	2302      	movs	r3, #2
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e013      	b.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005614:	2301      	movs	r3, #1
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	e010      	b.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b80      	cmp	r3, #128	@ 0x80
 800561e:	d902      	bls.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005620:	2303      	movs	r3, #3
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e00a      	b.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b80      	cmp	r3, #128	@ 0x80
 800562a:	d102      	bne.n	8005632 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800562c:	2302      	movs	r3, #2
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	e004      	b.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b70      	cmp	r3, #112	@ 0x70
 8005636:	d101      	bne.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005638:	2301      	movs	r3, #1
 800563a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800563c:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f023 0207 	bic.w	r2, r3, #7
 8005644:	4909      	ldr	r1, [pc, #36]	@ (800566c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800564c:	4b07      	ldr	r3, [pc, #28]	@ (800566c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	429a      	cmp	r2, r3
 8005658:	d001      	beq.n	800565e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40021000 	.word	0x40021000
 800566c:	40022000 	.word	0x40022000

08005670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005678:	2300      	movs	r3, #0
 800567a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800567c:	2300      	movs	r3, #0
 800567e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005688:	2b00      	cmp	r3, #0
 800568a:	d041      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005690:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005694:	d02a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005696:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800569a:	d824      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800569c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056a0:	d008      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056a6:	d81e      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b0:	d010      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056b2:	e018      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056b4:	4b86      	ldr	r3, [pc, #536]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4a85      	ldr	r2, [pc, #532]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056c0:	e015      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3304      	adds	r3, #4
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 facb 	bl	8005c64 <RCCEx_PLLSAI1_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d2:	e00c      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3320      	adds	r3, #32
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fbb6 	bl	8005e4c <RCCEx_PLLSAI2_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056e4:	e003      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	74fb      	strb	r3, [r7, #19]
      break;
 80056ea:	e000      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ee:	7cfb      	ldrb	r3, [r7, #19]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056f4:	4b76      	ldr	r3, [pc, #472]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005702:	4973      	ldr	r1, [pc, #460]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800570a:	e001      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d041      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005720:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005724:	d02a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005726:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800572a:	d824      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800572c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005730:	d008      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005732:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005736:	d81e      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800573c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005740:	d010      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005742:	e018      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005744:	4b62      	ldr	r3, [pc, #392]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a61      	ldr	r2, [pc, #388]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005750:	e015      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fa83 	bl	8005c64 <RCCEx_PLLSAI1_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005762:	e00c      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3320      	adds	r3, #32
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fb6e 	bl	8005e4c <RCCEx_PLLSAI2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	74fb      	strb	r3, [r7, #19]
      break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800577c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005784:	4b52      	ldr	r3, [pc, #328]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005792:	494f      	ldr	r1, [pc, #316]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800579a:	e001      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80a0 	beq.w	80058ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057b2:	4b47      	ldr	r3, [pc, #284]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00d      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c8:	4b41      	ldr	r3, [pc, #260]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057cc:	4a40      	ldr	r2, [pc, #256]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d4:	4b3e      	ldr	r3, [pc, #248]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e0:	2301      	movs	r3, #1
 80057e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3a      	ldr	r2, [pc, #232]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057f0:	f7fd fad0 	bl	8002d94 <HAL_GetTick>
 80057f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f6:	e009      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f8:	f7fd facc 	bl	8002d94 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d902      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	74fb      	strb	r3, [r7, #19]
        break;
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800580c:	4b31      	ldr	r3, [pc, #196]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0ef      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d15c      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800581e:	4b2c      	ldr	r3, [pc, #176]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005828:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01f      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	429a      	cmp	r2, r3
 800583a:	d019      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800583c:	4b24      	ldr	r3, [pc, #144]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005846:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005848:	4b21      	ldr	r3, [pc, #132]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584e:	4a20      	ldr	r2, [pc, #128]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005858:	4b1d      	ldr	r3, [pc, #116]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	4a1c      	ldr	r2, [pc, #112]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005868:	4a19      	ldr	r2, [pc, #100]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587a:	f7fd fa8b 	bl	8002d94 <HAL_GetTick>
 800587e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005880:	e00b      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fd fa87 	bl	8002d94 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d902      	bls.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	74fb      	strb	r3, [r7, #19]
            break;
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ec      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058a8:	7cfb      	ldrb	r3, [r7, #19]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ae:	4b08      	ldr	r3, [pc, #32]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058be:	4904      	ldr	r1, [pc, #16]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058c6:	e009      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
 80058cc:	e006      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058dc:	7c7b      	ldrb	r3, [r7, #17]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e2:	4b9e      	ldr	r3, [pc, #632]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e6:	4a9d      	ldr	r2, [pc, #628]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058fa:	4b98      	ldr	r3, [pc, #608]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005900:	f023 0203 	bic.w	r2, r3, #3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	4994      	ldr	r1, [pc, #592]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800591c:	4b8f      	ldr	r3, [pc, #572]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005922:	f023 020c 	bic.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592a:	498c      	ldr	r1, [pc, #560]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800593e:	4b87      	ldr	r3, [pc, #540]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005944:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	4983      	ldr	r1, [pc, #524]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005960:	4b7e      	ldr	r3, [pc, #504]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	497b      	ldr	r1, [pc, #492]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005982:	4b76      	ldr	r3, [pc, #472]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005990:	4972      	ldr	r1, [pc, #456]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a4:	4b6d      	ldr	r3, [pc, #436]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	496a      	ldr	r1, [pc, #424]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059c6:	4b65      	ldr	r3, [pc, #404]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d4:	4961      	ldr	r1, [pc, #388]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059e8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f6:	4959      	ldr	r1, [pc, #356]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0a:	4b54      	ldr	r3, [pc, #336]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a18:	4950      	ldr	r1, [pc, #320]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	4948      	ldr	r1, [pc, #288]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a4e:	4b43      	ldr	r3, [pc, #268]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	493f      	ldr	r1, [pc, #252]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d028      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a70:	4b3a      	ldr	r3, [pc, #232]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a7e:	4937      	ldr	r1, [pc, #220]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b32      	ldr	r3, [pc, #200]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a31      	ldr	r2, [pc, #196]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e011      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	2101      	movs	r1, #1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f8d8 	bl	8005c64 <RCCEx_PLLSAI1_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ab8:	7cfb      	ldrb	r3, [r7, #19]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d028      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ace:	4b23      	ldr	r3, [pc, #140]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005adc:	491f      	ldr	r1, [pc, #124]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aec:	d106      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aee:	4b1b      	ldr	r3, [pc, #108]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af8:	60d3      	str	r3, [r2, #12]
 8005afa:	e011      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f8a9 	bl	8005c64 <RCCEx_PLLSAI1_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b16:	7cfb      	ldrb	r3, [r7, #19]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d02b      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3a:	4908      	ldr	r1, [pc, #32]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a02      	ldr	r2, [pc, #8]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b56:	60d3      	str	r3, [r2, #12]
 8005b58:	e014      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b5a:	bf00      	nop
 8005b5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f877 	bl	8005c64 <RCCEx_PLLSAI1_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b80:	7cfb      	ldrb	r3, [r7, #19]
 8005b82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02f      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b90:	4b2b      	ldr	r3, [pc, #172]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b9e:	4928      	ldr	r1, [pc, #160]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f854 	bl	8005c64 <RCCEx_PLLSAI1_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	74bb      	strb	r3, [r7, #18]
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3320      	adds	r3, #32
 8005bda:	2102      	movs	r1, #2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f935 	bl	8005e4c <RCCEx_PLLSAI2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bfc:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c0a:	490d      	ldr	r1, [pc, #52]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c1e:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c2e:	4904      	ldr	r1, [pc, #16]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c36:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40021000 	.word	0x40021000

08005c44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c48:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000

08005c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c72:	4b75      	ldr	r3, [pc, #468]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c7e:	4b72      	ldr	r3, [pc, #456]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0203 	and.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d10d      	bne.n	8005caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
       ||
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c96:	4b6c      	ldr	r3, [pc, #432]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d047      	beq.n	8005d3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
 8005cae:	e044      	b.n	8005d3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d018      	beq.n	8005cea <RCCEx_PLLSAI1_Config+0x86>
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d825      	bhi.n	8005d08 <RCCEx_PLLSAI1_Config+0xa4>
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d002      	beq.n	8005cc6 <RCCEx_PLLSAI1_Config+0x62>
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d009      	beq.n	8005cd8 <RCCEx_PLLSAI1_Config+0x74>
 8005cc4:	e020      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cc6:	4b60      	ldr	r3, [pc, #384]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11d      	bne.n	8005d0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd6:	e01a      	b.n	8005d0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d116      	bne.n	8005d12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce8:	e013      	b.n	8005d12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cea:	4b57      	ldr	r3, [pc, #348]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10f      	bne.n	8005d16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cf6:	4b54      	ldr	r3, [pc, #336]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d06:	e006      	b.n	8005d16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0c:	e004      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e002      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	430b      	orrs	r3, r1
 8005d34:	4944      	ldr	r1, [pc, #272]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d17d      	bne.n	8005e3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d40:	4b41      	ldr	r3, [pc, #260]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a40      	ldr	r2, [pc, #256]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4c:	f7fd f822 	bl	8002d94 <HAL_GetTick>
 8005d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d52:	e009      	b.n	8005d68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d54:	f7fd f81e 	bl	8002d94 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d902      	bls.n	8005d68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	73fb      	strb	r3, [r7, #15]
        break;
 8005d66:	e005      	b.n	8005d74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d68:	4b37      	ldr	r3, [pc, #220]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ef      	bne.n	8005d54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d160      	bne.n	8005e3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d111      	bne.n	8005da4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d80:	4b31      	ldr	r3, [pc, #196]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6892      	ldr	r2, [r2, #8]
 8005d90:	0211      	lsls	r1, r2, #8
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68d2      	ldr	r2, [r2, #12]
 8005d96:	0912      	lsrs	r2, r2, #4
 8005d98:	0452      	lsls	r2, r2, #17
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	492a      	ldr	r1, [pc, #168]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	610b      	str	r3, [r1, #16]
 8005da2:	e027      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d112      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005daa:	4b27      	ldr	r3, [pc, #156]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005db2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6892      	ldr	r2, [r2, #8]
 8005dba:	0211      	lsls	r1, r2, #8
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6912      	ldr	r2, [r2, #16]
 8005dc0:	0852      	lsrs	r2, r2, #1
 8005dc2:	3a01      	subs	r2, #1
 8005dc4:	0552      	lsls	r2, r2, #21
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	491f      	ldr	r1, [pc, #124]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	610b      	str	r3, [r1, #16]
 8005dce:	e011      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005dd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6892      	ldr	r2, [r2, #8]
 8005de0:	0211      	lsls	r1, r2, #8
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6952      	ldr	r2, [r2, #20]
 8005de6:	0852      	lsrs	r2, r2, #1
 8005de8:	3a01      	subs	r2, #1
 8005dea:	0652      	lsls	r2, r2, #25
 8005dec:	430a      	orrs	r2, r1
 8005dee:	4916      	ldr	r1, [pc, #88]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005df4:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a13      	ldr	r2, [pc, #76]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fc ffc8 	bl	8002d94 <HAL_GetTick>
 8005e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e06:	e009      	b.n	8005e1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e08:	f7fc ffc4 	bl	8002d94 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d902      	bls.n	8005e1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	73fb      	strb	r3, [r7, #15]
          break;
 8005e1a:	e005      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ef      	beq.n	8005e08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e2e:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	4904      	ldr	r1, [pc, #16]	@ (8005e48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000

08005e4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d018      	beq.n	8005e98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e66:	4b67      	ldr	r3, [pc, #412]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0203 	and.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d10d      	bne.n	8005e92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
       ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e7e:	4b61      	ldr	r3, [pc, #388]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d047      	beq.n	8005f22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	e044      	b.n	8005f22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d018      	beq.n	8005ed2 <RCCEx_PLLSAI2_Config+0x86>
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d825      	bhi.n	8005ef0 <RCCEx_PLLSAI2_Config+0xa4>
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d002      	beq.n	8005eae <RCCEx_PLLSAI2_Config+0x62>
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d009      	beq.n	8005ec0 <RCCEx_PLLSAI2_Config+0x74>
 8005eac:	e020      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eae:	4b55      	ldr	r3, [pc, #340]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d11d      	bne.n	8005ef6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ebe:	e01a      	b.n	8005ef6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ec0:	4b50      	ldr	r3, [pc, #320]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d116      	bne.n	8005efa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed0:	e013      	b.n	8005efa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ede:	4b49      	ldr	r3, [pc, #292]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eee:	e006      	b.n	8005efe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e004      	b.n	8005f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e002      	b.n	8005f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f06:	4b3f      	ldr	r3, [pc, #252]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	4939      	ldr	r1, [pc, #228]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d167      	bne.n	8005ff8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f28:	4b36      	ldr	r3, [pc, #216]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a35      	ldr	r2, [pc, #212]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f34:	f7fc ff2e 	bl	8002d94 <HAL_GetTick>
 8005f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f3a:	e009      	b.n	8005f50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f3c:	f7fc ff2a 	bl	8002d94 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d902      	bls.n	8005f50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f4e:	e005      	b.n	8005f5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f50:	4b2c      	ldr	r3, [pc, #176]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1ef      	bne.n	8005f3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d14a      	bne.n	8005ff8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d111      	bne.n	8005f8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f68:	4b26      	ldr	r3, [pc, #152]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6892      	ldr	r2, [r2, #8]
 8005f78:	0211      	lsls	r1, r2, #8
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68d2      	ldr	r2, [r2, #12]
 8005f7e:	0912      	lsrs	r2, r2, #4
 8005f80:	0452      	lsls	r2, r2, #17
 8005f82:	430a      	orrs	r2, r1
 8005f84:	491f      	ldr	r1, [pc, #124]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	614b      	str	r3, [r1, #20]
 8005f8a:	e011      	b.n	8005fb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005f94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6892      	ldr	r2, [r2, #8]
 8005f9c:	0211      	lsls	r1, r2, #8
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6912      	ldr	r2, [r2, #16]
 8005fa2:	0852      	lsrs	r2, r2, #1
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	0652      	lsls	r2, r2, #25
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	4916      	ldr	r1, [pc, #88]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fb0:	4b14      	ldr	r3, [pc, #80]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a13      	ldr	r2, [pc, #76]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fc feea 	bl	8002d94 <HAL_GetTick>
 8005fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fc2:	e009      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fc4:	f7fc fee6 	bl	8002d94 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d902      	bls.n	8005fd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fd6:	e005      	b.n	8005fe4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0ef      	beq.n	8005fc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fea:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	4904      	ldr	r1, [pc, #16]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40021000 	.word	0x40021000

08006008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e095      	b.n	8006146 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800602a:	d009      	beq.n	8006040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	61da      	str	r2, [r3, #28]
 8006032:	e005      	b.n	8006040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb ff4a 	bl	8001ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006076:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006080:	d902      	bls.n	8006088 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e002      	b.n	800608e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800608c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006096:	d007      	beq.n	80060a8 <HAL_SPI_Init+0xa0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060a0:	d002      	beq.n	80060a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ea:	ea42 0103 	orr.w	r1, r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	f003 0204 	and.w	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006124:	ea42 0103 	orr.w	r1, r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e049      	b.n	80061f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f841 	bl	80061fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f000 f9df 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d001      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e04f      	b.n	80062c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a23      	ldr	r2, [pc, #140]	@ (80062d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006252:	d018      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1f      	ldr	r2, [pc, #124]	@ (80062d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1e      	ldr	r2, [pc, #120]	@ (80062dc <HAL_TIM_Base_Start_IT+0xcc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1c      	ldr	r2, [pc, #112]	@ (80062e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1b      	ldr	r2, [pc, #108]	@ (80062e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a19      	ldr	r2, [pc, #100]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d115      	bne.n	80062b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <HAL_TIM_Base_Start_IT+0xdc>)
 800628e:	4013      	ands	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b06      	cmp	r3, #6
 8006296:	d015      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0xb4>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629e:	d011      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	e008      	b.n	80062c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e000      	b.n	80062c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40013400 	.word	0x40013400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	00010007 	.word	0x00010007

080062f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d020      	beq.n	8006354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01b      	beq.n	8006354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0202 	mvn.w	r2, #2
 8006324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f8e9 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8db 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f8ec 	bl	8006526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d020      	beq.n	80063a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01b      	beq.n	80063a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0204 	mvn.w	r2, #4
 8006370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8c3 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 800638c:	e005      	b.n	800639a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8b5 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f8c6 	bl	8006526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d020      	beq.n	80063ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0208 	mvn.w	r2, #8
 80063bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2204      	movs	r2, #4
 80063c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f89d 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 80063d8:	e005      	b.n	80063e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f88f 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8a0 	bl	8006526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d020      	beq.n	8006438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0210 	mvn.w	r2, #16
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2208      	movs	r2, #8
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f877 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f869 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f87a 	bl	8006526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00c      	beq.n	800645c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0201 	mvn.w	r2, #1
 8006454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fb f9ec 	bl	8001834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f913 	bl	80066b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f90b 	bl	80066c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f834 	bl	800653a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00c      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f06f 0220 	mvn.w	r2, #32
 80064ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8d3 	bl	800669c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a46      	ldr	r2, [pc, #280]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a43      	ldr	r2, [pc, #268]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a42      	ldr	r2, [pc, #264]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a41      	ldr	r2, [pc, #260]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a40      	ldr	r2, [pc, #256]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a35      	ldr	r2, [pc, #212]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01f      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b0:	d01b      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a32      	ldr	r2, [pc, #200]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d017      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a31      	ldr	r2, [pc, #196]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a30      	ldr	r2, [pc, #192]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00f      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2f      	ldr	r2, [pc, #188]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00b      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006690 <TIM_Base_SetConfig+0x140>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d007      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006694 <TIM_Base_SetConfig+0x144>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_Base_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <TIM_Base_SetConfig+0x148>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d108      	bne.n	80065fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a16      	ldr	r2, [pc, #88]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a18      	ldr	r2, [pc, #96]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a17      	ldr	r2, [pc, #92]	@ (8006690 <TIM_Base_SetConfig+0x140>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a16      	ldr	r2, [pc, #88]	@ (8006694 <TIM_Base_SetConfig+0x144>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a15      	ldr	r2, [pc, #84]	@ (8006698 <TIM_Base_SetConfig+0x148>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d103      	bne.n	8006650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b01      	cmp	r3, #1
 8006660:	d105      	bne.n	800666e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]
  }
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40013400 	.word	0x40013400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800

0800669c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e040      	b.n	800676c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb fc3e 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2224      	movs	r2, #36	@ 0x24
 8006704:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 ffa4 	bl	800766c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fce9 	bl	80070fc <UART_SetConfig>
 800672a:	4603      	mov	r3, r0
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e01b      	b.n	800676c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 f823 	bl	80077b0 <UART_CheckIdleState>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	@ 0x28
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006788:	2b20      	cmp	r3, #32
 800678a:	d177      	bne.n	800687c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_UART_Transmit+0x24>
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e070      	b.n	800687e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2221      	movs	r2, #33	@ 0x21
 80067a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067aa:	f7fc faf3 	bl	8002d94 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c8:	d108      	bne.n	80067dc <HAL_UART_Transmit+0x68>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e003      	b.n	80067e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067e4:	e02f      	b.n	8006846 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2200      	movs	r2, #0
 80067ee:	2180      	movs	r1, #128	@ 0x80
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 f885 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e03b      	b.n	800687e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	881a      	ldrh	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006818:	b292      	uxth	r2, r2
 800681a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	3302      	adds	r3, #2
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e007      	b.n	8006834 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3301      	adds	r3, #1
 8006832:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1c9      	bne.n	80067e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2200      	movs	r2, #0
 800685a:	2140      	movs	r1, #64	@ 0x40
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f001 f84f 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e005      	b.n	800687e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b08a      	sub	sp, #40	@ 0x28
 800688a:	af02      	add	r7, sp, #8
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800689c:	2b20      	cmp	r3, #32
 800689e:	f040 80b6 	bne.w	8006a0e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_UART_Receive+0x28>
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0ae      	b.n	8006a10 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2222      	movs	r2, #34	@ 0x22
 80068be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068c8:	f7fc fa64 	bl	8002d94 <HAL_GetTick>
 80068cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	88fa      	ldrh	r2, [r7, #6]
 80068d2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e6:	d10e      	bne.n	8006906 <HAL_UART_Receive+0x80>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d105      	bne.n	80068fc <HAL_UART_Receive+0x76>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80068f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80068fa:	e02d      	b.n	8006958 <HAL_UART_Receive+0xd2>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006904:	e028      	b.n	8006958 <HAL_UART_Receive+0xd2>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10d      	bne.n	800692a <HAL_UART_Receive+0xa4>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_UART_Receive+0x9a>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	22ff      	movs	r2, #255	@ 0xff
 800691a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800691e:	e01b      	b.n	8006958 <HAL_UART_Receive+0xd2>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	227f      	movs	r2, #127	@ 0x7f
 8006924:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006928:	e016      	b.n	8006958 <HAL_UART_Receive+0xd2>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006932:	d10d      	bne.n	8006950 <HAL_UART_Receive+0xca>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_UART_Receive+0xc0>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	227f      	movs	r2, #127	@ 0x7f
 8006940:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006944:	e008      	b.n	8006958 <HAL_UART_Receive+0xd2>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	223f      	movs	r2, #63	@ 0x3f
 800694a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800694e:	e003      	b.n	8006958 <HAL_UART_Receive+0xd2>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800695e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006968:	d108      	bne.n	800697c <HAL_UART_Receive+0xf6>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	e003      	b.n	8006984 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006984:	e037      	b.n	80069f6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2200      	movs	r2, #0
 800698e:	2120      	movs	r1, #32
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 ffb5 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e033      	b.n	8006a10 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	8a7b      	ldrh	r3, [r7, #18]
 80069b8:	4013      	ands	r3, r2
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	3302      	adds	r3, #2
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	e00d      	b.n	80069e4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	8a7b      	ldrh	r3, [r7, #18]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4013      	ands	r3, r2
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3301      	adds	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1c1      	bne.n	8006986 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e000      	b.n	8006a10 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
  }
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	@ 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d137      	bne.n	8006aa0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_UART_Receive_IT+0x24>
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e030      	b.n	8006aa2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	@ (8006aac <HAL_UART_Receive_IT+0x94>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d01f      	beq.n	8006a90 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	69f9      	ldr	r1, [r7, #28]
 8006a82:	6a3a      	ldr	r2, [r7, #32]
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	461a      	mov	r2, r3
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 ffa0 	bl	80079dc <UART_Start_Receive_IT>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	e000      	b.n	8006aa2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3728      	adds	r7, #40	@ 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40008000 	.word	0x40008000

08006ab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ad6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ada:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ade:	4013      	ands	r3, r2
 8006ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d115      	bne.n	8006b18 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00f      	beq.n	8006b18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 82ca 	beq.w	80070a2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
      }
      return;
 8006b16:	e2c4      	b.n	80070a2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8117 	beq.w	8006d50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b32:	4b85      	ldr	r3, [pc, #532]	@ (8006d48 <HAL_UART_IRQHandler+0x298>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 810a 	beq.w	8006d50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d011      	beq.n	8006b6c <HAL_UART_IRQHandler+0xbc>
 8006b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b62:	f043 0201 	orr.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d011      	beq.n	8006b9c <HAL_UART_IRQHandler+0xec>
 8006b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b92:	f043 0204 	orr.w	r2, r3, #4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d011      	beq.n	8006bcc <HAL_UART_IRQHandler+0x11c>
 8006ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc2:	f043 0202 	orr.w	r2, r3, #2
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bfe:	f043 0208 	orr.w	r2, r3, #8
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d012      	beq.n	8006c3a <HAL_UART_IRQHandler+0x18a>
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00c      	beq.n	8006c3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8230 	beq.w	80070a6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00d      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c82:	2b40      	cmp	r3, #64	@ 0x40
 8006c84:	d005      	beq.n	8006c92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04f      	beq.n	8006d32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 ff68 	bl	8007b68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca2:	2b40      	cmp	r3, #64	@ 0x40
 8006ca4:	d141      	bne.n	8006d2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1d9      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d013      	beq.n	8006d22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfe:	4a13      	ldr	r2, [pc, #76]	@ (8006d4c <HAL_UART_IRQHandler+0x29c>)
 8006d00:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fc faa0 	bl	800324c <HAL_DMA_Abort_IT>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d017      	beq.n	8006d42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e00f      	b.n	8006d42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9d4 	bl	80070d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d28:	e00b      	b.n	8006d42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9d0 	bl	80070d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	e007      	b.n	8006d42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9cc 	bl	80070d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006d40:	e1b1      	b.n	80070a6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d42:	bf00      	nop
    return;
 8006d44:	e1af      	b.n	80070a6 <HAL_UART_IRQHandler+0x5f6>
 8006d46:	bf00      	nop
 8006d48:	04000120 	.word	0x04000120
 8006d4c:	08007c31 	.word	0x08007c31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 816a 	bne.w	800702e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8163 	beq.w	800702e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 815c 	beq.w	800702e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b40      	cmp	r3, #64	@ 0x40
 8006d8a:	f040 80d4 	bne.w	8006f36 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80ad 	beq.w	8006efe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f080 80a5 	bcs.w	8006efe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 8086 	bne.w	8006edc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1da      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e1      	bne.n	8006e1a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e3      	bne.n	8006e56 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ec0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e4      	bne.n	8006e9c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fc f97a 	bl	80031d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8f4 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006efc:	e0d5      	b.n	80070aa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	f040 80ce 	bne.w	80070aa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	f040 80c5 	bne.w	80070aa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8d8 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
      return;
 8006f34:	e0b9      	b.n	80070aa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80ab 	beq.w	80070ae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80a6 	beq.w	80070ae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e4      	bne.n	8006f62 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e3      	bne.n	8006f98 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f023 0310 	bic.w	r3, r3, #16
 8006ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	69b9      	ldr	r1, [r7, #24]
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	617b      	str	r3, [r7, #20]
   return(result);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e4      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f85c 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800702c:	e03f      	b.n	80070ae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <HAL_UART_IRQHandler+0x5a8>
 800703a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800703e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800704e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 ffe9 	bl	8008028 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007056:	e02d      	b.n	80070b4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00e      	beq.n	8007082 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01c      	beq.n	80070b2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
    }
    return;
 8007080:	e017      	b.n	80070b2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d012      	beq.n	80070b4 <HAL_UART_IRQHandler+0x604>
 800708e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00c      	beq.n	80070b4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fdde 	bl	8007c5c <UART_EndTransmit_IT>
    return;
 80070a0:	e008      	b.n	80070b4 <HAL_UART_IRQHandler+0x604>
      return;
 80070a2:	bf00      	nop
 80070a4:	e006      	b.n	80070b4 <HAL_UART_IRQHandler+0x604>
    return;
 80070a6:	bf00      	nop
 80070a8:	e004      	b.n	80070b4 <HAL_UART_IRQHandler+0x604>
      return;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <HAL_UART_IRQHandler+0x604>
      return;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_UART_IRQHandler+0x604>
    return;
 80070b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80070b4:	37e8      	adds	r7, #232	@ 0xe8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop

080070bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007100:	b08a      	sub	sp, #40	@ 0x28
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	431a      	orrs	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	431a      	orrs	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4313      	orrs	r3, r2
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4ba4      	ldr	r3, [pc, #656]	@ (80073bc <UART_SetConfig+0x2c0>)
 800712c:	4013      	ands	r3, r2
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007134:	430b      	orrs	r3, r1
 8007136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a99      	ldr	r2, [pc, #612]	@ (80073c0 <UART_SetConfig+0x2c4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007164:	4313      	orrs	r3, r2
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007178:	430a      	orrs	r2, r1
 800717a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a90      	ldr	r2, [pc, #576]	@ (80073c4 <UART_SetConfig+0x2c8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d126      	bne.n	80071d4 <UART_SetConfig+0xd8>
 8007186:	4b90      	ldr	r3, [pc, #576]	@ (80073c8 <UART_SetConfig+0x2cc>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718c:	f003 0303 	and.w	r3, r3, #3
 8007190:	2b03      	cmp	r3, #3
 8007192:	d81b      	bhi.n	80071cc <UART_SetConfig+0xd0>
 8007194:	a201      	add	r2, pc, #4	@ (adr r2, 800719c <UART_SetConfig+0xa0>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071bd 	.word	0x080071bd
 80071a4:	080071b5 	.word	0x080071b5
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b2:	e116      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80071b4:	2302      	movs	r3, #2
 80071b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ba:	e112      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80071bc:	2304      	movs	r3, #4
 80071be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c2:	e10e      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80071c4:	2308      	movs	r3, #8
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ca:	e10a      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80071cc:	2310      	movs	r3, #16
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071d2:	e106      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a7c      	ldr	r2, [pc, #496]	@ (80073cc <UART_SetConfig+0x2d0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d138      	bne.n	8007250 <UART_SetConfig+0x154>
 80071de:	4b7a      	ldr	r3, [pc, #488]	@ (80073c8 <UART_SetConfig+0x2cc>)
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e4:	f003 030c 	and.w	r3, r3, #12
 80071e8:	2b0c      	cmp	r3, #12
 80071ea:	d82d      	bhi.n	8007248 <UART_SetConfig+0x14c>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <UART_SetConfig+0xf8>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007229 	.word	0x08007229
 80071f8:	08007249 	.word	0x08007249
 80071fc:	08007249 	.word	0x08007249
 8007200:	08007249 	.word	0x08007249
 8007204:	08007239 	.word	0x08007239
 8007208:	08007249 	.word	0x08007249
 800720c:	08007249 	.word	0x08007249
 8007210:	08007249 	.word	0x08007249
 8007214:	08007231 	.word	0x08007231
 8007218:	08007249 	.word	0x08007249
 800721c:	08007249 	.word	0x08007249
 8007220:	08007249 	.word	0x08007249
 8007224:	08007241 	.word	0x08007241
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800722e:	e0d8      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007230:	2302      	movs	r3, #2
 8007232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007236:	e0d4      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800723e:	e0d0      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007246:	e0cc      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724e:	e0c8      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5e      	ldr	r2, [pc, #376]	@ (80073d0 <UART_SetConfig+0x2d4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d125      	bne.n	80072a6 <UART_SetConfig+0x1aa>
 800725a:	4b5b      	ldr	r3, [pc, #364]	@ (80073c8 <UART_SetConfig+0x2cc>)
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007260:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007264:	2b30      	cmp	r3, #48	@ 0x30
 8007266:	d016      	beq.n	8007296 <UART_SetConfig+0x19a>
 8007268:	2b30      	cmp	r3, #48	@ 0x30
 800726a:	d818      	bhi.n	800729e <UART_SetConfig+0x1a2>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d00a      	beq.n	8007286 <UART_SetConfig+0x18a>
 8007270:	2b20      	cmp	r3, #32
 8007272:	d814      	bhi.n	800729e <UART_SetConfig+0x1a2>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <UART_SetConfig+0x182>
 8007278:	2b10      	cmp	r3, #16
 800727a:	d008      	beq.n	800728e <UART_SetConfig+0x192>
 800727c:	e00f      	b.n	800729e <UART_SetConfig+0x1a2>
 800727e:	2300      	movs	r3, #0
 8007280:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007284:	e0ad      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007286:	2302      	movs	r3, #2
 8007288:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728c:	e0a9      	b.n	80073e2 <UART_SetConfig+0x2e6>
 800728e:	2304      	movs	r3, #4
 8007290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007294:	e0a5      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007296:	2308      	movs	r3, #8
 8007298:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729c:	e0a1      	b.n	80073e2 <UART_SetConfig+0x2e6>
 800729e:	2310      	movs	r3, #16
 80072a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072a4:	e09d      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a4a      	ldr	r2, [pc, #296]	@ (80073d4 <UART_SetConfig+0x2d8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d125      	bne.n	80072fc <UART_SetConfig+0x200>
 80072b0:	4b45      	ldr	r3, [pc, #276]	@ (80073c8 <UART_SetConfig+0x2cc>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80072bc:	d016      	beq.n	80072ec <UART_SetConfig+0x1f0>
 80072be:	2bc0      	cmp	r3, #192	@ 0xc0
 80072c0:	d818      	bhi.n	80072f4 <UART_SetConfig+0x1f8>
 80072c2:	2b80      	cmp	r3, #128	@ 0x80
 80072c4:	d00a      	beq.n	80072dc <UART_SetConfig+0x1e0>
 80072c6:	2b80      	cmp	r3, #128	@ 0x80
 80072c8:	d814      	bhi.n	80072f4 <UART_SetConfig+0x1f8>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <UART_SetConfig+0x1d8>
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d008      	beq.n	80072e4 <UART_SetConfig+0x1e8>
 80072d2:	e00f      	b.n	80072f4 <UART_SetConfig+0x1f8>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072da:	e082      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e2:	e07e      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ea:	e07a      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f2:	e076      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fa:	e072      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a35      	ldr	r2, [pc, #212]	@ (80073d8 <UART_SetConfig+0x2dc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d12a      	bne.n	800735c <UART_SetConfig+0x260>
 8007306:	4b30      	ldr	r3, [pc, #192]	@ (80073c8 <UART_SetConfig+0x2cc>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007314:	d01a      	beq.n	800734c <UART_SetConfig+0x250>
 8007316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800731a:	d81b      	bhi.n	8007354 <UART_SetConfig+0x258>
 800731c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007320:	d00c      	beq.n	800733c <UART_SetConfig+0x240>
 8007322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007326:	d815      	bhi.n	8007354 <UART_SetConfig+0x258>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <UART_SetConfig+0x238>
 800732c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007330:	d008      	beq.n	8007344 <UART_SetConfig+0x248>
 8007332:	e00f      	b.n	8007354 <UART_SetConfig+0x258>
 8007334:	2300      	movs	r3, #0
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800733a:	e052      	b.n	80073e2 <UART_SetConfig+0x2e6>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007342:	e04e      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007344:	2304      	movs	r3, #4
 8007346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800734a:	e04a      	b.n	80073e2 <UART_SetConfig+0x2e6>
 800734c:	2308      	movs	r3, #8
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007352:	e046      	b.n	80073e2 <UART_SetConfig+0x2e6>
 8007354:	2310      	movs	r3, #16
 8007356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735a:	e042      	b.n	80073e2 <UART_SetConfig+0x2e6>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <UART_SetConfig+0x2c4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d13a      	bne.n	80073dc <UART_SetConfig+0x2e0>
 8007366:	4b18      	ldr	r3, [pc, #96]	@ (80073c8 <UART_SetConfig+0x2cc>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007374:	d01a      	beq.n	80073ac <UART_SetConfig+0x2b0>
 8007376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800737a:	d81b      	bhi.n	80073b4 <UART_SetConfig+0x2b8>
 800737c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007380:	d00c      	beq.n	800739c <UART_SetConfig+0x2a0>
 8007382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007386:	d815      	bhi.n	80073b4 <UART_SetConfig+0x2b8>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <UART_SetConfig+0x298>
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007390:	d008      	beq.n	80073a4 <UART_SetConfig+0x2a8>
 8007392:	e00f      	b.n	80073b4 <UART_SetConfig+0x2b8>
 8007394:	2300      	movs	r3, #0
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800739a:	e022      	b.n	80073e2 <UART_SetConfig+0x2e6>
 800739c:	2302      	movs	r3, #2
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a2:	e01e      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80073a4:	2304      	movs	r3, #4
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073aa:	e01a      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80073ac:	2308      	movs	r3, #8
 80073ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b2:	e016      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ba:	e012      	b.n	80073e2 <UART_SetConfig+0x2e6>
 80073bc:	efff69f3 	.word	0xefff69f3
 80073c0:	40008000 	.word	0x40008000
 80073c4:	40013800 	.word	0x40013800
 80073c8:	40021000 	.word	0x40021000
 80073cc:	40004400 	.word	0x40004400
 80073d0:	40004800 	.word	0x40004800
 80073d4:	40004c00 	.word	0x40004c00
 80073d8:	40005000 	.word	0x40005000
 80073dc:	2310      	movs	r3, #16
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a9f      	ldr	r2, [pc, #636]	@ (8007664 <UART_SetConfig+0x568>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d17a      	bne.n	80074e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d824      	bhi.n	800743e <UART_SetConfig+0x342>
 80073f4:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <UART_SetConfig+0x300>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	08007421 	.word	0x08007421
 8007400:	0800743f 	.word	0x0800743f
 8007404:	08007429 	.word	0x08007429
 8007408:	0800743f 	.word	0x0800743f
 800740c:	0800742f 	.word	0x0800742f
 8007410:	0800743f 	.word	0x0800743f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800743f 	.word	0x0800743f
 800741c:	08007437 	.word	0x08007437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007420:	f7fe f868 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8007424:	61f8      	str	r0, [r7, #28]
        break;
 8007426:	e010      	b.n	800744a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007428:	4b8f      	ldr	r3, [pc, #572]	@ (8007668 <UART_SetConfig+0x56c>)
 800742a:	61fb      	str	r3, [r7, #28]
        break;
 800742c:	e00d      	b.n	800744a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800742e:	f7fd ffc9 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 8007432:	61f8      	str	r0, [r7, #28]
        break;
 8007434:	e009      	b.n	800744a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800743a:	61fb      	str	r3, [r7, #28]
        break;
 800743c:	e005      	b.n	800744a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80fb 	beq.w	8007648 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4413      	add	r3, r2
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	429a      	cmp	r2, r3
 8007460:	d305      	bcc.n	800746e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	429a      	cmp	r2, r3
 800746c:	d903      	bls.n	8007476 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007474:	e0e8      	b.n	8007648 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2200      	movs	r2, #0
 800747a:	461c      	mov	r4, r3
 800747c:	4615      	mov	r5, r2
 800747e:	f04f 0200 	mov.w	r2, #0
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	022b      	lsls	r3, r5, #8
 8007488:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800748c:	0222      	lsls	r2, r4, #8
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	6849      	ldr	r1, [r1, #4]
 8007492:	0849      	lsrs	r1, r1, #1
 8007494:	2000      	movs	r0, #0
 8007496:	4688      	mov	r8, r1
 8007498:	4681      	mov	r9, r0
 800749a:	eb12 0a08 	adds.w	sl, r2, r8
 800749e:	eb43 0b09 	adc.w	fp, r3, r9
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b0:	4650      	mov	r0, sl
 80074b2:	4659      	mov	r1, fp
 80074b4:	f7f9 fbe8 	bl	8000c88 <__aeabi_uldivmod>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4613      	mov	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074c6:	d308      	bcc.n	80074da <UART_SetConfig+0x3de>
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ce:	d204      	bcs.n	80074da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	60da      	str	r2, [r3, #12]
 80074d8:	e0b6      	b.n	8007648 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074e0:	e0b2      	b.n	8007648 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074ea:	d15e      	bne.n	80075aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80074ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d828      	bhi.n	8007546 <UART_SetConfig+0x44a>
 80074f4:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <UART_SetConfig+0x400>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	08007547 	.word	0x08007547
 800750c:	08007537 	.word	0x08007537
 8007510:	08007547 	.word	0x08007547
 8007514:	08007547 	.word	0x08007547
 8007518:	08007547 	.word	0x08007547
 800751c:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007520:	f7fd ffe8 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8007524:	61f8      	str	r0, [r7, #28]
        break;
 8007526:	e014      	b.n	8007552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fd fffa 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 800752c:	61f8      	str	r0, [r7, #28]
        break;
 800752e:	e010      	b.n	8007552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b4d      	ldr	r3, [pc, #308]	@ (8007668 <UART_SetConfig+0x56c>)
 8007532:	61fb      	str	r3, [r7, #28]
        break;
 8007534:	e00d      	b.n	8007552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fd ff45 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800753a:	61f8      	str	r0, [r7, #28]
        break;
 800753c:	e009      	b.n	8007552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007542:	61fb      	str	r3, [r7, #28]
        break;
 8007544:	e005      	b.n	8007552 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d077      	beq.n	8007648 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	005a      	lsls	r2, r3, #1
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	441a      	add	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d916      	bls.n	80075a2 <UART_SetConfig+0x4a6>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800757a:	d212      	bcs.n	80075a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f023 030f 	bic.w	r3, r3, #15
 8007584:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	b29b      	uxth	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	b29a      	uxth	r2, r3
 8007592:	8afb      	ldrh	r3, [r7, #22]
 8007594:	4313      	orrs	r3, r2
 8007596:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	8afa      	ldrh	r2, [r7, #22]
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	e052      	b.n	8007648 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075a8:	e04e      	b.n	8007648 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d827      	bhi.n	8007602 <UART_SetConfig+0x506>
 80075b2:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0x4bc>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	08007603 	.word	0x08007603
 80075c8:	080075f3 	.word	0x080075f3
 80075cc:	08007603 	.word	0x08007603
 80075d0:	08007603 	.word	0x08007603
 80075d4:	08007603 	.word	0x08007603
 80075d8:	080075fb 	.word	0x080075fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075dc:	f7fd ff8a 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80075e0:	61f8      	str	r0, [r7, #28]
        break;
 80075e2:	e014      	b.n	800760e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fd ff9c 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 80075e8:	61f8      	str	r0, [r7, #28]
        break;
 80075ea:	e010      	b.n	800760e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b1e      	ldr	r3, [pc, #120]	@ (8007668 <UART_SetConfig+0x56c>)
 80075ee:	61fb      	str	r3, [r7, #28]
        break;
 80075f0:	e00d      	b.n	800760e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd fee7 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 80075f6:	61f8      	str	r0, [r7, #28]
        break;
 80075f8:	e009      	b.n	800760e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075fe:	61fb      	str	r3, [r7, #28]
        break;
 8007600:	e005      	b.n	800760e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800760c:	bf00      	nop
    }

    if (pclk != 0U)
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d019      	beq.n	8007648 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	085a      	lsrs	r2, r3, #1
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	441a      	add	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	fbb2 f3f3 	udiv	r3, r2, r3
 8007626:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b0f      	cmp	r3, #15
 800762c:	d909      	bls.n	8007642 <UART_SetConfig+0x546>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007634:	d205      	bcs.n	8007642 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
 8007640:	e002      	b.n	8007648 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007654:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007658:	4618      	mov	r0, r3
 800765a:	3728      	adds	r7, #40	@ 0x28
 800765c:	46bd      	mov	sp, r7
 800765e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007662:	bf00      	nop
 8007664:	40008000 	.word	0x40008000
 8007668:	00f42400 	.word	0x00f42400

0800766c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01a      	beq.n	8007782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800776a:	d10a      	bne.n	8007782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b098      	sub	sp, #96	@ 0x60
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077c0:	f7fb fae8 	bl	8002d94 <HAL_GetTick>
 80077c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d12e      	bne.n	8007832 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077dc:	2200      	movs	r2, #0
 80077de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f88c 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d021      	beq.n	8007832 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007802:	653b      	str	r3, [r7, #80]	@ 0x50
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800780c:	647b      	str	r3, [r7, #68]	@ 0x44
 800780e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800781a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e6      	bne.n	80077ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e062      	b.n	80078f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b04      	cmp	r3, #4
 800783e:	d149      	bne.n	80078d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007848:	2200      	movs	r2, #0
 800784a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f856 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d03c      	beq.n	80078d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	623b      	str	r3, [r7, #32]
   return(result);
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800786e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30
 800787a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800787e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e6      	bne.n	800785a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60fb      	str	r3, [r7, #12]
   return(result);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078ac:	61fa      	str	r2, [r7, #28]
 80078ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	69b9      	ldr	r1, [r7, #24]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e011      	b.n	80078f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3758      	adds	r7, #88	@ 0x58
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007910:	e04f      	b.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007918:	d04b      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791a:	f7fb fa3b 	bl	8002d94 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <UART_WaitOnFlagUntilTimeout+0x30>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e04e      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d037      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b80      	cmp	r3, #128	@ 0x80
 8007946:	d034      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d031      	beq.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b08      	cmp	r3, #8
 800795a:	d110      	bne.n	800797e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2208      	movs	r2, #8
 8007962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f8ff 	bl	8007b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2208      	movs	r2, #8
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e029      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800798c:	d111      	bne.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f8e5 	bl	8007b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e00f      	b.n	80079d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69da      	ldr	r2, [r3, #28]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4013      	ands	r3, r2
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	429a      	cmp	r2, r3
 80079c0:	bf0c      	ite	eq
 80079c2:	2301      	moveq	r3, #1
 80079c4:	2300      	movne	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d0a0      	beq.n	8007912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079dc:	b480      	push	{r7}
 80079de:	b097      	sub	sp, #92	@ 0x5c
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	88fa      	ldrh	r2, [r7, #6]
 80079fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a0e:	d10e      	bne.n	8007a2e <UART_Start_Receive_IT+0x52>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <UART_Start_Receive_IT+0x48>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a22:	e02d      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	22ff      	movs	r2, #255	@ 0xff
 8007a28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a2c:	e028      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10d      	bne.n	8007a52 <UART_Start_Receive_IT+0x76>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <UART_Start_Receive_IT+0x6c>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22ff      	movs	r2, #255	@ 0xff
 8007a42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a46:	e01b      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	227f      	movs	r2, #127	@ 0x7f
 8007a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a50:	e016      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a5a:	d10d      	bne.n	8007a78 <UART_Start_Receive_IT+0x9c>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <UART_Start_Receive_IT+0x92>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	227f      	movs	r2, #127	@ 0x7f
 8007a68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a6c:	e008      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	223f      	movs	r2, #63	@ 0x3f
 8007a72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a76:	e003      	b.n	8007a80 <UART_Start_Receive_IT+0xa4>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2222      	movs	r2, #34	@ 0x22
 8007a8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ab0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007ab2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007acc:	d107      	bne.n	8007ade <UART_Start_Receive_IT+0x102>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a21      	ldr	r2, [pc, #132]	@ (8007b60 <UART_Start_Receive_IT+0x184>)
 8007ada:	669a      	str	r2, [r3, #104]	@ 0x68
 8007adc:	e002      	b.n	8007ae4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a20      	ldr	r2, [pc, #128]	@ (8007b64 <UART_Start_Receive_IT+0x188>)
 8007ae2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e6      	bne.n	8007aec <UART_Start_Receive_IT+0x110>
 8007b1e:	e018      	b.n	8007b52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f043 0320 	orr.w	r3, r3, #32
 8007b34:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b3e:	623b      	str	r3, [r7, #32]
 8007b40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	69f9      	ldr	r1, [r7, #28]
 8007b44:	6a3a      	ldr	r2, [r7, #32]
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	375c      	adds	r7, #92	@ 0x5c
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	08007e6d 	.word	0x08007e6d
 8007b64:	08007cb1 	.word	0x08007cb1

08007b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b095      	sub	sp, #84	@ 0x54
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d118      	bne.n	8007c10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0310 	bic.w	r3, r3, #16
 8007bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c24:	bf00      	nop
 8007c26:	3754      	adds	r7, #84	@ 0x54
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fa3e 	bl	80070d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6979      	ldr	r1, [r7, #20]
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e6      	bne.n	8007c64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fa0a 	bl	80070bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ca8:	bf00      	nop
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b09c      	sub	sp, #112	@ 0x70
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc8:	2b22      	cmp	r3, #34	@ 0x22
 8007cca:	f040 80be 	bne.w	8007e4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cdc:	b2d9      	uxtb	r1, r3
 8007cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce8:	400a      	ands	r2, r1
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f040 80a3 	bne.w	8007e5e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e6      	bne.n	8007d18 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5c:	f023 0301 	bic.w	r3, r3, #1
 8007d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3308      	adds	r3, #8
 8007d68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e5      	bne.n	8007d4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a34      	ldr	r2, [pc, #208]	@ (8007e68 <UART_RxISR_8BIT+0x1b8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d01f      	beq.n	8007ddc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d018      	beq.n	8007ddc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	623b      	str	r3, [r7, #32]
   return(result);
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e6      	bne.n	8007daa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d12e      	bne.n	8007e42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0310 	bic.w	r3, r3, #16
 8007dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	69b9      	ldr	r1, [r7, #24]
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	617b      	str	r3, [r7, #20]
   return(result);
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e6      	bne.n	8007dea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d103      	bne.n	8007e32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2210      	movs	r2, #16
 8007e30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f952 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e40:	e00d      	b.n	8007e5e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7f9 fe14 	bl	8001a70 <HAL_UART_RxCpltCallback>
}
 8007e48:	e009      	b.n	8007e5e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	8b1b      	ldrh	r3, [r3, #24]
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0208 	orr.w	r2, r2, #8
 8007e5a:	b292      	uxth	r2, r2
 8007e5c:	831a      	strh	r2, [r3, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	3770      	adds	r7, #112	@ 0x70
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40008000 	.word	0x40008000

08007e6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b09c      	sub	sp, #112	@ 0x70
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e84:	2b22      	cmp	r3, #34	@ 0x22
 8007e86:	f040 80be 	bne.w	8008006 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e98:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eae:	1c9a      	adds	r2, r3, #2
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 80a3 	bne.w	800801a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ef4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ef8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e6      	bne.n	8007ed4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3308      	adds	r3, #8
 8007f24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f26:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a34      	ldr	r2, [pc, #208]	@ (8008024 <UART_RxISR_16BIT+0x1b8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d01f      	beq.n	8007f98 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d018      	beq.n	8007f98 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d12e      	bne.n	8007ffe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0310 	bic.w	r3, r3, #16
 8007fba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6979      	ldr	r1, [r7, #20]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d103      	bne.n	8007fee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2210      	movs	r2, #16
 8007fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff f874 	bl	80070e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ffc:	e00d      	b.n	800801a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7f9 fd36 	bl	8001a70 <HAL_UART_RxCpltCallback>
}
 8008004:	e009      	b.n	800801a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	8b1b      	ldrh	r3, [r3, #24]
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0208 	orr.w	r2, r2, #8
 8008016:	b292      	uxth	r2, r2
 8008018:	831a      	strh	r2, [r3, #24]
}
 800801a:	bf00      	nop
 800801c:	3770      	adds	r7, #112	@ 0x70
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40008000 	.word	0x40008000

08008028 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800803c:	b084      	sub	sp, #16
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	f107 001c 	add.w	r0, r7, #28
 800804a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa68 	bl	8008530 <USB_CoreReset>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008064:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	639a      	str	r2, [r3, #56]	@ 0x38
 8008078:	e005      	b.n	8008086 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008092:	b004      	add	sp, #16
 8008094:	4770      	bx	lr

08008096 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f023 0201 	bic.w	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d115      	bne.n	8008106 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80080e6:	200a      	movs	r0, #10
 80080e8:	f7fa fe60 	bl	8002dac <HAL_Delay>
      ms += 10U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	330a      	adds	r3, #10
 80080f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa0e 	bl	8008514 <USB_GetMode>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d01e      	beq.n	800813c <USB_SetCurrentMode+0x84>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2bc7      	cmp	r3, #199	@ 0xc7
 8008102:	d9f0      	bls.n	80080e6 <USB_SetCurrentMode+0x2e>
 8008104:	e01a      	b.n	800813c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d115      	bne.n	8008138 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008118:	200a      	movs	r0, #10
 800811a:	f7fa fe47 	bl	8002dac <HAL_Delay>
      ms += 10U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	330a      	adds	r3, #10
 8008122:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f9f5 	bl	8008514 <USB_GetMode>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <USB_SetCurrentMode+0x84>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2bc7      	cmp	r3, #199	@ 0xc7
 8008134:	d9f0      	bls.n	8008118 <USB_SetCurrentMode+0x60>
 8008136:	e001      	b.n	800813c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e005      	b.n	8008148 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008140:	d101      	bne.n	8008146 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008150:	b084      	sub	sp, #16
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800815e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	e009      	b.n	8008184 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3340      	adds	r3, #64	@ 0x40
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3301      	adds	r3, #1
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b0e      	cmp	r3, #14
 8008188:	d9f2      	bls.n	8008170 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800818a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11c      	bne.n	80081cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e005      	b.n	80081d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081de:	461a      	mov	r2, r3
 80081e0:	2300      	movs	r3, #0
 80081e2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80081e4:	2103      	movs	r1, #3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f95a 	bl	80084a0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081ec:	2110      	movs	r1, #16
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8f6 	bl	80083e0 <USB_FlushTxFifo>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f920 	bl	8008444 <USB_FlushRxFifo>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008214:	461a      	mov	r2, r3
 8008216:	2300      	movs	r3, #0
 8008218:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008220:	461a      	mov	r2, r3
 8008222:	2300      	movs	r3, #0
 8008224:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822c:	461a      	mov	r2, r3
 800822e:	2300      	movs	r3, #0
 8008230:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	e043      	b.n	80082c0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800824a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800824e:	d118      	bne.n	8008282 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008262:	461a      	mov	r2, r3
 8008264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	e013      	b.n	8008294 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008278:	461a      	mov	r2, r3
 800827a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	e008      	b.n	8008294 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828e:	461a      	mov	r2, r3
 8008290:	2300      	movs	r3, #0
 8008292:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a0:	461a      	mov	r2, r3
 80082a2:	2300      	movs	r3, #0
 80082a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b2:	461a      	mov	r2, r3
 80082b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3301      	adds	r3, #1
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082c4:	461a      	mov	r2, r3
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d3b5      	bcc.n	8008238 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	e043      	b.n	800835a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082e8:	d118      	bne.n	800831c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082fc:	461a      	mov	r2, r3
 80082fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	e013      	b.n	800832e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008312:	461a      	mov	r2, r3
 8008314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	e008      	b.n	800832e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008328:	461a      	mov	r2, r3
 800832a:	2300      	movs	r3, #0
 800832c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833a:	461a      	mov	r2, r3
 800833c:	2300      	movs	r3, #0
 800833e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	461a      	mov	r2, r3
 800834e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008352:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	3301      	adds	r3, #1
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800835e:	461a      	mov	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4293      	cmp	r3, r2
 8008364:	d3b5      	bcc.n	80082d2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008378:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008386:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	f043 0210 	orr.w	r2, r3, #16
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	4b10      	ldr	r3, [pc, #64]	@ (80083dc <USB_DevInit+0x28c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	f043 0208 	orr.w	r2, r3, #8
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d107      	bne.n	80083cc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083c4:	f043 0304 	orr.w	r3, r3, #4
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083d8:	b004      	add	sp, #16
 80083da:	4770      	bx	lr
 80083dc:	803c3800 	.word	0x803c3800

080083e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3301      	adds	r3, #1
 80083f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083fa:	d901      	bls.n	8008400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e01b      	b.n	8008438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	daf2      	bge.n	80083ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	019b      	lsls	r3, r3, #6
 8008410:	f043 0220 	orr.w	r2, r3, #32
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008424:	d901      	bls.n	800842a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e006      	b.n	8008438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b20      	cmp	r3, #32
 8008434:	d0f0      	beq.n	8008418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3301      	adds	r3, #1
 8008454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800845c:	d901      	bls.n	8008462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e018      	b.n	8008494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	daf2      	bge.n	8008450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2210      	movs	r2, #16
 8008472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3301      	adds	r3, #1
 8008478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008480:	d901      	bls.n	8008486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e006      	b.n	8008494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b10      	cmp	r3, #16
 8008490:	d0f0      	beq.n	8008474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084c0:	4313      	orrs	r3, r2
 80084c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008500:	f043 0302 	orr.w	r3, r3, #2
 8008504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0301 	and.w	r3, r3, #1
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008548:	d901      	bls.n	800854e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e01b      	b.n	8008586 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	daf2      	bge.n	800853c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f043 0201 	orr.w	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008572:	d901      	bls.n	8008578 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e006      	b.n	8008586 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b01      	cmp	r3, #1
 8008582:	d0f0      	beq.n	8008566 <USB_CoreReset+0x36>

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	4603      	mov	r3, r0
 800859a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085a4:	2b84      	cmp	r3, #132	@ 0x84
 80085a6:	d005      	beq.n	80085b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	3303      	adds	r3, #3
 80085b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085c6:	f000 fe39 	bl	800923c <vTaskStartScheduler>
  
  return osOK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085d2:	b089      	sub	sp, #36	@ 0x24
 80085d4:	af04      	add	r7, sp, #16
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d020      	beq.n	8008624 <osThreadCreate+0x54>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01c      	beq.n	8008624 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685c      	ldr	r4, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691e      	ldr	r6, [r3, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ffc8 	bl	8008592 <makeFreeRtosPriority>
 8008602:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800860c:	9202      	str	r2, [sp, #8]
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	9100      	str	r1, [sp, #0]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	4632      	mov	r2, r6
 8008616:	4629      	mov	r1, r5
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fc29 	bl	8008e70 <xTaskCreateStatic>
 800861e:	4603      	mov	r3, r0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e01c      	b.n	800865e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685c      	ldr	r4, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008630:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff ffaa 	bl	8008592 <makeFreeRtosPriority>
 800863e:	4602      	mov	r2, r0
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	9200      	str	r2, [sp, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	4632      	mov	r2, r6
 800864c:	4629      	mov	r1, r5
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fc6e 	bl	8008f30 <xTaskCreate>
 8008654:	4603      	mov	r3, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	d001      	beq.n	800865e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	e000      	b.n	8008660 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008668 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <osDelay+0x16>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	e000      	b.n	8008680 <osDelay+0x18>
 800867e:	2301      	movs	r3, #1
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fda5 	bl	80091d0 <vTaskDelay>
  
  return osOK;
 8008686:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f103 0208 	add.w	r2, r3, #8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f103 0208 	add.w	r2, r3, #8
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f103 0208 	add.w	r2, r3, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	601a      	str	r2, [r3, #0]
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008748:	d103      	bne.n	8008752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e00c      	b.n	800876c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3308      	adds	r3, #8
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e002      	b.n	8008760 <vListInsert+0x2e>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	429a      	cmp	r2, r3
 800876a:	d2f6      	bcs.n	800875a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
}
 8008798:	bf00      	nop
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6892      	ldr	r2, [r2, #8]
 80087ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6852      	ldr	r2, [r2, #4]
 80087c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d103      	bne.n	80087d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	1e5a      	subs	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10b      	bne.n	8008824 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800881e:	bf00      	nop
 8008820:	bf00      	nop
 8008822:	e7fd      	b.n	8008820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008824:	f001 fb68 	bl	8009ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008830:	68f9      	ldr	r1, [r7, #12]
 8008832:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	441a      	add	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008854:	3b01      	subs	r3, #1
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800885a:	fb01 f303 	mul.w	r3, r1, r3
 800885e:	441a      	add	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	22ff      	movs	r2, #255	@ 0xff
 8008868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	22ff      	movs	r2, #255	@ 0xff
 8008870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d114      	bne.n	80088a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01a      	beq.n	80088b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3310      	adds	r3, #16
 8008886:	4618      	mov	r0, r3
 8008888:	f000 ff32 	bl	80096f0 <xTaskRemoveFromEventList>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d012      	beq.n	80088b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008892:	4b0d      	ldr	r3, [pc, #52]	@ (80088c8 <xQueueGenericReset+0xd0>)
 8008894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	e009      	b.n	80088b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3310      	adds	r3, #16
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fef1 	bl	8008690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3324      	adds	r3, #36	@ 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff feec 	bl	8008690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088b8:	f001 fb50 	bl	8009f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088bc:	2301      	movs	r3, #1
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	e000ed04 	.word	0xe000ed04

080088cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08a      	sub	sp, #40	@ 0x28
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	613b      	str	r3, [r7, #16]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	fb02 f303 	mul.w	r3, r2, r3
 8008900:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	3348      	adds	r3, #72	@ 0x48
 8008906:	4618      	mov	r0, r3
 8008908:	f001 fc18 	bl	800a13c <pvPortMalloc>
 800890c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d011      	beq.n	8008938 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	3348      	adds	r3, #72	@ 0x48
 800891c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008926:	79fa      	ldrb	r2, [r7, #7]
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 f805 	bl	8008942 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008938:	69bb      	ldr	r3, [r7, #24]
	}
 800893a:	4618      	mov	r0, r3
 800893c:	3720      	adds	r7, #32
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	e002      	b.n	8008964 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008970:	2101      	movs	r1, #1
 8008972:	69b8      	ldr	r0, [r7, #24]
 8008974:	f7ff ff40 	bl	80087f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b090      	sub	sp, #64	@ 0x40
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	e7fd      	b.n	80089ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <xQueueGenericSendFromISR+0x3e>
 80089b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <xQueueGenericSendFromISR+0x42>
 80089be:	2301      	movs	r3, #1
 80089c0:	e000      	b.n	80089c4 <xQueueGenericSendFromISR+0x44>
 80089c2:	2300      	movs	r3, #0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10b      	bne.n	80089e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d103      	bne.n	80089ee <xQueueGenericSendFromISR+0x6e>
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <xQueueGenericSendFromISR+0x72>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <xQueueGenericSendFromISR+0x74>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	623b      	str	r3, [r7, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a10:	f001 fb52 	bl	800a0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a14:	f3ef 8211 	mrs	r2, BASEPRI
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	61fa      	str	r2, [r7, #28]
 8008a2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d302      	bcc.n	8008a42 <xQueueGenericSendFromISR+0xc2>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d12f      	bne.n	8008aa2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a58:	f000 f912 	bl	8008c80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a64:	d112      	bne.n	8008a8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d016      	beq.n	8008a9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a70:	3324      	adds	r3, #36	@ 0x24
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fe3c 	bl	80096f0 <xTaskRemoveFromEventList>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e007      	b.n	8008a9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a90:	3301      	adds	r3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	b25a      	sxtb	r2, r3
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008aa0:	e001      	b.n	8008aa6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ab0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3740      	adds	r7, #64	@ 0x40
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	@ 0x30
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10b      	bne.n	8008aee <xQueueReceive+0x32>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	623b      	str	r3, [r7, #32]
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	e7fd      	b.n	8008aea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d103      	bne.n	8008afc <xQueueReceive+0x40>
 8008af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <xQueueReceive+0x44>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e000      	b.n	8008b02 <xQueueReceive+0x46>
 8008b00:	2300      	movs	r3, #0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10b      	bne.n	8008b1e <xQueueReceive+0x62>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	61fb      	str	r3, [r7, #28]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b1e:	f000 ffad 	bl	8009a7c <xTaskGetSchedulerState>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <xQueueReceive+0x72>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <xQueueReceive+0x76>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <xQueueReceive+0x78>
 8008b32:	2300      	movs	r3, #0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <xQueueReceive+0x94>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	61bb      	str	r3, [r7, #24]
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b50:	f001 f9d2 	bl	8009ef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d01f      	beq.n	8008ba0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b64:	f000 f8f6 	bl	8008d54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	1e5a      	subs	r2, r3, #1
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00f      	beq.n	8008b98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	3310      	adds	r3, #16
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fdb7 	bl	80096f0 <xTaskRemoveFromEventList>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b88:	4b3c      	ldr	r3, [pc, #240]	@ (8008c7c <xQueueReceive+0x1c0>)
 8008b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b98:	f001 f9e0 	bl	8009f5c <vPortExitCritical>
				return pdPASS;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e069      	b.n	8008c74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d103      	bne.n	8008bae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ba6:	f001 f9d9 	bl	8009f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e062      	b.n	8008c74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bb4:	f107 0310 	add.w	r3, r7, #16
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fdfd 	bl	80097b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bc2:	f001 f9cb 	bl	8009f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bc6:	f000 fba3 	bl	8009310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bca:	f001 f995 	bl	8009ef8 <vPortEnterCritical>
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bda:	d103      	bne.n	8008be4 <xQueueReceive+0x128>
 8008bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bea:	b25b      	sxtb	r3, r3
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bf0:	d103      	bne.n	8008bfa <xQueueReceive+0x13e>
 8008bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bfa:	f001 f9af 	bl	8009f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bfe:	1d3a      	adds	r2, r7, #4
 8008c00:	f107 0310 	add.w	r3, r7, #16
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fdec 	bl	80097e4 <xTaskCheckForTimeOut>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d123      	bne.n	8008c5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c14:	f000 f916 	bl	8008e44 <prvIsQueueEmpty>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d017      	beq.n	8008c4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c20:	3324      	adds	r3, #36	@ 0x24
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fd3c 	bl	80096a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c2e:	f000 f8b7 	bl	8008da0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c32:	f000 fb7b 	bl	800932c <xTaskResumeAll>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d189      	bne.n	8008b50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c7c <xQueueReceive+0x1c0>)
 8008c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	e780      	b.n	8008b50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c50:	f000 f8a6 	bl	8008da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c54:	f000 fb6a 	bl	800932c <xTaskResumeAll>
 8008c58:	e77a      	b.n	8008b50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c5c:	f000 f8a0 	bl	8008da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c60:	f000 fb64 	bl	800932c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c66:	f000 f8ed 	bl	8008e44 <prvIsQueueEmpty>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f43f af6f 	beq.w	8008b50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3730      	adds	r7, #48	@ 0x30
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	e000ed04 	.word	0xe000ed04

08008c80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10d      	bne.n	8008cba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d14d      	bne.n	8008d42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 ff04 	bl	8009ab8 <xTaskPriorityDisinherit>
 8008cb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	e043      	b.n	8008d42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d119      	bne.n	8008cf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6858      	ldr	r0, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	f002 fdc3 	bl	800b856 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd8:	441a      	add	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d32b      	bcc.n	8008d42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	605a      	str	r2, [r3, #4]
 8008cf2:	e026      	b.n	8008d42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68d8      	ldr	r0, [r3, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	f002 fda9 	bl	800b856 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	441a      	add	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d207      	bcs.n	8008d30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d28:	425b      	negs	r3, r3
 8008d2a:	441a      	add	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d105      	bne.n	8008d42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d4a:	697b      	ldr	r3, [r7, #20]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d018      	beq.n	8008d98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6e:	441a      	add	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d303      	bcc.n	8008d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68d9      	ldr	r1, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d90:	461a      	mov	r2, r3
 8008d92:	6838      	ldr	r0, [r7, #0]
 8008d94:	f002 fd5f 	bl	800b856 <memcpy>
	}
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008da8:	f001 f8a6 	bl	8009ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008db2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008db4:	e011      	b.n	8008dda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d012      	beq.n	8008de4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3324      	adds	r3, #36	@ 0x24
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fc94 	bl	80096f0 <xTaskRemoveFromEventList>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008dce:	f000 fd6d 	bl	80098ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	dce9      	bgt.n	8008db6 <prvUnlockQueue+0x16>
 8008de2:	e000      	b.n	8008de6 <prvUnlockQueue+0x46>
					break;
 8008de4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	22ff      	movs	r2, #255	@ 0xff
 8008dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008dee:	f001 f8b5 	bl	8009f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008df2:	f001 f881 	bl	8009ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dfe:	e011      	b.n	8008e24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d012      	beq.n	8008e2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3310      	adds	r3, #16
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fc6f 	bl	80096f0 <xTaskRemoveFromEventList>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e18:	f000 fd48 	bl	80098ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	dce9      	bgt.n	8008e00 <prvUnlockQueue+0x60>
 8008e2c:	e000      	b.n	8008e30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	22ff      	movs	r2, #255	@ 0xff
 8008e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e38:	f001 f890 	bl	8009f5c <vPortExitCritical>
}
 8008e3c:	bf00      	nop
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e4c:	f001 f854 	bl	8009ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d102      	bne.n	8008e5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e001      	b.n	8008e62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e62:	f001 f87b 	bl	8009f5c <vPortExitCritical>

	return xReturn;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08e      	sub	sp, #56	@ 0x38
 8008e74:	af04      	add	r7, sp, #16
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10b      	bne.n	8008e9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	623b      	str	r3, [r7, #32]
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <xTaskCreateStatic+0x4a>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	61fb      	str	r3, [r7, #28]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eba:	23a0      	movs	r3, #160	@ 0xa0
 8008ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2ba0      	cmp	r3, #160	@ 0xa0
 8008ec2:	d00b      	beq.n	8008edc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	61bb      	str	r3, [r7, #24]
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008edc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01e      	beq.n	8008f22 <xTaskCreateStatic+0xb2>
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01b      	beq.n	8008f22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ef2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008efc:	2300      	movs	r3, #0
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	9302      	str	r3, [sp, #8]
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 f851 	bl	8008fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f1c:	f000 f8ee 	bl	80090fc <prvAddNewTaskToReadyList>
 8008f20:	e001      	b.n	8008f26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f26:	697b      	ldr	r3, [r7, #20]
	}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3728      	adds	r7, #40	@ 0x28
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08c      	sub	sp, #48	@ 0x30
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f40:	88fb      	ldrh	r3, [r7, #6]
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 f8f9 	bl	800a13c <pvPortMalloc>
 8008f4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00e      	beq.n	8008f70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f52:	20a0      	movs	r0, #160	@ 0xa0
 8008f54:	f001 f8f2 	bl	800a13c <pvPortMalloc>
 8008f58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f66:	e005      	b.n	8008f74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f68:	6978      	ldr	r0, [r7, #20]
 8008f6a:	f001 f9b5 	bl	800a2d8 <vPortFree>
 8008f6e:	e001      	b.n	8008f74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d017      	beq.n	8008faa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f82:	88fa      	ldrh	r2, [r7, #6]
 8008f84:	2300      	movs	r3, #0
 8008f86:	9303      	str	r3, [sp, #12]
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	9302      	str	r3, [sp, #8]
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 f80f 	bl	8008fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f9e:	69f8      	ldr	r0, [r7, #28]
 8008fa0:	f000 f8ac 	bl	80090fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	61bb      	str	r3, [r7, #24]
 8008fa8:	e002      	b.n	8008fb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
	}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	f023 0307 	bic.w	r3, r3, #7
 8008fe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01f      	beq.n	800904c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]
 8009010:	e012      	b.n	8009038 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	4413      	add	r3, r2
 8009018:	7819      	ldrb	r1, [r3, #0]
 800901a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	3334      	adds	r3, #52	@ 0x34
 8009022:	460a      	mov	r2, r1
 8009024:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	4413      	add	r3, r2
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d006      	beq.n	8009040 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3301      	adds	r3, #1
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b0f      	cmp	r3, #15
 800903c:	d9e9      	bls.n	8009012 <prvInitialiseNewTask+0x56>
 800903e:	e000      	b.n	8009042 <prvInitialiseNewTask+0x86>
			{
				break;
 8009040:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800904a:	e003      	b.n	8009054 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	2b06      	cmp	r3, #6
 8009058:	d901      	bls.n	800905e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800905a:	2306      	movs	r3, #6
 800905c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009062:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009068:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	2200      	movs	r2, #0
 800906e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fb2b 	bl	80086d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	3318      	adds	r3, #24
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fb26 	bl	80086d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009088:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	f1c3 0207 	rsb	r2, r3, #7
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009098:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	2200      	movs	r2, #0
 800909e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ac:	334c      	adds	r3, #76	@ 0x4c
 80090ae:	224c      	movs	r2, #76	@ 0x4c
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 fafa 	bl	800b6ac <memset>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	4a0d      	ldr	r2, [pc, #52]	@ (80090f0 <prvInitialiseNewTask+0x134>)
 80090bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	4a0c      	ldr	r2, [pc, #48]	@ (80090f4 <prvInitialiseNewTask+0x138>)
 80090c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	4a0c      	ldr	r2, [pc, #48]	@ (80090f8 <prvInitialiseNewTask+0x13c>)
 80090c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	68f9      	ldr	r1, [r7, #12]
 80090ce:	69b8      	ldr	r0, [r7, #24]
 80090d0:	f000 fde0 	bl	8009c94 <pxPortInitialiseStack>
 80090d4:	4602      	mov	r2, r0
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e6:	bf00      	nop
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20003608 	.word	0x20003608
 80090f4:	20003670 	.word	0x20003670
 80090f8:	200036d8 	.word	0x200036d8

080090fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009104:	f000 fef8 	bl	8009ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009108:	4b2a      	ldr	r3, [pc, #168]	@ (80091b4 <prvAddNewTaskToReadyList+0xb8>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3301      	adds	r3, #1
 800910e:	4a29      	ldr	r2, [pc, #164]	@ (80091b4 <prvAddNewTaskToReadyList+0xb8>)
 8009110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009112:	4b29      	ldr	r3, [pc, #164]	@ (80091b8 <prvAddNewTaskToReadyList+0xbc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800911a:	4a27      	ldr	r2, [pc, #156]	@ (80091b8 <prvAddNewTaskToReadyList+0xbc>)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009120:	4b24      	ldr	r3, [pc, #144]	@ (80091b4 <prvAddNewTaskToReadyList+0xb8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d110      	bne.n	800914a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009128:	f000 fbe4 	bl	80098f4 <prvInitialiseTaskLists>
 800912c:	e00d      	b.n	800914a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800912e:	4b23      	ldr	r3, [pc, #140]	@ (80091bc <prvAddNewTaskToReadyList+0xc0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d109      	bne.n	800914a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009136:	4b20      	ldr	r3, [pc, #128]	@ (80091b8 <prvAddNewTaskToReadyList+0xbc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	429a      	cmp	r2, r3
 8009142:	d802      	bhi.n	800914a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009144:	4a1c      	ldr	r2, [pc, #112]	@ (80091b8 <prvAddNewTaskToReadyList+0xbc>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800914a:	4b1d      	ldr	r3, [pc, #116]	@ (80091c0 <prvAddNewTaskToReadyList+0xc4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3301      	adds	r3, #1
 8009150:	4a1b      	ldr	r2, [pc, #108]	@ (80091c0 <prvAddNewTaskToReadyList+0xc4>)
 8009152:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	2201      	movs	r2, #1
 800915a:	409a      	lsls	r2, r3
 800915c:	4b19      	ldr	r3, [pc, #100]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4313      	orrs	r3, r2
 8009162:	4a18      	ldr	r2, [pc, #96]	@ (80091c4 <prvAddNewTaskToReadyList+0xc8>)
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4a15      	ldr	r2, [pc, #84]	@ (80091c8 <prvAddNewTaskToReadyList+0xcc>)
 8009174:	441a      	add	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3304      	adds	r3, #4
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f7ff fab4 	bl	80086ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009182:	f000 feeb 	bl	8009f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009186:	4b0d      	ldr	r3, [pc, #52]	@ (80091bc <prvAddNewTaskToReadyList+0xc0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00e      	beq.n	80091ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800918e:	4b0a      	ldr	r3, [pc, #40]	@ (80091b8 <prvAddNewTaskToReadyList+0xbc>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009198:	429a      	cmp	r2, r3
 800919a:	d207      	bcs.n	80091ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800919c:	4b0b      	ldr	r3, [pc, #44]	@ (80091cc <prvAddNewTaskToReadyList+0xd0>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000db4 	.word	0x20000db4
 80091b8:	20000cb4 	.word	0x20000cb4
 80091bc:	20000dc0 	.word	0x20000dc0
 80091c0:	20000dd0 	.word	0x20000dd0
 80091c4:	20000dbc 	.word	0x20000dbc
 80091c8:	20000cb8 	.word	0x20000cb8
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091e2:	4b14      	ldr	r3, [pc, #80]	@ (8009234 <vTaskDelay+0x64>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <vTaskDelay+0x32>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60bb      	str	r3, [r7, #8]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009202:	f000 f885 	bl	8009310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009206:	2100      	movs	r1, #0
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fcdd 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800920e:	f000 f88d 	bl	800932c <xTaskResumeAll>
 8009212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d107      	bne.n	800922a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800921a:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <vTaskDelay+0x68>)
 800921c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000ddc 	.word	0x20000ddc
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	@ 0x28
 8009240:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800924a:	463a      	mov	r2, r7
 800924c:	1d39      	adds	r1, r7, #4
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4618      	mov	r0, r3
 8009254:	f7f7 fec6 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	9202      	str	r2, [sp, #8]
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	2300      	movs	r3, #0
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	460a      	mov	r2, r1
 800926a:	4921      	ldr	r1, [pc, #132]	@ (80092f0 <vTaskStartScheduler+0xb4>)
 800926c:	4821      	ldr	r0, [pc, #132]	@ (80092f4 <vTaskStartScheduler+0xb8>)
 800926e:	f7ff fdff 	bl	8008e70 <xTaskCreateStatic>
 8009272:	4603      	mov	r3, r0
 8009274:	4a20      	ldr	r2, [pc, #128]	@ (80092f8 <vTaskStartScheduler+0xbc>)
 8009276:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009278:	4b1f      	ldr	r3, [pc, #124]	@ (80092f8 <vTaskStartScheduler+0xbc>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009280:	2301      	movs	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	e001      	b.n	800928a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d11b      	bne.n	80092c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	613b      	str	r3, [r7, #16]
}
 80092a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092a4:	4b15      	ldr	r3, [pc, #84]	@ (80092fc <vTaskStartScheduler+0xc0>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	334c      	adds	r3, #76	@ 0x4c
 80092aa:	4a15      	ldr	r2, [pc, #84]	@ (8009300 <vTaskStartScheduler+0xc4>)
 80092ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092ae:	4b15      	ldr	r3, [pc, #84]	@ (8009304 <vTaskStartScheduler+0xc8>)
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092b6:	4b14      	ldr	r3, [pc, #80]	@ (8009308 <vTaskStartScheduler+0xcc>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092bc:	4b13      	ldr	r3, [pc, #76]	@ (800930c <vTaskStartScheduler+0xd0>)
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092c2:	f000 fd75 	bl	8009db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092c6:	e00f      	b.n	80092e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092ce:	d10b      	bne.n	80092e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <vTaskStartScheduler+0xa8>
}
 80092e8:	bf00      	nop
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	0800efec 	.word	0x0800efec
 80092f4:	080098c5 	.word	0x080098c5
 80092f8:	20000dd8 	.word	0x20000dd8
 80092fc:	20000cb4 	.word	0x20000cb4
 8009300:	20000028 	.word	0x20000028
 8009304:	20000dd4 	.word	0x20000dd4
 8009308:	20000dc0 	.word	0x20000dc0
 800930c:	20000db8 	.word	0x20000db8

08009310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009314:	4b04      	ldr	r3, [pc, #16]	@ (8009328 <vTaskSuspendAll+0x18>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	4a03      	ldr	r2, [pc, #12]	@ (8009328 <vTaskSuspendAll+0x18>)
 800931c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800931e:	bf00      	nop
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	20000ddc 	.word	0x20000ddc

0800932c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009336:	2300      	movs	r3, #0
 8009338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800933a:	4b42      	ldr	r3, [pc, #264]	@ (8009444 <xTaskResumeAll+0x118>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <xTaskResumeAll+0x2e>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	603b      	str	r3, [r7, #0]
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	e7fd      	b.n	8009356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800935a:	f000 fdcd 	bl	8009ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800935e:	4b39      	ldr	r3, [pc, #228]	@ (8009444 <xTaskResumeAll+0x118>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3b01      	subs	r3, #1
 8009364:	4a37      	ldr	r2, [pc, #220]	@ (8009444 <xTaskResumeAll+0x118>)
 8009366:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009368:	4b36      	ldr	r3, [pc, #216]	@ (8009444 <xTaskResumeAll+0x118>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d161      	bne.n	8009434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009370:	4b35      	ldr	r3, [pc, #212]	@ (8009448 <xTaskResumeAll+0x11c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d05d      	beq.n	8009434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009378:	e02e      	b.n	80093d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937a:	4b34      	ldr	r3, [pc, #208]	@ (800944c <xTaskResumeAll+0x120>)
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3318      	adds	r3, #24
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fa0c 	bl	80087a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3304      	adds	r3, #4
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fa07 	bl	80087a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939a:	2201      	movs	r2, #1
 800939c:	409a      	lsls	r2, r3
 800939e:	4b2c      	ldr	r3, [pc, #176]	@ (8009450 <xTaskResumeAll+0x124>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009450 <xTaskResumeAll+0x124>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a27      	ldr	r2, [pc, #156]	@ (8009454 <xTaskResumeAll+0x128>)
 80093b6:	441a      	add	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7ff f993 	bl	80086ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c8:	4b23      	ldr	r3, [pc, #140]	@ (8009458 <xTaskResumeAll+0x12c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d302      	bcc.n	80093d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093d2:	4b22      	ldr	r3, [pc, #136]	@ (800945c <xTaskResumeAll+0x130>)
 80093d4:	2201      	movs	r2, #1
 80093d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093d8:	4b1c      	ldr	r3, [pc, #112]	@ (800944c <xTaskResumeAll+0x120>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1cc      	bne.n	800937a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093e6:	f000 fb29 	bl	8009a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009460 <xTaskResumeAll+0x134>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d010      	beq.n	8009418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093f6:	f000 f837 	bl	8009468 <xTaskIncrementTick>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009400:	4b16      	ldr	r3, [pc, #88]	@ (800945c <xTaskResumeAll+0x130>)
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3b01      	subs	r3, #1
 800940a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1f1      	bne.n	80093f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009412:	4b13      	ldr	r3, [pc, #76]	@ (8009460 <xTaskResumeAll+0x134>)
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009418:	4b10      	ldr	r3, [pc, #64]	@ (800945c <xTaskResumeAll+0x130>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d009      	beq.n	8009434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009424:	4b0f      	ldr	r3, [pc, #60]	@ (8009464 <xTaskResumeAll+0x138>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009434:	f000 fd92 	bl	8009f5c <vPortExitCritical>

	return xAlreadyYielded;
 8009438:	68bb      	ldr	r3, [r7, #8]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000ddc 	.word	0x20000ddc
 8009448:	20000db4 	.word	0x20000db4
 800944c:	20000d74 	.word	0x20000d74
 8009450:	20000dbc 	.word	0x20000dbc
 8009454:	20000cb8 	.word	0x20000cb8
 8009458:	20000cb4 	.word	0x20000cb4
 800945c:	20000dc8 	.word	0x20000dc8
 8009460:	20000dc4 	.word	0x20000dc4
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009472:	4b4f      	ldr	r3, [pc, #316]	@ (80095b0 <xTaskIncrementTick+0x148>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	f040 808f 	bne.w	800959a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800947c:	4b4d      	ldr	r3, [pc, #308]	@ (80095b4 <xTaskIncrementTick+0x14c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3301      	adds	r3, #1
 8009482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009484:	4a4b      	ldr	r2, [pc, #300]	@ (80095b4 <xTaskIncrementTick+0x14c>)
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d121      	bne.n	80094d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009490:	4b49      	ldr	r3, [pc, #292]	@ (80095b8 <xTaskIncrementTick+0x150>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	603b      	str	r3, [r7, #0]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <xTaskIncrementTick+0x46>
 80094b2:	4b41      	ldr	r3, [pc, #260]	@ (80095b8 <xTaskIncrementTick+0x150>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	4b40      	ldr	r3, [pc, #256]	@ (80095bc <xTaskIncrementTick+0x154>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a3e      	ldr	r2, [pc, #248]	@ (80095b8 <xTaskIncrementTick+0x150>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	4a3e      	ldr	r2, [pc, #248]	@ (80095bc <xTaskIncrementTick+0x154>)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	4b3e      	ldr	r3, [pc, #248]	@ (80095c0 <xTaskIncrementTick+0x158>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a3c      	ldr	r2, [pc, #240]	@ (80095c0 <xTaskIncrementTick+0x158>)
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	f000 fab4 	bl	8009a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094d4:	4b3b      	ldr	r3, [pc, #236]	@ (80095c4 <xTaskIncrementTick+0x15c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d348      	bcc.n	8009570 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094de:	4b36      	ldr	r3, [pc, #216]	@ (80095b8 <xTaskIncrementTick+0x150>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e8:	4b36      	ldr	r3, [pc, #216]	@ (80095c4 <xTaskIncrementTick+0x15c>)
 80094ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094ee:	601a      	str	r2, [r3, #0]
					break;
 80094f0:	e03e      	b.n	8009570 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f2:	4b31      	ldr	r3, [pc, #196]	@ (80095b8 <xTaskIncrementTick+0x150>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	429a      	cmp	r2, r3
 8009508:	d203      	bcs.n	8009512 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800950a:	4a2e      	ldr	r2, [pc, #184]	@ (80095c4 <xTaskIncrementTick+0x15c>)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009510:	e02e      	b.n	8009570 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	3304      	adds	r3, #4
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff f944 	bl	80087a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	3318      	adds	r3, #24
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff f93b 	bl	80087a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	2201      	movs	r2, #1
 8009534:	409a      	lsls	r2, r3
 8009536:	4b24      	ldr	r3, [pc, #144]	@ (80095c8 <xTaskIncrementTick+0x160>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4313      	orrs	r3, r2
 800953c:	4a22      	ldr	r2, [pc, #136]	@ (80095c8 <xTaskIncrementTick+0x160>)
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4a1f      	ldr	r2, [pc, #124]	@ (80095cc <xTaskIncrementTick+0x164>)
 800954e:	441a      	add	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f7ff f8c7 	bl	80086ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009560:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <xTaskIncrementTick+0x168>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	429a      	cmp	r2, r3
 8009568:	d3b9      	bcc.n	80094de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800956a:	2301      	movs	r3, #1
 800956c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800956e:	e7b6      	b.n	80094de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009570:	4b17      	ldr	r3, [pc, #92]	@ (80095d0 <xTaskIncrementTick+0x168>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009576:	4915      	ldr	r1, [pc, #84]	@ (80095cc <xTaskIncrementTick+0x164>)
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d901      	bls.n	800958c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009588:	2301      	movs	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800958c:	4b11      	ldr	r3, [pc, #68]	@ (80095d4 <xTaskIncrementTick+0x16c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009594:	2301      	movs	r3, #1
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	e004      	b.n	80095a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800959a:	4b0f      	ldr	r3, [pc, #60]	@ (80095d8 <xTaskIncrementTick+0x170>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3301      	adds	r3, #1
 80095a0:	4a0d      	ldr	r2, [pc, #52]	@ (80095d8 <xTaskIncrementTick+0x170>)
 80095a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095a4:	697b      	ldr	r3, [r7, #20]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000ddc 	.word	0x20000ddc
 80095b4:	20000db8 	.word	0x20000db8
 80095b8:	20000d6c 	.word	0x20000d6c
 80095bc:	20000d70 	.word	0x20000d70
 80095c0:	20000dcc 	.word	0x20000dcc
 80095c4:	20000dd4 	.word	0x20000dd4
 80095c8:	20000dbc 	.word	0x20000dbc
 80095cc:	20000cb8 	.word	0x20000cb8
 80095d0:	20000cb4 	.word	0x20000cb4
 80095d4:	20000dc8 	.word	0x20000dc8
 80095d8:	20000dc4 	.word	0x20000dc4

080095dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095e2:	4b2a      	ldr	r3, [pc, #168]	@ (800968c <vTaskSwitchContext+0xb0>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095ea:	4b29      	ldr	r3, [pc, #164]	@ (8009690 <vTaskSwitchContext+0xb4>)
 80095ec:	2201      	movs	r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095f0:	e045      	b.n	800967e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80095f2:	4b27      	ldr	r3, [pc, #156]	@ (8009690 <vTaskSwitchContext+0xb4>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f8:	4b26      	ldr	r3, [pc, #152]	@ (8009694 <vTaskSwitchContext+0xb8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	fab3 f383 	clz	r3, r3
 8009604:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009606:	7afb      	ldrb	r3, [r7, #11]
 8009608:	f1c3 031f 	rsb	r3, r3, #31
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	4922      	ldr	r1, [pc, #136]	@ (8009698 <vTaskSwitchContext+0xbc>)
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10b      	bne.n	800963a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	607b      	str	r3, [r7, #4]
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop
 8009638:	e7fd      	b.n	8009636 <vTaskSwitchContext+0x5a>
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4a14      	ldr	r2, [pc, #80]	@ (8009698 <vTaskSwitchContext+0xbc>)
 8009646:	4413      	add	r3, r2
 8009648:	613b      	str	r3, [r7, #16]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	605a      	str	r2, [r3, #4]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	3308      	adds	r3, #8
 800965c:	429a      	cmp	r2, r3
 800965e:	d104      	bne.n	800966a <vTaskSwitchContext+0x8e>
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	4a0a      	ldr	r2, [pc, #40]	@ (800969c <vTaskSwitchContext+0xc0>)
 8009672:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009674:	4b09      	ldr	r3, [pc, #36]	@ (800969c <vTaskSwitchContext+0xc0>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	334c      	adds	r3, #76	@ 0x4c
 800967a:	4a09      	ldr	r2, [pc, #36]	@ (80096a0 <vTaskSwitchContext+0xc4>)
 800967c:	6013      	str	r3, [r2, #0]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000ddc 	.word	0x20000ddc
 8009690:	20000dc8 	.word	0x20000dc8
 8009694:	20000dbc 	.word	0x20000dbc
 8009698:	20000cb8 	.word	0x20000cb8
 800969c:	20000cb4 	.word	0x20000cb4
 80096a0:	20000028 	.word	0x20000028

080096a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	60fb      	str	r3, [r7, #12]
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096cc:	4b07      	ldr	r3, [pc, #28]	@ (80096ec <vTaskPlaceOnEventList+0x48>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3318      	adds	r3, #24
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff f82c 	bl	8008732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096da:	2101      	movs	r1, #1
 80096dc:	6838      	ldr	r0, [r7, #0]
 80096de:	f000 fa73 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000cb4 	.word	0x20000cb4

080096f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60fb      	str	r3, [r7, #12]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3318      	adds	r3, #24
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff f83e 	bl	80087a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009728:	4b1d      	ldr	r3, [pc, #116]	@ (80097a0 <xTaskRemoveFromEventList+0xb0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d11c      	bne.n	800976a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	3304      	adds	r3, #4
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff f835 	bl	80087a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	2201      	movs	r2, #1
 8009740:	409a      	lsls	r2, r3
 8009742:	4b18      	ldr	r3, [pc, #96]	@ (80097a4 <xTaskRemoveFromEventList+0xb4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4313      	orrs	r3, r2
 8009748:	4a16      	ldr	r2, [pc, #88]	@ (80097a4 <xTaskRemoveFromEventList+0xb4>)
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009750:	4613      	mov	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4a13      	ldr	r2, [pc, #76]	@ (80097a8 <xTaskRemoveFromEventList+0xb8>)
 800975a:	441a      	add	r2, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	3304      	adds	r3, #4
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f7fe ffc1 	bl	80086ea <vListInsertEnd>
 8009768:	e005      	b.n	8009776 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3318      	adds	r3, #24
 800976e:	4619      	mov	r1, r3
 8009770:	480e      	ldr	r0, [pc, #56]	@ (80097ac <xTaskRemoveFromEventList+0xbc>)
 8009772:	f7fe ffba 	bl	80086ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977a:	4b0d      	ldr	r3, [pc, #52]	@ (80097b0 <xTaskRemoveFromEventList+0xc0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009780:	429a      	cmp	r2, r3
 8009782:	d905      	bls.n	8009790 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009784:	2301      	movs	r3, #1
 8009786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009788:	4b0a      	ldr	r3, [pc, #40]	@ (80097b4 <xTaskRemoveFromEventList+0xc4>)
 800978a:	2201      	movs	r2, #1
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	e001      	b.n	8009794 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009794:	697b      	ldr	r3, [r7, #20]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000ddc 	.word	0x20000ddc
 80097a4:	20000dbc 	.word	0x20000dbc
 80097a8:	20000cb8 	.word	0x20000cb8
 80097ac:	20000d74 	.word	0x20000d74
 80097b0:	20000cb4 	.word	0x20000cb4
 80097b4:	20000dc8 	.word	0x20000dc8

080097b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097c0:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <vTaskInternalSetTimeOutState+0x24>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097c8:	4b05      	ldr	r3, [pc, #20]	@ (80097e0 <vTaskInternalSetTimeOutState+0x28>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	605a      	str	r2, [r3, #4]
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20000dcc 	.word	0x20000dcc
 80097e0:	20000db8 	.word	0x20000db8

080097e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	613b      	str	r3, [r7, #16]
}
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	e7fd      	b.n	8009808 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60fb      	str	r3, [r7, #12]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800982a:	f000 fb65 	bl	8009ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800982e:	4b1d      	ldr	r3, [pc, #116]	@ (80098a4 <xTaskCheckForTimeOut+0xc0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009846:	d102      	bne.n	800984e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	61fb      	str	r3, [r7, #28]
 800984c:	e023      	b.n	8009896 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b15      	ldr	r3, [pc, #84]	@ (80098a8 <xTaskCheckForTimeOut+0xc4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d007      	beq.n	800986a <xTaskCheckForTimeOut+0x86>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	429a      	cmp	r2, r3
 8009862:	d302      	bcc.n	800986a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009864:	2301      	movs	r3, #1
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	e015      	b.n	8009896 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	429a      	cmp	r2, r3
 8009872:	d20b      	bcs.n	800988c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff ff99 	bl	80097b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	e004      	b.n	8009896 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009892:	2301      	movs	r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009896:	f000 fb61 	bl	8009f5c <vPortExitCritical>

	return xReturn;
 800989a:	69fb      	ldr	r3, [r7, #28]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000db8 	.word	0x20000db8
 80098a8:	20000dcc 	.word	0x20000dcc

080098ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098b0:	4b03      	ldr	r3, [pc, #12]	@ (80098c0 <vTaskMissedYield+0x14>)
 80098b2:	2201      	movs	r2, #1
 80098b4:	601a      	str	r2, [r3, #0]
}
 80098b6:	bf00      	nop
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	20000dc8 	.word	0x20000dc8

080098c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098cc:	f000 f852 	bl	8009974 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098d0:	4b06      	ldr	r3, [pc, #24]	@ (80098ec <prvIdleTask+0x28>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d9f9      	bls.n	80098cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80098d8:	4b05      	ldr	r3, [pc, #20]	@ (80098f0 <prvIdleTask+0x2c>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098e8:	e7f0      	b.n	80098cc <prvIdleTask+0x8>
 80098ea:	bf00      	nop
 80098ec:	20000cb8 	.word	0x20000cb8
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098fa:	2300      	movs	r3, #0
 80098fc:	607b      	str	r3, [r7, #4]
 80098fe:	e00c      	b.n	800991a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4a12      	ldr	r2, [pc, #72]	@ (8009954 <prvInitialiseTaskLists+0x60>)
 800990c:	4413      	add	r3, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe febe 	bl	8008690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	3301      	adds	r3, #1
 8009918:	607b      	str	r3, [r7, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b06      	cmp	r3, #6
 800991e:	d9ef      	bls.n	8009900 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009920:	480d      	ldr	r0, [pc, #52]	@ (8009958 <prvInitialiseTaskLists+0x64>)
 8009922:	f7fe feb5 	bl	8008690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009926:	480d      	ldr	r0, [pc, #52]	@ (800995c <prvInitialiseTaskLists+0x68>)
 8009928:	f7fe feb2 	bl	8008690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800992c:	480c      	ldr	r0, [pc, #48]	@ (8009960 <prvInitialiseTaskLists+0x6c>)
 800992e:	f7fe feaf 	bl	8008690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009932:	480c      	ldr	r0, [pc, #48]	@ (8009964 <prvInitialiseTaskLists+0x70>)
 8009934:	f7fe feac 	bl	8008690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009938:	480b      	ldr	r0, [pc, #44]	@ (8009968 <prvInitialiseTaskLists+0x74>)
 800993a:	f7fe fea9 	bl	8008690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800993e:	4b0b      	ldr	r3, [pc, #44]	@ (800996c <prvInitialiseTaskLists+0x78>)
 8009940:	4a05      	ldr	r2, [pc, #20]	@ (8009958 <prvInitialiseTaskLists+0x64>)
 8009942:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009944:	4b0a      	ldr	r3, [pc, #40]	@ (8009970 <prvInitialiseTaskLists+0x7c>)
 8009946:	4a05      	ldr	r2, [pc, #20]	@ (800995c <prvInitialiseTaskLists+0x68>)
 8009948:	601a      	str	r2, [r3, #0]
}
 800994a:	bf00      	nop
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000cb8 	.word	0x20000cb8
 8009958:	20000d44 	.word	0x20000d44
 800995c:	20000d58 	.word	0x20000d58
 8009960:	20000d74 	.word	0x20000d74
 8009964:	20000d88 	.word	0x20000d88
 8009968:	20000da0 	.word	0x20000da0
 800996c:	20000d6c 	.word	0x20000d6c
 8009970:	20000d70 	.word	0x20000d70

08009974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800997a:	e019      	b.n	80099b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800997c:	f000 fabc 	bl	8009ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009980:	4b10      	ldr	r3, [pc, #64]	@ (80099c4 <prvCheckTasksWaitingTermination+0x50>)
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3304      	adds	r3, #4
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe ff09 	bl	80087a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009992:	4b0d      	ldr	r3, [pc, #52]	@ (80099c8 <prvCheckTasksWaitingTermination+0x54>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3b01      	subs	r3, #1
 8009998:	4a0b      	ldr	r2, [pc, #44]	@ (80099c8 <prvCheckTasksWaitingTermination+0x54>)
 800999a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800999c:	4b0b      	ldr	r3, [pc, #44]	@ (80099cc <prvCheckTasksWaitingTermination+0x58>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3b01      	subs	r3, #1
 80099a2:	4a0a      	ldr	r2, [pc, #40]	@ (80099cc <prvCheckTasksWaitingTermination+0x58>)
 80099a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099a6:	f000 fad9 	bl	8009f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f810 	bl	80099d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <prvCheckTasksWaitingTermination+0x58>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e1      	bne.n	800997c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000d88 	.word	0x20000d88
 80099c8:	20000db4 	.word	0x20000db4
 80099cc:	20000d9c 	.word	0x20000d9c

080099d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	334c      	adds	r3, #76	@ 0x4c
 80099dc:	4618      	mov	r0, r3
 80099de:	f001 fe81 	bl	800b6e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d108      	bne.n	80099fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fc71 	bl	800a2d8 <vPortFree>
				vPortFree( pxTCB );
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fc6e 	bl	800a2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099fc:	e019      	b.n	8009a32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d103      	bne.n	8009a10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fc65 	bl	800a2d8 <vPortFree>
	}
 8009a0e:	e010      	b.n	8009a32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d00b      	beq.n	8009a32 <prvDeleteTCB+0x62>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	60fb      	str	r3, [r7, #12]
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	e7fd      	b.n	8009a2e <prvDeleteTCB+0x5e>
	}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a42:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <prvResetNextTaskUnblockTime+0x38>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d104      	bne.n	8009a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <prvResetNextTaskUnblockTime+0x3c>)
 8009a4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a54:	e008      	b.n	8009a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b07      	ldr	r3, [pc, #28]	@ (8009a74 <prvResetNextTaskUnblockTime+0x38>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4a04      	ldr	r2, [pc, #16]	@ (8009a78 <prvResetNextTaskUnblockTime+0x3c>)
 8009a66:	6013      	str	r3, [r2, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	20000d6c 	.word	0x20000d6c
 8009a78:	20000dd4 	.word	0x20000dd4

08009a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a82:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab0 <xTaskGetSchedulerState+0x34>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	607b      	str	r3, [r7, #4]
 8009a8e:	e008      	b.n	8009aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a90:	4b08      	ldr	r3, [pc, #32]	@ (8009ab4 <xTaskGetSchedulerState+0x38>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e001      	b.n	8009aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aa2:	687b      	ldr	r3, [r7, #4]
	}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20000dc0 	.word	0x20000dc0
 8009ab4:	20000ddc 	.word	0x20000ddc

08009ab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d070      	beq.n	8009bb0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ace:	4b3b      	ldr	r3, [pc, #236]	@ (8009bbc <xTaskPriorityDisinherit+0x104>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d00b      	beq.n	8009af0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60fb      	str	r3, [r7, #12]
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	60bb      	str	r3, [r7, #8]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b14:	1e5a      	subs	r2, r3, #1
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d044      	beq.n	8009bb0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d140      	bne.n	8009bb0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fe36 	bl	80087a4 <uxListRemove>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d115      	bne.n	8009b6a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b42:	491f      	ldr	r1, [pc, #124]	@ (8009bc0 <xTaskPriorityDisinherit+0x108>)
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	440b      	add	r3, r1
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <xTaskPriorityDisinherit+0xb2>
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b58:	2201      	movs	r2, #1
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	43da      	mvns	r2, r3
 8009b60:	4b18      	ldr	r3, [pc, #96]	@ (8009bc4 <xTaskPriorityDisinherit+0x10c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4013      	ands	r3, r2
 8009b66:	4a17      	ldr	r2, [pc, #92]	@ (8009bc4 <xTaskPriorityDisinherit+0x10c>)
 8009b68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b76:	f1c3 0207 	rsb	r2, r3, #7
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	2201      	movs	r2, #1
 8009b84:	409a      	lsls	r2, r3
 8009b86:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc4 <xTaskPriorityDisinherit+0x10c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8009bc4 <xTaskPriorityDisinherit+0x10c>)
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4a08      	ldr	r2, [pc, #32]	@ (8009bc0 <xTaskPriorityDisinherit+0x108>)
 8009b9e:	441a      	add	r2, r3
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fe fd9f 	bl	80086ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bac:	2301      	movs	r3, #1
 8009bae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bb0:	697b      	ldr	r3, [r7, #20]
	}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000cb4 	.word	0x20000cb4
 8009bc0:	20000cb8 	.word	0x20000cb8
 8009bc4:	20000dbc 	.word	0x20000dbc

08009bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bd2:	4b29      	ldr	r3, [pc, #164]	@ (8009c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bd8:	4b28      	ldr	r3, [pc, #160]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fde0 	bl	80087a4 <uxListRemove>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bea:	4b24      	ldr	r3, [pc, #144]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	43da      	mvns	r2, r3
 8009bf8:	4b21      	ldr	r3, [pc, #132]	@ (8009c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	4a20      	ldr	r2, [pc, #128]	@ (8009c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c08:	d10a      	bne.n	8009c20 <prvAddCurrentTaskToDelayedList+0x58>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c10:	4b1a      	ldr	r3, [pc, #104]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	481a      	ldr	r0, [pc, #104]	@ (8009c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c1a:	f7fe fd66 	bl	80086ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c1e:	e026      	b.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c28:	4b14      	ldr	r3, [pc, #80]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d209      	bcs.n	8009c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c38:	4b13      	ldr	r3, [pc, #76]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7fe fd74 	bl	8008732 <vListInsert>
}
 8009c4a:	e010      	b.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f7fe fd6a 	bl	8008732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d202      	bcs.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c68:	4a09      	ldr	r2, [pc, #36]	@ (8009c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6013      	str	r3, [r2, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20000db8 	.word	0x20000db8
 8009c7c:	20000cb4 	.word	0x20000cb4
 8009c80:	20000dbc 	.word	0x20000dbc
 8009c84:	20000da0 	.word	0x20000da0
 8009c88:	20000d70 	.word	0x20000d70
 8009c8c:	20000d6c 	.word	0x20000d6c
 8009c90:	20000dd4 	.word	0x20000dd4

08009c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3b04      	subs	r3, #4
 8009ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f023 0201 	bic.w	r2, r3, #1
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3b04      	subs	r3, #4
 8009cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8009cf8 <pxPortInitialiseStack+0x64>)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3b14      	subs	r3, #20
 8009cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f06f 0202 	mvn.w	r2, #2
 8009ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3b20      	subs	r3, #32
 8009ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cea:	68fb      	ldr	r3, [r7, #12]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	08009cfd 	.word	0x08009cfd

08009cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d06:	4b13      	ldr	r3, [pc, #76]	@ (8009d54 <prvTaskExitError+0x58>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d0e:	d00b      	beq.n	8009d28 <prvTaskExitError+0x2c>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <prvTaskExitError+0x28>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	60bb      	str	r3, [r7, #8]
}
 8009d3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d3c:	bf00      	nop
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0fc      	beq.n	8009d3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	20000018 	.word	0x20000018
	...

08009d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d60:	4b07      	ldr	r3, [pc, #28]	@ (8009d80 <pxCurrentTCBConst2>)
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	6808      	ldr	r0, [r1, #0]
 8009d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	f380 8809 	msr	PSP, r0
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8811 	msr	BASEPRI, r0
 8009d7a:	4770      	bx	lr
 8009d7c:	f3af 8000 	nop.w

08009d80 <pxCurrentTCBConst2>:
 8009d80:	20000cb4 	.word	0x20000cb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop

08009d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d88:	4808      	ldr	r0, [pc, #32]	@ (8009dac <prvPortStartFirstTask+0x24>)
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	6800      	ldr	r0, [r0, #0]
 8009d8e:	f380 8808 	msr	MSP, r0
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f380 8814 	msr	CONTROL, r0
 8009d9a:	b662      	cpsie	i
 8009d9c:	b661      	cpsie	f
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	df00      	svc	0
 8009da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009daa:	bf00      	nop
 8009dac:	e000ed08 	.word	0xe000ed08

08009db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009db6:	4b47      	ldr	r3, [pc, #284]	@ (8009ed4 <xPortStartScheduler+0x124>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a47      	ldr	r2, [pc, #284]	@ (8009ed8 <xPortStartScheduler+0x128>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10b      	bne.n	8009dd8 <xPortStartScheduler+0x28>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	613b      	str	r3, [r7, #16]
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	e7fd      	b.n	8009dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ed4 <xPortStartScheduler+0x124>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8009edc <xPortStartScheduler+0x12c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d10b      	bne.n	8009dfa <xPortStartScheduler+0x4a>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	60fb      	str	r3, [r7, #12]
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop
 8009df8:	e7fd      	b.n	8009df6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dfa:	4b39      	ldr	r3, [pc, #228]	@ (8009ee0 <xPortStartScheduler+0x130>)
 8009dfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	22ff      	movs	r2, #255	@ 0xff
 8009e0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	4b31      	ldr	r3, [pc, #196]	@ (8009ee4 <xPortStartScheduler+0x134>)
 8009e20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e22:	4b31      	ldr	r3, [pc, #196]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e24:	2207      	movs	r2, #7
 8009e26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e28:	e009      	b.n	8009e3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	4a2d      	ldr	r2, [pc, #180]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e46:	2b80      	cmp	r3, #128	@ 0x80
 8009e48:	d0ef      	beq.n	8009e2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e4a:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f1c3 0307 	rsb	r3, r3, #7
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d00b      	beq.n	8009e6e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	60bb      	str	r3, [r7, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	e7fd      	b.n	8009e6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e78:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e80:	4a19      	ldr	r2, [pc, #100]	@ (8009ee8 <xPortStartScheduler+0x138>)
 8009e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e8c:	4b17      	ldr	r3, [pc, #92]	@ (8009eec <xPortStartScheduler+0x13c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a16      	ldr	r2, [pc, #88]	@ (8009eec <xPortStartScheduler+0x13c>)
 8009e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e98:	4b14      	ldr	r3, [pc, #80]	@ (8009eec <xPortStartScheduler+0x13c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a13      	ldr	r2, [pc, #76]	@ (8009eec <xPortStartScheduler+0x13c>)
 8009e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ea4:	f000 f8da 	bl	800a05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ea8:	4b11      	ldr	r3, [pc, #68]	@ (8009ef0 <xPortStartScheduler+0x140>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009eae:	f000 f8f9 	bl	800a0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009eb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ef4 <xPortStartScheduler+0x144>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8009ef4 <xPortStartScheduler+0x144>)
 8009eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ebe:	f7ff ff63 	bl	8009d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ec2:	f7ff fb8b 	bl	80095dc <vTaskSwitchContext>
	prvTaskExitError();
 8009ec6:	f7ff ff19 	bl	8009cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	e000ed00 	.word	0xe000ed00
 8009ed8:	410fc271 	.word	0x410fc271
 8009edc:	410fc270 	.word	0x410fc270
 8009ee0:	e000e400 	.word	0xe000e400
 8009ee4:	20000de0 	.word	0x20000de0
 8009ee8:	20000de4 	.word	0x20000de4
 8009eec:	e000ed20 	.word	0xe000ed20
 8009ef0:	20000018 	.word	0x20000018
 8009ef4:	e000ef34 	.word	0xe000ef34

08009ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	607b      	str	r3, [r7, #4]
}
 8009f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f12:	4b10      	ldr	r3, [pc, #64]	@ (8009f54 <vPortEnterCritical+0x5c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3301      	adds	r3, #1
 8009f18:	4a0e      	ldr	r2, [pc, #56]	@ (8009f54 <vPortEnterCritical+0x5c>)
 8009f1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f54 <vPortEnterCritical+0x5c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d110      	bne.n	8009f46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f24:	4b0c      	ldr	r3, [pc, #48]	@ (8009f58 <vPortEnterCritical+0x60>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00b      	beq.n	8009f46 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	603b      	str	r3, [r7, #0]
}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	e7fd      	b.n	8009f42 <vPortEnterCritical+0x4a>
	}
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000018 	.word	0x20000018
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f62:	4b12      	ldr	r3, [pc, #72]	@ (8009fac <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <vPortExitCritical+0x26>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	607b      	str	r3, [r7, #4]
}
 8009f7c:	bf00      	nop
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f82:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <vPortExitCritical+0x50>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3b01      	subs	r3, #1
 8009f88:	4a08      	ldr	r2, [pc, #32]	@ (8009fac <vPortExitCritical+0x50>)
 8009f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f8c:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <vPortExitCritical+0x50>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d105      	bne.n	8009fa0 <vPortExitCritical+0x44>
 8009f94:	2300      	movs	r3, #0
 8009f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f383 8811 	msr	BASEPRI, r3
}
 8009f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	20000018 	.word	0x20000018

08009fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fb0:	f3ef 8009 	mrs	r0, PSP
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	4b15      	ldr	r3, [pc, #84]	@ (800a010 <pxCurrentTCBConst>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	f01e 0f10 	tst.w	lr, #16
 8009fc0:	bf08      	it	eq
 8009fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	6010      	str	r0, [r2, #0]
 8009fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fd4:	f380 8811 	msr	BASEPRI, r0
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f7ff fafc 	bl	80095dc <vTaskSwitchContext>
 8009fe4:	f04f 0000 	mov.w	r0, #0
 8009fe8:	f380 8811 	msr	BASEPRI, r0
 8009fec:	bc09      	pop	{r0, r3}
 8009fee:	6819      	ldr	r1, [r3, #0]
 8009ff0:	6808      	ldr	r0, [r1, #0]
 8009ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff6:	f01e 0f10 	tst.w	lr, #16
 8009ffa:	bf08      	it	eq
 8009ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a000:	f380 8809 	msr	PSP, r0
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst>:
 800a010:	20000cb4 	.word	0x20000cb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a032:	f7ff fa19 	bl	8009468 <xTaskIncrementTick>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a03c:	4b06      	ldr	r3, [pc, #24]	@ (800a058 <SysTick_Handler+0x40>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f383 8811 	msr	BASEPRI, r3
}
 800a04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a060:	4b0b      	ldr	r3, [pc, #44]	@ (800a090 <vPortSetupTimerInterrupt+0x34>)
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a066:	4b0b      	ldr	r3, [pc, #44]	@ (800a094 <vPortSetupTimerInterrupt+0x38>)
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <vPortSetupTimerInterrupt+0x3c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a0a      	ldr	r2, [pc, #40]	@ (800a09c <vPortSetupTimerInterrupt+0x40>)
 800a072:	fba2 2303 	umull	r2, r3, r2, r3
 800a076:	099b      	lsrs	r3, r3, #6
 800a078:	4a09      	ldr	r2, [pc, #36]	@ (800a0a0 <vPortSetupTimerInterrupt+0x44>)
 800a07a:	3b01      	subs	r3, #1
 800a07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a07e:	4b04      	ldr	r3, [pc, #16]	@ (800a090 <vPortSetupTimerInterrupt+0x34>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	e000e010 	.word	0xe000e010
 800a094:	e000e018 	.word	0xe000e018
 800a098:	20000000 	.word	0x20000000
 800a09c:	10624dd3 	.word	0x10624dd3
 800a0a0:	e000e014 	.word	0xe000e014

0800a0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0b4 <vPortEnableVFP+0x10>
 800a0a8:	6801      	ldr	r1, [r0, #0]
 800a0aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0ae:	6001      	str	r1, [r0, #0]
 800a0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0b2:	bf00      	nop
 800a0b4:	e000ed88 	.word	0xe000ed88

0800a0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0be:	f3ef 8305 	mrs	r3, IPSR
 800a0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b0f      	cmp	r3, #15
 800a0c8:	d915      	bls.n	800a0f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0ca:	4a18      	ldr	r2, [pc, #96]	@ (800a12c <vPortValidateInterruptPriority+0x74>)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0d4:	4b16      	ldr	r3, [pc, #88]	@ (800a130 <vPortValidateInterruptPriority+0x78>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	7afa      	ldrb	r2, [r7, #11]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d20b      	bcs.n	800a0f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	607b      	str	r3, [r7, #4]
}
 800a0f0:	bf00      	nop
 800a0f2:	bf00      	nop
 800a0f4:	e7fd      	b.n	800a0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a134 <vPortValidateInterruptPriority+0x7c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a138 <vPortValidateInterruptPriority+0x80>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d90b      	bls.n	800a11e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	603b      	str	r3, [r7, #0]
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <vPortValidateInterruptPriority+0x62>
	}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	e000e3f0 	.word	0xe000e3f0
 800a130:	20000de0 	.word	0x20000de0
 800a134:	e000ed0c 	.word	0xe000ed0c
 800a138:	20000de4 	.word	0x20000de4

0800a13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08a      	sub	sp, #40	@ 0x28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a144:	2300      	movs	r3, #0
 800a146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a148:	f7ff f8e2 	bl	8009310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a14c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2c0 <pvPortMalloc+0x184>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a154:	f000 f924 	bl	800a3a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a158:	4b5a      	ldr	r3, [pc, #360]	@ (800a2c4 <pvPortMalloc+0x188>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4013      	ands	r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 8095 	bne.w	800a290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01e      	beq.n	800a1aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a16c:	2208      	movs	r2, #8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4413      	add	r3, r2
 800a172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d015      	beq.n	800a1aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	3308      	adds	r3, #8
 800a186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00b      	beq.n	800a1aa <pvPortMalloc+0x6e>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	617b      	str	r3, [r7, #20]
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop
 800a1a8:	e7fd      	b.n	800a1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d06f      	beq.n	800a290 <pvPortMalloc+0x154>
 800a1b0:	4b45      	ldr	r3, [pc, #276]	@ (800a2c8 <pvPortMalloc+0x18c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d86a      	bhi.n	800a290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1ba:	4b44      	ldr	r3, [pc, #272]	@ (800a2cc <pvPortMalloc+0x190>)
 800a1bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1be:	4b43      	ldr	r3, [pc, #268]	@ (800a2cc <pvPortMalloc+0x190>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1c4:	e004      	b.n	800a1d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d903      	bls.n	800a1e2 <pvPortMalloc+0xa6>
 800a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f1      	bne.n	800a1c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1e2:	4b37      	ldr	r3, [pc, #220]	@ (800a2c0 <pvPortMalloc+0x184>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d051      	beq.n	800a290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	1ad2      	subs	r2, r2, r3
 800a206:	2308      	movs	r3, #8
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d920      	bls.n	800a250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4413      	add	r3, r2
 800a214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	f003 0307 	and.w	r3, r3, #7
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <pvPortMalloc+0xfc>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	613b      	str	r3, [r7, #16]
}
 800a232:	bf00      	nop
 800a234:	bf00      	nop
 800a236:	e7fd      	b.n	800a234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a24a:	69b8      	ldr	r0, [r7, #24]
 800a24c:	f000 f90a 	bl	800a464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a250:	4b1d      	ldr	r3, [pc, #116]	@ (800a2c8 <pvPortMalloc+0x18c>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c8 <pvPortMalloc+0x18c>)
 800a25c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a25e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c8 <pvPortMalloc+0x18c>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4b1b      	ldr	r3, [pc, #108]	@ (800a2d0 <pvPortMalloc+0x194>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d203      	bcs.n	800a272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a26a:	4b17      	ldr	r3, [pc, #92]	@ (800a2c8 <pvPortMalloc+0x18c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a18      	ldr	r2, [pc, #96]	@ (800a2d0 <pvPortMalloc+0x194>)
 800a270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	4b13      	ldr	r3, [pc, #76]	@ (800a2c4 <pvPortMalloc+0x188>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a286:	4b13      	ldr	r3, [pc, #76]	@ (800a2d4 <pvPortMalloc+0x198>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a11      	ldr	r2, [pc, #68]	@ (800a2d4 <pvPortMalloc+0x198>)
 800a28e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a290:	f7ff f84c 	bl	800932c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00b      	beq.n	800a2b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
}
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	e7fd      	b.n	800a2b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3728      	adds	r7, #40	@ 0x28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200035f0 	.word	0x200035f0
 800a2c4:	20003604 	.word	0x20003604
 800a2c8:	200035f4 	.word	0x200035f4
 800a2cc:	200035e8 	.word	0x200035e8
 800a2d0:	200035f8 	.word	0x200035f8
 800a2d4:	200035fc 	.word	0x200035fc

0800a2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d04f      	beq.n	800a38a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2ea:	2308      	movs	r3, #8
 800a2ec:	425b      	negs	r3, r3
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	4b25      	ldr	r3, [pc, #148]	@ (800a394 <vPortFree+0xbc>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4013      	ands	r3, r2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <vPortFree+0x46>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	60fb      	str	r3, [r7, #12]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <vPortFree+0x66>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60bb      	str	r3, [r7, #8]
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	e7fd      	b.n	800a33a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	4b14      	ldr	r3, [pc, #80]	@ (800a394 <vPortFree+0xbc>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4013      	ands	r3, r2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01e      	beq.n	800a38a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d11a      	bne.n	800a38a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <vPortFree+0xbc>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	43db      	mvns	r3, r3
 800a35e:	401a      	ands	r2, r3
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a364:	f7fe ffd4 	bl	8009310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	4b0a      	ldr	r3, [pc, #40]	@ (800a398 <vPortFree+0xc0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4413      	add	r3, r2
 800a372:	4a09      	ldr	r2, [pc, #36]	@ (800a398 <vPortFree+0xc0>)
 800a374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	f000 f874 	bl	800a464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a37c:	4b07      	ldr	r3, [pc, #28]	@ (800a39c <vPortFree+0xc4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3301      	adds	r3, #1
 800a382:	4a06      	ldr	r2, [pc, #24]	@ (800a39c <vPortFree+0xc4>)
 800a384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a386:	f7fe ffd1 	bl	800932c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a38a:	bf00      	nop
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20003604 	.word	0x20003604
 800a398:	200035f4 	.word	0x200035f4
 800a39c:	20003600 	.word	0x20003600

0800a3a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3a6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a3aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3ac:	4b27      	ldr	r3, [pc, #156]	@ (800a44c <prvHeapInit+0xac>)
 800a3ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f003 0307 	and.w	r3, r3, #7
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00c      	beq.n	800a3d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3307      	adds	r3, #7
 800a3be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f023 0307 	bic.w	r3, r3, #7
 800a3c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a44c <prvHeapInit+0xac>)
 800a3d0:	4413      	add	r3, r2
 800a3d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a450 <prvHeapInit+0xb0>)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3de:	4b1c      	ldr	r3, [pc, #112]	@ (800a450 <prvHeapInit+0xb0>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3ec:	2208      	movs	r2, #8
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 0307 	bic.w	r3, r3, #7
 800a3fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	4a15      	ldr	r2, [pc, #84]	@ (800a454 <prvHeapInit+0xb4>)
 800a400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a402:	4b14      	ldr	r3, [pc, #80]	@ (800a454 <prvHeapInit+0xb4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2200      	movs	r2, #0
 800a408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a40a:	4b12      	ldr	r3, [pc, #72]	@ (800a454 <prvHeapInit+0xb4>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	1ad2      	subs	r2, r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a420:	4b0c      	ldr	r3, [pc, #48]	@ (800a454 <prvHeapInit+0xb4>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a0a      	ldr	r2, [pc, #40]	@ (800a458 <prvHeapInit+0xb8>)
 800a42e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4a09      	ldr	r2, [pc, #36]	@ (800a45c <prvHeapInit+0xbc>)
 800a436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a438:	4b09      	ldr	r3, [pc, #36]	@ (800a460 <prvHeapInit+0xc0>)
 800a43a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a43e:	601a      	str	r2, [r3, #0]
}
 800a440:	bf00      	nop
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	20000de8 	.word	0x20000de8
 800a450:	200035e8 	.word	0x200035e8
 800a454:	200035f0 	.word	0x200035f0
 800a458:	200035f8 	.word	0x200035f8
 800a45c:	200035f4 	.word	0x200035f4
 800a460:	20003604 	.word	0x20003604

0800a464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a46c:	4b28      	ldr	r3, [pc, #160]	@ (800a510 <prvInsertBlockIntoFreeList+0xac>)
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e002      	b.n	800a478 <prvInsertBlockIntoFreeList+0x14>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d8f7      	bhi.n	800a472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	4413      	add	r3, r2
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d108      	bne.n	800a4a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	441a      	add	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	441a      	add	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d118      	bne.n	800a4ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	4b15      	ldr	r3, [pc, #84]	@ (800a514 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d00d      	beq.n	800a4e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	441a      	add	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	e008      	b.n	800a4f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a514 <prvInsertBlockIntoFreeList+0xb0>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e003      	b.n	800a4f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d002      	beq.n	800a502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a502:	bf00      	nop
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	200035e8 	.word	0x200035e8
 800a514:	200035f0 	.word	0x200035f0

0800a518 <__cvt>:
 800a518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	ec57 6b10 	vmov	r6, r7, d0
 800a520:	2f00      	cmp	r7, #0
 800a522:	460c      	mov	r4, r1
 800a524:	4619      	mov	r1, r3
 800a526:	463b      	mov	r3, r7
 800a528:	bfbb      	ittet	lt
 800a52a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a52e:	461f      	movlt	r7, r3
 800a530:	2300      	movge	r3, #0
 800a532:	232d      	movlt	r3, #45	@ 0x2d
 800a534:	700b      	strb	r3, [r1, #0]
 800a536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a538:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a53c:	4691      	mov	r9, r2
 800a53e:	f023 0820 	bic.w	r8, r3, #32
 800a542:	bfbc      	itt	lt
 800a544:	4632      	movlt	r2, r6
 800a546:	4616      	movlt	r6, r2
 800a548:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a54c:	d005      	beq.n	800a55a <__cvt+0x42>
 800a54e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a552:	d100      	bne.n	800a556 <__cvt+0x3e>
 800a554:	3401      	adds	r4, #1
 800a556:	2102      	movs	r1, #2
 800a558:	e000      	b.n	800a55c <__cvt+0x44>
 800a55a:	2103      	movs	r1, #3
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	ab02      	add	r3, sp, #8
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	ec47 6b10 	vmov	d0, r6, r7
 800a568:	4653      	mov	r3, sl
 800a56a:	4622      	mov	r2, r4
 800a56c:	f001 fa10 	bl	800b990 <_dtoa_r>
 800a570:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a574:	4605      	mov	r5, r0
 800a576:	d119      	bne.n	800a5ac <__cvt+0x94>
 800a578:	f019 0f01 	tst.w	r9, #1
 800a57c:	d00e      	beq.n	800a59c <__cvt+0x84>
 800a57e:	eb00 0904 	add.w	r9, r0, r4
 800a582:	2200      	movs	r2, #0
 800a584:	2300      	movs	r3, #0
 800a586:	4630      	mov	r0, r6
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f6 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a58e:	b108      	cbz	r0, 800a594 <__cvt+0x7c>
 800a590:	f8cd 900c 	str.w	r9, [sp, #12]
 800a594:	2230      	movs	r2, #48	@ 0x30
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	454b      	cmp	r3, r9
 800a59a:	d31e      	bcc.n	800a5da <__cvt+0xc2>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5a0:	1b5b      	subs	r3, r3, r5
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	b004      	add	sp, #16
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5b0:	eb00 0904 	add.w	r9, r0, r4
 800a5b4:	d1e5      	bne.n	800a582 <__cvt+0x6a>
 800a5b6:	7803      	ldrb	r3, [r0, #0]
 800a5b8:	2b30      	cmp	r3, #48	@ 0x30
 800a5ba:	d10a      	bne.n	800a5d2 <__cvt+0xba>
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2300      	movs	r3, #0
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f6 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5c8:	b918      	cbnz	r0, 800a5d2 <__cvt+0xba>
 800a5ca:	f1c4 0401 	rsb	r4, r4, #1
 800a5ce:	f8ca 4000 	str.w	r4, [sl]
 800a5d2:	f8da 3000 	ldr.w	r3, [sl]
 800a5d6:	4499      	add	r9, r3
 800a5d8:	e7d3      	b.n	800a582 <__cvt+0x6a>
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	9103      	str	r1, [sp, #12]
 800a5de:	701a      	strb	r2, [r3, #0]
 800a5e0:	e7d9      	b.n	800a596 <__cvt+0x7e>

0800a5e2 <__exponent>:
 800a5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	bfba      	itte	lt
 800a5e8:	4249      	neglt	r1, r1
 800a5ea:	232d      	movlt	r3, #45	@ 0x2d
 800a5ec:	232b      	movge	r3, #43	@ 0x2b
 800a5ee:	2909      	cmp	r1, #9
 800a5f0:	7002      	strb	r2, [r0, #0]
 800a5f2:	7043      	strb	r3, [r0, #1]
 800a5f4:	dd29      	ble.n	800a64a <__exponent+0x68>
 800a5f6:	f10d 0307 	add.w	r3, sp, #7
 800a5fa:	461d      	mov	r5, r3
 800a5fc:	270a      	movs	r7, #10
 800a5fe:	461a      	mov	r2, r3
 800a600:	fbb1 f6f7 	udiv	r6, r1, r7
 800a604:	fb07 1416 	mls	r4, r7, r6, r1
 800a608:	3430      	adds	r4, #48	@ 0x30
 800a60a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a60e:	460c      	mov	r4, r1
 800a610:	2c63      	cmp	r4, #99	@ 0x63
 800a612:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a616:	4631      	mov	r1, r6
 800a618:	dcf1      	bgt.n	800a5fe <__exponent+0x1c>
 800a61a:	3130      	adds	r1, #48	@ 0x30
 800a61c:	1e94      	subs	r4, r2, #2
 800a61e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a622:	1c41      	adds	r1, r0, #1
 800a624:	4623      	mov	r3, r4
 800a626:	42ab      	cmp	r3, r5
 800a628:	d30a      	bcc.n	800a640 <__exponent+0x5e>
 800a62a:	f10d 0309 	add.w	r3, sp, #9
 800a62e:	1a9b      	subs	r3, r3, r2
 800a630:	42ac      	cmp	r4, r5
 800a632:	bf88      	it	hi
 800a634:	2300      	movhi	r3, #0
 800a636:	3302      	adds	r3, #2
 800a638:	4403      	add	r3, r0
 800a63a:	1a18      	subs	r0, r3, r0
 800a63c:	b003      	add	sp, #12
 800a63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a640:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a644:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a648:	e7ed      	b.n	800a626 <__exponent+0x44>
 800a64a:	2330      	movs	r3, #48	@ 0x30
 800a64c:	3130      	adds	r1, #48	@ 0x30
 800a64e:	7083      	strb	r3, [r0, #2]
 800a650:	70c1      	strb	r1, [r0, #3]
 800a652:	1d03      	adds	r3, r0, #4
 800a654:	e7f1      	b.n	800a63a <__exponent+0x58>
	...

0800a658 <_printf_float>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	b08d      	sub	sp, #52	@ 0x34
 800a65e:	460c      	mov	r4, r1
 800a660:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a664:	4616      	mov	r6, r2
 800a666:	461f      	mov	r7, r3
 800a668:	4605      	mov	r5, r0
 800a66a:	f001 f827 	bl	800b6bc <_localeconv_r>
 800a66e:	6803      	ldr	r3, [r0, #0]
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	4618      	mov	r0, r3
 800a674:	f7f5 fdfc 	bl	8000270 <strlen>
 800a678:	2300      	movs	r3, #0
 800a67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a67c:	f8d8 3000 	ldr.w	r3, [r8]
 800a680:	9005      	str	r0, [sp, #20]
 800a682:	3307      	adds	r3, #7
 800a684:	f023 0307 	bic.w	r3, r3, #7
 800a688:	f103 0208 	add.w	r2, r3, #8
 800a68c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a690:	f8d4 b000 	ldr.w	fp, [r4]
 800a694:	f8c8 2000 	str.w	r2, [r8]
 800a698:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a69c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a6a0:	9307      	str	r3, [sp, #28]
 800a6a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a6aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a920 <_printf_float+0x2c8>)
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6b4:	f7f6 fa3a 	bl	8000b2c <__aeabi_dcmpun>
 800a6b8:	bb70      	cbnz	r0, 800a718 <_printf_float+0xc0>
 800a6ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6be:	4b98      	ldr	r3, [pc, #608]	@ (800a920 <_printf_float+0x2c8>)
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6c4:	f7f6 fa14 	bl	8000af0 <__aeabi_dcmple>
 800a6c8:	bb30      	cbnz	r0, 800a718 <_printf_float+0xc0>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f6 fa03 	bl	8000adc <__aeabi_dcmplt>
 800a6d6:	b110      	cbz	r0, 800a6de <_printf_float+0x86>
 800a6d8:	232d      	movs	r3, #45	@ 0x2d
 800a6da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6de:	4a91      	ldr	r2, [pc, #580]	@ (800a924 <_printf_float+0x2cc>)
 800a6e0:	4b91      	ldr	r3, [pc, #580]	@ (800a928 <_printf_float+0x2d0>)
 800a6e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6e6:	bf94      	ite	ls
 800a6e8:	4690      	movls	r8, r2
 800a6ea:	4698      	movhi	r8, r3
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	6123      	str	r3, [r4, #16]
 800a6f0:	f02b 0304 	bic.w	r3, fp, #4
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	f04f 0900 	mov.w	r9, #0
 800a6fa:	9700      	str	r7, [sp, #0]
 800a6fc:	4633      	mov	r3, r6
 800a6fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a700:	4621      	mov	r1, r4
 800a702:	4628      	mov	r0, r5
 800a704:	f000 f9d2 	bl	800aaac <_printf_common>
 800a708:	3001      	adds	r0, #1
 800a70a:	f040 808d 	bne.w	800a828 <_printf_float+0x1d0>
 800a70e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a712:	b00d      	add	sp, #52	@ 0x34
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f6 fa04 	bl	8000b2c <__aeabi_dcmpun>
 800a724:	b140      	cbz	r0, 800a738 <_printf_float+0xe0>
 800a726:	464b      	mov	r3, r9
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfbc      	itt	lt
 800a72c:	232d      	movlt	r3, #45	@ 0x2d
 800a72e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a732:	4a7e      	ldr	r2, [pc, #504]	@ (800a92c <_printf_float+0x2d4>)
 800a734:	4b7e      	ldr	r3, [pc, #504]	@ (800a930 <_printf_float+0x2d8>)
 800a736:	e7d4      	b.n	800a6e2 <_printf_float+0x8a>
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a73e:	9206      	str	r2, [sp, #24]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	d13b      	bne.n	800a7bc <_printf_float+0x164>
 800a744:	2306      	movs	r3, #6
 800a746:	6063      	str	r3, [r4, #4]
 800a748:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a74c:	2300      	movs	r3, #0
 800a74e:	6022      	str	r2, [r4, #0]
 800a750:	9303      	str	r3, [sp, #12]
 800a752:	ab0a      	add	r3, sp, #40	@ 0x28
 800a754:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a758:	ab09      	add	r3, sp, #36	@ 0x24
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	6861      	ldr	r1, [r4, #4]
 800a75e:	ec49 8b10 	vmov	d0, r8, r9
 800a762:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a766:	4628      	mov	r0, r5
 800a768:	f7ff fed6 	bl	800a518 <__cvt>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a770:	2b47      	cmp	r3, #71	@ 0x47
 800a772:	4680      	mov	r8, r0
 800a774:	d129      	bne.n	800a7ca <_printf_float+0x172>
 800a776:	1cc8      	adds	r0, r1, #3
 800a778:	db02      	blt.n	800a780 <_printf_float+0x128>
 800a77a:	6863      	ldr	r3, [r4, #4]
 800a77c:	4299      	cmp	r1, r3
 800a77e:	dd41      	ble.n	800a804 <_printf_float+0x1ac>
 800a780:	f1aa 0a02 	sub.w	sl, sl, #2
 800a784:	fa5f fa8a 	uxtb.w	sl, sl
 800a788:	3901      	subs	r1, #1
 800a78a:	4652      	mov	r2, sl
 800a78c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a790:	9109      	str	r1, [sp, #36]	@ 0x24
 800a792:	f7ff ff26 	bl	800a5e2 <__exponent>
 800a796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a798:	1813      	adds	r3, r2, r0
 800a79a:	2a01      	cmp	r2, #1
 800a79c:	4681      	mov	r9, r0
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	dc02      	bgt.n	800a7a8 <_printf_float+0x150>
 800a7a2:	6822      	ldr	r2, [r4, #0]
 800a7a4:	07d2      	lsls	r2, r2, #31
 800a7a6:	d501      	bpl.n	800a7ac <_printf_float+0x154>
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0a2      	beq.n	800a6fa <_printf_float+0xa2>
 800a7b4:	232d      	movs	r3, #45	@ 0x2d
 800a7b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ba:	e79e      	b.n	800a6fa <_printf_float+0xa2>
 800a7bc:	9a06      	ldr	r2, [sp, #24]
 800a7be:	2a47      	cmp	r2, #71	@ 0x47
 800a7c0:	d1c2      	bne.n	800a748 <_printf_float+0xf0>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1c0      	bne.n	800a748 <_printf_float+0xf0>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e7bd      	b.n	800a746 <_printf_float+0xee>
 800a7ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7ce:	d9db      	bls.n	800a788 <_printf_float+0x130>
 800a7d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7d4:	d118      	bne.n	800a808 <_printf_float+0x1b0>
 800a7d6:	2900      	cmp	r1, #0
 800a7d8:	6863      	ldr	r3, [r4, #4]
 800a7da:	dd0b      	ble.n	800a7f4 <_printf_float+0x19c>
 800a7dc:	6121      	str	r1, [r4, #16]
 800a7de:	b913      	cbnz	r3, 800a7e6 <_printf_float+0x18e>
 800a7e0:	6822      	ldr	r2, [r4, #0]
 800a7e2:	07d0      	lsls	r0, r2, #31
 800a7e4:	d502      	bpl.n	800a7ec <_printf_float+0x194>
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	440b      	add	r3, r1
 800a7ea:	6123      	str	r3, [r4, #16]
 800a7ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7ee:	f04f 0900 	mov.w	r9, #0
 800a7f2:	e7db      	b.n	800a7ac <_printf_float+0x154>
 800a7f4:	b913      	cbnz	r3, 800a7fc <_printf_float+0x1a4>
 800a7f6:	6822      	ldr	r2, [r4, #0]
 800a7f8:	07d2      	lsls	r2, r2, #31
 800a7fa:	d501      	bpl.n	800a800 <_printf_float+0x1a8>
 800a7fc:	3302      	adds	r3, #2
 800a7fe:	e7f4      	b.n	800a7ea <_printf_float+0x192>
 800a800:	2301      	movs	r3, #1
 800a802:	e7f2      	b.n	800a7ea <_printf_float+0x192>
 800a804:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a80a:	4299      	cmp	r1, r3
 800a80c:	db05      	blt.n	800a81a <_printf_float+0x1c2>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	6121      	str	r1, [r4, #16]
 800a812:	07d8      	lsls	r0, r3, #31
 800a814:	d5ea      	bpl.n	800a7ec <_printf_float+0x194>
 800a816:	1c4b      	adds	r3, r1, #1
 800a818:	e7e7      	b.n	800a7ea <_printf_float+0x192>
 800a81a:	2900      	cmp	r1, #0
 800a81c:	bfd4      	ite	le
 800a81e:	f1c1 0202 	rsble	r2, r1, #2
 800a822:	2201      	movgt	r2, #1
 800a824:	4413      	add	r3, r2
 800a826:	e7e0      	b.n	800a7ea <_printf_float+0x192>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	055a      	lsls	r2, r3, #21
 800a82c:	d407      	bmi.n	800a83e <_printf_float+0x1e6>
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	4642      	mov	r2, r8
 800a832:	4631      	mov	r1, r6
 800a834:	4628      	mov	r0, r5
 800a836:	47b8      	blx	r7
 800a838:	3001      	adds	r0, #1
 800a83a:	d12b      	bne.n	800a894 <_printf_float+0x23c>
 800a83c:	e767      	b.n	800a70e <_printf_float+0xb6>
 800a83e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a842:	f240 80dd 	bls.w	800aa00 <_printf_float+0x3a8>
 800a846:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a84a:	2200      	movs	r2, #0
 800a84c:	2300      	movs	r3, #0
 800a84e:	f7f6 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a852:	2800      	cmp	r0, #0
 800a854:	d033      	beq.n	800a8be <_printf_float+0x266>
 800a856:	4a37      	ldr	r2, [pc, #220]	@ (800a934 <_printf_float+0x2dc>)
 800a858:	2301      	movs	r3, #1
 800a85a:	4631      	mov	r1, r6
 800a85c:	4628      	mov	r0, r5
 800a85e:	47b8      	blx	r7
 800a860:	3001      	adds	r0, #1
 800a862:	f43f af54 	beq.w	800a70e <_printf_float+0xb6>
 800a866:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a86a:	4543      	cmp	r3, r8
 800a86c:	db02      	blt.n	800a874 <_printf_float+0x21c>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	07d8      	lsls	r0, r3, #31
 800a872:	d50f      	bpl.n	800a894 <_printf_float+0x23c>
 800a874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a878:	4631      	mov	r1, r6
 800a87a:	4628      	mov	r0, r5
 800a87c:	47b8      	blx	r7
 800a87e:	3001      	adds	r0, #1
 800a880:	f43f af45 	beq.w	800a70e <_printf_float+0xb6>
 800a884:	f04f 0900 	mov.w	r9, #0
 800a888:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a88c:	f104 0a1a 	add.w	sl, r4, #26
 800a890:	45c8      	cmp	r8, r9
 800a892:	dc09      	bgt.n	800a8a8 <_printf_float+0x250>
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	079b      	lsls	r3, r3, #30
 800a898:	f100 8103 	bmi.w	800aaa2 <_printf_float+0x44a>
 800a89c:	68e0      	ldr	r0, [r4, #12]
 800a89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8a0:	4298      	cmp	r0, r3
 800a8a2:	bfb8      	it	lt
 800a8a4:	4618      	movlt	r0, r3
 800a8a6:	e734      	b.n	800a712 <_printf_float+0xba>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4652      	mov	r2, sl
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	47b8      	blx	r7
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	f43f af2b 	beq.w	800a70e <_printf_float+0xb6>
 800a8b8:	f109 0901 	add.w	r9, r9, #1
 800a8bc:	e7e8      	b.n	800a890 <_printf_float+0x238>
 800a8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dc39      	bgt.n	800a938 <_printf_float+0x2e0>
 800a8c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a934 <_printf_float+0x2dc>)
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	47b8      	blx	r7
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f43f af1d 	beq.w	800a70e <_printf_float+0xb6>
 800a8d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a8d8:	ea59 0303 	orrs.w	r3, r9, r3
 800a8dc:	d102      	bne.n	800a8e4 <_printf_float+0x28c>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	07d9      	lsls	r1, r3, #31
 800a8e2:	d5d7      	bpl.n	800a894 <_printf_float+0x23c>
 800a8e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	47b8      	blx	r7
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	f43f af0d 	beq.w	800a70e <_printf_float+0xb6>
 800a8f4:	f04f 0a00 	mov.w	sl, #0
 800a8f8:	f104 0b1a 	add.w	fp, r4, #26
 800a8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fe:	425b      	negs	r3, r3
 800a900:	4553      	cmp	r3, sl
 800a902:	dc01      	bgt.n	800a908 <_printf_float+0x2b0>
 800a904:	464b      	mov	r3, r9
 800a906:	e793      	b.n	800a830 <_printf_float+0x1d8>
 800a908:	2301      	movs	r3, #1
 800a90a:	465a      	mov	r2, fp
 800a90c:	4631      	mov	r1, r6
 800a90e:	4628      	mov	r0, r5
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	f43f aefb 	beq.w	800a70e <_printf_float+0xb6>
 800a918:	f10a 0a01 	add.w	sl, sl, #1
 800a91c:	e7ee      	b.n	800a8fc <_printf_float+0x2a4>
 800a91e:	bf00      	nop
 800a920:	7fefffff 	.word	0x7fefffff
 800a924:	0800f03c 	.word	0x0800f03c
 800a928:	0800f040 	.word	0x0800f040
 800a92c:	0800f044 	.word	0x0800f044
 800a930:	0800f048 	.word	0x0800f048
 800a934:	0800f04c 	.word	0x0800f04c
 800a938:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a93a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a93e:	4553      	cmp	r3, sl
 800a940:	bfa8      	it	ge
 800a942:	4653      	movge	r3, sl
 800a944:	2b00      	cmp	r3, #0
 800a946:	4699      	mov	r9, r3
 800a948:	dc36      	bgt.n	800a9b8 <_printf_float+0x360>
 800a94a:	f04f 0b00 	mov.w	fp, #0
 800a94e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a952:	f104 021a 	add.w	r2, r4, #26
 800a956:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a958:	9306      	str	r3, [sp, #24]
 800a95a:	eba3 0309 	sub.w	r3, r3, r9
 800a95e:	455b      	cmp	r3, fp
 800a960:	dc31      	bgt.n	800a9c6 <_printf_float+0x36e>
 800a962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a964:	459a      	cmp	sl, r3
 800a966:	dc3a      	bgt.n	800a9de <_printf_float+0x386>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	07da      	lsls	r2, r3, #31
 800a96c:	d437      	bmi.n	800a9de <_printf_float+0x386>
 800a96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a970:	ebaa 0903 	sub.w	r9, sl, r3
 800a974:	9b06      	ldr	r3, [sp, #24]
 800a976:	ebaa 0303 	sub.w	r3, sl, r3
 800a97a:	4599      	cmp	r9, r3
 800a97c:	bfa8      	it	ge
 800a97e:	4699      	movge	r9, r3
 800a980:	f1b9 0f00 	cmp.w	r9, #0
 800a984:	dc33      	bgt.n	800a9ee <_printf_float+0x396>
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a98e:	f104 0b1a 	add.w	fp, r4, #26
 800a992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a994:	ebaa 0303 	sub.w	r3, sl, r3
 800a998:	eba3 0309 	sub.w	r3, r3, r9
 800a99c:	4543      	cmp	r3, r8
 800a99e:	f77f af79 	ble.w	800a894 <_printf_float+0x23c>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	465a      	mov	r2, fp
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	47b8      	blx	r7
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	f43f aeae 	beq.w	800a70e <_printf_float+0xb6>
 800a9b2:	f108 0801 	add.w	r8, r8, #1
 800a9b6:	e7ec      	b.n	800a992 <_printf_float+0x33a>
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4628      	mov	r0, r5
 800a9be:	47b8      	blx	r7
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d1c2      	bne.n	800a94a <_printf_float+0x2f2>
 800a9c4:	e6a3      	b.n	800a70e <_printf_float+0xb6>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	9206      	str	r2, [sp, #24]
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	f43f ae9c 	beq.w	800a70e <_printf_float+0xb6>
 800a9d6:	9a06      	ldr	r2, [sp, #24]
 800a9d8:	f10b 0b01 	add.w	fp, fp, #1
 800a9dc:	e7bb      	b.n	800a956 <_printf_float+0x2fe>
 800a9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b8      	blx	r7
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d1c0      	bne.n	800a96e <_printf_float+0x316>
 800a9ec:	e68f      	b.n	800a70e <_printf_float+0xb6>
 800a9ee:	9a06      	ldr	r2, [sp, #24]
 800a9f0:	464b      	mov	r3, r9
 800a9f2:	4442      	add	r2, r8
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d1c3      	bne.n	800a986 <_printf_float+0x32e>
 800a9fe:	e686      	b.n	800a70e <_printf_float+0xb6>
 800aa00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa04:	f1ba 0f01 	cmp.w	sl, #1
 800aa08:	dc01      	bgt.n	800aa0e <_printf_float+0x3b6>
 800aa0a:	07db      	lsls	r3, r3, #31
 800aa0c:	d536      	bpl.n	800aa7c <_printf_float+0x424>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4642      	mov	r2, r8
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f43f ae78 	beq.w	800a70e <_printf_float+0xb6>
 800aa1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f ae70 	beq.w	800a70e <_printf_float+0xb6>
 800aa2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa32:	2200      	movs	r2, #0
 800aa34:	2300      	movs	r3, #0
 800aa36:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aa3a:	f7f6 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa3e:	b9c0      	cbnz	r0, 800aa72 <_printf_float+0x41a>
 800aa40:	4653      	mov	r3, sl
 800aa42:	f108 0201 	add.w	r2, r8, #1
 800aa46:	4631      	mov	r1, r6
 800aa48:	4628      	mov	r0, r5
 800aa4a:	47b8      	blx	r7
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d10c      	bne.n	800aa6a <_printf_float+0x412>
 800aa50:	e65d      	b.n	800a70e <_printf_float+0xb6>
 800aa52:	2301      	movs	r3, #1
 800aa54:	465a      	mov	r2, fp
 800aa56:	4631      	mov	r1, r6
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b8      	blx	r7
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	f43f ae56 	beq.w	800a70e <_printf_float+0xb6>
 800aa62:	f108 0801 	add.w	r8, r8, #1
 800aa66:	45d0      	cmp	r8, sl
 800aa68:	dbf3      	blt.n	800aa52 <_printf_float+0x3fa>
 800aa6a:	464b      	mov	r3, r9
 800aa6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa70:	e6df      	b.n	800a832 <_printf_float+0x1da>
 800aa72:	f04f 0800 	mov.w	r8, #0
 800aa76:	f104 0b1a 	add.w	fp, r4, #26
 800aa7a:	e7f4      	b.n	800aa66 <_printf_float+0x40e>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4642      	mov	r2, r8
 800aa80:	e7e1      	b.n	800aa46 <_printf_float+0x3ee>
 800aa82:	2301      	movs	r3, #1
 800aa84:	464a      	mov	r2, r9
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b8      	blx	r7
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f ae3e 	beq.w	800a70e <_printf_float+0xb6>
 800aa92:	f108 0801 	add.w	r8, r8, #1
 800aa96:	68e3      	ldr	r3, [r4, #12]
 800aa98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa9a:	1a5b      	subs	r3, r3, r1
 800aa9c:	4543      	cmp	r3, r8
 800aa9e:	dcf0      	bgt.n	800aa82 <_printf_float+0x42a>
 800aaa0:	e6fc      	b.n	800a89c <_printf_float+0x244>
 800aaa2:	f04f 0800 	mov.w	r8, #0
 800aaa6:	f104 0919 	add.w	r9, r4, #25
 800aaaa:	e7f4      	b.n	800aa96 <_printf_float+0x43e>

0800aaac <_printf_common>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	4616      	mov	r6, r2
 800aab2:	4698      	mov	r8, r3
 800aab4:	688a      	ldr	r2, [r1, #8]
 800aab6:	690b      	ldr	r3, [r1, #16]
 800aab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	bfb8      	it	lt
 800aac0:	4613      	movlt	r3, r2
 800aac2:	6033      	str	r3, [r6, #0]
 800aac4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aac8:	4607      	mov	r7, r0
 800aaca:	460c      	mov	r4, r1
 800aacc:	b10a      	cbz	r2, 800aad2 <_printf_common+0x26>
 800aace:	3301      	adds	r3, #1
 800aad0:	6033      	str	r3, [r6, #0]
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	0699      	lsls	r1, r3, #26
 800aad6:	bf42      	ittt	mi
 800aad8:	6833      	ldrmi	r3, [r6, #0]
 800aada:	3302      	addmi	r3, #2
 800aadc:	6033      	strmi	r3, [r6, #0]
 800aade:	6825      	ldr	r5, [r4, #0]
 800aae0:	f015 0506 	ands.w	r5, r5, #6
 800aae4:	d106      	bne.n	800aaf4 <_printf_common+0x48>
 800aae6:	f104 0a19 	add.w	sl, r4, #25
 800aaea:	68e3      	ldr	r3, [r4, #12]
 800aaec:	6832      	ldr	r2, [r6, #0]
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc26      	bgt.n	800ab42 <_printf_common+0x96>
 800aaf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aaf8:	6822      	ldr	r2, [r4, #0]
 800aafa:	3b00      	subs	r3, #0
 800aafc:	bf18      	it	ne
 800aafe:	2301      	movne	r3, #1
 800ab00:	0692      	lsls	r2, r2, #26
 800ab02:	d42b      	bmi.n	800ab5c <_printf_common+0xb0>
 800ab04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab08:	4641      	mov	r1, r8
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	47c8      	blx	r9
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d01e      	beq.n	800ab50 <_printf_common+0xa4>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	f003 0306 	and.w	r3, r3, #6
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	bf02      	ittt	eq
 800ab1e:	68e5      	ldreq	r5, [r4, #12]
 800ab20:	6833      	ldreq	r3, [r6, #0]
 800ab22:	1aed      	subeq	r5, r5, r3
 800ab24:	68a3      	ldr	r3, [r4, #8]
 800ab26:	bf0c      	ite	eq
 800ab28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab2c:	2500      	movne	r5, #0
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	bfc4      	itt	gt
 800ab32:	1a9b      	subgt	r3, r3, r2
 800ab34:	18ed      	addgt	r5, r5, r3
 800ab36:	2600      	movs	r6, #0
 800ab38:	341a      	adds	r4, #26
 800ab3a:	42b5      	cmp	r5, r6
 800ab3c:	d11a      	bne.n	800ab74 <_printf_common+0xc8>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e008      	b.n	800ab54 <_printf_common+0xa8>
 800ab42:	2301      	movs	r3, #1
 800ab44:	4652      	mov	r2, sl
 800ab46:	4641      	mov	r1, r8
 800ab48:	4638      	mov	r0, r7
 800ab4a:	47c8      	blx	r9
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d103      	bne.n	800ab58 <_printf_common+0xac>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab58:	3501      	adds	r5, #1
 800ab5a:	e7c6      	b.n	800aaea <_printf_common+0x3e>
 800ab5c:	18e1      	adds	r1, r4, r3
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	2030      	movs	r0, #48	@ 0x30
 800ab62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab66:	4422      	add	r2, r4
 800ab68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab70:	3302      	adds	r3, #2
 800ab72:	e7c7      	b.n	800ab04 <_printf_common+0x58>
 800ab74:	2301      	movs	r3, #1
 800ab76:	4622      	mov	r2, r4
 800ab78:	4641      	mov	r1, r8
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	47c8      	blx	r9
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d0e6      	beq.n	800ab50 <_printf_common+0xa4>
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7d9      	b.n	800ab3a <_printf_common+0x8e>
	...

0800ab88 <_printf_i>:
 800ab88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	7e0f      	ldrb	r7, [r1, #24]
 800ab8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab90:	2f78      	cmp	r7, #120	@ 0x78
 800ab92:	4691      	mov	r9, r2
 800ab94:	4680      	mov	r8, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	469a      	mov	sl, r3
 800ab9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab9e:	d807      	bhi.n	800abb0 <_printf_i+0x28>
 800aba0:	2f62      	cmp	r7, #98	@ 0x62
 800aba2:	d80a      	bhi.n	800abba <_printf_i+0x32>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	f000 80d2 	beq.w	800ad4e <_printf_i+0x1c6>
 800abaa:	2f58      	cmp	r7, #88	@ 0x58
 800abac:	f000 80b9 	beq.w	800ad22 <_printf_i+0x19a>
 800abb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abb8:	e03a      	b.n	800ac30 <_printf_i+0xa8>
 800abba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abbe:	2b15      	cmp	r3, #21
 800abc0:	d8f6      	bhi.n	800abb0 <_printf_i+0x28>
 800abc2:	a101      	add	r1, pc, #4	@ (adr r1, 800abc8 <_printf_i+0x40>)
 800abc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	0800ac35 	.word	0x0800ac35
 800abd0:	0800abb1 	.word	0x0800abb1
 800abd4:	0800abb1 	.word	0x0800abb1
 800abd8:	0800abb1 	.word	0x0800abb1
 800abdc:	0800abb1 	.word	0x0800abb1
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800abb1 	.word	0x0800abb1
 800abe8:	0800abb1 	.word	0x0800abb1
 800abec:	0800abb1 	.word	0x0800abb1
 800abf0:	0800abb1 	.word	0x0800abb1
 800abf4:	0800ad35 	.word	0x0800ad35
 800abf8:	0800ac5f 	.word	0x0800ac5f
 800abfc:	0800acef 	.word	0x0800acef
 800ac00:	0800abb1 	.word	0x0800abb1
 800ac04:	0800abb1 	.word	0x0800abb1
 800ac08:	0800ad57 	.word	0x0800ad57
 800ac0c:	0800abb1 	.word	0x0800abb1
 800ac10:	0800ac5f 	.word	0x0800ac5f
 800ac14:	0800abb1 	.word	0x0800abb1
 800ac18:	0800abb1 	.word	0x0800abb1
 800ac1c:	0800acf7 	.word	0x0800acf7
 800ac20:	6833      	ldr	r3, [r6, #0]
 800ac22:	1d1a      	adds	r2, r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6032      	str	r2, [r6, #0]
 800ac28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac30:	2301      	movs	r3, #1
 800ac32:	e09d      	b.n	800ad70 <_printf_i+0x1e8>
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	6820      	ldr	r0, [r4, #0]
 800ac38:	1d19      	adds	r1, r3, #4
 800ac3a:	6031      	str	r1, [r6, #0]
 800ac3c:	0606      	lsls	r6, r0, #24
 800ac3e:	d501      	bpl.n	800ac44 <_printf_i+0xbc>
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	e003      	b.n	800ac4c <_printf_i+0xc4>
 800ac44:	0645      	lsls	r5, r0, #25
 800ac46:	d5fb      	bpl.n	800ac40 <_printf_i+0xb8>
 800ac48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac4c:	2d00      	cmp	r5, #0
 800ac4e:	da03      	bge.n	800ac58 <_printf_i+0xd0>
 800ac50:	232d      	movs	r3, #45	@ 0x2d
 800ac52:	426d      	negs	r5, r5
 800ac54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac58:	4859      	ldr	r0, [pc, #356]	@ (800adc0 <_printf_i+0x238>)
 800ac5a:	230a      	movs	r3, #10
 800ac5c:	e011      	b.n	800ac82 <_printf_i+0xfa>
 800ac5e:	6821      	ldr	r1, [r4, #0]
 800ac60:	6833      	ldr	r3, [r6, #0]
 800ac62:	0608      	lsls	r0, r1, #24
 800ac64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac68:	d402      	bmi.n	800ac70 <_printf_i+0xe8>
 800ac6a:	0649      	lsls	r1, r1, #25
 800ac6c:	bf48      	it	mi
 800ac6e:	b2ad      	uxthmi	r5, r5
 800ac70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac72:	4853      	ldr	r0, [pc, #332]	@ (800adc0 <_printf_i+0x238>)
 800ac74:	6033      	str	r3, [r6, #0]
 800ac76:	bf14      	ite	ne
 800ac78:	230a      	movne	r3, #10
 800ac7a:	2308      	moveq	r3, #8
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac82:	6866      	ldr	r6, [r4, #4]
 800ac84:	60a6      	str	r6, [r4, #8]
 800ac86:	2e00      	cmp	r6, #0
 800ac88:	bfa2      	ittt	ge
 800ac8a:	6821      	ldrge	r1, [r4, #0]
 800ac8c:	f021 0104 	bicge.w	r1, r1, #4
 800ac90:	6021      	strge	r1, [r4, #0]
 800ac92:	b90d      	cbnz	r5, 800ac98 <_printf_i+0x110>
 800ac94:	2e00      	cmp	r6, #0
 800ac96:	d04b      	beq.n	800ad30 <_printf_i+0x1a8>
 800ac98:	4616      	mov	r6, r2
 800ac9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac9e:	fb03 5711 	mls	r7, r3, r1, r5
 800aca2:	5dc7      	ldrb	r7, [r0, r7]
 800aca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aca8:	462f      	mov	r7, r5
 800acaa:	42bb      	cmp	r3, r7
 800acac:	460d      	mov	r5, r1
 800acae:	d9f4      	bls.n	800ac9a <_printf_i+0x112>
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d10b      	bne.n	800accc <_printf_i+0x144>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	07df      	lsls	r7, r3, #31
 800acb8:	d508      	bpl.n	800accc <_printf_i+0x144>
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	6861      	ldr	r1, [r4, #4]
 800acbe:	4299      	cmp	r1, r3
 800acc0:	bfde      	ittt	le
 800acc2:	2330      	movle	r3, #48	@ 0x30
 800acc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acc8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800accc:	1b92      	subs	r2, r2, r6
 800acce:	6122      	str	r2, [r4, #16]
 800acd0:	f8cd a000 	str.w	sl, [sp]
 800acd4:	464b      	mov	r3, r9
 800acd6:	aa03      	add	r2, sp, #12
 800acd8:	4621      	mov	r1, r4
 800acda:	4640      	mov	r0, r8
 800acdc:	f7ff fee6 	bl	800aaac <_printf_common>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d14a      	bne.n	800ad7a <_printf_i+0x1f2>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ace8:	b004      	add	sp, #16
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	f043 0320 	orr.w	r3, r3, #32
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	4833      	ldr	r0, [pc, #204]	@ (800adc4 <_printf_i+0x23c>)
 800acf8:	2778      	movs	r7, #120	@ 0x78
 800acfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	6831      	ldr	r1, [r6, #0]
 800ad02:	061f      	lsls	r7, r3, #24
 800ad04:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad08:	d402      	bmi.n	800ad10 <_printf_i+0x188>
 800ad0a:	065f      	lsls	r7, r3, #25
 800ad0c:	bf48      	it	mi
 800ad0e:	b2ad      	uxthmi	r5, r5
 800ad10:	6031      	str	r1, [r6, #0]
 800ad12:	07d9      	lsls	r1, r3, #31
 800ad14:	bf44      	itt	mi
 800ad16:	f043 0320 	orrmi.w	r3, r3, #32
 800ad1a:	6023      	strmi	r3, [r4, #0]
 800ad1c:	b11d      	cbz	r5, 800ad26 <_printf_i+0x19e>
 800ad1e:	2310      	movs	r3, #16
 800ad20:	e7ac      	b.n	800ac7c <_printf_i+0xf4>
 800ad22:	4827      	ldr	r0, [pc, #156]	@ (800adc0 <_printf_i+0x238>)
 800ad24:	e7e9      	b.n	800acfa <_printf_i+0x172>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	f023 0320 	bic.w	r3, r3, #32
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	e7f6      	b.n	800ad1e <_printf_i+0x196>
 800ad30:	4616      	mov	r6, r2
 800ad32:	e7bd      	b.n	800acb0 <_printf_i+0x128>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	6825      	ldr	r5, [r4, #0]
 800ad38:	6961      	ldr	r1, [r4, #20]
 800ad3a:	1d18      	adds	r0, r3, #4
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	062e      	lsls	r6, r5, #24
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	d501      	bpl.n	800ad48 <_printf_i+0x1c0>
 800ad44:	6019      	str	r1, [r3, #0]
 800ad46:	e002      	b.n	800ad4e <_printf_i+0x1c6>
 800ad48:	0668      	lsls	r0, r5, #25
 800ad4a:	d5fb      	bpl.n	800ad44 <_printf_i+0x1bc>
 800ad4c:	8019      	strh	r1, [r3, #0]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6123      	str	r3, [r4, #16]
 800ad52:	4616      	mov	r6, r2
 800ad54:	e7bc      	b.n	800acd0 <_printf_i+0x148>
 800ad56:	6833      	ldr	r3, [r6, #0]
 800ad58:	1d1a      	adds	r2, r3, #4
 800ad5a:	6032      	str	r2, [r6, #0]
 800ad5c:	681e      	ldr	r6, [r3, #0]
 800ad5e:	6862      	ldr	r2, [r4, #4]
 800ad60:	2100      	movs	r1, #0
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7f5 fa34 	bl	80001d0 <memchr>
 800ad68:	b108      	cbz	r0, 800ad6e <_printf_i+0x1e6>
 800ad6a:	1b80      	subs	r0, r0, r6
 800ad6c:	6060      	str	r0, [r4, #4]
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	6123      	str	r3, [r4, #16]
 800ad72:	2300      	movs	r3, #0
 800ad74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad78:	e7aa      	b.n	800acd0 <_printf_i+0x148>
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	4649      	mov	r1, r9
 800ad80:	4640      	mov	r0, r8
 800ad82:	47d0      	blx	sl
 800ad84:	3001      	adds	r0, #1
 800ad86:	d0ad      	beq.n	800ace4 <_printf_i+0x15c>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	079b      	lsls	r3, r3, #30
 800ad8c:	d413      	bmi.n	800adb6 <_printf_i+0x22e>
 800ad8e:	68e0      	ldr	r0, [r4, #12]
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	4298      	cmp	r0, r3
 800ad94:	bfb8      	it	lt
 800ad96:	4618      	movlt	r0, r3
 800ad98:	e7a6      	b.n	800ace8 <_printf_i+0x160>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	4649      	mov	r1, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	47d0      	blx	sl
 800ada4:	3001      	adds	r0, #1
 800ada6:	d09d      	beq.n	800ace4 <_printf_i+0x15c>
 800ada8:	3501      	adds	r5, #1
 800adaa:	68e3      	ldr	r3, [r4, #12]
 800adac:	9903      	ldr	r1, [sp, #12]
 800adae:	1a5b      	subs	r3, r3, r1
 800adb0:	42ab      	cmp	r3, r5
 800adb2:	dcf2      	bgt.n	800ad9a <_printf_i+0x212>
 800adb4:	e7eb      	b.n	800ad8e <_printf_i+0x206>
 800adb6:	2500      	movs	r5, #0
 800adb8:	f104 0619 	add.w	r6, r4, #25
 800adbc:	e7f5      	b.n	800adaa <_printf_i+0x222>
 800adbe:	bf00      	nop
 800adc0:	0800f04e 	.word	0x0800f04e
 800adc4:	0800f05f 	.word	0x0800f05f

0800adc8 <_scanf_float>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	b087      	sub	sp, #28
 800adce:	4617      	mov	r7, r2
 800add0:	9303      	str	r3, [sp, #12]
 800add2:	688b      	ldr	r3, [r1, #8]
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800adda:	bf81      	itttt	hi
 800addc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ade0:	eb03 0b05 	addhi.w	fp, r3, r5
 800ade4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ade8:	608b      	strhi	r3, [r1, #8]
 800adea:	680b      	ldr	r3, [r1, #0]
 800adec:	460a      	mov	r2, r1
 800adee:	f04f 0500 	mov.w	r5, #0
 800adf2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800adf6:	f842 3b1c 	str.w	r3, [r2], #28
 800adfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800adfe:	4680      	mov	r8, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	bf98      	it	ls
 800ae04:	f04f 0b00 	movls.w	fp, #0
 800ae08:	9201      	str	r2, [sp, #4]
 800ae0a:	4616      	mov	r6, r2
 800ae0c:	46aa      	mov	sl, r5
 800ae0e:	46a9      	mov	r9, r5
 800ae10:	9502      	str	r5, [sp, #8]
 800ae12:	68a2      	ldr	r2, [r4, #8]
 800ae14:	b152      	cbz	r2, 800ae2c <_scanf_float+0x64>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ae1c:	d864      	bhi.n	800aee8 <_scanf_float+0x120>
 800ae1e:	2b40      	cmp	r3, #64	@ 0x40
 800ae20:	d83c      	bhi.n	800ae9c <_scanf_float+0xd4>
 800ae22:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ae26:	b2c8      	uxtb	r0, r1
 800ae28:	280e      	cmp	r0, #14
 800ae2a:	d93a      	bls.n	800aea2 <_scanf_float+0xda>
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	d003      	beq.n	800ae3a <_scanf_float+0x72>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ae3e:	f1ba 0f01 	cmp.w	sl, #1
 800ae42:	f200 8117 	bhi.w	800b074 <_scanf_float+0x2ac>
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	429e      	cmp	r6, r3
 800ae4a:	f200 8108 	bhi.w	800b05e <_scanf_float+0x296>
 800ae4e:	2001      	movs	r0, #1
 800ae50:	b007      	add	sp, #28
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ae5a:	2a0d      	cmp	r2, #13
 800ae5c:	d8e6      	bhi.n	800ae2c <_scanf_float+0x64>
 800ae5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ae64 <_scanf_float+0x9c>)
 800ae60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae64:	0800afab 	.word	0x0800afab
 800ae68:	0800ae2d 	.word	0x0800ae2d
 800ae6c:	0800ae2d 	.word	0x0800ae2d
 800ae70:	0800ae2d 	.word	0x0800ae2d
 800ae74:	0800b00b 	.word	0x0800b00b
 800ae78:	0800afe3 	.word	0x0800afe3
 800ae7c:	0800ae2d 	.word	0x0800ae2d
 800ae80:	0800ae2d 	.word	0x0800ae2d
 800ae84:	0800afb9 	.word	0x0800afb9
 800ae88:	0800ae2d 	.word	0x0800ae2d
 800ae8c:	0800ae2d 	.word	0x0800ae2d
 800ae90:	0800ae2d 	.word	0x0800ae2d
 800ae94:	0800ae2d 	.word	0x0800ae2d
 800ae98:	0800af71 	.word	0x0800af71
 800ae9c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aea0:	e7db      	b.n	800ae5a <_scanf_float+0x92>
 800aea2:	290e      	cmp	r1, #14
 800aea4:	d8c2      	bhi.n	800ae2c <_scanf_float+0x64>
 800aea6:	a001      	add	r0, pc, #4	@ (adr r0, 800aeac <_scanf_float+0xe4>)
 800aea8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aeac:	0800af61 	.word	0x0800af61
 800aeb0:	0800ae2d 	.word	0x0800ae2d
 800aeb4:	0800af61 	.word	0x0800af61
 800aeb8:	0800aff7 	.word	0x0800aff7
 800aebc:	0800ae2d 	.word	0x0800ae2d
 800aec0:	0800af09 	.word	0x0800af09
 800aec4:	0800af47 	.word	0x0800af47
 800aec8:	0800af47 	.word	0x0800af47
 800aecc:	0800af47 	.word	0x0800af47
 800aed0:	0800af47 	.word	0x0800af47
 800aed4:	0800af47 	.word	0x0800af47
 800aed8:	0800af47 	.word	0x0800af47
 800aedc:	0800af47 	.word	0x0800af47
 800aee0:	0800af47 	.word	0x0800af47
 800aee4:	0800af47 	.word	0x0800af47
 800aee8:	2b6e      	cmp	r3, #110	@ 0x6e
 800aeea:	d809      	bhi.n	800af00 <_scanf_float+0x138>
 800aeec:	2b60      	cmp	r3, #96	@ 0x60
 800aeee:	d8b2      	bhi.n	800ae56 <_scanf_float+0x8e>
 800aef0:	2b54      	cmp	r3, #84	@ 0x54
 800aef2:	d07b      	beq.n	800afec <_scanf_float+0x224>
 800aef4:	2b59      	cmp	r3, #89	@ 0x59
 800aef6:	d199      	bne.n	800ae2c <_scanf_float+0x64>
 800aef8:	2d07      	cmp	r5, #7
 800aefa:	d197      	bne.n	800ae2c <_scanf_float+0x64>
 800aefc:	2508      	movs	r5, #8
 800aefe:	e02c      	b.n	800af5a <_scanf_float+0x192>
 800af00:	2b74      	cmp	r3, #116	@ 0x74
 800af02:	d073      	beq.n	800afec <_scanf_float+0x224>
 800af04:	2b79      	cmp	r3, #121	@ 0x79
 800af06:	e7f6      	b.n	800aef6 <_scanf_float+0x12e>
 800af08:	6821      	ldr	r1, [r4, #0]
 800af0a:	05c8      	lsls	r0, r1, #23
 800af0c:	d51b      	bpl.n	800af46 <_scanf_float+0x17e>
 800af0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800af12:	6021      	str	r1, [r4, #0]
 800af14:	f109 0901 	add.w	r9, r9, #1
 800af18:	f1bb 0f00 	cmp.w	fp, #0
 800af1c:	d003      	beq.n	800af26 <_scanf_float+0x15e>
 800af1e:	3201      	adds	r2, #1
 800af20:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800af24:	60a2      	str	r2, [r4, #8]
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	3b01      	subs	r3, #1
 800af2a:	60a3      	str	r3, [r4, #8]
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	3301      	adds	r3, #1
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3b01      	subs	r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	f340 8087 	ble.w	800b04c <_scanf_float+0x284>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	e765      	b.n	800ae12 <_scanf_float+0x4a>
 800af46:	eb1a 0105 	adds.w	r1, sl, r5
 800af4a:	f47f af6f 	bne.w	800ae2c <_scanf_float+0x64>
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800af54:	6022      	str	r2, [r4, #0]
 800af56:	460d      	mov	r5, r1
 800af58:	468a      	mov	sl, r1
 800af5a:	f806 3b01 	strb.w	r3, [r6], #1
 800af5e:	e7e2      	b.n	800af26 <_scanf_float+0x15e>
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	0610      	lsls	r0, r2, #24
 800af64:	f57f af62 	bpl.w	800ae2c <_scanf_float+0x64>
 800af68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af6c:	6022      	str	r2, [r4, #0]
 800af6e:	e7f4      	b.n	800af5a <_scanf_float+0x192>
 800af70:	f1ba 0f00 	cmp.w	sl, #0
 800af74:	d10e      	bne.n	800af94 <_scanf_float+0x1cc>
 800af76:	f1b9 0f00 	cmp.w	r9, #0
 800af7a:	d10e      	bne.n	800af9a <_scanf_float+0x1d2>
 800af7c:	6822      	ldr	r2, [r4, #0]
 800af7e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af82:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af86:	d108      	bne.n	800af9a <_scanf_float+0x1d2>
 800af88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af8c:	6022      	str	r2, [r4, #0]
 800af8e:	f04f 0a01 	mov.w	sl, #1
 800af92:	e7e2      	b.n	800af5a <_scanf_float+0x192>
 800af94:	f1ba 0f02 	cmp.w	sl, #2
 800af98:	d055      	beq.n	800b046 <_scanf_float+0x27e>
 800af9a:	2d01      	cmp	r5, #1
 800af9c:	d002      	beq.n	800afa4 <_scanf_float+0x1dc>
 800af9e:	2d04      	cmp	r5, #4
 800afa0:	f47f af44 	bne.w	800ae2c <_scanf_float+0x64>
 800afa4:	3501      	adds	r5, #1
 800afa6:	b2ed      	uxtb	r5, r5
 800afa8:	e7d7      	b.n	800af5a <_scanf_float+0x192>
 800afaa:	f1ba 0f01 	cmp.w	sl, #1
 800afae:	f47f af3d 	bne.w	800ae2c <_scanf_float+0x64>
 800afb2:	f04f 0a02 	mov.w	sl, #2
 800afb6:	e7d0      	b.n	800af5a <_scanf_float+0x192>
 800afb8:	b97d      	cbnz	r5, 800afda <_scanf_float+0x212>
 800afba:	f1b9 0f00 	cmp.w	r9, #0
 800afbe:	f47f af38 	bne.w	800ae32 <_scanf_float+0x6a>
 800afc2:	6822      	ldr	r2, [r4, #0]
 800afc4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800afc8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800afcc:	f040 8108 	bne.w	800b1e0 <_scanf_float+0x418>
 800afd0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800afd4:	6022      	str	r2, [r4, #0]
 800afd6:	2501      	movs	r5, #1
 800afd8:	e7bf      	b.n	800af5a <_scanf_float+0x192>
 800afda:	2d03      	cmp	r5, #3
 800afdc:	d0e2      	beq.n	800afa4 <_scanf_float+0x1dc>
 800afde:	2d05      	cmp	r5, #5
 800afe0:	e7de      	b.n	800afa0 <_scanf_float+0x1d8>
 800afe2:	2d02      	cmp	r5, #2
 800afe4:	f47f af22 	bne.w	800ae2c <_scanf_float+0x64>
 800afe8:	2503      	movs	r5, #3
 800afea:	e7b6      	b.n	800af5a <_scanf_float+0x192>
 800afec:	2d06      	cmp	r5, #6
 800afee:	f47f af1d 	bne.w	800ae2c <_scanf_float+0x64>
 800aff2:	2507      	movs	r5, #7
 800aff4:	e7b1      	b.n	800af5a <_scanf_float+0x192>
 800aff6:	6822      	ldr	r2, [r4, #0]
 800aff8:	0591      	lsls	r1, r2, #22
 800affa:	f57f af17 	bpl.w	800ae2c <_scanf_float+0x64>
 800affe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b002:	6022      	str	r2, [r4, #0]
 800b004:	f8cd 9008 	str.w	r9, [sp, #8]
 800b008:	e7a7      	b.n	800af5a <_scanf_float+0x192>
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b010:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b014:	d006      	beq.n	800b024 <_scanf_float+0x25c>
 800b016:	0550      	lsls	r0, r2, #21
 800b018:	f57f af08 	bpl.w	800ae2c <_scanf_float+0x64>
 800b01c:	f1b9 0f00 	cmp.w	r9, #0
 800b020:	f000 80de 	beq.w	800b1e0 <_scanf_float+0x418>
 800b024:	0591      	lsls	r1, r2, #22
 800b026:	bf58      	it	pl
 800b028:	9902      	ldrpl	r1, [sp, #8]
 800b02a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b02e:	bf58      	it	pl
 800b030:	eba9 0101 	subpl.w	r1, r9, r1
 800b034:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b038:	bf58      	it	pl
 800b03a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b03e:	6022      	str	r2, [r4, #0]
 800b040:	f04f 0900 	mov.w	r9, #0
 800b044:	e789      	b.n	800af5a <_scanf_float+0x192>
 800b046:	f04f 0a03 	mov.w	sl, #3
 800b04a:	e786      	b.n	800af5a <_scanf_float+0x192>
 800b04c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b050:	4639      	mov	r1, r7
 800b052:	4640      	mov	r0, r8
 800b054:	4798      	blx	r3
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f aedb 	beq.w	800ae12 <_scanf_float+0x4a>
 800b05c:	e6e6      	b.n	800ae2c <_scanf_float+0x64>
 800b05e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b066:	463a      	mov	r2, r7
 800b068:	4640      	mov	r0, r8
 800b06a:	4798      	blx	r3
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	3b01      	subs	r3, #1
 800b070:	6123      	str	r3, [r4, #16]
 800b072:	e6e8      	b.n	800ae46 <_scanf_float+0x7e>
 800b074:	1e6b      	subs	r3, r5, #1
 800b076:	2b06      	cmp	r3, #6
 800b078:	d824      	bhi.n	800b0c4 <_scanf_float+0x2fc>
 800b07a:	2d02      	cmp	r5, #2
 800b07c:	d836      	bhi.n	800b0ec <_scanf_float+0x324>
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	429e      	cmp	r6, r3
 800b082:	f67f aee4 	bls.w	800ae4e <_scanf_float+0x86>
 800b086:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b08a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b08e:	463a      	mov	r2, r7
 800b090:	4640      	mov	r0, r8
 800b092:	4798      	blx	r3
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	3b01      	subs	r3, #1
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	e7f0      	b.n	800b07e <_scanf_float+0x2b6>
 800b09c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b0a4:	463a      	mov	r2, r7
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	4798      	blx	r3
 800b0aa:	6923      	ldr	r3, [r4, #16]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	6123      	str	r3, [r4, #16]
 800b0b0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b0b4:	fa5f fa8a 	uxtb.w	sl, sl
 800b0b8:	f1ba 0f02 	cmp.w	sl, #2
 800b0bc:	d1ee      	bne.n	800b09c <_scanf_float+0x2d4>
 800b0be:	3d03      	subs	r5, #3
 800b0c0:	b2ed      	uxtb	r5, r5
 800b0c2:	1b76      	subs	r6, r6, r5
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	05da      	lsls	r2, r3, #23
 800b0c8:	d530      	bpl.n	800b12c <_scanf_float+0x364>
 800b0ca:	055b      	lsls	r3, r3, #21
 800b0cc:	d511      	bpl.n	800b0f2 <_scanf_float+0x32a>
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	429e      	cmp	r6, r3
 800b0d2:	f67f aebc 	bls.w	800ae4e <_scanf_float+0x86>
 800b0d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0de:	463a      	mov	r2, r7
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	4798      	blx	r3
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	e7f0      	b.n	800b0ce <_scanf_float+0x306>
 800b0ec:	46aa      	mov	sl, r5
 800b0ee:	46b3      	mov	fp, r6
 800b0f0:	e7de      	b.n	800b0b0 <_scanf_float+0x2e8>
 800b0f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	2965      	cmp	r1, #101	@ 0x65
 800b0fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b0fe:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	d00c      	beq.n	800b120 <_scanf_float+0x358>
 800b106:	2945      	cmp	r1, #69	@ 0x45
 800b108:	d00a      	beq.n	800b120 <_scanf_float+0x358>
 800b10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b10e:	463a      	mov	r2, r7
 800b110:	4640      	mov	r0, r8
 800b112:	4798      	blx	r3
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	1eb5      	subs	r5, r6, #2
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b124:	463a      	mov	r2, r7
 800b126:	4640      	mov	r0, r8
 800b128:	4798      	blx	r3
 800b12a:	462e      	mov	r6, r5
 800b12c:	6822      	ldr	r2, [r4, #0]
 800b12e:	f012 0210 	ands.w	r2, r2, #16
 800b132:	d001      	beq.n	800b138 <_scanf_float+0x370>
 800b134:	2000      	movs	r0, #0
 800b136:	e68b      	b.n	800ae50 <_scanf_float+0x88>
 800b138:	7032      	strb	r2, [r6, #0]
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b144:	d11c      	bne.n	800b180 <_scanf_float+0x3b8>
 800b146:	9b02      	ldr	r3, [sp, #8]
 800b148:	454b      	cmp	r3, r9
 800b14a:	eba3 0209 	sub.w	r2, r3, r9
 800b14e:	d123      	bne.n	800b198 <_scanf_float+0x3d0>
 800b150:	9901      	ldr	r1, [sp, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	4640      	mov	r0, r8
 800b156:	f002 fd93 	bl	800dc80 <_strtod_r>
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	6821      	ldr	r1, [r4, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f011 0f02 	tst.w	r1, #2
 800b164:	ec57 6b10 	vmov	r6, r7, d0
 800b168:	f103 0204 	add.w	r2, r3, #4
 800b16c:	d01f      	beq.n	800b1ae <_scanf_float+0x3e6>
 800b16e:	9903      	ldr	r1, [sp, #12]
 800b170:	600a      	str	r2, [r1, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	e9c3 6700 	strd	r6, r7, [r3]
 800b178:	68e3      	ldr	r3, [r4, #12]
 800b17a:	3301      	adds	r3, #1
 800b17c:	60e3      	str	r3, [r4, #12]
 800b17e:	e7d9      	b.n	800b134 <_scanf_float+0x36c>
 800b180:	9b04      	ldr	r3, [sp, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0e4      	beq.n	800b150 <_scanf_float+0x388>
 800b186:	9905      	ldr	r1, [sp, #20]
 800b188:	230a      	movs	r3, #10
 800b18a:	3101      	adds	r1, #1
 800b18c:	4640      	mov	r0, r8
 800b18e:	f002 fdf7 	bl	800dd80 <_strtol_r>
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	9e05      	ldr	r6, [sp, #20]
 800b196:	1ac2      	subs	r2, r0, r3
 800b198:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b19c:	429e      	cmp	r6, r3
 800b19e:	bf28      	it	cs
 800b1a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b1a4:	4910      	ldr	r1, [pc, #64]	@ (800b1e8 <_scanf_float+0x420>)
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f988 	bl	800b4bc <siprintf>
 800b1ac:	e7d0      	b.n	800b150 <_scanf_float+0x388>
 800b1ae:	f011 0f04 	tst.w	r1, #4
 800b1b2:	9903      	ldr	r1, [sp, #12]
 800b1b4:	600a      	str	r2, [r1, #0]
 800b1b6:	d1dc      	bne.n	800b172 <_scanf_float+0x3aa>
 800b1b8:	681d      	ldr	r5, [r3, #0]
 800b1ba:	4632      	mov	r2, r6
 800b1bc:	463b      	mov	r3, r7
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 fcb3 	bl	8000b2c <__aeabi_dcmpun>
 800b1c6:	b128      	cbz	r0, 800b1d4 <_scanf_float+0x40c>
 800b1c8:	4808      	ldr	r0, [pc, #32]	@ (800b1ec <_scanf_float+0x424>)
 800b1ca:	f000 fb53 	bl	800b874 <nanf>
 800b1ce:	ed85 0a00 	vstr	s0, [r5]
 800b1d2:	e7d1      	b.n	800b178 <_scanf_float+0x3b0>
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	f7f5 fd06 	bl	8000be8 <__aeabi_d2f>
 800b1dc:	6028      	str	r0, [r5, #0]
 800b1de:	e7cb      	b.n	800b178 <_scanf_float+0x3b0>
 800b1e0:	f04f 0900 	mov.w	r9, #0
 800b1e4:	e629      	b.n	800ae3a <_scanf_float+0x72>
 800b1e6:	bf00      	nop
 800b1e8:	0800f070 	.word	0x0800f070
 800b1ec:	0800f405 	.word	0x0800f405

0800b1f0 <std>:
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	b510      	push	{r4, lr}
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b1fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1fe:	6083      	str	r3, [r0, #8]
 800b200:	8181      	strh	r1, [r0, #12]
 800b202:	6643      	str	r3, [r0, #100]	@ 0x64
 800b204:	81c2      	strh	r2, [r0, #14]
 800b206:	6183      	str	r3, [r0, #24]
 800b208:	4619      	mov	r1, r3
 800b20a:	2208      	movs	r2, #8
 800b20c:	305c      	adds	r0, #92	@ 0x5c
 800b20e:	f000 fa4d 	bl	800b6ac <memset>
 800b212:	4b0d      	ldr	r3, [pc, #52]	@ (800b248 <std+0x58>)
 800b214:	6263      	str	r3, [r4, #36]	@ 0x24
 800b216:	4b0d      	ldr	r3, [pc, #52]	@ (800b24c <std+0x5c>)
 800b218:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b21a:	4b0d      	ldr	r3, [pc, #52]	@ (800b250 <std+0x60>)
 800b21c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b21e:	4b0d      	ldr	r3, [pc, #52]	@ (800b254 <std+0x64>)
 800b220:	6323      	str	r3, [r4, #48]	@ 0x30
 800b222:	4b0d      	ldr	r3, [pc, #52]	@ (800b258 <std+0x68>)
 800b224:	6224      	str	r4, [r4, #32]
 800b226:	429c      	cmp	r4, r3
 800b228:	d006      	beq.n	800b238 <std+0x48>
 800b22a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b22e:	4294      	cmp	r4, r2
 800b230:	d002      	beq.n	800b238 <std+0x48>
 800b232:	33d0      	adds	r3, #208	@ 0xd0
 800b234:	429c      	cmp	r4, r3
 800b236:	d105      	bne.n	800b244 <std+0x54>
 800b238:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b240:	f000 bb06 	b.w	800b850 <__retarget_lock_init_recursive>
 800b244:	bd10      	pop	{r4, pc}
 800b246:	bf00      	nop
 800b248:	0800b4fd 	.word	0x0800b4fd
 800b24c:	0800b51f 	.word	0x0800b51f
 800b250:	0800b557 	.word	0x0800b557
 800b254:	0800b57b 	.word	0x0800b57b
 800b258:	20003608 	.word	0x20003608

0800b25c <stdio_exit_handler>:
 800b25c:	4a02      	ldr	r2, [pc, #8]	@ (800b268 <stdio_exit_handler+0xc>)
 800b25e:	4903      	ldr	r1, [pc, #12]	@ (800b26c <stdio_exit_handler+0x10>)
 800b260:	4803      	ldr	r0, [pc, #12]	@ (800b270 <stdio_exit_handler+0x14>)
 800b262:	f000 b869 	b.w	800b338 <_fwalk_sglue>
 800b266:	bf00      	nop
 800b268:	2000001c 	.word	0x2000001c
 800b26c:	0800e3c1 	.word	0x0800e3c1
 800b270:	2000002c 	.word	0x2000002c

0800b274 <cleanup_stdio>:
 800b274:	6841      	ldr	r1, [r0, #4]
 800b276:	4b0c      	ldr	r3, [pc, #48]	@ (800b2a8 <cleanup_stdio+0x34>)
 800b278:	4299      	cmp	r1, r3
 800b27a:	b510      	push	{r4, lr}
 800b27c:	4604      	mov	r4, r0
 800b27e:	d001      	beq.n	800b284 <cleanup_stdio+0x10>
 800b280:	f003 f89e 	bl	800e3c0 <_fflush_r>
 800b284:	68a1      	ldr	r1, [r4, #8]
 800b286:	4b09      	ldr	r3, [pc, #36]	@ (800b2ac <cleanup_stdio+0x38>)
 800b288:	4299      	cmp	r1, r3
 800b28a:	d002      	beq.n	800b292 <cleanup_stdio+0x1e>
 800b28c:	4620      	mov	r0, r4
 800b28e:	f003 f897 	bl	800e3c0 <_fflush_r>
 800b292:	68e1      	ldr	r1, [r4, #12]
 800b294:	4b06      	ldr	r3, [pc, #24]	@ (800b2b0 <cleanup_stdio+0x3c>)
 800b296:	4299      	cmp	r1, r3
 800b298:	d004      	beq.n	800b2a4 <cleanup_stdio+0x30>
 800b29a:	4620      	mov	r0, r4
 800b29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a0:	f003 b88e 	b.w	800e3c0 <_fflush_r>
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20003608 	.word	0x20003608
 800b2ac:	20003670 	.word	0x20003670
 800b2b0:	200036d8 	.word	0x200036d8

0800b2b4 <global_stdio_init.part.0>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e4 <global_stdio_init.part.0+0x30>)
 800b2b8:	4c0b      	ldr	r4, [pc, #44]	@ (800b2e8 <global_stdio_init.part.0+0x34>)
 800b2ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b2ec <global_stdio_init.part.0+0x38>)
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	4620      	mov	r0, r4
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2104      	movs	r1, #4
 800b2c4:	f7ff ff94 	bl	800b1f0 <std>
 800b2c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	2109      	movs	r1, #9
 800b2d0:	f7ff ff8e 	bl	800b1f0 <std>
 800b2d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2d8:	2202      	movs	r2, #2
 800b2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2de:	2112      	movs	r1, #18
 800b2e0:	f7ff bf86 	b.w	800b1f0 <std>
 800b2e4:	20003740 	.word	0x20003740
 800b2e8:	20003608 	.word	0x20003608
 800b2ec:	0800b25d 	.word	0x0800b25d

0800b2f0 <__sfp_lock_acquire>:
 800b2f0:	4801      	ldr	r0, [pc, #4]	@ (800b2f8 <__sfp_lock_acquire+0x8>)
 800b2f2:	f000 baae 	b.w	800b852 <__retarget_lock_acquire_recursive>
 800b2f6:	bf00      	nop
 800b2f8:	20003749 	.word	0x20003749

0800b2fc <__sfp_lock_release>:
 800b2fc:	4801      	ldr	r0, [pc, #4]	@ (800b304 <__sfp_lock_release+0x8>)
 800b2fe:	f000 baa9 	b.w	800b854 <__retarget_lock_release_recursive>
 800b302:	bf00      	nop
 800b304:	20003749 	.word	0x20003749

0800b308 <__sinit>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4604      	mov	r4, r0
 800b30c:	f7ff fff0 	bl	800b2f0 <__sfp_lock_acquire>
 800b310:	6a23      	ldr	r3, [r4, #32]
 800b312:	b11b      	cbz	r3, 800b31c <__sinit+0x14>
 800b314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b318:	f7ff bff0 	b.w	800b2fc <__sfp_lock_release>
 800b31c:	4b04      	ldr	r3, [pc, #16]	@ (800b330 <__sinit+0x28>)
 800b31e:	6223      	str	r3, [r4, #32]
 800b320:	4b04      	ldr	r3, [pc, #16]	@ (800b334 <__sinit+0x2c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1f5      	bne.n	800b314 <__sinit+0xc>
 800b328:	f7ff ffc4 	bl	800b2b4 <global_stdio_init.part.0>
 800b32c:	e7f2      	b.n	800b314 <__sinit+0xc>
 800b32e:	bf00      	nop
 800b330:	0800b275 	.word	0x0800b275
 800b334:	20003740 	.word	0x20003740

0800b338 <_fwalk_sglue>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4607      	mov	r7, r0
 800b33e:	4688      	mov	r8, r1
 800b340:	4614      	mov	r4, r2
 800b342:	2600      	movs	r6, #0
 800b344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b348:	f1b9 0901 	subs.w	r9, r9, #1
 800b34c:	d505      	bpl.n	800b35a <_fwalk_sglue+0x22>
 800b34e:	6824      	ldr	r4, [r4, #0]
 800b350:	2c00      	cmp	r4, #0
 800b352:	d1f7      	bne.n	800b344 <_fwalk_sglue+0xc>
 800b354:	4630      	mov	r0, r6
 800b356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d907      	bls.n	800b370 <_fwalk_sglue+0x38>
 800b360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b364:	3301      	adds	r3, #1
 800b366:	d003      	beq.n	800b370 <_fwalk_sglue+0x38>
 800b368:	4629      	mov	r1, r5
 800b36a:	4638      	mov	r0, r7
 800b36c:	47c0      	blx	r8
 800b36e:	4306      	orrs	r6, r0
 800b370:	3568      	adds	r5, #104	@ 0x68
 800b372:	e7e9      	b.n	800b348 <_fwalk_sglue+0x10>

0800b374 <iprintf>:
 800b374:	b40f      	push	{r0, r1, r2, r3}
 800b376:	b507      	push	{r0, r1, r2, lr}
 800b378:	4906      	ldr	r1, [pc, #24]	@ (800b394 <iprintf+0x20>)
 800b37a:	ab04      	add	r3, sp, #16
 800b37c:	6808      	ldr	r0, [r1, #0]
 800b37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b382:	6881      	ldr	r1, [r0, #8]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	f002 fe7f 	bl	800e088 <_vfiprintf_r>
 800b38a:	b003      	add	sp, #12
 800b38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b390:	b004      	add	sp, #16
 800b392:	4770      	bx	lr
 800b394:	20000028 	.word	0x20000028

0800b398 <_puts_r>:
 800b398:	6a03      	ldr	r3, [r0, #32]
 800b39a:	b570      	push	{r4, r5, r6, lr}
 800b39c:	6884      	ldr	r4, [r0, #8]
 800b39e:	4605      	mov	r5, r0
 800b3a0:	460e      	mov	r6, r1
 800b3a2:	b90b      	cbnz	r3, 800b3a8 <_puts_r+0x10>
 800b3a4:	f7ff ffb0 	bl	800b308 <__sinit>
 800b3a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d405      	bmi.n	800b3ba <_puts_r+0x22>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	0598      	lsls	r0, r3, #22
 800b3b2:	d402      	bmi.n	800b3ba <_puts_r+0x22>
 800b3b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3b6:	f000 fa4c 	bl	800b852 <__retarget_lock_acquire_recursive>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	0719      	lsls	r1, r3, #28
 800b3be:	d502      	bpl.n	800b3c6 <_puts_r+0x2e>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d135      	bne.n	800b432 <_puts_r+0x9a>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f000 f919 	bl	800b600 <__swsetup_r>
 800b3ce:	b380      	cbz	r0, 800b432 <_puts_r+0x9a>
 800b3d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b3d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3d6:	07da      	lsls	r2, r3, #31
 800b3d8:	d405      	bmi.n	800b3e6 <_puts_r+0x4e>
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	059b      	lsls	r3, r3, #22
 800b3de:	d402      	bmi.n	800b3e6 <_puts_r+0x4e>
 800b3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3e2:	f000 fa37 	bl	800b854 <__retarget_lock_release_recursive>
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	da04      	bge.n	800b3f8 <_puts_r+0x60>
 800b3ee:	69a2      	ldr	r2, [r4, #24]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	dc17      	bgt.n	800b424 <_puts_r+0x8c>
 800b3f4:	290a      	cmp	r1, #10
 800b3f6:	d015      	beq.n	800b424 <_puts_r+0x8c>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	6022      	str	r2, [r4, #0]
 800b3fe:	7019      	strb	r1, [r3, #0]
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b406:	3b01      	subs	r3, #1
 800b408:	60a3      	str	r3, [r4, #8]
 800b40a:	2900      	cmp	r1, #0
 800b40c:	d1ed      	bne.n	800b3ea <_puts_r+0x52>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da11      	bge.n	800b436 <_puts_r+0x9e>
 800b412:	4622      	mov	r2, r4
 800b414:	210a      	movs	r1, #10
 800b416:	4628      	mov	r0, r5
 800b418:	f000 f8b3 	bl	800b582 <__swbuf_r>
 800b41c:	3001      	adds	r0, #1
 800b41e:	d0d7      	beq.n	800b3d0 <_puts_r+0x38>
 800b420:	250a      	movs	r5, #10
 800b422:	e7d7      	b.n	800b3d4 <_puts_r+0x3c>
 800b424:	4622      	mov	r2, r4
 800b426:	4628      	mov	r0, r5
 800b428:	f000 f8ab 	bl	800b582 <__swbuf_r>
 800b42c:	3001      	adds	r0, #1
 800b42e:	d1e7      	bne.n	800b400 <_puts_r+0x68>
 800b430:	e7ce      	b.n	800b3d0 <_puts_r+0x38>
 800b432:	3e01      	subs	r6, #1
 800b434:	e7e4      	b.n	800b400 <_puts_r+0x68>
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	6022      	str	r2, [r4, #0]
 800b43c:	220a      	movs	r2, #10
 800b43e:	701a      	strb	r2, [r3, #0]
 800b440:	e7ee      	b.n	800b420 <_puts_r+0x88>
	...

0800b444 <puts>:
 800b444:	4b02      	ldr	r3, [pc, #8]	@ (800b450 <puts+0xc>)
 800b446:	4601      	mov	r1, r0
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	f7ff bfa5 	b.w	800b398 <_puts_r>
 800b44e:	bf00      	nop
 800b450:	20000028 	.word	0x20000028

0800b454 <sniprintf>:
 800b454:	b40c      	push	{r2, r3}
 800b456:	b530      	push	{r4, r5, lr}
 800b458:	4b17      	ldr	r3, [pc, #92]	@ (800b4b8 <sniprintf+0x64>)
 800b45a:	1e0c      	subs	r4, r1, #0
 800b45c:	681d      	ldr	r5, [r3, #0]
 800b45e:	b09d      	sub	sp, #116	@ 0x74
 800b460:	da08      	bge.n	800b474 <sniprintf+0x20>
 800b462:	238b      	movs	r3, #139	@ 0x8b
 800b464:	602b      	str	r3, [r5, #0]
 800b466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b46a:	b01d      	add	sp, #116	@ 0x74
 800b46c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b470:	b002      	add	sp, #8
 800b472:	4770      	bx	lr
 800b474:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b478:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b47c:	bf14      	ite	ne
 800b47e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b482:	4623      	moveq	r3, r4
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	9307      	str	r3, [sp, #28]
 800b488:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b48c:	9002      	str	r0, [sp, #8]
 800b48e:	9006      	str	r0, [sp, #24]
 800b490:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b494:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b496:	ab21      	add	r3, sp, #132	@ 0x84
 800b498:	a902      	add	r1, sp, #8
 800b49a:	4628      	mov	r0, r5
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	f002 fccd 	bl	800de3c <_svfiprintf_r>
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	bfbc      	itt	lt
 800b4a6:	238b      	movlt	r3, #139	@ 0x8b
 800b4a8:	602b      	strlt	r3, [r5, #0]
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	d0dd      	beq.n	800b46a <sniprintf+0x16>
 800b4ae:	9b02      	ldr	r3, [sp, #8]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
 800b4b4:	e7d9      	b.n	800b46a <sniprintf+0x16>
 800b4b6:	bf00      	nop
 800b4b8:	20000028 	.word	0x20000028

0800b4bc <siprintf>:
 800b4bc:	b40e      	push	{r1, r2, r3}
 800b4be:	b500      	push	{lr}
 800b4c0:	b09c      	sub	sp, #112	@ 0x70
 800b4c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800b4c4:	9002      	str	r0, [sp, #8]
 800b4c6:	9006      	str	r0, [sp, #24]
 800b4c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b4cc:	4809      	ldr	r0, [pc, #36]	@ (800b4f4 <siprintf+0x38>)
 800b4ce:	9107      	str	r1, [sp, #28]
 800b4d0:	9104      	str	r1, [sp, #16]
 800b4d2:	4909      	ldr	r1, [pc, #36]	@ (800b4f8 <siprintf+0x3c>)
 800b4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d8:	9105      	str	r1, [sp, #20]
 800b4da:	6800      	ldr	r0, [r0, #0]
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	a902      	add	r1, sp, #8
 800b4e0:	f002 fcac 	bl	800de3c <_svfiprintf_r>
 800b4e4:	9b02      	ldr	r3, [sp, #8]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	b01c      	add	sp, #112	@ 0x70
 800b4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4f0:	b003      	add	sp, #12
 800b4f2:	4770      	bx	lr
 800b4f4:	20000028 	.word	0x20000028
 800b4f8:	ffff0208 	.word	0xffff0208

0800b4fc <__sread>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	460c      	mov	r4, r1
 800b500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b504:	f000 f956 	bl	800b7b4 <_read_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	bfab      	itete	ge
 800b50c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b50e:	89a3      	ldrhlt	r3, [r4, #12]
 800b510:	181b      	addge	r3, r3, r0
 800b512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b516:	bfac      	ite	ge
 800b518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b51a:	81a3      	strhlt	r3, [r4, #12]
 800b51c:	bd10      	pop	{r4, pc}

0800b51e <__swrite>:
 800b51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	461f      	mov	r7, r3
 800b524:	898b      	ldrh	r3, [r1, #12]
 800b526:	05db      	lsls	r3, r3, #23
 800b528:	4605      	mov	r5, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4616      	mov	r6, r2
 800b52e:	d505      	bpl.n	800b53c <__swrite+0x1e>
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	2302      	movs	r3, #2
 800b536:	2200      	movs	r2, #0
 800b538:	f000 f92a 	bl	800b790 <_lseek_r>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	4628      	mov	r0, r5
 800b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	f000 b941 	b.w	800b7d8 <_write_r>

0800b556 <__sseek>:
 800b556:	b510      	push	{r4, lr}
 800b558:	460c      	mov	r4, r1
 800b55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55e:	f000 f917 	bl	800b790 <_lseek_r>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	bf15      	itete	ne
 800b568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b56a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b56e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b572:	81a3      	strheq	r3, [r4, #12]
 800b574:	bf18      	it	ne
 800b576:	81a3      	strhne	r3, [r4, #12]
 800b578:	bd10      	pop	{r4, pc}

0800b57a <__sclose>:
 800b57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57e:	f000 b8a1 	b.w	800b6c4 <_close_r>

0800b582 <__swbuf_r>:
 800b582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b584:	460e      	mov	r6, r1
 800b586:	4614      	mov	r4, r2
 800b588:	4605      	mov	r5, r0
 800b58a:	b118      	cbz	r0, 800b594 <__swbuf_r+0x12>
 800b58c:	6a03      	ldr	r3, [r0, #32]
 800b58e:	b90b      	cbnz	r3, 800b594 <__swbuf_r+0x12>
 800b590:	f7ff feba 	bl	800b308 <__sinit>
 800b594:	69a3      	ldr	r3, [r4, #24]
 800b596:	60a3      	str	r3, [r4, #8]
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	071a      	lsls	r2, r3, #28
 800b59c:	d501      	bpl.n	800b5a2 <__swbuf_r+0x20>
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	b943      	cbnz	r3, 800b5b4 <__swbuf_r+0x32>
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f000 f82b 	bl	800b600 <__swsetup_r>
 800b5aa:	b118      	cbz	r0, 800b5b4 <__swbuf_r+0x32>
 800b5ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	6922      	ldr	r2, [r4, #16]
 800b5b8:	1a98      	subs	r0, r3, r2
 800b5ba:	6963      	ldr	r3, [r4, #20]
 800b5bc:	b2f6      	uxtb	r6, r6
 800b5be:	4283      	cmp	r3, r0
 800b5c0:	4637      	mov	r7, r6
 800b5c2:	dc05      	bgt.n	800b5d0 <__swbuf_r+0x4e>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f002 fefa 	bl	800e3c0 <_fflush_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1ed      	bne.n	800b5ac <__swbuf_r+0x2a>
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	60a3      	str	r3, [r4, #8]
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	6022      	str	r2, [r4, #0]
 800b5dc:	701e      	strb	r6, [r3, #0]
 800b5de:	6962      	ldr	r2, [r4, #20]
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d004      	beq.n	800b5f0 <__swbuf_r+0x6e>
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	07db      	lsls	r3, r3, #31
 800b5ea:	d5e1      	bpl.n	800b5b0 <__swbuf_r+0x2e>
 800b5ec:	2e0a      	cmp	r6, #10
 800b5ee:	d1df      	bne.n	800b5b0 <__swbuf_r+0x2e>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f002 fee4 	bl	800e3c0 <_fflush_r>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d0d9      	beq.n	800b5b0 <__swbuf_r+0x2e>
 800b5fc:	e7d6      	b.n	800b5ac <__swbuf_r+0x2a>
	...

0800b600 <__swsetup_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4b29      	ldr	r3, [pc, #164]	@ (800b6a8 <__swsetup_r+0xa8>)
 800b604:	4605      	mov	r5, r0
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	460c      	mov	r4, r1
 800b60a:	b118      	cbz	r0, 800b614 <__swsetup_r+0x14>
 800b60c:	6a03      	ldr	r3, [r0, #32]
 800b60e:	b90b      	cbnz	r3, 800b614 <__swsetup_r+0x14>
 800b610:	f7ff fe7a 	bl	800b308 <__sinit>
 800b614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b618:	0719      	lsls	r1, r3, #28
 800b61a:	d422      	bmi.n	800b662 <__swsetup_r+0x62>
 800b61c:	06da      	lsls	r2, r3, #27
 800b61e:	d407      	bmi.n	800b630 <__swsetup_r+0x30>
 800b620:	2209      	movs	r2, #9
 800b622:	602a      	str	r2, [r5, #0]
 800b624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b628:	81a3      	strh	r3, [r4, #12]
 800b62a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b62e:	e033      	b.n	800b698 <__swsetup_r+0x98>
 800b630:	0758      	lsls	r0, r3, #29
 800b632:	d512      	bpl.n	800b65a <__swsetup_r+0x5a>
 800b634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b636:	b141      	cbz	r1, 800b64a <__swsetup_r+0x4a>
 800b638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b63c:	4299      	cmp	r1, r3
 800b63e:	d002      	beq.n	800b646 <__swsetup_r+0x46>
 800b640:	4628      	mov	r0, r5
 800b642:	f000 ff69 	bl	800c518 <_free_r>
 800b646:	2300      	movs	r3, #0
 800b648:	6363      	str	r3, [r4, #52]	@ 0x34
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	2300      	movs	r3, #0
 800b654:	6063      	str	r3, [r4, #4]
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	f043 0308 	orr.w	r3, r3, #8
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	b94b      	cbnz	r3, 800b67a <__swsetup_r+0x7a>
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b66c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b670:	d003      	beq.n	800b67a <__swsetup_r+0x7a>
 800b672:	4621      	mov	r1, r4
 800b674:	4628      	mov	r0, r5
 800b676:	f002 fef1 	bl	800e45c <__smakebuf_r>
 800b67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b67e:	f013 0201 	ands.w	r2, r3, #1
 800b682:	d00a      	beq.n	800b69a <__swsetup_r+0x9a>
 800b684:	2200      	movs	r2, #0
 800b686:	60a2      	str	r2, [r4, #8]
 800b688:	6962      	ldr	r2, [r4, #20]
 800b68a:	4252      	negs	r2, r2
 800b68c:	61a2      	str	r2, [r4, #24]
 800b68e:	6922      	ldr	r2, [r4, #16]
 800b690:	b942      	cbnz	r2, 800b6a4 <__swsetup_r+0xa4>
 800b692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b696:	d1c5      	bne.n	800b624 <__swsetup_r+0x24>
 800b698:	bd38      	pop	{r3, r4, r5, pc}
 800b69a:	0799      	lsls	r1, r3, #30
 800b69c:	bf58      	it	pl
 800b69e:	6962      	ldrpl	r2, [r4, #20]
 800b6a0:	60a2      	str	r2, [r4, #8]
 800b6a2:	e7f4      	b.n	800b68e <__swsetup_r+0x8e>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e7f7      	b.n	800b698 <__swsetup_r+0x98>
 800b6a8:	20000028 	.word	0x20000028

0800b6ac <memset>:
 800b6ac:	4402      	add	r2, r0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d100      	bne.n	800b6b6 <memset+0xa>
 800b6b4:	4770      	bx	lr
 800b6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b6ba:	e7f9      	b.n	800b6b0 <memset+0x4>

0800b6bc <_localeconv_r>:
 800b6bc:	4800      	ldr	r0, [pc, #0]	@ (800b6c0 <_localeconv_r+0x4>)
 800b6be:	4770      	bx	lr
 800b6c0:	20000168 	.word	0x20000168

0800b6c4 <_close_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d06      	ldr	r5, [pc, #24]	@ (800b6e0 <_close_r+0x1c>)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	602b      	str	r3, [r5, #0]
 800b6d0:	f7f6 feca 	bl	8002468 <_close>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_close_r+0x1a>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_close_r+0x1a>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20003744 	.word	0x20003744

0800b6e4 <_reclaim_reent>:
 800b6e4:	4b29      	ldr	r3, [pc, #164]	@ (800b78c <_reclaim_reent+0xa8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4283      	cmp	r3, r0
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	d04b      	beq.n	800b788 <_reclaim_reent+0xa4>
 800b6f0:	69c3      	ldr	r3, [r0, #28]
 800b6f2:	b1ab      	cbz	r3, 800b720 <_reclaim_reent+0x3c>
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	b16b      	cbz	r3, 800b714 <_reclaim_reent+0x30>
 800b6f8:	2500      	movs	r5, #0
 800b6fa:	69e3      	ldr	r3, [r4, #28]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	5959      	ldr	r1, [r3, r5]
 800b700:	2900      	cmp	r1, #0
 800b702:	d13b      	bne.n	800b77c <_reclaim_reent+0x98>
 800b704:	3504      	adds	r5, #4
 800b706:	2d80      	cmp	r5, #128	@ 0x80
 800b708:	d1f7      	bne.n	800b6fa <_reclaim_reent+0x16>
 800b70a:	69e3      	ldr	r3, [r4, #28]
 800b70c:	4620      	mov	r0, r4
 800b70e:	68d9      	ldr	r1, [r3, #12]
 800b710:	f000 ff02 	bl	800c518 <_free_r>
 800b714:	69e3      	ldr	r3, [r4, #28]
 800b716:	6819      	ldr	r1, [r3, #0]
 800b718:	b111      	cbz	r1, 800b720 <_reclaim_reent+0x3c>
 800b71a:	4620      	mov	r0, r4
 800b71c:	f000 fefc 	bl	800c518 <_free_r>
 800b720:	6961      	ldr	r1, [r4, #20]
 800b722:	b111      	cbz	r1, 800b72a <_reclaim_reent+0x46>
 800b724:	4620      	mov	r0, r4
 800b726:	f000 fef7 	bl	800c518 <_free_r>
 800b72a:	69e1      	ldr	r1, [r4, #28]
 800b72c:	b111      	cbz	r1, 800b734 <_reclaim_reent+0x50>
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 fef2 	bl	800c518 <_free_r>
 800b734:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b736:	b111      	cbz	r1, 800b73e <_reclaim_reent+0x5a>
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 feed 	bl	800c518 <_free_r>
 800b73e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b740:	b111      	cbz	r1, 800b748 <_reclaim_reent+0x64>
 800b742:	4620      	mov	r0, r4
 800b744:	f000 fee8 	bl	800c518 <_free_r>
 800b748:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b74a:	b111      	cbz	r1, 800b752 <_reclaim_reent+0x6e>
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 fee3 	bl	800c518 <_free_r>
 800b752:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b754:	b111      	cbz	r1, 800b75c <_reclaim_reent+0x78>
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fede 	bl	800c518 <_free_r>
 800b75c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b75e:	b111      	cbz	r1, 800b766 <_reclaim_reent+0x82>
 800b760:	4620      	mov	r0, r4
 800b762:	f000 fed9 	bl	800c518 <_free_r>
 800b766:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b768:	b111      	cbz	r1, 800b770 <_reclaim_reent+0x8c>
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 fed4 	bl	800c518 <_free_r>
 800b770:	6a23      	ldr	r3, [r4, #32]
 800b772:	b14b      	cbz	r3, 800b788 <_reclaim_reent+0xa4>
 800b774:	4620      	mov	r0, r4
 800b776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b77a:	4718      	bx	r3
 800b77c:	680e      	ldr	r6, [r1, #0]
 800b77e:	4620      	mov	r0, r4
 800b780:	f000 feca 	bl	800c518 <_free_r>
 800b784:	4631      	mov	r1, r6
 800b786:	e7bb      	b.n	800b700 <_reclaim_reent+0x1c>
 800b788:	bd70      	pop	{r4, r5, r6, pc}
 800b78a:	bf00      	nop
 800b78c:	20000028 	.word	0x20000028

0800b790 <_lseek_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d07      	ldr	r5, [pc, #28]	@ (800b7b0 <_lseek_r+0x20>)
 800b794:	4604      	mov	r4, r0
 800b796:	4608      	mov	r0, r1
 800b798:	4611      	mov	r1, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	602a      	str	r2, [r5, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f7f6 fe89 	bl	80024b6 <_lseek>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_lseek_r+0x1e>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_lseek_r+0x1e>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20003744 	.word	0x20003744

0800b7b4 <_read_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4d07      	ldr	r5, [pc, #28]	@ (800b7d4 <_read_r+0x20>)
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	4608      	mov	r0, r1
 800b7bc:	4611      	mov	r1, r2
 800b7be:	2200      	movs	r2, #0
 800b7c0:	602a      	str	r2, [r5, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f7f6 fe17 	bl	80023f6 <_read>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_read_r+0x1e>
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_read_r+0x1e>
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	20003744 	.word	0x20003744

0800b7d8 <_write_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4d07      	ldr	r5, [pc, #28]	@ (800b7f8 <_write_r+0x20>)
 800b7dc:	4604      	mov	r4, r0
 800b7de:	4608      	mov	r0, r1
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	602a      	str	r2, [r5, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f7f6 fe22 	bl	8002430 <_write>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d102      	bne.n	800b7f6 <_write_r+0x1e>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	b103      	cbz	r3, 800b7f6 <_write_r+0x1e>
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	20003744 	.word	0x20003744

0800b7fc <__errno>:
 800b7fc:	4b01      	ldr	r3, [pc, #4]	@ (800b804 <__errno+0x8>)
 800b7fe:	6818      	ldr	r0, [r3, #0]
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	20000028 	.word	0x20000028

0800b808 <__libc_init_array>:
 800b808:	b570      	push	{r4, r5, r6, lr}
 800b80a:	4d0d      	ldr	r5, [pc, #52]	@ (800b840 <__libc_init_array+0x38>)
 800b80c:	4c0d      	ldr	r4, [pc, #52]	@ (800b844 <__libc_init_array+0x3c>)
 800b80e:	1b64      	subs	r4, r4, r5
 800b810:	10a4      	asrs	r4, r4, #2
 800b812:	2600      	movs	r6, #0
 800b814:	42a6      	cmp	r6, r4
 800b816:	d109      	bne.n	800b82c <__libc_init_array+0x24>
 800b818:	4d0b      	ldr	r5, [pc, #44]	@ (800b848 <__libc_init_array+0x40>)
 800b81a:	4c0c      	ldr	r4, [pc, #48]	@ (800b84c <__libc_init_array+0x44>)
 800b81c:	f003 fade 	bl	800eddc <_init>
 800b820:	1b64      	subs	r4, r4, r5
 800b822:	10a4      	asrs	r4, r4, #2
 800b824:	2600      	movs	r6, #0
 800b826:	42a6      	cmp	r6, r4
 800b828:	d105      	bne.n	800b836 <__libc_init_array+0x2e>
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
 800b82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b830:	4798      	blx	r3
 800b832:	3601      	adds	r6, #1
 800b834:	e7ee      	b.n	800b814 <__libc_init_array+0xc>
 800b836:	f855 3b04 	ldr.w	r3, [r5], #4
 800b83a:	4798      	blx	r3
 800b83c:	3601      	adds	r6, #1
 800b83e:	e7f2      	b.n	800b826 <__libc_init_array+0x1e>
 800b840:	0800f470 	.word	0x0800f470
 800b844:	0800f470 	.word	0x0800f470
 800b848:	0800f470 	.word	0x0800f470
 800b84c:	0800f474 	.word	0x0800f474

0800b850 <__retarget_lock_init_recursive>:
 800b850:	4770      	bx	lr

0800b852 <__retarget_lock_acquire_recursive>:
 800b852:	4770      	bx	lr

0800b854 <__retarget_lock_release_recursive>:
 800b854:	4770      	bx	lr

0800b856 <memcpy>:
 800b856:	440a      	add	r2, r1
 800b858:	4291      	cmp	r1, r2
 800b85a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b85e:	d100      	bne.n	800b862 <memcpy+0xc>
 800b860:	4770      	bx	lr
 800b862:	b510      	push	{r4, lr}
 800b864:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b86c:	4291      	cmp	r1, r2
 800b86e:	d1f9      	bne.n	800b864 <memcpy+0xe>
 800b870:	bd10      	pop	{r4, pc}
	...

0800b874 <nanf>:
 800b874:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b87c <nanf+0x8>
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	7fc00000 	.word	0x7fc00000

0800b880 <quorem>:
 800b880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	6903      	ldr	r3, [r0, #16]
 800b886:	690c      	ldr	r4, [r1, #16]
 800b888:	42a3      	cmp	r3, r4
 800b88a:	4607      	mov	r7, r0
 800b88c:	db7e      	blt.n	800b98c <quorem+0x10c>
 800b88e:	3c01      	subs	r4, #1
 800b890:	f101 0814 	add.w	r8, r1, #20
 800b894:	00a3      	lsls	r3, r4, #2
 800b896:	f100 0514 	add.w	r5, r0, #20
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8b6:	d32e      	bcc.n	800b916 <quorem+0x96>
 800b8b8:	f04f 0a00 	mov.w	sl, #0
 800b8bc:	46c4      	mov	ip, r8
 800b8be:	46ae      	mov	lr, r5
 800b8c0:	46d3      	mov	fp, sl
 800b8c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8c6:	b298      	uxth	r0, r3
 800b8c8:	fb06 a000 	mla	r0, r6, r0, sl
 800b8cc:	0c02      	lsrs	r2, r0, #16
 800b8ce:	0c1b      	lsrs	r3, r3, #16
 800b8d0:	fb06 2303 	mla	r3, r6, r3, r2
 800b8d4:	f8de 2000 	ldr.w	r2, [lr]
 800b8d8:	b280      	uxth	r0, r0
 800b8da:	b292      	uxth	r2, r2
 800b8dc:	1a12      	subs	r2, r2, r0
 800b8de:	445a      	add	r2, fp
 800b8e0:	f8de 0000 	ldr.w	r0, [lr]
 800b8e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8f2:	b292      	uxth	r2, r2
 800b8f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8f8:	45e1      	cmp	r9, ip
 800b8fa:	f84e 2b04 	str.w	r2, [lr], #4
 800b8fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b902:	d2de      	bcs.n	800b8c2 <quorem+0x42>
 800b904:	9b00      	ldr	r3, [sp, #0]
 800b906:	58eb      	ldr	r3, [r5, r3]
 800b908:	b92b      	cbnz	r3, 800b916 <quorem+0x96>
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	3b04      	subs	r3, #4
 800b90e:	429d      	cmp	r5, r3
 800b910:	461a      	mov	r2, r3
 800b912:	d32f      	bcc.n	800b974 <quorem+0xf4>
 800b914:	613c      	str	r4, [r7, #16]
 800b916:	4638      	mov	r0, r7
 800b918:	f001 f9c2 	bl	800cca0 <__mcmp>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	db25      	blt.n	800b96c <quorem+0xec>
 800b920:	4629      	mov	r1, r5
 800b922:	2000      	movs	r0, #0
 800b924:	f858 2b04 	ldr.w	r2, [r8], #4
 800b928:	f8d1 c000 	ldr.w	ip, [r1]
 800b92c:	fa1f fe82 	uxth.w	lr, r2
 800b930:	fa1f f38c 	uxth.w	r3, ip
 800b934:	eba3 030e 	sub.w	r3, r3, lr
 800b938:	4403      	add	r3, r0
 800b93a:	0c12      	lsrs	r2, r2, #16
 800b93c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b940:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b944:	b29b      	uxth	r3, r3
 800b946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b94a:	45c1      	cmp	r9, r8
 800b94c:	f841 3b04 	str.w	r3, [r1], #4
 800b950:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b954:	d2e6      	bcs.n	800b924 <quorem+0xa4>
 800b956:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b95a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b95e:	b922      	cbnz	r2, 800b96a <quorem+0xea>
 800b960:	3b04      	subs	r3, #4
 800b962:	429d      	cmp	r5, r3
 800b964:	461a      	mov	r2, r3
 800b966:	d30b      	bcc.n	800b980 <quorem+0x100>
 800b968:	613c      	str	r4, [r7, #16]
 800b96a:	3601      	adds	r6, #1
 800b96c:	4630      	mov	r0, r6
 800b96e:	b003      	add	sp, #12
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	6812      	ldr	r2, [r2, #0]
 800b976:	3b04      	subs	r3, #4
 800b978:	2a00      	cmp	r2, #0
 800b97a:	d1cb      	bne.n	800b914 <quorem+0x94>
 800b97c:	3c01      	subs	r4, #1
 800b97e:	e7c6      	b.n	800b90e <quorem+0x8e>
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	3b04      	subs	r3, #4
 800b984:	2a00      	cmp	r2, #0
 800b986:	d1ef      	bne.n	800b968 <quorem+0xe8>
 800b988:	3c01      	subs	r4, #1
 800b98a:	e7ea      	b.n	800b962 <quorem+0xe2>
 800b98c:	2000      	movs	r0, #0
 800b98e:	e7ee      	b.n	800b96e <quorem+0xee>

0800b990 <_dtoa_r>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	69c7      	ldr	r7, [r0, #28]
 800b996:	b099      	sub	sp, #100	@ 0x64
 800b998:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b99c:	ec55 4b10 	vmov	r4, r5, d0
 800b9a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b9a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9a4:	4683      	mov	fp, r0
 800b9a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9aa:	b97f      	cbnz	r7, 800b9cc <_dtoa_r+0x3c>
 800b9ac:	2010      	movs	r0, #16
 800b9ae:	f000 fdfd 	bl	800c5ac <malloc>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b9b8:	b920      	cbnz	r0, 800b9c4 <_dtoa_r+0x34>
 800b9ba:	4ba7      	ldr	r3, [pc, #668]	@ (800bc58 <_dtoa_r+0x2c8>)
 800b9bc:	21ef      	movs	r1, #239	@ 0xef
 800b9be:	48a7      	ldr	r0, [pc, #668]	@ (800bc5c <_dtoa_r+0x2cc>)
 800b9c0:	f002 fdee 	bl	800e5a0 <__assert_func>
 800b9c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b9c8:	6007      	str	r7, [r0, #0]
 800b9ca:	60c7      	str	r7, [r0, #12]
 800b9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9d0:	6819      	ldr	r1, [r3, #0]
 800b9d2:	b159      	cbz	r1, 800b9ec <_dtoa_r+0x5c>
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	604a      	str	r2, [r1, #4]
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4093      	lsls	r3, r2
 800b9dc:	608b      	str	r3, [r1, #8]
 800b9de:	4658      	mov	r0, fp
 800b9e0:	f000 feda 	bl	800c798 <_Bfree>
 800b9e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	1e2b      	subs	r3, r5, #0
 800b9ee:	bfb9      	ittee	lt
 800b9f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9f4:	9303      	strlt	r3, [sp, #12]
 800b9f6:	2300      	movge	r3, #0
 800b9f8:	6033      	strge	r3, [r6, #0]
 800b9fa:	9f03      	ldr	r7, [sp, #12]
 800b9fc:	4b98      	ldr	r3, [pc, #608]	@ (800bc60 <_dtoa_r+0x2d0>)
 800b9fe:	bfbc      	itt	lt
 800ba00:	2201      	movlt	r2, #1
 800ba02:	6032      	strlt	r2, [r6, #0]
 800ba04:	43bb      	bics	r3, r7
 800ba06:	d112      	bne.n	800ba2e <_dtoa_r+0x9e>
 800ba08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba14:	4323      	orrs	r3, r4
 800ba16:	f000 854d 	beq.w	800c4b4 <_dtoa_r+0xb24>
 800ba1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bc74 <_dtoa_r+0x2e4>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 854f 	beq.w	800c4c4 <_dtoa_r+0xb34>
 800ba26:	f10a 0303 	add.w	r3, sl, #3
 800ba2a:	f000 bd49 	b.w	800c4c0 <_dtoa_r+0xb30>
 800ba2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba32:	2200      	movs	r2, #0
 800ba34:	ec51 0b17 	vmov	r0, r1, d7
 800ba38:	2300      	movs	r3, #0
 800ba3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba3e:	f7f5 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba42:	4680      	mov	r8, r0
 800ba44:	b158      	cbz	r0, 800ba5e <_dtoa_r+0xce>
 800ba46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba48:	2301      	movs	r3, #1
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba4e:	b113      	cbz	r3, 800ba56 <_dtoa_r+0xc6>
 800ba50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba52:	4b84      	ldr	r3, [pc, #528]	@ (800bc64 <_dtoa_r+0x2d4>)
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bc78 <_dtoa_r+0x2e8>
 800ba5a:	f000 bd33 	b.w	800c4c4 <_dtoa_r+0xb34>
 800ba5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba62:	aa16      	add	r2, sp, #88	@ 0x58
 800ba64:	a917      	add	r1, sp, #92	@ 0x5c
 800ba66:	4658      	mov	r0, fp
 800ba68:	f001 fa3a 	bl	800cee0 <__d2b>
 800ba6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ba70:	4681      	mov	r9, r0
 800ba72:	2e00      	cmp	r6, #0
 800ba74:	d077      	beq.n	800bb66 <_dtoa_r+0x1d6>
 800ba76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ba7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba90:	4619      	mov	r1, r3
 800ba92:	2200      	movs	r2, #0
 800ba94:	4b74      	ldr	r3, [pc, #464]	@ (800bc68 <_dtoa_r+0x2d8>)
 800ba96:	f7f4 fbf7 	bl	8000288 <__aeabi_dsub>
 800ba9a:	a369      	add	r3, pc, #420	@ (adr r3, 800bc40 <_dtoa_r+0x2b0>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	a368      	add	r3, pc, #416	@ (adr r3, 800bc48 <_dtoa_r+0x2b8>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f7f4 fbef 	bl	800028c <__adddf3>
 800baae:	4604      	mov	r4, r0
 800bab0:	4630      	mov	r0, r6
 800bab2:	460d      	mov	r5, r1
 800bab4:	f7f4 fd36 	bl	8000524 <__aeabi_i2d>
 800bab8:	a365      	add	r3, pc, #404	@ (adr r3, 800bc50 <_dtoa_r+0x2c0>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fd9b 	bl	80005f8 <__aeabi_dmul>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fbdf 	bl	800028c <__adddf3>
 800bace:	4604      	mov	r4, r0
 800bad0:	460d      	mov	r5, r1
 800bad2:	f7f5 f841 	bl	8000b58 <__aeabi_d2iz>
 800bad6:	2200      	movs	r2, #0
 800bad8:	4607      	mov	r7, r0
 800bada:	2300      	movs	r3, #0
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fffc 	bl	8000adc <__aeabi_dcmplt>
 800bae4:	b140      	cbz	r0, 800baf8 <_dtoa_r+0x168>
 800bae6:	4638      	mov	r0, r7
 800bae8:	f7f4 fd1c 	bl	8000524 <__aeabi_i2d>
 800baec:	4622      	mov	r2, r4
 800baee:	462b      	mov	r3, r5
 800baf0:	f7f4 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf4:	b900      	cbnz	r0, 800baf8 <_dtoa_r+0x168>
 800baf6:	3f01      	subs	r7, #1
 800baf8:	2f16      	cmp	r7, #22
 800bafa:	d851      	bhi.n	800bba0 <_dtoa_r+0x210>
 800bafc:	4b5b      	ldr	r3, [pc, #364]	@ (800bc6c <_dtoa_r+0x2dc>)
 800bafe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb0a:	f7f4 ffe7 	bl	8000adc <__aeabi_dcmplt>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d048      	beq.n	800bba4 <_dtoa_r+0x214>
 800bb12:	3f01      	subs	r7, #1
 800bb14:	2300      	movs	r3, #0
 800bb16:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb1a:	1b9b      	subs	r3, r3, r6
 800bb1c:	1e5a      	subs	r2, r3, #1
 800bb1e:	bf44      	itt	mi
 800bb20:	f1c3 0801 	rsbmi	r8, r3, #1
 800bb24:	2300      	movmi	r3, #0
 800bb26:	9208      	str	r2, [sp, #32]
 800bb28:	bf54      	ite	pl
 800bb2a:	f04f 0800 	movpl.w	r8, #0
 800bb2e:	9308      	strmi	r3, [sp, #32]
 800bb30:	2f00      	cmp	r7, #0
 800bb32:	db39      	blt.n	800bba8 <_dtoa_r+0x218>
 800bb34:	9b08      	ldr	r3, [sp, #32]
 800bb36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb38:	443b      	add	r3, r7
 800bb3a:	9308      	str	r3, [sp, #32]
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb42:	2b09      	cmp	r3, #9
 800bb44:	d864      	bhi.n	800bc10 <_dtoa_r+0x280>
 800bb46:	2b05      	cmp	r3, #5
 800bb48:	bfc4      	itt	gt
 800bb4a:	3b04      	subgt	r3, #4
 800bb4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb50:	f1a3 0302 	sub.w	r3, r3, #2
 800bb54:	bfcc      	ite	gt
 800bb56:	2400      	movgt	r4, #0
 800bb58:	2401      	movle	r4, #1
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d863      	bhi.n	800bc26 <_dtoa_r+0x296>
 800bb5e:	e8df f003 	tbb	[pc, r3]
 800bb62:	372a      	.short	0x372a
 800bb64:	5535      	.short	0x5535
 800bb66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bb6a:	441e      	add	r6, r3
 800bb6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb70:	2b20      	cmp	r3, #32
 800bb72:	bfc1      	itttt	gt
 800bb74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb78:	409f      	lslgt	r7, r3
 800bb7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb82:	bfd6      	itet	le
 800bb84:	f1c3 0320 	rsble	r3, r3, #32
 800bb88:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb8c:	fa04 f003 	lslle.w	r0, r4, r3
 800bb90:	f7f4 fcb8 	bl	8000504 <__aeabi_ui2d>
 800bb94:	2201      	movs	r2, #1
 800bb96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb9a:	3e01      	subs	r6, #1
 800bb9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bb9e:	e777      	b.n	800ba90 <_dtoa_r+0x100>
 800bba0:	2301      	movs	r3, #1
 800bba2:	e7b8      	b.n	800bb16 <_dtoa_r+0x186>
 800bba4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bba6:	e7b7      	b.n	800bb18 <_dtoa_r+0x188>
 800bba8:	427b      	negs	r3, r7
 800bbaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbac:	2300      	movs	r3, #0
 800bbae:	eba8 0807 	sub.w	r8, r8, r7
 800bbb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbb4:	e7c4      	b.n	800bb40 <_dtoa_r+0x1b0>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	dc35      	bgt.n	800bc2c <_dtoa_r+0x29c>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	9307      	str	r3, [sp, #28]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbca:	e00b      	b.n	800bbe4 <_dtoa_r+0x254>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e7f3      	b.n	800bbb8 <_dtoa_r+0x228>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbd6:	18fb      	adds	r3, r7, r3
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	9307      	str	r3, [sp, #28]
 800bbe0:	bfb8      	it	lt
 800bbe2:	2301      	movlt	r3, #1
 800bbe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bbe8:	2100      	movs	r1, #0
 800bbea:	2204      	movs	r2, #4
 800bbec:	f102 0514 	add.w	r5, r2, #20
 800bbf0:	429d      	cmp	r5, r3
 800bbf2:	d91f      	bls.n	800bc34 <_dtoa_r+0x2a4>
 800bbf4:	6041      	str	r1, [r0, #4]
 800bbf6:	4658      	mov	r0, fp
 800bbf8:	f000 fd8e 	bl	800c718 <_Balloc>
 800bbfc:	4682      	mov	sl, r0
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d13c      	bne.n	800bc7c <_dtoa_r+0x2ec>
 800bc02:	4b1b      	ldr	r3, [pc, #108]	@ (800bc70 <_dtoa_r+0x2e0>)
 800bc04:	4602      	mov	r2, r0
 800bc06:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc0a:	e6d8      	b.n	800b9be <_dtoa_r+0x2e>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e7e0      	b.n	800bbd2 <_dtoa_r+0x242>
 800bc10:	2401      	movs	r4, #1
 800bc12:	2300      	movs	r3, #0
 800bc14:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	2200      	movs	r2, #0
 800bc22:	2312      	movs	r3, #18
 800bc24:	e7d0      	b.n	800bbc8 <_dtoa_r+0x238>
 800bc26:	2301      	movs	r3, #1
 800bc28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc2a:	e7f5      	b.n	800bc18 <_dtoa_r+0x288>
 800bc2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	9307      	str	r3, [sp, #28]
 800bc32:	e7d7      	b.n	800bbe4 <_dtoa_r+0x254>
 800bc34:	3101      	adds	r1, #1
 800bc36:	0052      	lsls	r2, r2, #1
 800bc38:	e7d8      	b.n	800bbec <_dtoa_r+0x25c>
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w
 800bc40:	636f4361 	.word	0x636f4361
 800bc44:	3fd287a7 	.word	0x3fd287a7
 800bc48:	8b60c8b3 	.word	0x8b60c8b3
 800bc4c:	3fc68a28 	.word	0x3fc68a28
 800bc50:	509f79fb 	.word	0x509f79fb
 800bc54:	3fd34413 	.word	0x3fd34413
 800bc58:	0800f082 	.word	0x0800f082
 800bc5c:	0800f099 	.word	0x0800f099
 800bc60:	7ff00000 	.word	0x7ff00000
 800bc64:	0800f04d 	.word	0x0800f04d
 800bc68:	3ff80000 	.word	0x3ff80000
 800bc6c:	0800f190 	.word	0x0800f190
 800bc70:	0800f0f1 	.word	0x0800f0f1
 800bc74:	0800f07e 	.word	0x0800f07e
 800bc78:	0800f04c 	.word	0x0800f04c
 800bc7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc80:	6018      	str	r0, [r3, #0]
 800bc82:	9b07      	ldr	r3, [sp, #28]
 800bc84:	2b0e      	cmp	r3, #14
 800bc86:	f200 80a4 	bhi.w	800bdd2 <_dtoa_r+0x442>
 800bc8a:	2c00      	cmp	r4, #0
 800bc8c:	f000 80a1 	beq.w	800bdd2 <_dtoa_r+0x442>
 800bc90:	2f00      	cmp	r7, #0
 800bc92:	dd33      	ble.n	800bcfc <_dtoa_r+0x36c>
 800bc94:	4bad      	ldr	r3, [pc, #692]	@ (800bf4c <_dtoa_r+0x5bc>)
 800bc96:	f007 020f 	and.w	r2, r7, #15
 800bc9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc9e:	ed93 7b00 	vldr	d7, [r3]
 800bca2:	05f8      	lsls	r0, r7, #23
 800bca4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bca8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bcac:	d516      	bpl.n	800bcdc <_dtoa_r+0x34c>
 800bcae:	4ba8      	ldr	r3, [pc, #672]	@ (800bf50 <_dtoa_r+0x5c0>)
 800bcb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcb8:	f7f4 fdc8 	bl	800084c <__aeabi_ddiv>
 800bcbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc0:	f004 040f 	and.w	r4, r4, #15
 800bcc4:	2603      	movs	r6, #3
 800bcc6:	4da2      	ldr	r5, [pc, #648]	@ (800bf50 <_dtoa_r+0x5c0>)
 800bcc8:	b954      	cbnz	r4, 800bce0 <_dtoa_r+0x350>
 800bcca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd2:	f7f4 fdbb 	bl	800084c <__aeabi_ddiv>
 800bcd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcda:	e028      	b.n	800bd2e <_dtoa_r+0x39e>
 800bcdc:	2602      	movs	r6, #2
 800bcde:	e7f2      	b.n	800bcc6 <_dtoa_r+0x336>
 800bce0:	07e1      	lsls	r1, r4, #31
 800bce2:	d508      	bpl.n	800bcf6 <_dtoa_r+0x366>
 800bce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bce8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcec:	f7f4 fc84 	bl	80005f8 <__aeabi_dmul>
 800bcf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcf4:	3601      	adds	r6, #1
 800bcf6:	1064      	asrs	r4, r4, #1
 800bcf8:	3508      	adds	r5, #8
 800bcfa:	e7e5      	b.n	800bcc8 <_dtoa_r+0x338>
 800bcfc:	f000 80d2 	beq.w	800bea4 <_dtoa_r+0x514>
 800bd00:	427c      	negs	r4, r7
 800bd02:	4b92      	ldr	r3, [pc, #584]	@ (800bf4c <_dtoa_r+0x5bc>)
 800bd04:	4d92      	ldr	r5, [pc, #584]	@ (800bf50 <_dtoa_r+0x5c0>)
 800bd06:	f004 020f 	and.w	r2, r4, #15
 800bd0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd16:	f7f4 fc6f 	bl	80005f8 <__aeabi_dmul>
 800bd1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1e:	1124      	asrs	r4, r4, #4
 800bd20:	2300      	movs	r3, #0
 800bd22:	2602      	movs	r6, #2
 800bd24:	2c00      	cmp	r4, #0
 800bd26:	f040 80b2 	bne.w	800be8e <_dtoa_r+0x4fe>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1d3      	bne.n	800bcd6 <_dtoa_r+0x346>
 800bd2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 80b7 	beq.w	800bea8 <_dtoa_r+0x518>
 800bd3a:	4b86      	ldr	r3, [pc, #536]	@ (800bf54 <_dtoa_r+0x5c4>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7f4 fecb 	bl	8000adc <__aeabi_dcmplt>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f000 80ae 	beq.w	800bea8 <_dtoa_r+0x518>
 800bd4c:	9b07      	ldr	r3, [sp, #28]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80aa 	beq.w	800bea8 <_dtoa_r+0x518>
 800bd54:	9b00      	ldr	r3, [sp, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	dd37      	ble.n	800bdca <_dtoa_r+0x43a>
 800bd5a:	1e7b      	subs	r3, r7, #1
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	4b7d      	ldr	r3, [pc, #500]	@ (800bf58 <_dtoa_r+0x5c8>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7f4 fc47 	bl	80005f8 <__aeabi_dmul>
 800bd6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd6e:	9c00      	ldr	r4, [sp, #0]
 800bd70:	3601      	adds	r6, #1
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7f4 fbd6 	bl	8000524 <__aeabi_i2d>
 800bd78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd7c:	f7f4 fc3c 	bl	80005f8 <__aeabi_dmul>
 800bd80:	4b76      	ldr	r3, [pc, #472]	@ (800bf5c <_dtoa_r+0x5cc>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	f7f4 fa82 	bl	800028c <__adddf3>
 800bd88:	4605      	mov	r5, r0
 800bd8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd8e:	2c00      	cmp	r4, #0
 800bd90:	f040 808d 	bne.w	800beae <_dtoa_r+0x51e>
 800bd94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd98:	4b71      	ldr	r3, [pc, #452]	@ (800bf60 <_dtoa_r+0x5d0>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f7f4 fa74 	bl	8000288 <__aeabi_dsub>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bda8:	462a      	mov	r2, r5
 800bdaa:	4633      	mov	r3, r6
 800bdac:	f7f4 feb4 	bl	8000b18 <__aeabi_dcmpgt>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	f040 828b 	bne.w	800c2cc <_dtoa_r+0x93c>
 800bdb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdba:	462a      	mov	r2, r5
 800bdbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bdc0:	f7f4 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	f040 8128 	bne.w	800c01a <_dtoa_r+0x68a>
 800bdca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bdce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bdd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f2c0 815a 	blt.w	800c08e <_dtoa_r+0x6fe>
 800bdda:	2f0e      	cmp	r7, #14
 800bddc:	f300 8157 	bgt.w	800c08e <_dtoa_r+0x6fe>
 800bde0:	4b5a      	ldr	r3, [pc, #360]	@ (800bf4c <_dtoa_r+0x5bc>)
 800bde2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bde6:	ed93 7b00 	vldr	d7, [r3]
 800bdea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	ed8d 7b00 	vstr	d7, [sp]
 800bdf2:	da03      	bge.n	800bdfc <_dtoa_r+0x46c>
 800bdf4:	9b07      	ldr	r3, [sp, #28]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f340 8101 	ble.w	800bffe <_dtoa_r+0x66e>
 800bdfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be00:	4656      	mov	r6, sl
 800be02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be06:	4620      	mov	r0, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	f7f4 fd1f 	bl	800084c <__aeabi_ddiv>
 800be0e:	f7f4 fea3 	bl	8000b58 <__aeabi_d2iz>
 800be12:	4680      	mov	r8, r0
 800be14:	f7f4 fb86 	bl	8000524 <__aeabi_i2d>
 800be18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be1c:	f7f4 fbec 	bl	80005f8 <__aeabi_dmul>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be2c:	f7f4 fa2c 	bl	8000288 <__aeabi_dsub>
 800be30:	f806 4b01 	strb.w	r4, [r6], #1
 800be34:	9d07      	ldr	r5, [sp, #28]
 800be36:	eba6 040a 	sub.w	r4, r6, sl
 800be3a:	42a5      	cmp	r5, r4
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	f040 8117 	bne.w	800c072 <_dtoa_r+0x6e2>
 800be44:	f7f4 fa22 	bl	800028c <__adddf3>
 800be48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	f7f4 fe62 	bl	8000b18 <__aeabi_dcmpgt>
 800be54:	2800      	cmp	r0, #0
 800be56:	f040 80f9 	bne.w	800c04c <_dtoa_r+0x6bc>
 800be5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	f7f4 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 800be66:	b118      	cbz	r0, 800be70 <_dtoa_r+0x4e0>
 800be68:	f018 0f01 	tst.w	r8, #1
 800be6c:	f040 80ee 	bne.w	800c04c <_dtoa_r+0x6bc>
 800be70:	4649      	mov	r1, r9
 800be72:	4658      	mov	r0, fp
 800be74:	f000 fc90 	bl	800c798 <_Bfree>
 800be78:	2300      	movs	r3, #0
 800be7a:	7033      	strb	r3, [r6, #0]
 800be7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be7e:	3701      	adds	r7, #1
 800be80:	601f      	str	r7, [r3, #0]
 800be82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 831d 	beq.w	800c4c4 <_dtoa_r+0xb34>
 800be8a:	601e      	str	r6, [r3, #0]
 800be8c:	e31a      	b.n	800c4c4 <_dtoa_r+0xb34>
 800be8e:	07e2      	lsls	r2, r4, #31
 800be90:	d505      	bpl.n	800be9e <_dtoa_r+0x50e>
 800be92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	3601      	adds	r6, #1
 800be9c:	2301      	movs	r3, #1
 800be9e:	1064      	asrs	r4, r4, #1
 800bea0:	3508      	adds	r5, #8
 800bea2:	e73f      	b.n	800bd24 <_dtoa_r+0x394>
 800bea4:	2602      	movs	r6, #2
 800bea6:	e742      	b.n	800bd2e <_dtoa_r+0x39e>
 800bea8:	9c07      	ldr	r4, [sp, #28]
 800beaa:	9704      	str	r7, [sp, #16]
 800beac:	e761      	b.n	800bd72 <_dtoa_r+0x3e2>
 800beae:	4b27      	ldr	r3, [pc, #156]	@ (800bf4c <_dtoa_r+0x5bc>)
 800beb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800beb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800beb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800beba:	4454      	add	r4, sl
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d053      	beq.n	800bf68 <_dtoa_r+0x5d8>
 800bec0:	4928      	ldr	r1, [pc, #160]	@ (800bf64 <_dtoa_r+0x5d4>)
 800bec2:	2000      	movs	r0, #0
 800bec4:	f7f4 fcc2 	bl	800084c <__aeabi_ddiv>
 800bec8:	4633      	mov	r3, r6
 800beca:	462a      	mov	r2, r5
 800becc:	f7f4 f9dc 	bl	8000288 <__aeabi_dsub>
 800bed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bed4:	4656      	mov	r6, sl
 800bed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beda:	f7f4 fe3d 	bl	8000b58 <__aeabi_d2iz>
 800bede:	4605      	mov	r5, r0
 800bee0:	f7f4 fb20 	bl	8000524 <__aeabi_i2d>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beec:	f7f4 f9cc 	bl	8000288 <__aeabi_dsub>
 800bef0:	3530      	adds	r5, #48	@ 0x30
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800befa:	f806 5b01 	strb.w	r5, [r6], #1
 800befe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf02:	f7f4 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d171      	bne.n	800bfee <_dtoa_r+0x65e>
 800bf0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf0e:	4911      	ldr	r1, [pc, #68]	@ (800bf54 <_dtoa_r+0x5c4>)
 800bf10:	2000      	movs	r0, #0
 800bf12:	f7f4 f9b9 	bl	8000288 <__aeabi_dsub>
 800bf16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf1a:	f7f4 fddf 	bl	8000adc <__aeabi_dcmplt>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f040 8095 	bne.w	800c04e <_dtoa_r+0x6be>
 800bf24:	42a6      	cmp	r6, r4
 800bf26:	f43f af50 	beq.w	800bdca <_dtoa_r+0x43a>
 800bf2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf2e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf58 <_dtoa_r+0x5c8>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	f7f4 fb61 	bl	80005f8 <__aeabi_dmul>
 800bf36:	4b08      	ldr	r3, [pc, #32]	@ (800bf58 <_dtoa_r+0x5c8>)
 800bf38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf4a:	e7c4      	b.n	800bed6 <_dtoa_r+0x546>
 800bf4c:	0800f190 	.word	0x0800f190
 800bf50:	0800f168 	.word	0x0800f168
 800bf54:	3ff00000 	.word	0x3ff00000
 800bf58:	40240000 	.word	0x40240000
 800bf5c:	401c0000 	.word	0x401c0000
 800bf60:	40140000 	.word	0x40140000
 800bf64:	3fe00000 	.word	0x3fe00000
 800bf68:	4631      	mov	r1, r6
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f7f4 fb44 	bl	80005f8 <__aeabi_dmul>
 800bf70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf74:	9415      	str	r4, [sp, #84]	@ 0x54
 800bf76:	4656      	mov	r6, sl
 800bf78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf7c:	f7f4 fdec 	bl	8000b58 <__aeabi_d2iz>
 800bf80:	4605      	mov	r5, r0
 800bf82:	f7f4 facf 	bl	8000524 <__aeabi_i2d>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf8e:	f7f4 f97b 	bl	8000288 <__aeabi_dsub>
 800bf92:	3530      	adds	r5, #48	@ 0x30
 800bf94:	f806 5b01 	strb.w	r5, [r6], #1
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	42a6      	cmp	r6, r4
 800bf9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	d124      	bne.n	800bff2 <_dtoa_r+0x662>
 800bfa8:	4bac      	ldr	r3, [pc, #688]	@ (800c25c <_dtoa_r+0x8cc>)
 800bfaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bfae:	f7f4 f96d 	bl	800028c <__adddf3>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfba:	f7f4 fdad 	bl	8000b18 <__aeabi_dcmpgt>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d145      	bne.n	800c04e <_dtoa_r+0x6be>
 800bfc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfc6:	49a5      	ldr	r1, [pc, #660]	@ (800c25c <_dtoa_r+0x8cc>)
 800bfc8:	2000      	movs	r0, #0
 800bfca:	f7f4 f95d 	bl	8000288 <__aeabi_dsub>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd6:	f7f4 fd81 	bl	8000adc <__aeabi_dcmplt>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f43f aef5 	beq.w	800bdca <_dtoa_r+0x43a>
 800bfe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bfe2:	1e73      	subs	r3, r6, #1
 800bfe4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bfe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfea:	2b30      	cmp	r3, #48	@ 0x30
 800bfec:	d0f8      	beq.n	800bfe0 <_dtoa_r+0x650>
 800bfee:	9f04      	ldr	r7, [sp, #16]
 800bff0:	e73e      	b.n	800be70 <_dtoa_r+0x4e0>
 800bff2:	4b9b      	ldr	r3, [pc, #620]	@ (800c260 <_dtoa_r+0x8d0>)
 800bff4:	f7f4 fb00 	bl	80005f8 <__aeabi_dmul>
 800bff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bffc:	e7bc      	b.n	800bf78 <_dtoa_r+0x5e8>
 800bffe:	d10c      	bne.n	800c01a <_dtoa_r+0x68a>
 800c000:	4b98      	ldr	r3, [pc, #608]	@ (800c264 <_dtoa_r+0x8d4>)
 800c002:	2200      	movs	r2, #0
 800c004:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c008:	f7f4 faf6 	bl	80005f8 <__aeabi_dmul>
 800c00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c010:	f7f4 fd78 	bl	8000b04 <__aeabi_dcmpge>
 800c014:	2800      	cmp	r0, #0
 800c016:	f000 8157 	beq.w	800c2c8 <_dtoa_r+0x938>
 800c01a:	2400      	movs	r4, #0
 800c01c:	4625      	mov	r5, r4
 800c01e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c020:	43db      	mvns	r3, r3
 800c022:	9304      	str	r3, [sp, #16]
 800c024:	4656      	mov	r6, sl
 800c026:	2700      	movs	r7, #0
 800c028:	4621      	mov	r1, r4
 800c02a:	4658      	mov	r0, fp
 800c02c:	f000 fbb4 	bl	800c798 <_Bfree>
 800c030:	2d00      	cmp	r5, #0
 800c032:	d0dc      	beq.n	800bfee <_dtoa_r+0x65e>
 800c034:	b12f      	cbz	r7, 800c042 <_dtoa_r+0x6b2>
 800c036:	42af      	cmp	r7, r5
 800c038:	d003      	beq.n	800c042 <_dtoa_r+0x6b2>
 800c03a:	4639      	mov	r1, r7
 800c03c:	4658      	mov	r0, fp
 800c03e:	f000 fbab 	bl	800c798 <_Bfree>
 800c042:	4629      	mov	r1, r5
 800c044:	4658      	mov	r0, fp
 800c046:	f000 fba7 	bl	800c798 <_Bfree>
 800c04a:	e7d0      	b.n	800bfee <_dtoa_r+0x65e>
 800c04c:	9704      	str	r7, [sp, #16]
 800c04e:	4633      	mov	r3, r6
 800c050:	461e      	mov	r6, r3
 800c052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c056:	2a39      	cmp	r2, #57	@ 0x39
 800c058:	d107      	bne.n	800c06a <_dtoa_r+0x6da>
 800c05a:	459a      	cmp	sl, r3
 800c05c:	d1f8      	bne.n	800c050 <_dtoa_r+0x6c0>
 800c05e:	9a04      	ldr	r2, [sp, #16]
 800c060:	3201      	adds	r2, #1
 800c062:	9204      	str	r2, [sp, #16]
 800c064:	2230      	movs	r2, #48	@ 0x30
 800c066:	f88a 2000 	strb.w	r2, [sl]
 800c06a:	781a      	ldrb	r2, [r3, #0]
 800c06c:	3201      	adds	r2, #1
 800c06e:	701a      	strb	r2, [r3, #0]
 800c070:	e7bd      	b.n	800bfee <_dtoa_r+0x65e>
 800c072:	4b7b      	ldr	r3, [pc, #492]	@ (800c260 <_dtoa_r+0x8d0>)
 800c074:	2200      	movs	r2, #0
 800c076:	f7f4 fabf 	bl	80005f8 <__aeabi_dmul>
 800c07a:	2200      	movs	r2, #0
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	460d      	mov	r5, r1
 800c082:	f7f4 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f aebb 	beq.w	800be02 <_dtoa_r+0x472>
 800c08c:	e6f0      	b.n	800be70 <_dtoa_r+0x4e0>
 800c08e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c090:	2a00      	cmp	r2, #0
 800c092:	f000 80db 	beq.w	800c24c <_dtoa_r+0x8bc>
 800c096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c098:	2a01      	cmp	r2, #1
 800c09a:	f300 80bf 	bgt.w	800c21c <_dtoa_r+0x88c>
 800c09e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	f000 80b7 	beq.w	800c214 <_dtoa_r+0x884>
 800c0a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c0aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ac:	4646      	mov	r6, r8
 800c0ae:	9a08      	ldr	r2, [sp, #32]
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	441a      	add	r2, r3
 800c0b4:	4658      	mov	r0, fp
 800c0b6:	4498      	add	r8, r3
 800c0b8:	9208      	str	r2, [sp, #32]
 800c0ba:	f000 fc6b 	bl	800c994 <__i2b>
 800c0be:	4605      	mov	r5, r0
 800c0c0:	b15e      	cbz	r6, 800c0da <_dtoa_r+0x74a>
 800c0c2:	9b08      	ldr	r3, [sp, #32]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dd08      	ble.n	800c0da <_dtoa_r+0x74a>
 800c0c8:	42b3      	cmp	r3, r6
 800c0ca:	9a08      	ldr	r2, [sp, #32]
 800c0cc:	bfa8      	it	ge
 800c0ce:	4633      	movge	r3, r6
 800c0d0:	eba8 0803 	sub.w	r8, r8, r3
 800c0d4:	1af6      	subs	r6, r6, r3
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	9308      	str	r3, [sp, #32]
 800c0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0dc:	b1f3      	cbz	r3, 800c11c <_dtoa_r+0x78c>
 800c0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 80b7 	beq.w	800c254 <_dtoa_r+0x8c4>
 800c0e6:	b18c      	cbz	r4, 800c10c <_dtoa_r+0x77c>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	4658      	mov	r0, fp
 800c0ee:	f000 fd11 	bl	800cb14 <__pow5mult>
 800c0f2:	464a      	mov	r2, r9
 800c0f4:	4601      	mov	r1, r0
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	4658      	mov	r0, fp
 800c0fa:	f000 fc61 	bl	800c9c0 <__multiply>
 800c0fe:	4649      	mov	r1, r9
 800c100:	9004      	str	r0, [sp, #16]
 800c102:	4658      	mov	r0, fp
 800c104:	f000 fb48 	bl	800c798 <_Bfree>
 800c108:	9b04      	ldr	r3, [sp, #16]
 800c10a:	4699      	mov	r9, r3
 800c10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c10e:	1b1a      	subs	r2, r3, r4
 800c110:	d004      	beq.n	800c11c <_dtoa_r+0x78c>
 800c112:	4649      	mov	r1, r9
 800c114:	4658      	mov	r0, fp
 800c116:	f000 fcfd 	bl	800cb14 <__pow5mult>
 800c11a:	4681      	mov	r9, r0
 800c11c:	2101      	movs	r1, #1
 800c11e:	4658      	mov	r0, fp
 800c120:	f000 fc38 	bl	800c994 <__i2b>
 800c124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c126:	4604      	mov	r4, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 81cf 	beq.w	800c4cc <_dtoa_r+0xb3c>
 800c12e:	461a      	mov	r2, r3
 800c130:	4601      	mov	r1, r0
 800c132:	4658      	mov	r0, fp
 800c134:	f000 fcee 	bl	800cb14 <__pow5mult>
 800c138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	4604      	mov	r4, r0
 800c13e:	f300 8095 	bgt.w	800c26c <_dtoa_r+0x8dc>
 800c142:	9b02      	ldr	r3, [sp, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 8087 	bne.w	800c258 <_dtoa_r+0x8c8>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c150:	2b00      	cmp	r3, #0
 800c152:	f040 8089 	bne.w	800c268 <_dtoa_r+0x8d8>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c15c:	0d1b      	lsrs	r3, r3, #20
 800c15e:	051b      	lsls	r3, r3, #20
 800c160:	b12b      	cbz	r3, 800c16e <_dtoa_r+0x7de>
 800c162:	9b08      	ldr	r3, [sp, #32]
 800c164:	3301      	adds	r3, #1
 800c166:	9308      	str	r3, [sp, #32]
 800c168:	f108 0801 	add.w	r8, r8, #1
 800c16c:	2301      	movs	r3, #1
 800c16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 81b0 	beq.w	800c4d8 <_dtoa_r+0xb48>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c17e:	6918      	ldr	r0, [r3, #16]
 800c180:	f000 fbbc 	bl	800c8fc <__hi0bits>
 800c184:	f1c0 0020 	rsb	r0, r0, #32
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	4418      	add	r0, r3
 800c18c:	f010 001f 	ands.w	r0, r0, #31
 800c190:	d077      	beq.n	800c282 <_dtoa_r+0x8f2>
 800c192:	f1c0 0320 	rsb	r3, r0, #32
 800c196:	2b04      	cmp	r3, #4
 800c198:	dd6b      	ble.n	800c272 <_dtoa_r+0x8e2>
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	f1c0 001c 	rsb	r0, r0, #28
 800c1a0:	4403      	add	r3, r0
 800c1a2:	4480      	add	r8, r0
 800c1a4:	4406      	add	r6, r0
 800c1a6:	9308      	str	r3, [sp, #32]
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	dd05      	ble.n	800c1ba <_dtoa_r+0x82a>
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	4658      	mov	r0, fp
 800c1b4:	f000 fd08 	bl	800cbc8 <__lshift>
 800c1b8:	4681      	mov	r9, r0
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	dd05      	ble.n	800c1cc <_dtoa_r+0x83c>
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	4658      	mov	r0, fp
 800c1c6:	f000 fcff 	bl	800cbc8 <__lshift>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d059      	beq.n	800c286 <_dtoa_r+0x8f6>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4648      	mov	r0, r9
 800c1d6:	f000 fd63 	bl	800cca0 <__mcmp>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	da53      	bge.n	800c286 <_dtoa_r+0x8f6>
 800c1de:	1e7b      	subs	r3, r7, #1
 800c1e0:	9304      	str	r3, [sp, #16]
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	220a      	movs	r2, #10
 800c1e8:	4658      	mov	r0, fp
 800c1ea:	f000 faf7 	bl	800c7dc <__multadd>
 800c1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1f0:	4681      	mov	r9, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f000 8172 	beq.w	800c4dc <_dtoa_r+0xb4c>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	220a      	movs	r2, #10
 800c1fe:	4658      	mov	r0, fp
 800c200:	f000 faec 	bl	800c7dc <__multadd>
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	4605      	mov	r5, r0
 800c20a:	dc67      	bgt.n	800c2dc <_dtoa_r+0x94c>
 800c20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c20e:	2b02      	cmp	r3, #2
 800c210:	dc41      	bgt.n	800c296 <_dtoa_r+0x906>
 800c212:	e063      	b.n	800c2dc <_dtoa_r+0x94c>
 800c214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c21a:	e746      	b.n	800c0aa <_dtoa_r+0x71a>
 800c21c:	9b07      	ldr	r3, [sp, #28]
 800c21e:	1e5c      	subs	r4, r3, #1
 800c220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c222:	42a3      	cmp	r3, r4
 800c224:	bfbf      	itttt	lt
 800c226:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c228:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c22a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c22c:	1ae3      	sublt	r3, r4, r3
 800c22e:	bfb4      	ite	lt
 800c230:	18d2      	addlt	r2, r2, r3
 800c232:	1b1c      	subge	r4, r3, r4
 800c234:	9b07      	ldr	r3, [sp, #28]
 800c236:	bfbc      	itt	lt
 800c238:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c23a:	2400      	movlt	r4, #0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	bfb5      	itete	lt
 800c240:	eba8 0603 	sublt.w	r6, r8, r3
 800c244:	9b07      	ldrge	r3, [sp, #28]
 800c246:	2300      	movlt	r3, #0
 800c248:	4646      	movge	r6, r8
 800c24a:	e730      	b.n	800c0ae <_dtoa_r+0x71e>
 800c24c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c24e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c250:	4646      	mov	r6, r8
 800c252:	e735      	b.n	800c0c0 <_dtoa_r+0x730>
 800c254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c256:	e75c      	b.n	800c112 <_dtoa_r+0x782>
 800c258:	2300      	movs	r3, #0
 800c25a:	e788      	b.n	800c16e <_dtoa_r+0x7de>
 800c25c:	3fe00000 	.word	0x3fe00000
 800c260:	40240000 	.word	0x40240000
 800c264:	40140000 	.word	0x40140000
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	e780      	b.n	800c16e <_dtoa_r+0x7de>
 800c26c:	2300      	movs	r3, #0
 800c26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c270:	e782      	b.n	800c178 <_dtoa_r+0x7e8>
 800c272:	d099      	beq.n	800c1a8 <_dtoa_r+0x818>
 800c274:	9a08      	ldr	r2, [sp, #32]
 800c276:	331c      	adds	r3, #28
 800c278:	441a      	add	r2, r3
 800c27a:	4498      	add	r8, r3
 800c27c:	441e      	add	r6, r3
 800c27e:	9208      	str	r2, [sp, #32]
 800c280:	e792      	b.n	800c1a8 <_dtoa_r+0x818>
 800c282:	4603      	mov	r3, r0
 800c284:	e7f6      	b.n	800c274 <_dtoa_r+0x8e4>
 800c286:	9b07      	ldr	r3, [sp, #28]
 800c288:	9704      	str	r7, [sp, #16]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dc20      	bgt.n	800c2d0 <_dtoa_r+0x940>
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c292:	2b02      	cmp	r3, #2
 800c294:	dd1e      	ble.n	800c2d4 <_dtoa_r+0x944>
 800c296:	9b00      	ldr	r3, [sp, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f47f aec0 	bne.w	800c01e <_dtoa_r+0x68e>
 800c29e:	4621      	mov	r1, r4
 800c2a0:	2205      	movs	r2, #5
 800c2a2:	4658      	mov	r0, fp
 800c2a4:	f000 fa9a 	bl	800c7dc <__multadd>
 800c2a8:	4601      	mov	r1, r0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4648      	mov	r0, r9
 800c2ae:	f000 fcf7 	bl	800cca0 <__mcmp>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	f77f aeb3 	ble.w	800c01e <_dtoa_r+0x68e>
 800c2b8:	4656      	mov	r6, sl
 800c2ba:	2331      	movs	r3, #49	@ 0x31
 800c2bc:	f806 3b01 	strb.w	r3, [r6], #1
 800c2c0:	9b04      	ldr	r3, [sp, #16]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	9304      	str	r3, [sp, #16]
 800c2c6:	e6ae      	b.n	800c026 <_dtoa_r+0x696>
 800c2c8:	9c07      	ldr	r4, [sp, #28]
 800c2ca:	9704      	str	r7, [sp, #16]
 800c2cc:	4625      	mov	r5, r4
 800c2ce:	e7f3      	b.n	800c2b8 <_dtoa_r+0x928>
 800c2d0:	9b07      	ldr	r3, [sp, #28]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 8104 	beq.w	800c4e4 <_dtoa_r+0xb54>
 800c2dc:	2e00      	cmp	r6, #0
 800c2de:	dd05      	ble.n	800c2ec <_dtoa_r+0x95c>
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4632      	mov	r2, r6
 800c2e4:	4658      	mov	r0, fp
 800c2e6:	f000 fc6f 	bl	800cbc8 <__lshift>
 800c2ea:	4605      	mov	r5, r0
 800c2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d05a      	beq.n	800c3a8 <_dtoa_r+0xa18>
 800c2f2:	6869      	ldr	r1, [r5, #4]
 800c2f4:	4658      	mov	r0, fp
 800c2f6:	f000 fa0f 	bl	800c718 <_Balloc>
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	b928      	cbnz	r0, 800c30a <_dtoa_r+0x97a>
 800c2fe:	4b84      	ldr	r3, [pc, #528]	@ (800c510 <_dtoa_r+0xb80>)
 800c300:	4602      	mov	r2, r0
 800c302:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c306:	f7ff bb5a 	b.w	800b9be <_dtoa_r+0x2e>
 800c30a:	692a      	ldr	r2, [r5, #16]
 800c30c:	3202      	adds	r2, #2
 800c30e:	0092      	lsls	r2, r2, #2
 800c310:	f105 010c 	add.w	r1, r5, #12
 800c314:	300c      	adds	r0, #12
 800c316:	f7ff fa9e 	bl	800b856 <memcpy>
 800c31a:	2201      	movs	r2, #1
 800c31c:	4631      	mov	r1, r6
 800c31e:	4658      	mov	r0, fp
 800c320:	f000 fc52 	bl	800cbc8 <__lshift>
 800c324:	f10a 0301 	add.w	r3, sl, #1
 800c328:	9307      	str	r3, [sp, #28]
 800c32a:	9b00      	ldr	r3, [sp, #0]
 800c32c:	4453      	add	r3, sl
 800c32e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c330:	9b02      	ldr	r3, [sp, #8]
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	462f      	mov	r7, r5
 800c338:	930a      	str	r3, [sp, #40]	@ 0x28
 800c33a:	4605      	mov	r5, r0
 800c33c:	9b07      	ldr	r3, [sp, #28]
 800c33e:	4621      	mov	r1, r4
 800c340:	3b01      	subs	r3, #1
 800c342:	4648      	mov	r0, r9
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	f7ff fa9b 	bl	800b880 <quorem>
 800c34a:	4639      	mov	r1, r7
 800c34c:	9002      	str	r0, [sp, #8]
 800c34e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c352:	4648      	mov	r0, r9
 800c354:	f000 fca4 	bl	800cca0 <__mcmp>
 800c358:	462a      	mov	r2, r5
 800c35a:	9008      	str	r0, [sp, #32]
 800c35c:	4621      	mov	r1, r4
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 fcba 	bl	800ccd8 <__mdiff>
 800c364:	68c2      	ldr	r2, [r0, #12]
 800c366:	4606      	mov	r6, r0
 800c368:	bb02      	cbnz	r2, 800c3ac <_dtoa_r+0xa1c>
 800c36a:	4601      	mov	r1, r0
 800c36c:	4648      	mov	r0, r9
 800c36e:	f000 fc97 	bl	800cca0 <__mcmp>
 800c372:	4602      	mov	r2, r0
 800c374:	4631      	mov	r1, r6
 800c376:	4658      	mov	r0, fp
 800c378:	920e      	str	r2, [sp, #56]	@ 0x38
 800c37a:	f000 fa0d 	bl	800c798 <_Bfree>
 800c37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c382:	9e07      	ldr	r6, [sp, #28]
 800c384:	ea43 0102 	orr.w	r1, r3, r2
 800c388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c38a:	4319      	orrs	r1, r3
 800c38c:	d110      	bne.n	800c3b0 <_dtoa_r+0xa20>
 800c38e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c392:	d029      	beq.n	800c3e8 <_dtoa_r+0xa58>
 800c394:	9b08      	ldr	r3, [sp, #32]
 800c396:	2b00      	cmp	r3, #0
 800c398:	dd02      	ble.n	800c3a0 <_dtoa_r+0xa10>
 800c39a:	9b02      	ldr	r3, [sp, #8]
 800c39c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c3a0:	9b00      	ldr	r3, [sp, #0]
 800c3a2:	f883 8000 	strb.w	r8, [r3]
 800c3a6:	e63f      	b.n	800c028 <_dtoa_r+0x698>
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	e7bb      	b.n	800c324 <_dtoa_r+0x994>
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	e7e1      	b.n	800c374 <_dtoa_r+0x9e4>
 800c3b0:	9b08      	ldr	r3, [sp, #32]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	db04      	blt.n	800c3c0 <_dtoa_r+0xa30>
 800c3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	d120      	bne.n	800c402 <_dtoa_r+0xa72>
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	dded      	ble.n	800c3a0 <_dtoa_r+0xa10>
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4658      	mov	r0, fp
 800c3ca:	f000 fbfd 	bl	800cbc8 <__lshift>
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4681      	mov	r9, r0
 800c3d2:	f000 fc65 	bl	800cca0 <__mcmp>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	dc03      	bgt.n	800c3e2 <_dtoa_r+0xa52>
 800c3da:	d1e1      	bne.n	800c3a0 <_dtoa_r+0xa10>
 800c3dc:	f018 0f01 	tst.w	r8, #1
 800c3e0:	d0de      	beq.n	800c3a0 <_dtoa_r+0xa10>
 800c3e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3e6:	d1d8      	bne.n	800c39a <_dtoa_r+0xa0a>
 800c3e8:	9a00      	ldr	r2, [sp, #0]
 800c3ea:	2339      	movs	r3, #57	@ 0x39
 800c3ec:	7013      	strb	r3, [r2, #0]
 800c3ee:	4633      	mov	r3, r6
 800c3f0:	461e      	mov	r6, r3
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3f8:	2a39      	cmp	r2, #57	@ 0x39
 800c3fa:	d052      	beq.n	800c4a2 <_dtoa_r+0xb12>
 800c3fc:	3201      	adds	r2, #1
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	e612      	b.n	800c028 <_dtoa_r+0x698>
 800c402:	2a00      	cmp	r2, #0
 800c404:	dd07      	ble.n	800c416 <_dtoa_r+0xa86>
 800c406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c40a:	d0ed      	beq.n	800c3e8 <_dtoa_r+0xa58>
 800c40c:	9a00      	ldr	r2, [sp, #0]
 800c40e:	f108 0301 	add.w	r3, r8, #1
 800c412:	7013      	strb	r3, [r2, #0]
 800c414:	e608      	b.n	800c028 <_dtoa_r+0x698>
 800c416:	9b07      	ldr	r3, [sp, #28]
 800c418:	9a07      	ldr	r2, [sp, #28]
 800c41a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c420:	4293      	cmp	r3, r2
 800c422:	d028      	beq.n	800c476 <_dtoa_r+0xae6>
 800c424:	4649      	mov	r1, r9
 800c426:	2300      	movs	r3, #0
 800c428:	220a      	movs	r2, #10
 800c42a:	4658      	mov	r0, fp
 800c42c:	f000 f9d6 	bl	800c7dc <__multadd>
 800c430:	42af      	cmp	r7, r5
 800c432:	4681      	mov	r9, r0
 800c434:	f04f 0300 	mov.w	r3, #0
 800c438:	f04f 020a 	mov.w	r2, #10
 800c43c:	4639      	mov	r1, r7
 800c43e:	4658      	mov	r0, fp
 800c440:	d107      	bne.n	800c452 <_dtoa_r+0xac2>
 800c442:	f000 f9cb 	bl	800c7dc <__multadd>
 800c446:	4607      	mov	r7, r0
 800c448:	4605      	mov	r5, r0
 800c44a:	9b07      	ldr	r3, [sp, #28]
 800c44c:	3301      	adds	r3, #1
 800c44e:	9307      	str	r3, [sp, #28]
 800c450:	e774      	b.n	800c33c <_dtoa_r+0x9ac>
 800c452:	f000 f9c3 	bl	800c7dc <__multadd>
 800c456:	4629      	mov	r1, r5
 800c458:	4607      	mov	r7, r0
 800c45a:	2300      	movs	r3, #0
 800c45c:	220a      	movs	r2, #10
 800c45e:	4658      	mov	r0, fp
 800c460:	f000 f9bc 	bl	800c7dc <__multadd>
 800c464:	4605      	mov	r5, r0
 800c466:	e7f0      	b.n	800c44a <_dtoa_r+0xaba>
 800c468:	9b00      	ldr	r3, [sp, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bfcc      	ite	gt
 800c46e:	461e      	movgt	r6, r3
 800c470:	2601      	movle	r6, #1
 800c472:	4456      	add	r6, sl
 800c474:	2700      	movs	r7, #0
 800c476:	4649      	mov	r1, r9
 800c478:	2201      	movs	r2, #1
 800c47a:	4658      	mov	r0, fp
 800c47c:	f000 fba4 	bl	800cbc8 <__lshift>
 800c480:	4621      	mov	r1, r4
 800c482:	4681      	mov	r9, r0
 800c484:	f000 fc0c 	bl	800cca0 <__mcmp>
 800c488:	2800      	cmp	r0, #0
 800c48a:	dcb0      	bgt.n	800c3ee <_dtoa_r+0xa5e>
 800c48c:	d102      	bne.n	800c494 <_dtoa_r+0xb04>
 800c48e:	f018 0f01 	tst.w	r8, #1
 800c492:	d1ac      	bne.n	800c3ee <_dtoa_r+0xa5e>
 800c494:	4633      	mov	r3, r6
 800c496:	461e      	mov	r6, r3
 800c498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49c:	2a30      	cmp	r2, #48	@ 0x30
 800c49e:	d0fa      	beq.n	800c496 <_dtoa_r+0xb06>
 800c4a0:	e5c2      	b.n	800c028 <_dtoa_r+0x698>
 800c4a2:	459a      	cmp	sl, r3
 800c4a4:	d1a4      	bne.n	800c3f0 <_dtoa_r+0xa60>
 800c4a6:	9b04      	ldr	r3, [sp, #16]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	2331      	movs	r3, #49	@ 0x31
 800c4ae:	f88a 3000 	strb.w	r3, [sl]
 800c4b2:	e5b9      	b.n	800c028 <_dtoa_r+0x698>
 800c4b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c514 <_dtoa_r+0xb84>
 800c4ba:	b11b      	cbz	r3, 800c4c4 <_dtoa_r+0xb34>
 800c4bc:	f10a 0308 	add.w	r3, sl, #8
 800c4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	b019      	add	sp, #100	@ 0x64
 800c4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	f77f ae37 	ble.w	800c142 <_dtoa_r+0x7b2>
 800c4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4d8:	2001      	movs	r0, #1
 800c4da:	e655      	b.n	800c188 <_dtoa_r+0x7f8>
 800c4dc:	9b00      	ldr	r3, [sp, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f77f aed6 	ble.w	800c290 <_dtoa_r+0x900>
 800c4e4:	4656      	mov	r6, sl
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4648      	mov	r0, r9
 800c4ea:	f7ff f9c9 	bl	800b880 <quorem>
 800c4ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4f2:	f806 8b01 	strb.w	r8, [r6], #1
 800c4f6:	9b00      	ldr	r3, [sp, #0]
 800c4f8:	eba6 020a 	sub.w	r2, r6, sl
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	ddb3      	ble.n	800c468 <_dtoa_r+0xad8>
 800c500:	4649      	mov	r1, r9
 800c502:	2300      	movs	r3, #0
 800c504:	220a      	movs	r2, #10
 800c506:	4658      	mov	r0, fp
 800c508:	f000 f968 	bl	800c7dc <__multadd>
 800c50c:	4681      	mov	r9, r0
 800c50e:	e7ea      	b.n	800c4e6 <_dtoa_r+0xb56>
 800c510:	0800f0f1 	.word	0x0800f0f1
 800c514:	0800f075 	.word	0x0800f075

0800c518 <_free_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4605      	mov	r5, r0
 800c51c:	2900      	cmp	r1, #0
 800c51e:	d041      	beq.n	800c5a4 <_free_r+0x8c>
 800c520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c524:	1f0c      	subs	r4, r1, #4
 800c526:	2b00      	cmp	r3, #0
 800c528:	bfb8      	it	lt
 800c52a:	18e4      	addlt	r4, r4, r3
 800c52c:	f000 f8e8 	bl	800c700 <__malloc_lock>
 800c530:	4a1d      	ldr	r2, [pc, #116]	@ (800c5a8 <_free_r+0x90>)
 800c532:	6813      	ldr	r3, [r2, #0]
 800c534:	b933      	cbnz	r3, 800c544 <_free_r+0x2c>
 800c536:	6063      	str	r3, [r4, #4]
 800c538:	6014      	str	r4, [r2, #0]
 800c53a:	4628      	mov	r0, r5
 800c53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c540:	f000 b8e4 	b.w	800c70c <__malloc_unlock>
 800c544:	42a3      	cmp	r3, r4
 800c546:	d908      	bls.n	800c55a <_free_r+0x42>
 800c548:	6820      	ldr	r0, [r4, #0]
 800c54a:	1821      	adds	r1, r4, r0
 800c54c:	428b      	cmp	r3, r1
 800c54e:	bf01      	itttt	eq
 800c550:	6819      	ldreq	r1, [r3, #0]
 800c552:	685b      	ldreq	r3, [r3, #4]
 800c554:	1809      	addeq	r1, r1, r0
 800c556:	6021      	streq	r1, [r4, #0]
 800c558:	e7ed      	b.n	800c536 <_free_r+0x1e>
 800c55a:	461a      	mov	r2, r3
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	b10b      	cbz	r3, 800c564 <_free_r+0x4c>
 800c560:	42a3      	cmp	r3, r4
 800c562:	d9fa      	bls.n	800c55a <_free_r+0x42>
 800c564:	6811      	ldr	r1, [r2, #0]
 800c566:	1850      	adds	r0, r2, r1
 800c568:	42a0      	cmp	r0, r4
 800c56a:	d10b      	bne.n	800c584 <_free_r+0x6c>
 800c56c:	6820      	ldr	r0, [r4, #0]
 800c56e:	4401      	add	r1, r0
 800c570:	1850      	adds	r0, r2, r1
 800c572:	4283      	cmp	r3, r0
 800c574:	6011      	str	r1, [r2, #0]
 800c576:	d1e0      	bne.n	800c53a <_free_r+0x22>
 800c578:	6818      	ldr	r0, [r3, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	6053      	str	r3, [r2, #4]
 800c57e:	4408      	add	r0, r1
 800c580:	6010      	str	r0, [r2, #0]
 800c582:	e7da      	b.n	800c53a <_free_r+0x22>
 800c584:	d902      	bls.n	800c58c <_free_r+0x74>
 800c586:	230c      	movs	r3, #12
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	e7d6      	b.n	800c53a <_free_r+0x22>
 800c58c:	6820      	ldr	r0, [r4, #0]
 800c58e:	1821      	adds	r1, r4, r0
 800c590:	428b      	cmp	r3, r1
 800c592:	bf04      	itt	eq
 800c594:	6819      	ldreq	r1, [r3, #0]
 800c596:	685b      	ldreq	r3, [r3, #4]
 800c598:	6063      	str	r3, [r4, #4]
 800c59a:	bf04      	itt	eq
 800c59c:	1809      	addeq	r1, r1, r0
 800c59e:	6021      	streq	r1, [r4, #0]
 800c5a0:	6054      	str	r4, [r2, #4]
 800c5a2:	e7ca      	b.n	800c53a <_free_r+0x22>
 800c5a4:	bd38      	pop	{r3, r4, r5, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20003750 	.word	0x20003750

0800c5ac <malloc>:
 800c5ac:	4b02      	ldr	r3, [pc, #8]	@ (800c5b8 <malloc+0xc>)
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f000 b825 	b.w	800c600 <_malloc_r>
 800c5b6:	bf00      	nop
 800c5b8:	20000028 	.word	0x20000028

0800c5bc <sbrk_aligned>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	4e0f      	ldr	r6, [pc, #60]	@ (800c5fc <sbrk_aligned+0x40>)
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	6831      	ldr	r1, [r6, #0]
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	b911      	cbnz	r1, 800c5ce <sbrk_aligned+0x12>
 800c5c8:	f001 ffd2 	bl	800e570 <_sbrk_r>
 800c5cc:	6030      	str	r0, [r6, #0]
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f001 ffcd 	bl	800e570 <_sbrk_r>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	d103      	bne.n	800c5e2 <sbrk_aligned+0x26>
 800c5da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c5de:	4620      	mov	r0, r4
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	1cc4      	adds	r4, r0, #3
 800c5e4:	f024 0403 	bic.w	r4, r4, #3
 800c5e8:	42a0      	cmp	r0, r4
 800c5ea:	d0f8      	beq.n	800c5de <sbrk_aligned+0x22>
 800c5ec:	1a21      	subs	r1, r4, r0
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f001 ffbe 	bl	800e570 <_sbrk_r>
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d1f2      	bne.n	800c5de <sbrk_aligned+0x22>
 800c5f8:	e7ef      	b.n	800c5da <sbrk_aligned+0x1e>
 800c5fa:	bf00      	nop
 800c5fc:	2000374c 	.word	0x2000374c

0800c600 <_malloc_r>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	1ccd      	adds	r5, r1, #3
 800c606:	f025 0503 	bic.w	r5, r5, #3
 800c60a:	3508      	adds	r5, #8
 800c60c:	2d0c      	cmp	r5, #12
 800c60e:	bf38      	it	cc
 800c610:	250c      	movcc	r5, #12
 800c612:	2d00      	cmp	r5, #0
 800c614:	4606      	mov	r6, r0
 800c616:	db01      	blt.n	800c61c <_malloc_r+0x1c>
 800c618:	42a9      	cmp	r1, r5
 800c61a:	d904      	bls.n	800c626 <_malloc_r+0x26>
 800c61c:	230c      	movs	r3, #12
 800c61e:	6033      	str	r3, [r6, #0]
 800c620:	2000      	movs	r0, #0
 800c622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c6fc <_malloc_r+0xfc>
 800c62a:	f000 f869 	bl	800c700 <__malloc_lock>
 800c62e:	f8d8 3000 	ldr.w	r3, [r8]
 800c632:	461c      	mov	r4, r3
 800c634:	bb44      	cbnz	r4, 800c688 <_malloc_r+0x88>
 800c636:	4629      	mov	r1, r5
 800c638:	4630      	mov	r0, r6
 800c63a:	f7ff ffbf 	bl	800c5bc <sbrk_aligned>
 800c63e:	1c43      	adds	r3, r0, #1
 800c640:	4604      	mov	r4, r0
 800c642:	d158      	bne.n	800c6f6 <_malloc_r+0xf6>
 800c644:	f8d8 4000 	ldr.w	r4, [r8]
 800c648:	4627      	mov	r7, r4
 800c64a:	2f00      	cmp	r7, #0
 800c64c:	d143      	bne.n	800c6d6 <_malloc_r+0xd6>
 800c64e:	2c00      	cmp	r4, #0
 800c650:	d04b      	beq.n	800c6ea <_malloc_r+0xea>
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	4639      	mov	r1, r7
 800c656:	4630      	mov	r0, r6
 800c658:	eb04 0903 	add.w	r9, r4, r3
 800c65c:	f001 ff88 	bl	800e570 <_sbrk_r>
 800c660:	4581      	cmp	r9, r0
 800c662:	d142      	bne.n	800c6ea <_malloc_r+0xea>
 800c664:	6821      	ldr	r1, [r4, #0]
 800c666:	1a6d      	subs	r5, r5, r1
 800c668:	4629      	mov	r1, r5
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7ff ffa6 	bl	800c5bc <sbrk_aligned>
 800c670:	3001      	adds	r0, #1
 800c672:	d03a      	beq.n	800c6ea <_malloc_r+0xea>
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	442b      	add	r3, r5
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	f8d8 3000 	ldr.w	r3, [r8]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	bb62      	cbnz	r2, 800c6dc <_malloc_r+0xdc>
 800c682:	f8c8 7000 	str.w	r7, [r8]
 800c686:	e00f      	b.n	800c6a8 <_malloc_r+0xa8>
 800c688:	6822      	ldr	r2, [r4, #0]
 800c68a:	1b52      	subs	r2, r2, r5
 800c68c:	d420      	bmi.n	800c6d0 <_malloc_r+0xd0>
 800c68e:	2a0b      	cmp	r2, #11
 800c690:	d917      	bls.n	800c6c2 <_malloc_r+0xc2>
 800c692:	1961      	adds	r1, r4, r5
 800c694:	42a3      	cmp	r3, r4
 800c696:	6025      	str	r5, [r4, #0]
 800c698:	bf18      	it	ne
 800c69a:	6059      	strne	r1, [r3, #4]
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	bf08      	it	eq
 800c6a0:	f8c8 1000 	streq.w	r1, [r8]
 800c6a4:	5162      	str	r2, [r4, r5]
 800c6a6:	604b      	str	r3, [r1, #4]
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f000 f82f 	bl	800c70c <__malloc_unlock>
 800c6ae:	f104 000b 	add.w	r0, r4, #11
 800c6b2:	1d23      	adds	r3, r4, #4
 800c6b4:	f020 0007 	bic.w	r0, r0, #7
 800c6b8:	1ac2      	subs	r2, r0, r3
 800c6ba:	bf1c      	itt	ne
 800c6bc:	1a1b      	subne	r3, r3, r0
 800c6be:	50a3      	strne	r3, [r4, r2]
 800c6c0:	e7af      	b.n	800c622 <_malloc_r+0x22>
 800c6c2:	6862      	ldr	r2, [r4, #4]
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	bf0c      	ite	eq
 800c6c8:	f8c8 2000 	streq.w	r2, [r8]
 800c6cc:	605a      	strne	r2, [r3, #4]
 800c6ce:	e7eb      	b.n	800c6a8 <_malloc_r+0xa8>
 800c6d0:	4623      	mov	r3, r4
 800c6d2:	6864      	ldr	r4, [r4, #4]
 800c6d4:	e7ae      	b.n	800c634 <_malloc_r+0x34>
 800c6d6:	463c      	mov	r4, r7
 800c6d8:	687f      	ldr	r7, [r7, #4]
 800c6da:	e7b6      	b.n	800c64a <_malloc_r+0x4a>
 800c6dc:	461a      	mov	r2, r3
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d1fb      	bne.n	800c6dc <_malloc_r+0xdc>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	6053      	str	r3, [r2, #4]
 800c6e8:	e7de      	b.n	800c6a8 <_malloc_r+0xa8>
 800c6ea:	230c      	movs	r3, #12
 800c6ec:	6033      	str	r3, [r6, #0]
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f000 f80c 	bl	800c70c <__malloc_unlock>
 800c6f4:	e794      	b.n	800c620 <_malloc_r+0x20>
 800c6f6:	6005      	str	r5, [r0, #0]
 800c6f8:	e7d6      	b.n	800c6a8 <_malloc_r+0xa8>
 800c6fa:	bf00      	nop
 800c6fc:	20003750 	.word	0x20003750

0800c700 <__malloc_lock>:
 800c700:	4801      	ldr	r0, [pc, #4]	@ (800c708 <__malloc_lock+0x8>)
 800c702:	f7ff b8a6 	b.w	800b852 <__retarget_lock_acquire_recursive>
 800c706:	bf00      	nop
 800c708:	20003748 	.word	0x20003748

0800c70c <__malloc_unlock>:
 800c70c:	4801      	ldr	r0, [pc, #4]	@ (800c714 <__malloc_unlock+0x8>)
 800c70e:	f7ff b8a1 	b.w	800b854 <__retarget_lock_release_recursive>
 800c712:	bf00      	nop
 800c714:	20003748 	.word	0x20003748

0800c718 <_Balloc>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	69c6      	ldr	r6, [r0, #28]
 800c71c:	4604      	mov	r4, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	b976      	cbnz	r6, 800c740 <_Balloc+0x28>
 800c722:	2010      	movs	r0, #16
 800c724:	f7ff ff42 	bl	800c5ac <malloc>
 800c728:	4602      	mov	r2, r0
 800c72a:	61e0      	str	r0, [r4, #28]
 800c72c:	b920      	cbnz	r0, 800c738 <_Balloc+0x20>
 800c72e:	4b18      	ldr	r3, [pc, #96]	@ (800c790 <_Balloc+0x78>)
 800c730:	4818      	ldr	r0, [pc, #96]	@ (800c794 <_Balloc+0x7c>)
 800c732:	216b      	movs	r1, #107	@ 0x6b
 800c734:	f001 ff34 	bl	800e5a0 <__assert_func>
 800c738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c73c:	6006      	str	r6, [r0, #0]
 800c73e:	60c6      	str	r6, [r0, #12]
 800c740:	69e6      	ldr	r6, [r4, #28]
 800c742:	68f3      	ldr	r3, [r6, #12]
 800c744:	b183      	cbz	r3, 800c768 <_Balloc+0x50>
 800c746:	69e3      	ldr	r3, [r4, #28]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c74e:	b9b8      	cbnz	r0, 800c780 <_Balloc+0x68>
 800c750:	2101      	movs	r1, #1
 800c752:	fa01 f605 	lsl.w	r6, r1, r5
 800c756:	1d72      	adds	r2, r6, #5
 800c758:	0092      	lsls	r2, r2, #2
 800c75a:	4620      	mov	r0, r4
 800c75c:	f001 ff3e 	bl	800e5dc <_calloc_r>
 800c760:	b160      	cbz	r0, 800c77c <_Balloc+0x64>
 800c762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c766:	e00e      	b.n	800c786 <_Balloc+0x6e>
 800c768:	2221      	movs	r2, #33	@ 0x21
 800c76a:	2104      	movs	r1, #4
 800c76c:	4620      	mov	r0, r4
 800c76e:	f001 ff35 	bl	800e5dc <_calloc_r>
 800c772:	69e3      	ldr	r3, [r4, #28]
 800c774:	60f0      	str	r0, [r6, #12]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1e4      	bne.n	800c746 <_Balloc+0x2e>
 800c77c:	2000      	movs	r0, #0
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	6802      	ldr	r2, [r0, #0]
 800c782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c786:	2300      	movs	r3, #0
 800c788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c78c:	e7f7      	b.n	800c77e <_Balloc+0x66>
 800c78e:	bf00      	nop
 800c790:	0800f082 	.word	0x0800f082
 800c794:	0800f102 	.word	0x0800f102

0800c798 <_Bfree>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	69c6      	ldr	r6, [r0, #28]
 800c79c:	4605      	mov	r5, r0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	b976      	cbnz	r6, 800c7c0 <_Bfree+0x28>
 800c7a2:	2010      	movs	r0, #16
 800c7a4:	f7ff ff02 	bl	800c5ac <malloc>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	61e8      	str	r0, [r5, #28]
 800c7ac:	b920      	cbnz	r0, 800c7b8 <_Bfree+0x20>
 800c7ae:	4b09      	ldr	r3, [pc, #36]	@ (800c7d4 <_Bfree+0x3c>)
 800c7b0:	4809      	ldr	r0, [pc, #36]	@ (800c7d8 <_Bfree+0x40>)
 800c7b2:	218f      	movs	r1, #143	@ 0x8f
 800c7b4:	f001 fef4 	bl	800e5a0 <__assert_func>
 800c7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7bc:	6006      	str	r6, [r0, #0]
 800c7be:	60c6      	str	r6, [r0, #12]
 800c7c0:	b13c      	cbz	r4, 800c7d2 <_Bfree+0x3a>
 800c7c2:	69eb      	ldr	r3, [r5, #28]
 800c7c4:	6862      	ldr	r2, [r4, #4]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7cc:	6021      	str	r1, [r4, #0]
 800c7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7d2:	bd70      	pop	{r4, r5, r6, pc}
 800c7d4:	0800f082 	.word	0x0800f082
 800c7d8:	0800f102 	.word	0x0800f102

0800c7dc <__multadd>:
 800c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e0:	690d      	ldr	r5, [r1, #16]
 800c7e2:	4607      	mov	r7, r0
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	461e      	mov	r6, r3
 800c7e8:	f101 0c14 	add.w	ip, r1, #20
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c7f2:	b299      	uxth	r1, r3
 800c7f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c7f8:	0c1e      	lsrs	r6, r3, #16
 800c7fa:	0c0b      	lsrs	r3, r1, #16
 800c7fc:	fb02 3306 	mla	r3, r2, r6, r3
 800c800:	b289      	uxth	r1, r1
 800c802:	3001      	adds	r0, #1
 800c804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c808:	4285      	cmp	r5, r0
 800c80a:	f84c 1b04 	str.w	r1, [ip], #4
 800c80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c812:	dcec      	bgt.n	800c7ee <__multadd+0x12>
 800c814:	b30e      	cbz	r6, 800c85a <__multadd+0x7e>
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	42ab      	cmp	r3, r5
 800c81a:	dc19      	bgt.n	800c850 <__multadd+0x74>
 800c81c:	6861      	ldr	r1, [r4, #4]
 800c81e:	4638      	mov	r0, r7
 800c820:	3101      	adds	r1, #1
 800c822:	f7ff ff79 	bl	800c718 <_Balloc>
 800c826:	4680      	mov	r8, r0
 800c828:	b928      	cbnz	r0, 800c836 <__multadd+0x5a>
 800c82a:	4602      	mov	r2, r0
 800c82c:	4b0c      	ldr	r3, [pc, #48]	@ (800c860 <__multadd+0x84>)
 800c82e:	480d      	ldr	r0, [pc, #52]	@ (800c864 <__multadd+0x88>)
 800c830:	21ba      	movs	r1, #186	@ 0xba
 800c832:	f001 feb5 	bl	800e5a0 <__assert_func>
 800c836:	6922      	ldr	r2, [r4, #16]
 800c838:	3202      	adds	r2, #2
 800c83a:	f104 010c 	add.w	r1, r4, #12
 800c83e:	0092      	lsls	r2, r2, #2
 800c840:	300c      	adds	r0, #12
 800c842:	f7ff f808 	bl	800b856 <memcpy>
 800c846:	4621      	mov	r1, r4
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ffa5 	bl	800c798 <_Bfree>
 800c84e:	4644      	mov	r4, r8
 800c850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c854:	3501      	adds	r5, #1
 800c856:	615e      	str	r6, [r3, #20]
 800c858:	6125      	str	r5, [r4, #16]
 800c85a:	4620      	mov	r0, r4
 800c85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c860:	0800f0f1 	.word	0x0800f0f1
 800c864:	0800f102 	.word	0x0800f102

0800c868 <__s2b>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	4615      	mov	r5, r2
 800c870:	461f      	mov	r7, r3
 800c872:	2209      	movs	r2, #9
 800c874:	3308      	adds	r3, #8
 800c876:	4606      	mov	r6, r0
 800c878:	fb93 f3f2 	sdiv	r3, r3, r2
 800c87c:	2100      	movs	r1, #0
 800c87e:	2201      	movs	r2, #1
 800c880:	429a      	cmp	r2, r3
 800c882:	db09      	blt.n	800c898 <__s2b+0x30>
 800c884:	4630      	mov	r0, r6
 800c886:	f7ff ff47 	bl	800c718 <_Balloc>
 800c88a:	b940      	cbnz	r0, 800c89e <__s2b+0x36>
 800c88c:	4602      	mov	r2, r0
 800c88e:	4b19      	ldr	r3, [pc, #100]	@ (800c8f4 <__s2b+0x8c>)
 800c890:	4819      	ldr	r0, [pc, #100]	@ (800c8f8 <__s2b+0x90>)
 800c892:	21d3      	movs	r1, #211	@ 0xd3
 800c894:	f001 fe84 	bl	800e5a0 <__assert_func>
 800c898:	0052      	lsls	r2, r2, #1
 800c89a:	3101      	adds	r1, #1
 800c89c:	e7f0      	b.n	800c880 <__s2b+0x18>
 800c89e:	9b08      	ldr	r3, [sp, #32]
 800c8a0:	6143      	str	r3, [r0, #20]
 800c8a2:	2d09      	cmp	r5, #9
 800c8a4:	f04f 0301 	mov.w	r3, #1
 800c8a8:	6103      	str	r3, [r0, #16]
 800c8aa:	dd16      	ble.n	800c8da <__s2b+0x72>
 800c8ac:	f104 0909 	add.w	r9, r4, #9
 800c8b0:	46c8      	mov	r8, r9
 800c8b2:	442c      	add	r4, r5
 800c8b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c8b8:	4601      	mov	r1, r0
 800c8ba:	3b30      	subs	r3, #48	@ 0x30
 800c8bc:	220a      	movs	r2, #10
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f7ff ff8c 	bl	800c7dc <__multadd>
 800c8c4:	45a0      	cmp	r8, r4
 800c8c6:	d1f5      	bne.n	800c8b4 <__s2b+0x4c>
 800c8c8:	f1a5 0408 	sub.w	r4, r5, #8
 800c8cc:	444c      	add	r4, r9
 800c8ce:	1b2d      	subs	r5, r5, r4
 800c8d0:	1963      	adds	r3, r4, r5
 800c8d2:	42bb      	cmp	r3, r7
 800c8d4:	db04      	blt.n	800c8e0 <__s2b+0x78>
 800c8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8da:	340a      	adds	r4, #10
 800c8dc:	2509      	movs	r5, #9
 800c8de:	e7f6      	b.n	800c8ce <__s2b+0x66>
 800c8e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	3b30      	subs	r3, #48	@ 0x30
 800c8e8:	220a      	movs	r2, #10
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff ff76 	bl	800c7dc <__multadd>
 800c8f0:	e7ee      	b.n	800c8d0 <__s2b+0x68>
 800c8f2:	bf00      	nop
 800c8f4:	0800f0f1 	.word	0x0800f0f1
 800c8f8:	0800f102 	.word	0x0800f102

0800c8fc <__hi0bits>:
 800c8fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c900:	4603      	mov	r3, r0
 800c902:	bf36      	itet	cc
 800c904:	0403      	lslcc	r3, r0, #16
 800c906:	2000      	movcs	r0, #0
 800c908:	2010      	movcc	r0, #16
 800c90a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c90e:	bf3c      	itt	cc
 800c910:	021b      	lslcc	r3, r3, #8
 800c912:	3008      	addcc	r0, #8
 800c914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c918:	bf3c      	itt	cc
 800c91a:	011b      	lslcc	r3, r3, #4
 800c91c:	3004      	addcc	r0, #4
 800c91e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c922:	bf3c      	itt	cc
 800c924:	009b      	lslcc	r3, r3, #2
 800c926:	3002      	addcc	r0, #2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	db05      	blt.n	800c938 <__hi0bits+0x3c>
 800c92c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c930:	f100 0001 	add.w	r0, r0, #1
 800c934:	bf08      	it	eq
 800c936:	2020      	moveq	r0, #32
 800c938:	4770      	bx	lr

0800c93a <__lo0bits>:
 800c93a:	6803      	ldr	r3, [r0, #0]
 800c93c:	4602      	mov	r2, r0
 800c93e:	f013 0007 	ands.w	r0, r3, #7
 800c942:	d00b      	beq.n	800c95c <__lo0bits+0x22>
 800c944:	07d9      	lsls	r1, r3, #31
 800c946:	d421      	bmi.n	800c98c <__lo0bits+0x52>
 800c948:	0798      	lsls	r0, r3, #30
 800c94a:	bf49      	itett	mi
 800c94c:	085b      	lsrmi	r3, r3, #1
 800c94e:	089b      	lsrpl	r3, r3, #2
 800c950:	2001      	movmi	r0, #1
 800c952:	6013      	strmi	r3, [r2, #0]
 800c954:	bf5c      	itt	pl
 800c956:	6013      	strpl	r3, [r2, #0]
 800c958:	2002      	movpl	r0, #2
 800c95a:	4770      	bx	lr
 800c95c:	b299      	uxth	r1, r3
 800c95e:	b909      	cbnz	r1, 800c964 <__lo0bits+0x2a>
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	2010      	movs	r0, #16
 800c964:	b2d9      	uxtb	r1, r3
 800c966:	b909      	cbnz	r1, 800c96c <__lo0bits+0x32>
 800c968:	3008      	adds	r0, #8
 800c96a:	0a1b      	lsrs	r3, r3, #8
 800c96c:	0719      	lsls	r1, r3, #28
 800c96e:	bf04      	itt	eq
 800c970:	091b      	lsreq	r3, r3, #4
 800c972:	3004      	addeq	r0, #4
 800c974:	0799      	lsls	r1, r3, #30
 800c976:	bf04      	itt	eq
 800c978:	089b      	lsreq	r3, r3, #2
 800c97a:	3002      	addeq	r0, #2
 800c97c:	07d9      	lsls	r1, r3, #31
 800c97e:	d403      	bmi.n	800c988 <__lo0bits+0x4e>
 800c980:	085b      	lsrs	r3, r3, #1
 800c982:	f100 0001 	add.w	r0, r0, #1
 800c986:	d003      	beq.n	800c990 <__lo0bits+0x56>
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	4770      	bx	lr
 800c98c:	2000      	movs	r0, #0
 800c98e:	4770      	bx	lr
 800c990:	2020      	movs	r0, #32
 800c992:	4770      	bx	lr

0800c994 <__i2b>:
 800c994:	b510      	push	{r4, lr}
 800c996:	460c      	mov	r4, r1
 800c998:	2101      	movs	r1, #1
 800c99a:	f7ff febd 	bl	800c718 <_Balloc>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	b928      	cbnz	r0, 800c9ae <__i2b+0x1a>
 800c9a2:	4b05      	ldr	r3, [pc, #20]	@ (800c9b8 <__i2b+0x24>)
 800c9a4:	4805      	ldr	r0, [pc, #20]	@ (800c9bc <__i2b+0x28>)
 800c9a6:	f240 1145 	movw	r1, #325	@ 0x145
 800c9aa:	f001 fdf9 	bl	800e5a0 <__assert_func>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	6144      	str	r4, [r0, #20]
 800c9b2:	6103      	str	r3, [r0, #16]
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0800f0f1 	.word	0x0800f0f1
 800c9bc:	0800f102 	.word	0x0800f102

0800c9c0 <__multiply>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	4614      	mov	r4, r2
 800c9c6:	690a      	ldr	r2, [r1, #16]
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	bfa8      	it	ge
 800c9ce:	4623      	movge	r3, r4
 800c9d0:	460f      	mov	r7, r1
 800c9d2:	bfa4      	itt	ge
 800c9d4:	460c      	movge	r4, r1
 800c9d6:	461f      	movge	r7, r3
 800c9d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c9dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c9e0:	68a3      	ldr	r3, [r4, #8]
 800c9e2:	6861      	ldr	r1, [r4, #4]
 800c9e4:	eb0a 0609 	add.w	r6, sl, r9
 800c9e8:	42b3      	cmp	r3, r6
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	bfb8      	it	lt
 800c9ee:	3101      	addlt	r1, #1
 800c9f0:	f7ff fe92 	bl	800c718 <_Balloc>
 800c9f4:	b930      	cbnz	r0, 800ca04 <__multiply+0x44>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	4b44      	ldr	r3, [pc, #272]	@ (800cb0c <__multiply+0x14c>)
 800c9fa:	4845      	ldr	r0, [pc, #276]	@ (800cb10 <__multiply+0x150>)
 800c9fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca00:	f001 fdce 	bl	800e5a0 <__assert_func>
 800ca04:	f100 0514 	add.w	r5, r0, #20
 800ca08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	2200      	movs	r2, #0
 800ca10:	4543      	cmp	r3, r8
 800ca12:	d321      	bcc.n	800ca58 <__multiply+0x98>
 800ca14:	f107 0114 	add.w	r1, r7, #20
 800ca18:	f104 0214 	add.w	r2, r4, #20
 800ca1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ca20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	1b13      	subs	r3, r2, r4
 800ca28:	3b15      	subs	r3, #21
 800ca2a:	f023 0303 	bic.w	r3, r3, #3
 800ca2e:	3304      	adds	r3, #4
 800ca30:	f104 0715 	add.w	r7, r4, #21
 800ca34:	42ba      	cmp	r2, r7
 800ca36:	bf38      	it	cc
 800ca38:	2304      	movcc	r3, #4
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	9b02      	ldr	r3, [sp, #8]
 800ca3e:	9103      	str	r1, [sp, #12]
 800ca40:	428b      	cmp	r3, r1
 800ca42:	d80c      	bhi.n	800ca5e <__multiply+0x9e>
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	dd03      	ble.n	800ca50 <__multiply+0x90>
 800ca48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d05b      	beq.n	800cb08 <__multiply+0x148>
 800ca50:	6106      	str	r6, [r0, #16]
 800ca52:	b005      	add	sp, #20
 800ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca58:	f843 2b04 	str.w	r2, [r3], #4
 800ca5c:	e7d8      	b.n	800ca10 <__multiply+0x50>
 800ca5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca62:	f1ba 0f00 	cmp.w	sl, #0
 800ca66:	d024      	beq.n	800cab2 <__multiply+0xf2>
 800ca68:	f104 0e14 	add.w	lr, r4, #20
 800ca6c:	46a9      	mov	r9, r5
 800ca6e:	f04f 0c00 	mov.w	ip, #0
 800ca72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca76:	f8d9 3000 	ldr.w	r3, [r9]
 800ca7a:	fa1f fb87 	uxth.w	fp, r7
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca88:	f8d9 7000 	ldr.w	r7, [r9]
 800ca8c:	4463      	add	r3, ip
 800ca8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca92:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800caa0:	4572      	cmp	r2, lr
 800caa2:	f849 3b04 	str.w	r3, [r9], #4
 800caa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800caaa:	d8e2      	bhi.n	800ca72 <__multiply+0xb2>
 800caac:	9b01      	ldr	r3, [sp, #4]
 800caae:	f845 c003 	str.w	ip, [r5, r3]
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cab8:	3104      	adds	r1, #4
 800caba:	f1b9 0f00 	cmp.w	r9, #0
 800cabe:	d021      	beq.n	800cb04 <__multiply+0x144>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	f104 0c14 	add.w	ip, r4, #20
 800cac6:	46ae      	mov	lr, r5
 800cac8:	f04f 0a00 	mov.w	sl, #0
 800cacc:	f8bc b000 	ldrh.w	fp, [ip]
 800cad0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cad4:	fb09 770b 	mla	r7, r9, fp, r7
 800cad8:	4457      	add	r7, sl
 800cada:	b29b      	uxth	r3, r3
 800cadc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cae0:	f84e 3b04 	str.w	r3, [lr], #4
 800cae4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caec:	f8be 3000 	ldrh.w	r3, [lr]
 800caf0:	fb09 330a 	mla	r3, r9, sl, r3
 800caf4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800caf8:	4562      	cmp	r2, ip
 800cafa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cafe:	d8e5      	bhi.n	800cacc <__multiply+0x10c>
 800cb00:	9f01      	ldr	r7, [sp, #4]
 800cb02:	51eb      	str	r3, [r5, r7]
 800cb04:	3504      	adds	r5, #4
 800cb06:	e799      	b.n	800ca3c <__multiply+0x7c>
 800cb08:	3e01      	subs	r6, #1
 800cb0a:	e79b      	b.n	800ca44 <__multiply+0x84>
 800cb0c:	0800f0f1 	.word	0x0800f0f1
 800cb10:	0800f102 	.word	0x0800f102

0800cb14 <__pow5mult>:
 800cb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb18:	4615      	mov	r5, r2
 800cb1a:	f012 0203 	ands.w	r2, r2, #3
 800cb1e:	4607      	mov	r7, r0
 800cb20:	460e      	mov	r6, r1
 800cb22:	d007      	beq.n	800cb34 <__pow5mult+0x20>
 800cb24:	4c25      	ldr	r4, [pc, #148]	@ (800cbbc <__pow5mult+0xa8>)
 800cb26:	3a01      	subs	r2, #1
 800cb28:	2300      	movs	r3, #0
 800cb2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb2e:	f7ff fe55 	bl	800c7dc <__multadd>
 800cb32:	4606      	mov	r6, r0
 800cb34:	10ad      	asrs	r5, r5, #2
 800cb36:	d03d      	beq.n	800cbb4 <__pow5mult+0xa0>
 800cb38:	69fc      	ldr	r4, [r7, #28]
 800cb3a:	b97c      	cbnz	r4, 800cb5c <__pow5mult+0x48>
 800cb3c:	2010      	movs	r0, #16
 800cb3e:	f7ff fd35 	bl	800c5ac <malloc>
 800cb42:	4602      	mov	r2, r0
 800cb44:	61f8      	str	r0, [r7, #28]
 800cb46:	b928      	cbnz	r0, 800cb54 <__pow5mult+0x40>
 800cb48:	4b1d      	ldr	r3, [pc, #116]	@ (800cbc0 <__pow5mult+0xac>)
 800cb4a:	481e      	ldr	r0, [pc, #120]	@ (800cbc4 <__pow5mult+0xb0>)
 800cb4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cb50:	f001 fd26 	bl	800e5a0 <__assert_func>
 800cb54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb58:	6004      	str	r4, [r0, #0]
 800cb5a:	60c4      	str	r4, [r0, #12]
 800cb5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb64:	b94c      	cbnz	r4, 800cb7a <__pow5mult+0x66>
 800cb66:	f240 2171 	movw	r1, #625	@ 0x271
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f7ff ff12 	bl	800c994 <__i2b>
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb76:	4604      	mov	r4, r0
 800cb78:	6003      	str	r3, [r0, #0]
 800cb7a:	f04f 0900 	mov.w	r9, #0
 800cb7e:	07eb      	lsls	r3, r5, #31
 800cb80:	d50a      	bpl.n	800cb98 <__pow5mult+0x84>
 800cb82:	4631      	mov	r1, r6
 800cb84:	4622      	mov	r2, r4
 800cb86:	4638      	mov	r0, r7
 800cb88:	f7ff ff1a 	bl	800c9c0 <__multiply>
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4680      	mov	r8, r0
 800cb90:	4638      	mov	r0, r7
 800cb92:	f7ff fe01 	bl	800c798 <_Bfree>
 800cb96:	4646      	mov	r6, r8
 800cb98:	106d      	asrs	r5, r5, #1
 800cb9a:	d00b      	beq.n	800cbb4 <__pow5mult+0xa0>
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	b938      	cbnz	r0, 800cbb0 <__pow5mult+0x9c>
 800cba0:	4622      	mov	r2, r4
 800cba2:	4621      	mov	r1, r4
 800cba4:	4638      	mov	r0, r7
 800cba6:	f7ff ff0b 	bl	800c9c0 <__multiply>
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	f8c0 9000 	str.w	r9, [r0]
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	e7e4      	b.n	800cb7e <__pow5mult+0x6a>
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbba:	bf00      	nop
 800cbbc:	0800f15c 	.word	0x0800f15c
 800cbc0:	0800f082 	.word	0x0800f082
 800cbc4:	0800f102 	.word	0x0800f102

0800cbc8 <__lshift>:
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	460c      	mov	r4, r1
 800cbce:	6849      	ldr	r1, [r1, #4]
 800cbd0:	6923      	ldr	r3, [r4, #16]
 800cbd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbd6:	68a3      	ldr	r3, [r4, #8]
 800cbd8:	4607      	mov	r7, r0
 800cbda:	4691      	mov	r9, r2
 800cbdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbe0:	f108 0601 	add.w	r6, r8, #1
 800cbe4:	42b3      	cmp	r3, r6
 800cbe6:	db0b      	blt.n	800cc00 <__lshift+0x38>
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f7ff fd95 	bl	800c718 <_Balloc>
 800cbee:	4605      	mov	r5, r0
 800cbf0:	b948      	cbnz	r0, 800cc06 <__lshift+0x3e>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	4b28      	ldr	r3, [pc, #160]	@ (800cc98 <__lshift+0xd0>)
 800cbf6:	4829      	ldr	r0, [pc, #164]	@ (800cc9c <__lshift+0xd4>)
 800cbf8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cbfc:	f001 fcd0 	bl	800e5a0 <__assert_func>
 800cc00:	3101      	adds	r1, #1
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	e7ee      	b.n	800cbe4 <__lshift+0x1c>
 800cc06:	2300      	movs	r3, #0
 800cc08:	f100 0114 	add.w	r1, r0, #20
 800cc0c:	f100 0210 	add.w	r2, r0, #16
 800cc10:	4618      	mov	r0, r3
 800cc12:	4553      	cmp	r3, sl
 800cc14:	db33      	blt.n	800cc7e <__lshift+0xb6>
 800cc16:	6920      	ldr	r0, [r4, #16]
 800cc18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc1c:	f104 0314 	add.w	r3, r4, #20
 800cc20:	f019 091f 	ands.w	r9, r9, #31
 800cc24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc2c:	d02b      	beq.n	800cc86 <__lshift+0xbe>
 800cc2e:	f1c9 0e20 	rsb	lr, r9, #32
 800cc32:	468a      	mov	sl, r1
 800cc34:	2200      	movs	r2, #0
 800cc36:	6818      	ldr	r0, [r3, #0]
 800cc38:	fa00 f009 	lsl.w	r0, r0, r9
 800cc3c:	4310      	orrs	r0, r2
 800cc3e:	f84a 0b04 	str.w	r0, [sl], #4
 800cc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc46:	459c      	cmp	ip, r3
 800cc48:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc4c:	d8f3      	bhi.n	800cc36 <__lshift+0x6e>
 800cc4e:	ebac 0304 	sub.w	r3, ip, r4
 800cc52:	3b15      	subs	r3, #21
 800cc54:	f023 0303 	bic.w	r3, r3, #3
 800cc58:	3304      	adds	r3, #4
 800cc5a:	f104 0015 	add.w	r0, r4, #21
 800cc5e:	4584      	cmp	ip, r0
 800cc60:	bf38      	it	cc
 800cc62:	2304      	movcc	r3, #4
 800cc64:	50ca      	str	r2, [r1, r3]
 800cc66:	b10a      	cbz	r2, 800cc6c <__lshift+0xa4>
 800cc68:	f108 0602 	add.w	r6, r8, #2
 800cc6c:	3e01      	subs	r6, #1
 800cc6e:	4638      	mov	r0, r7
 800cc70:	612e      	str	r6, [r5, #16]
 800cc72:	4621      	mov	r1, r4
 800cc74:	f7ff fd90 	bl	800c798 <_Bfree>
 800cc78:	4628      	mov	r0, r5
 800cc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc82:	3301      	adds	r3, #1
 800cc84:	e7c5      	b.n	800cc12 <__lshift+0x4a>
 800cc86:	3904      	subs	r1, #4
 800cc88:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc90:	459c      	cmp	ip, r3
 800cc92:	d8f9      	bhi.n	800cc88 <__lshift+0xc0>
 800cc94:	e7ea      	b.n	800cc6c <__lshift+0xa4>
 800cc96:	bf00      	nop
 800cc98:	0800f0f1 	.word	0x0800f0f1
 800cc9c:	0800f102 	.word	0x0800f102

0800cca0 <__mcmp>:
 800cca0:	690a      	ldr	r2, [r1, #16]
 800cca2:	4603      	mov	r3, r0
 800cca4:	6900      	ldr	r0, [r0, #16]
 800cca6:	1a80      	subs	r0, r0, r2
 800cca8:	b530      	push	{r4, r5, lr}
 800ccaa:	d10e      	bne.n	800ccca <__mcmp+0x2a>
 800ccac:	3314      	adds	r3, #20
 800ccae:	3114      	adds	r1, #20
 800ccb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ccb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ccb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ccbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ccc0:	4295      	cmp	r5, r2
 800ccc2:	d003      	beq.n	800cccc <__mcmp+0x2c>
 800ccc4:	d205      	bcs.n	800ccd2 <__mcmp+0x32>
 800ccc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ccca:	bd30      	pop	{r4, r5, pc}
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	d3f3      	bcc.n	800ccb8 <__mcmp+0x18>
 800ccd0:	e7fb      	b.n	800ccca <__mcmp+0x2a>
 800ccd2:	2001      	movs	r0, #1
 800ccd4:	e7f9      	b.n	800ccca <__mcmp+0x2a>
	...

0800ccd8 <__mdiff>:
 800ccd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	4689      	mov	r9, r1
 800ccde:	4606      	mov	r6, r0
 800cce0:	4611      	mov	r1, r2
 800cce2:	4648      	mov	r0, r9
 800cce4:	4614      	mov	r4, r2
 800cce6:	f7ff ffdb 	bl	800cca0 <__mcmp>
 800ccea:	1e05      	subs	r5, r0, #0
 800ccec:	d112      	bne.n	800cd14 <__mdiff+0x3c>
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f7ff fd11 	bl	800c718 <_Balloc>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	b928      	cbnz	r0, 800cd06 <__mdiff+0x2e>
 800ccfa:	4b3f      	ldr	r3, [pc, #252]	@ (800cdf8 <__mdiff+0x120>)
 800ccfc:	f240 2137 	movw	r1, #567	@ 0x237
 800cd00:	483e      	ldr	r0, [pc, #248]	@ (800cdfc <__mdiff+0x124>)
 800cd02:	f001 fc4d 	bl	800e5a0 <__assert_func>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	b003      	add	sp, #12
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	bfbc      	itt	lt
 800cd16:	464b      	movlt	r3, r9
 800cd18:	46a1      	movlt	r9, r4
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd20:	bfba      	itte	lt
 800cd22:	461c      	movlt	r4, r3
 800cd24:	2501      	movlt	r5, #1
 800cd26:	2500      	movge	r5, #0
 800cd28:	f7ff fcf6 	bl	800c718 <_Balloc>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	b918      	cbnz	r0, 800cd38 <__mdiff+0x60>
 800cd30:	4b31      	ldr	r3, [pc, #196]	@ (800cdf8 <__mdiff+0x120>)
 800cd32:	f240 2145 	movw	r1, #581	@ 0x245
 800cd36:	e7e3      	b.n	800cd00 <__mdiff+0x28>
 800cd38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cd3c:	6926      	ldr	r6, [r4, #16]
 800cd3e:	60c5      	str	r5, [r0, #12]
 800cd40:	f109 0310 	add.w	r3, r9, #16
 800cd44:	f109 0514 	add.w	r5, r9, #20
 800cd48:	f104 0e14 	add.w	lr, r4, #20
 800cd4c:	f100 0b14 	add.w	fp, r0, #20
 800cd50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	46d9      	mov	r9, fp
 800cd5c:	f04f 0c00 	mov.w	ip, #0
 800cd60:	9b01      	ldr	r3, [sp, #4]
 800cd62:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd66:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	fa1f f38a 	uxth.w	r3, sl
 800cd70:	4619      	mov	r1, r3
 800cd72:	b283      	uxth	r3, r0
 800cd74:	1acb      	subs	r3, r1, r3
 800cd76:	0c00      	lsrs	r0, r0, #16
 800cd78:	4463      	add	r3, ip
 800cd7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd88:	4576      	cmp	r6, lr
 800cd8a:	f849 3b04 	str.w	r3, [r9], #4
 800cd8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd92:	d8e5      	bhi.n	800cd60 <__mdiff+0x88>
 800cd94:	1b33      	subs	r3, r6, r4
 800cd96:	3b15      	subs	r3, #21
 800cd98:	f023 0303 	bic.w	r3, r3, #3
 800cd9c:	3415      	adds	r4, #21
 800cd9e:	3304      	adds	r3, #4
 800cda0:	42a6      	cmp	r6, r4
 800cda2:	bf38      	it	cc
 800cda4:	2304      	movcc	r3, #4
 800cda6:	441d      	add	r5, r3
 800cda8:	445b      	add	r3, fp
 800cdaa:	461e      	mov	r6, r3
 800cdac:	462c      	mov	r4, r5
 800cdae:	4544      	cmp	r4, r8
 800cdb0:	d30e      	bcc.n	800cdd0 <__mdiff+0xf8>
 800cdb2:	f108 0103 	add.w	r1, r8, #3
 800cdb6:	1b49      	subs	r1, r1, r5
 800cdb8:	f021 0103 	bic.w	r1, r1, #3
 800cdbc:	3d03      	subs	r5, #3
 800cdbe:	45a8      	cmp	r8, r5
 800cdc0:	bf38      	it	cc
 800cdc2:	2100      	movcc	r1, #0
 800cdc4:	440b      	add	r3, r1
 800cdc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdca:	b191      	cbz	r1, 800cdf2 <__mdiff+0x11a>
 800cdcc:	6117      	str	r7, [r2, #16]
 800cdce:	e79d      	b.n	800cd0c <__mdiff+0x34>
 800cdd0:	f854 1b04 	ldr.w	r1, [r4], #4
 800cdd4:	46e6      	mov	lr, ip
 800cdd6:	0c08      	lsrs	r0, r1, #16
 800cdd8:	fa1c fc81 	uxtah	ip, ip, r1
 800cddc:	4471      	add	r1, lr
 800cdde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cde2:	b289      	uxth	r1, r1
 800cde4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cde8:	f846 1b04 	str.w	r1, [r6], #4
 800cdec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdf0:	e7dd      	b.n	800cdae <__mdiff+0xd6>
 800cdf2:	3f01      	subs	r7, #1
 800cdf4:	e7e7      	b.n	800cdc6 <__mdiff+0xee>
 800cdf6:	bf00      	nop
 800cdf8:	0800f0f1 	.word	0x0800f0f1
 800cdfc:	0800f102 	.word	0x0800f102

0800ce00 <__ulp>:
 800ce00:	b082      	sub	sp, #8
 800ce02:	ed8d 0b00 	vstr	d0, [sp]
 800ce06:	9a01      	ldr	r2, [sp, #4]
 800ce08:	4b0f      	ldr	r3, [pc, #60]	@ (800ce48 <__ulp+0x48>)
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc08      	bgt.n	800ce26 <__ulp+0x26>
 800ce14:	425b      	negs	r3, r3
 800ce16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ce1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce1e:	da04      	bge.n	800ce2a <__ulp+0x2a>
 800ce20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ce24:	4113      	asrs	r3, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	e008      	b.n	800ce3c <__ulp+0x3c>
 800ce2a:	f1a2 0314 	sub.w	r3, r2, #20
 800ce2e:	2b1e      	cmp	r3, #30
 800ce30:	bfda      	itte	le
 800ce32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ce36:	40da      	lsrle	r2, r3
 800ce38:	2201      	movgt	r2, #1
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	ec41 0b10 	vmov	d0, r0, r1
 800ce44:	b002      	add	sp, #8
 800ce46:	4770      	bx	lr
 800ce48:	7ff00000 	.word	0x7ff00000

0800ce4c <__b2d>:
 800ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce50:	6906      	ldr	r6, [r0, #16]
 800ce52:	f100 0814 	add.w	r8, r0, #20
 800ce56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce5a:	1f37      	subs	r7, r6, #4
 800ce5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce60:	4610      	mov	r0, r2
 800ce62:	f7ff fd4b 	bl	800c8fc <__hi0bits>
 800ce66:	f1c0 0320 	rsb	r3, r0, #32
 800ce6a:	280a      	cmp	r0, #10
 800ce6c:	600b      	str	r3, [r1, #0]
 800ce6e:	491b      	ldr	r1, [pc, #108]	@ (800cedc <__b2d+0x90>)
 800ce70:	dc15      	bgt.n	800ce9e <__b2d+0x52>
 800ce72:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce76:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce7a:	45b8      	cmp	r8, r7
 800ce7c:	ea43 0501 	orr.w	r5, r3, r1
 800ce80:	bf34      	ite	cc
 800ce82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce86:	2300      	movcs	r3, #0
 800ce88:	3015      	adds	r0, #21
 800ce8a:	fa02 f000 	lsl.w	r0, r2, r0
 800ce8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce92:	4303      	orrs	r3, r0
 800ce94:	461c      	mov	r4, r3
 800ce96:	ec45 4b10 	vmov	d0, r4, r5
 800ce9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce9e:	45b8      	cmp	r8, r7
 800cea0:	bf3a      	itte	cc
 800cea2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cea6:	f1a6 0708 	subcc.w	r7, r6, #8
 800ceaa:	2300      	movcs	r3, #0
 800ceac:	380b      	subs	r0, #11
 800ceae:	d012      	beq.n	800ced6 <__b2d+0x8a>
 800ceb0:	f1c0 0120 	rsb	r1, r0, #32
 800ceb4:	fa23 f401 	lsr.w	r4, r3, r1
 800ceb8:	4082      	lsls	r2, r0
 800ceba:	4322      	orrs	r2, r4
 800cebc:	4547      	cmp	r7, r8
 800cebe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cec2:	bf8c      	ite	hi
 800cec4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cec8:	2200      	movls	r2, #0
 800ceca:	4083      	lsls	r3, r0
 800cecc:	40ca      	lsrs	r2, r1
 800cece:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ced2:	4313      	orrs	r3, r2
 800ced4:	e7de      	b.n	800ce94 <__b2d+0x48>
 800ced6:	ea42 0501 	orr.w	r5, r2, r1
 800ceda:	e7db      	b.n	800ce94 <__b2d+0x48>
 800cedc:	3ff00000 	.word	0x3ff00000

0800cee0 <__d2b>:
 800cee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cee4:	460f      	mov	r7, r1
 800cee6:	2101      	movs	r1, #1
 800cee8:	ec59 8b10 	vmov	r8, r9, d0
 800ceec:	4616      	mov	r6, r2
 800ceee:	f7ff fc13 	bl	800c718 <_Balloc>
 800cef2:	4604      	mov	r4, r0
 800cef4:	b930      	cbnz	r0, 800cf04 <__d2b+0x24>
 800cef6:	4602      	mov	r2, r0
 800cef8:	4b23      	ldr	r3, [pc, #140]	@ (800cf88 <__d2b+0xa8>)
 800cefa:	4824      	ldr	r0, [pc, #144]	@ (800cf8c <__d2b+0xac>)
 800cefc:	f240 310f 	movw	r1, #783	@ 0x30f
 800cf00:	f001 fb4e 	bl	800e5a0 <__assert_func>
 800cf04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cf08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf0c:	b10d      	cbz	r5, 800cf12 <__d2b+0x32>
 800cf0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	f1b8 0300 	subs.w	r3, r8, #0
 800cf18:	d023      	beq.n	800cf62 <__d2b+0x82>
 800cf1a:	4668      	mov	r0, sp
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	f7ff fd0c 	bl	800c93a <__lo0bits>
 800cf22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cf26:	b1d0      	cbz	r0, 800cf5e <__d2b+0x7e>
 800cf28:	f1c0 0320 	rsb	r3, r0, #32
 800cf2c:	fa02 f303 	lsl.w	r3, r2, r3
 800cf30:	430b      	orrs	r3, r1
 800cf32:	40c2      	lsrs	r2, r0
 800cf34:	6163      	str	r3, [r4, #20]
 800cf36:	9201      	str	r2, [sp, #4]
 800cf38:	9b01      	ldr	r3, [sp, #4]
 800cf3a:	61a3      	str	r3, [r4, #24]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bf0c      	ite	eq
 800cf40:	2201      	moveq	r2, #1
 800cf42:	2202      	movne	r2, #2
 800cf44:	6122      	str	r2, [r4, #16]
 800cf46:	b1a5      	cbz	r5, 800cf72 <__d2b+0x92>
 800cf48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cf4c:	4405      	add	r5, r0
 800cf4e:	603d      	str	r5, [r7, #0]
 800cf50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cf54:	6030      	str	r0, [r6, #0]
 800cf56:	4620      	mov	r0, r4
 800cf58:	b003      	add	sp, #12
 800cf5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf5e:	6161      	str	r1, [r4, #20]
 800cf60:	e7ea      	b.n	800cf38 <__d2b+0x58>
 800cf62:	a801      	add	r0, sp, #4
 800cf64:	f7ff fce9 	bl	800c93a <__lo0bits>
 800cf68:	9b01      	ldr	r3, [sp, #4]
 800cf6a:	6163      	str	r3, [r4, #20]
 800cf6c:	3020      	adds	r0, #32
 800cf6e:	2201      	movs	r2, #1
 800cf70:	e7e8      	b.n	800cf44 <__d2b+0x64>
 800cf72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf7a:	6038      	str	r0, [r7, #0]
 800cf7c:	6918      	ldr	r0, [r3, #16]
 800cf7e:	f7ff fcbd 	bl	800c8fc <__hi0bits>
 800cf82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf86:	e7e5      	b.n	800cf54 <__d2b+0x74>
 800cf88:	0800f0f1 	.word	0x0800f0f1
 800cf8c:	0800f102 	.word	0x0800f102

0800cf90 <__ratio>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	b085      	sub	sp, #20
 800cf96:	e9cd 1000 	strd	r1, r0, [sp]
 800cf9a:	a902      	add	r1, sp, #8
 800cf9c:	f7ff ff56 	bl	800ce4c <__b2d>
 800cfa0:	9800      	ldr	r0, [sp, #0]
 800cfa2:	a903      	add	r1, sp, #12
 800cfa4:	ec55 4b10 	vmov	r4, r5, d0
 800cfa8:	f7ff ff50 	bl	800ce4c <__b2d>
 800cfac:	9b01      	ldr	r3, [sp, #4]
 800cfae:	6919      	ldr	r1, [r3, #16]
 800cfb0:	9b00      	ldr	r3, [sp, #0]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	1ac9      	subs	r1, r1, r3
 800cfb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cfba:	1a9b      	subs	r3, r3, r2
 800cfbc:	ec5b ab10 	vmov	sl, fp, d0
 800cfc0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	bfce      	itee	gt
 800cfc8:	462a      	movgt	r2, r5
 800cfca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cfce:	465a      	movle	r2, fp
 800cfd0:	462f      	mov	r7, r5
 800cfd2:	46d9      	mov	r9, fp
 800cfd4:	bfcc      	ite	gt
 800cfd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cfda:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cfde:	464b      	mov	r3, r9
 800cfe0:	4652      	mov	r2, sl
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 fc31 	bl	800084c <__aeabi_ddiv>
 800cfea:	ec41 0b10 	vmov	d0, r0, r1
 800cfee:	b005      	add	sp, #20
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cff4 <__copybits>:
 800cff4:	3901      	subs	r1, #1
 800cff6:	b570      	push	{r4, r5, r6, lr}
 800cff8:	1149      	asrs	r1, r1, #5
 800cffa:	6914      	ldr	r4, [r2, #16]
 800cffc:	3101      	adds	r1, #1
 800cffe:	f102 0314 	add.w	r3, r2, #20
 800d002:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d006:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d00a:	1f05      	subs	r5, r0, #4
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	d30c      	bcc.n	800d02a <__copybits+0x36>
 800d010:	1aa3      	subs	r3, r4, r2
 800d012:	3b11      	subs	r3, #17
 800d014:	f023 0303 	bic.w	r3, r3, #3
 800d018:	3211      	adds	r2, #17
 800d01a:	42a2      	cmp	r2, r4
 800d01c:	bf88      	it	hi
 800d01e:	2300      	movhi	r3, #0
 800d020:	4418      	add	r0, r3
 800d022:	2300      	movs	r3, #0
 800d024:	4288      	cmp	r0, r1
 800d026:	d305      	bcc.n	800d034 <__copybits+0x40>
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d02e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d032:	e7eb      	b.n	800d00c <__copybits+0x18>
 800d034:	f840 3b04 	str.w	r3, [r0], #4
 800d038:	e7f4      	b.n	800d024 <__copybits+0x30>

0800d03a <__any_on>:
 800d03a:	f100 0214 	add.w	r2, r0, #20
 800d03e:	6900      	ldr	r0, [r0, #16]
 800d040:	114b      	asrs	r3, r1, #5
 800d042:	4298      	cmp	r0, r3
 800d044:	b510      	push	{r4, lr}
 800d046:	db11      	blt.n	800d06c <__any_on+0x32>
 800d048:	dd0a      	ble.n	800d060 <__any_on+0x26>
 800d04a:	f011 011f 	ands.w	r1, r1, #31
 800d04e:	d007      	beq.n	800d060 <__any_on+0x26>
 800d050:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d054:	fa24 f001 	lsr.w	r0, r4, r1
 800d058:	fa00 f101 	lsl.w	r1, r0, r1
 800d05c:	428c      	cmp	r4, r1
 800d05e:	d10b      	bne.n	800d078 <__any_on+0x3e>
 800d060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d064:	4293      	cmp	r3, r2
 800d066:	d803      	bhi.n	800d070 <__any_on+0x36>
 800d068:	2000      	movs	r0, #0
 800d06a:	bd10      	pop	{r4, pc}
 800d06c:	4603      	mov	r3, r0
 800d06e:	e7f7      	b.n	800d060 <__any_on+0x26>
 800d070:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d074:	2900      	cmp	r1, #0
 800d076:	d0f5      	beq.n	800d064 <__any_on+0x2a>
 800d078:	2001      	movs	r0, #1
 800d07a:	e7f6      	b.n	800d06a <__any_on+0x30>

0800d07c <sulp>:
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	460d      	mov	r5, r1
 800d082:	ec45 4b10 	vmov	d0, r4, r5
 800d086:	4616      	mov	r6, r2
 800d088:	f7ff feba 	bl	800ce00 <__ulp>
 800d08c:	ec51 0b10 	vmov	r0, r1, d0
 800d090:	b17e      	cbz	r6, 800d0b2 <sulp+0x36>
 800d092:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d096:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dd09      	ble.n	800d0b2 <sulp+0x36>
 800d09e:	051b      	lsls	r3, r3, #20
 800d0a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d0a4:	2400      	movs	r4, #0
 800d0a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d0aa:	4622      	mov	r2, r4
 800d0ac:	462b      	mov	r3, r5
 800d0ae:	f7f3 faa3 	bl	80005f8 <__aeabi_dmul>
 800d0b2:	ec41 0b10 	vmov	d0, r0, r1
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}

0800d0b8 <_strtod_l>:
 800d0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	b09f      	sub	sp, #124	@ 0x7c
 800d0be:	460c      	mov	r4, r1
 800d0c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d0c6:	9005      	str	r0, [sp, #20]
 800d0c8:	f04f 0a00 	mov.w	sl, #0
 800d0cc:	f04f 0b00 	mov.w	fp, #0
 800d0d0:	460a      	mov	r2, r1
 800d0d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0d4:	7811      	ldrb	r1, [r2, #0]
 800d0d6:	292b      	cmp	r1, #43	@ 0x2b
 800d0d8:	d04a      	beq.n	800d170 <_strtod_l+0xb8>
 800d0da:	d838      	bhi.n	800d14e <_strtod_l+0x96>
 800d0dc:	290d      	cmp	r1, #13
 800d0de:	d832      	bhi.n	800d146 <_strtod_l+0x8e>
 800d0e0:	2908      	cmp	r1, #8
 800d0e2:	d832      	bhi.n	800d14a <_strtod_l+0x92>
 800d0e4:	2900      	cmp	r1, #0
 800d0e6:	d03b      	beq.n	800d160 <_strtod_l+0xa8>
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d0ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d0ee:	782a      	ldrb	r2, [r5, #0]
 800d0f0:	2a30      	cmp	r2, #48	@ 0x30
 800d0f2:	f040 80b3 	bne.w	800d25c <_strtod_l+0x1a4>
 800d0f6:	786a      	ldrb	r2, [r5, #1]
 800d0f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d0fc:	2a58      	cmp	r2, #88	@ 0x58
 800d0fe:	d16e      	bne.n	800d1de <_strtod_l+0x126>
 800d100:	9302      	str	r3, [sp, #8]
 800d102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	ab1a      	add	r3, sp, #104	@ 0x68
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	4a8e      	ldr	r2, [pc, #568]	@ (800d344 <_strtod_l+0x28c>)
 800d10c:	9805      	ldr	r0, [sp, #20]
 800d10e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d110:	a919      	add	r1, sp, #100	@ 0x64
 800d112:	f001 fadf 	bl	800e6d4 <__gethex>
 800d116:	f010 060f 	ands.w	r6, r0, #15
 800d11a:	4604      	mov	r4, r0
 800d11c:	d005      	beq.n	800d12a <_strtod_l+0x72>
 800d11e:	2e06      	cmp	r6, #6
 800d120:	d128      	bne.n	800d174 <_strtod_l+0xbc>
 800d122:	3501      	adds	r5, #1
 800d124:	2300      	movs	r3, #0
 800d126:	9519      	str	r5, [sp, #100]	@ 0x64
 800d128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d12a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f040 858e 	bne.w	800dc4e <_strtod_l+0xb96>
 800d132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d134:	b1cb      	cbz	r3, 800d16a <_strtod_l+0xb2>
 800d136:	4652      	mov	r2, sl
 800d138:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d13c:	ec43 2b10 	vmov	d0, r2, r3
 800d140:	b01f      	add	sp, #124	@ 0x7c
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	2920      	cmp	r1, #32
 800d148:	d1ce      	bne.n	800d0e8 <_strtod_l+0x30>
 800d14a:	3201      	adds	r2, #1
 800d14c:	e7c1      	b.n	800d0d2 <_strtod_l+0x1a>
 800d14e:	292d      	cmp	r1, #45	@ 0x2d
 800d150:	d1ca      	bne.n	800d0e8 <_strtod_l+0x30>
 800d152:	2101      	movs	r1, #1
 800d154:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d156:	1c51      	adds	r1, r2, #1
 800d158:	9119      	str	r1, [sp, #100]	@ 0x64
 800d15a:	7852      	ldrb	r2, [r2, #1]
 800d15c:	2a00      	cmp	r2, #0
 800d15e:	d1c5      	bne.n	800d0ec <_strtod_l+0x34>
 800d160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d162:	9419      	str	r4, [sp, #100]	@ 0x64
 800d164:	2b00      	cmp	r3, #0
 800d166:	f040 8570 	bne.w	800dc4a <_strtod_l+0xb92>
 800d16a:	4652      	mov	r2, sl
 800d16c:	465b      	mov	r3, fp
 800d16e:	e7e5      	b.n	800d13c <_strtod_l+0x84>
 800d170:	2100      	movs	r1, #0
 800d172:	e7ef      	b.n	800d154 <_strtod_l+0x9c>
 800d174:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d176:	b13a      	cbz	r2, 800d188 <_strtod_l+0xd0>
 800d178:	2135      	movs	r1, #53	@ 0x35
 800d17a:	a81c      	add	r0, sp, #112	@ 0x70
 800d17c:	f7ff ff3a 	bl	800cff4 <__copybits>
 800d180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d182:	9805      	ldr	r0, [sp, #20]
 800d184:	f7ff fb08 	bl	800c798 <_Bfree>
 800d188:	3e01      	subs	r6, #1
 800d18a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d18c:	2e04      	cmp	r6, #4
 800d18e:	d806      	bhi.n	800d19e <_strtod_l+0xe6>
 800d190:	e8df f006 	tbb	[pc, r6]
 800d194:	201d0314 	.word	0x201d0314
 800d198:	14          	.byte	0x14
 800d199:	00          	.byte	0x00
 800d19a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d19e:	05e1      	lsls	r1, r4, #23
 800d1a0:	bf48      	it	mi
 800d1a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1aa:	0d1b      	lsrs	r3, r3, #20
 800d1ac:	051b      	lsls	r3, r3, #20
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1bb      	bne.n	800d12a <_strtod_l+0x72>
 800d1b2:	f7fe fb23 	bl	800b7fc <__errno>
 800d1b6:	2322      	movs	r3, #34	@ 0x22
 800d1b8:	6003      	str	r3, [r0, #0]
 800d1ba:	e7b6      	b.n	800d12a <_strtod_l+0x72>
 800d1bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d1c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d1c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d1c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d1cc:	e7e7      	b.n	800d19e <_strtod_l+0xe6>
 800d1ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d34c <_strtod_l+0x294>
 800d1d2:	e7e4      	b.n	800d19e <_strtod_l+0xe6>
 800d1d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d1d8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d1dc:	e7df      	b.n	800d19e <_strtod_l+0xe6>
 800d1de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1e4:	785b      	ldrb	r3, [r3, #1]
 800d1e6:	2b30      	cmp	r3, #48	@ 0x30
 800d1e8:	d0f9      	beq.n	800d1de <_strtod_l+0x126>
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d09d      	beq.n	800d12a <_strtod_l+0x72>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9308      	str	r3, [sp, #32]
 800d1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1fc:	461f      	mov	r7, r3
 800d1fe:	220a      	movs	r2, #10
 800d200:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d202:	7805      	ldrb	r5, [r0, #0]
 800d204:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d208:	b2d9      	uxtb	r1, r3
 800d20a:	2909      	cmp	r1, #9
 800d20c:	d928      	bls.n	800d260 <_strtod_l+0x1a8>
 800d20e:	494e      	ldr	r1, [pc, #312]	@ (800d348 <_strtod_l+0x290>)
 800d210:	2201      	movs	r2, #1
 800d212:	f001 f979 	bl	800e508 <strncmp>
 800d216:	2800      	cmp	r0, #0
 800d218:	d032      	beq.n	800d280 <_strtod_l+0x1c8>
 800d21a:	2000      	movs	r0, #0
 800d21c:	462a      	mov	r2, r5
 800d21e:	4681      	mov	r9, r0
 800d220:	463d      	mov	r5, r7
 800d222:	4603      	mov	r3, r0
 800d224:	2a65      	cmp	r2, #101	@ 0x65
 800d226:	d001      	beq.n	800d22c <_strtod_l+0x174>
 800d228:	2a45      	cmp	r2, #69	@ 0x45
 800d22a:	d114      	bne.n	800d256 <_strtod_l+0x19e>
 800d22c:	b91d      	cbnz	r5, 800d236 <_strtod_l+0x17e>
 800d22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d230:	4302      	orrs	r2, r0
 800d232:	d095      	beq.n	800d160 <_strtod_l+0xa8>
 800d234:	2500      	movs	r5, #0
 800d236:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d238:	1c62      	adds	r2, r4, #1
 800d23a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d23c:	7862      	ldrb	r2, [r4, #1]
 800d23e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d240:	d077      	beq.n	800d332 <_strtod_l+0x27a>
 800d242:	2a2d      	cmp	r2, #45	@ 0x2d
 800d244:	d07b      	beq.n	800d33e <_strtod_l+0x286>
 800d246:	f04f 0c00 	mov.w	ip, #0
 800d24a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d24e:	2909      	cmp	r1, #9
 800d250:	f240 8082 	bls.w	800d358 <_strtod_l+0x2a0>
 800d254:	9419      	str	r4, [sp, #100]	@ 0x64
 800d256:	f04f 0800 	mov.w	r8, #0
 800d25a:	e0a2      	b.n	800d3a2 <_strtod_l+0x2ea>
 800d25c:	2300      	movs	r3, #0
 800d25e:	e7c7      	b.n	800d1f0 <_strtod_l+0x138>
 800d260:	2f08      	cmp	r7, #8
 800d262:	bfd5      	itete	le
 800d264:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d266:	9908      	ldrgt	r1, [sp, #32]
 800d268:	fb02 3301 	mlale	r3, r2, r1, r3
 800d26c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d270:	f100 0001 	add.w	r0, r0, #1
 800d274:	bfd4      	ite	le
 800d276:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d278:	9308      	strgt	r3, [sp, #32]
 800d27a:	3701      	adds	r7, #1
 800d27c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d27e:	e7bf      	b.n	800d200 <_strtod_l+0x148>
 800d280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	9219      	str	r2, [sp, #100]	@ 0x64
 800d286:	785a      	ldrb	r2, [r3, #1]
 800d288:	b37f      	cbz	r7, 800d2ea <_strtod_l+0x232>
 800d28a:	4681      	mov	r9, r0
 800d28c:	463d      	mov	r5, r7
 800d28e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d292:	2b09      	cmp	r3, #9
 800d294:	d912      	bls.n	800d2bc <_strtod_l+0x204>
 800d296:	2301      	movs	r3, #1
 800d298:	e7c4      	b.n	800d224 <_strtod_l+0x16c>
 800d29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2a0:	785a      	ldrb	r2, [r3, #1]
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	2a30      	cmp	r2, #48	@ 0x30
 800d2a6:	d0f8      	beq.n	800d29a <_strtod_l+0x1e2>
 800d2a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	f200 84d3 	bhi.w	800dc58 <_strtod_l+0xba0>
 800d2b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2b6:	4681      	mov	r9, r0
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	3a30      	subs	r2, #48	@ 0x30
 800d2be:	f100 0301 	add.w	r3, r0, #1
 800d2c2:	d02a      	beq.n	800d31a <_strtod_l+0x262>
 800d2c4:	4499      	add	r9, r3
 800d2c6:	eb00 0c05 	add.w	ip, r0, r5
 800d2ca:	462b      	mov	r3, r5
 800d2cc:	210a      	movs	r1, #10
 800d2ce:	4563      	cmp	r3, ip
 800d2d0:	d10d      	bne.n	800d2ee <_strtod_l+0x236>
 800d2d2:	1c69      	adds	r1, r5, #1
 800d2d4:	4401      	add	r1, r0
 800d2d6:	4428      	add	r0, r5
 800d2d8:	2808      	cmp	r0, #8
 800d2da:	dc16      	bgt.n	800d30a <_strtod_l+0x252>
 800d2dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d2de:	230a      	movs	r3, #10
 800d2e0:	fb03 2300 	mla	r3, r3, r0, r2
 800d2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e018      	b.n	800d31c <_strtod_l+0x264>
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	e7da      	b.n	800d2a4 <_strtod_l+0x1ec>
 800d2ee:	2b08      	cmp	r3, #8
 800d2f0:	f103 0301 	add.w	r3, r3, #1
 800d2f4:	dc03      	bgt.n	800d2fe <_strtod_l+0x246>
 800d2f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d2f8:	434e      	muls	r6, r1
 800d2fa:	960a      	str	r6, [sp, #40]	@ 0x28
 800d2fc:	e7e7      	b.n	800d2ce <_strtod_l+0x216>
 800d2fe:	2b10      	cmp	r3, #16
 800d300:	bfde      	ittt	le
 800d302:	9e08      	ldrle	r6, [sp, #32]
 800d304:	434e      	mulle	r6, r1
 800d306:	9608      	strle	r6, [sp, #32]
 800d308:	e7e1      	b.n	800d2ce <_strtod_l+0x216>
 800d30a:	280f      	cmp	r0, #15
 800d30c:	dceb      	bgt.n	800d2e6 <_strtod_l+0x22e>
 800d30e:	9808      	ldr	r0, [sp, #32]
 800d310:	230a      	movs	r3, #10
 800d312:	fb03 2300 	mla	r3, r3, r0, r2
 800d316:	9308      	str	r3, [sp, #32]
 800d318:	e7e5      	b.n	800d2e6 <_strtod_l+0x22e>
 800d31a:	4629      	mov	r1, r5
 800d31c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d31e:	1c50      	adds	r0, r2, #1
 800d320:	9019      	str	r0, [sp, #100]	@ 0x64
 800d322:	7852      	ldrb	r2, [r2, #1]
 800d324:	4618      	mov	r0, r3
 800d326:	460d      	mov	r5, r1
 800d328:	e7b1      	b.n	800d28e <_strtod_l+0x1d6>
 800d32a:	f04f 0900 	mov.w	r9, #0
 800d32e:	2301      	movs	r3, #1
 800d330:	e77d      	b.n	800d22e <_strtod_l+0x176>
 800d332:	f04f 0c00 	mov.w	ip, #0
 800d336:	1ca2      	adds	r2, r4, #2
 800d338:	9219      	str	r2, [sp, #100]	@ 0x64
 800d33a:	78a2      	ldrb	r2, [r4, #2]
 800d33c:	e785      	b.n	800d24a <_strtod_l+0x192>
 800d33e:	f04f 0c01 	mov.w	ip, #1
 800d342:	e7f8      	b.n	800d336 <_strtod_l+0x27e>
 800d344:	0800f270 	.word	0x0800f270
 800d348:	0800f258 	.word	0x0800f258
 800d34c:	7ff00000 	.word	0x7ff00000
 800d350:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d352:	1c51      	adds	r1, r2, #1
 800d354:	9119      	str	r1, [sp, #100]	@ 0x64
 800d356:	7852      	ldrb	r2, [r2, #1]
 800d358:	2a30      	cmp	r2, #48	@ 0x30
 800d35a:	d0f9      	beq.n	800d350 <_strtod_l+0x298>
 800d35c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d360:	2908      	cmp	r1, #8
 800d362:	f63f af78 	bhi.w	800d256 <_strtod_l+0x19e>
 800d366:	3a30      	subs	r2, #48	@ 0x30
 800d368:	920e      	str	r2, [sp, #56]	@ 0x38
 800d36a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d36c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d36e:	f04f 080a 	mov.w	r8, #10
 800d372:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d374:	1c56      	adds	r6, r2, #1
 800d376:	9619      	str	r6, [sp, #100]	@ 0x64
 800d378:	7852      	ldrb	r2, [r2, #1]
 800d37a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d37e:	f1be 0f09 	cmp.w	lr, #9
 800d382:	d939      	bls.n	800d3f8 <_strtod_l+0x340>
 800d384:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d386:	1a76      	subs	r6, r6, r1
 800d388:	2e08      	cmp	r6, #8
 800d38a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d38e:	dc03      	bgt.n	800d398 <_strtod_l+0x2e0>
 800d390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d392:	4588      	cmp	r8, r1
 800d394:	bfa8      	it	ge
 800d396:	4688      	movge	r8, r1
 800d398:	f1bc 0f00 	cmp.w	ip, #0
 800d39c:	d001      	beq.n	800d3a2 <_strtod_l+0x2ea>
 800d39e:	f1c8 0800 	rsb	r8, r8, #0
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	d14e      	bne.n	800d444 <_strtod_l+0x38c>
 800d3a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3a8:	4308      	orrs	r0, r1
 800d3aa:	f47f aebe 	bne.w	800d12a <_strtod_l+0x72>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f47f aed6 	bne.w	800d160 <_strtod_l+0xa8>
 800d3b4:	2a69      	cmp	r2, #105	@ 0x69
 800d3b6:	d028      	beq.n	800d40a <_strtod_l+0x352>
 800d3b8:	dc25      	bgt.n	800d406 <_strtod_l+0x34e>
 800d3ba:	2a49      	cmp	r2, #73	@ 0x49
 800d3bc:	d025      	beq.n	800d40a <_strtod_l+0x352>
 800d3be:	2a4e      	cmp	r2, #78	@ 0x4e
 800d3c0:	f47f aece 	bne.w	800d160 <_strtod_l+0xa8>
 800d3c4:	499b      	ldr	r1, [pc, #620]	@ (800d634 <_strtod_l+0x57c>)
 800d3c6:	a819      	add	r0, sp, #100	@ 0x64
 800d3c8:	f001 fba6 	bl	800eb18 <__match>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	f43f aec7 	beq.w	800d160 <_strtod_l+0xa8>
 800d3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b28      	cmp	r3, #40	@ 0x28
 800d3d8:	d12e      	bne.n	800d438 <_strtod_l+0x380>
 800d3da:	4997      	ldr	r1, [pc, #604]	@ (800d638 <_strtod_l+0x580>)
 800d3dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800d3de:	a819      	add	r0, sp, #100	@ 0x64
 800d3e0:	f001 fbae 	bl	800eb40 <__hexnan>
 800d3e4:	2805      	cmp	r0, #5
 800d3e6:	d127      	bne.n	800d438 <_strtod_l+0x380>
 800d3e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d3ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d3ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d3f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d3f6:	e698      	b.n	800d12a <_strtod_l+0x72>
 800d3f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d3fa:	fb08 2101 	mla	r1, r8, r1, r2
 800d3fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d402:	920e      	str	r2, [sp, #56]	@ 0x38
 800d404:	e7b5      	b.n	800d372 <_strtod_l+0x2ba>
 800d406:	2a6e      	cmp	r2, #110	@ 0x6e
 800d408:	e7da      	b.n	800d3c0 <_strtod_l+0x308>
 800d40a:	498c      	ldr	r1, [pc, #560]	@ (800d63c <_strtod_l+0x584>)
 800d40c:	a819      	add	r0, sp, #100	@ 0x64
 800d40e:	f001 fb83 	bl	800eb18 <__match>
 800d412:	2800      	cmp	r0, #0
 800d414:	f43f aea4 	beq.w	800d160 <_strtod_l+0xa8>
 800d418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d41a:	4989      	ldr	r1, [pc, #548]	@ (800d640 <_strtod_l+0x588>)
 800d41c:	3b01      	subs	r3, #1
 800d41e:	a819      	add	r0, sp, #100	@ 0x64
 800d420:	9319      	str	r3, [sp, #100]	@ 0x64
 800d422:	f001 fb79 	bl	800eb18 <__match>
 800d426:	b910      	cbnz	r0, 800d42e <_strtod_l+0x376>
 800d428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d42a:	3301      	adds	r3, #1
 800d42c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d42e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d650 <_strtod_l+0x598>
 800d432:	f04f 0a00 	mov.w	sl, #0
 800d436:	e678      	b.n	800d12a <_strtod_l+0x72>
 800d438:	4882      	ldr	r0, [pc, #520]	@ (800d644 <_strtod_l+0x58c>)
 800d43a:	f001 f8a9 	bl	800e590 <nan>
 800d43e:	ec5b ab10 	vmov	sl, fp, d0
 800d442:	e672      	b.n	800d12a <_strtod_l+0x72>
 800d444:	eba8 0309 	sub.w	r3, r8, r9
 800d448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d44c:	2f00      	cmp	r7, #0
 800d44e:	bf08      	it	eq
 800d450:	462f      	moveq	r7, r5
 800d452:	2d10      	cmp	r5, #16
 800d454:	462c      	mov	r4, r5
 800d456:	bfa8      	it	ge
 800d458:	2410      	movge	r4, #16
 800d45a:	f7f3 f853 	bl	8000504 <__aeabi_ui2d>
 800d45e:	2d09      	cmp	r5, #9
 800d460:	4682      	mov	sl, r0
 800d462:	468b      	mov	fp, r1
 800d464:	dc13      	bgt.n	800d48e <_strtod_l+0x3d6>
 800d466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f43f ae5e 	beq.w	800d12a <_strtod_l+0x72>
 800d46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d470:	dd78      	ble.n	800d564 <_strtod_l+0x4ac>
 800d472:	2b16      	cmp	r3, #22
 800d474:	dc5f      	bgt.n	800d536 <_strtod_l+0x47e>
 800d476:	4974      	ldr	r1, [pc, #464]	@ (800d648 <_strtod_l+0x590>)
 800d478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d47c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d480:	4652      	mov	r2, sl
 800d482:	465b      	mov	r3, fp
 800d484:	f7f3 f8b8 	bl	80005f8 <__aeabi_dmul>
 800d488:	4682      	mov	sl, r0
 800d48a:	468b      	mov	fp, r1
 800d48c:	e64d      	b.n	800d12a <_strtod_l+0x72>
 800d48e:	4b6e      	ldr	r3, [pc, #440]	@ (800d648 <_strtod_l+0x590>)
 800d490:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d494:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d498:	f7f3 f8ae 	bl	80005f8 <__aeabi_dmul>
 800d49c:	4682      	mov	sl, r0
 800d49e:	9808      	ldr	r0, [sp, #32]
 800d4a0:	468b      	mov	fp, r1
 800d4a2:	f7f3 f82f 	bl	8000504 <__aeabi_ui2d>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4650      	mov	r0, sl
 800d4ac:	4659      	mov	r1, fp
 800d4ae:	f7f2 feed 	bl	800028c <__adddf3>
 800d4b2:	2d0f      	cmp	r5, #15
 800d4b4:	4682      	mov	sl, r0
 800d4b6:	468b      	mov	fp, r1
 800d4b8:	ddd5      	ble.n	800d466 <_strtod_l+0x3ae>
 800d4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4bc:	1b2c      	subs	r4, r5, r4
 800d4be:	441c      	add	r4, r3
 800d4c0:	2c00      	cmp	r4, #0
 800d4c2:	f340 8096 	ble.w	800d5f2 <_strtod_l+0x53a>
 800d4c6:	f014 030f 	ands.w	r3, r4, #15
 800d4ca:	d00a      	beq.n	800d4e2 <_strtod_l+0x42a>
 800d4cc:	495e      	ldr	r1, [pc, #376]	@ (800d648 <_strtod_l+0x590>)
 800d4ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	465b      	mov	r3, fp
 800d4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4da:	f7f3 f88d 	bl	80005f8 <__aeabi_dmul>
 800d4de:	4682      	mov	sl, r0
 800d4e0:	468b      	mov	fp, r1
 800d4e2:	f034 040f 	bics.w	r4, r4, #15
 800d4e6:	d073      	beq.n	800d5d0 <_strtod_l+0x518>
 800d4e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d4ec:	dd48      	ble.n	800d580 <_strtod_l+0x4c8>
 800d4ee:	2400      	movs	r4, #0
 800d4f0:	46a0      	mov	r8, r4
 800d4f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d4f4:	46a1      	mov	r9, r4
 800d4f6:	9a05      	ldr	r2, [sp, #20]
 800d4f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d650 <_strtod_l+0x598>
 800d4fc:	2322      	movs	r3, #34	@ 0x22
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	f04f 0a00 	mov.w	sl, #0
 800d504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d506:	2b00      	cmp	r3, #0
 800d508:	f43f ae0f 	beq.w	800d12a <_strtod_l+0x72>
 800d50c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d50e:	9805      	ldr	r0, [sp, #20]
 800d510:	f7ff f942 	bl	800c798 <_Bfree>
 800d514:	9805      	ldr	r0, [sp, #20]
 800d516:	4649      	mov	r1, r9
 800d518:	f7ff f93e 	bl	800c798 <_Bfree>
 800d51c:	9805      	ldr	r0, [sp, #20]
 800d51e:	4641      	mov	r1, r8
 800d520:	f7ff f93a 	bl	800c798 <_Bfree>
 800d524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d526:	9805      	ldr	r0, [sp, #20]
 800d528:	f7ff f936 	bl	800c798 <_Bfree>
 800d52c:	9805      	ldr	r0, [sp, #20]
 800d52e:	4621      	mov	r1, r4
 800d530:	f7ff f932 	bl	800c798 <_Bfree>
 800d534:	e5f9      	b.n	800d12a <_strtod_l+0x72>
 800d536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d538:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d53c:	4293      	cmp	r3, r2
 800d53e:	dbbc      	blt.n	800d4ba <_strtod_l+0x402>
 800d540:	4c41      	ldr	r4, [pc, #260]	@ (800d648 <_strtod_l+0x590>)
 800d542:	f1c5 050f 	rsb	r5, r5, #15
 800d546:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d54a:	4652      	mov	r2, sl
 800d54c:	465b      	mov	r3, fp
 800d54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d552:	f7f3 f851 	bl	80005f8 <__aeabi_dmul>
 800d556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d558:	1b5d      	subs	r5, r3, r5
 800d55a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d55e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d562:	e78f      	b.n	800d484 <_strtod_l+0x3cc>
 800d564:	3316      	adds	r3, #22
 800d566:	dba8      	blt.n	800d4ba <_strtod_l+0x402>
 800d568:	4b37      	ldr	r3, [pc, #220]	@ (800d648 <_strtod_l+0x590>)
 800d56a:	eba9 0808 	sub.w	r8, r9, r8
 800d56e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d572:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d576:	4650      	mov	r0, sl
 800d578:	4659      	mov	r1, fp
 800d57a:	f7f3 f967 	bl	800084c <__aeabi_ddiv>
 800d57e:	e783      	b.n	800d488 <_strtod_l+0x3d0>
 800d580:	4b32      	ldr	r3, [pc, #200]	@ (800d64c <_strtod_l+0x594>)
 800d582:	9308      	str	r3, [sp, #32]
 800d584:	2300      	movs	r3, #0
 800d586:	1124      	asrs	r4, r4, #4
 800d588:	4650      	mov	r0, sl
 800d58a:	4659      	mov	r1, fp
 800d58c:	461e      	mov	r6, r3
 800d58e:	2c01      	cmp	r4, #1
 800d590:	dc21      	bgt.n	800d5d6 <_strtod_l+0x51e>
 800d592:	b10b      	cbz	r3, 800d598 <_strtod_l+0x4e0>
 800d594:	4682      	mov	sl, r0
 800d596:	468b      	mov	fp, r1
 800d598:	492c      	ldr	r1, [pc, #176]	@ (800d64c <_strtod_l+0x594>)
 800d59a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d59e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d5a2:	4652      	mov	r2, sl
 800d5a4:	465b      	mov	r3, fp
 800d5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5aa:	f7f3 f825 	bl	80005f8 <__aeabi_dmul>
 800d5ae:	4b28      	ldr	r3, [pc, #160]	@ (800d650 <_strtod_l+0x598>)
 800d5b0:	460a      	mov	r2, r1
 800d5b2:	400b      	ands	r3, r1
 800d5b4:	4927      	ldr	r1, [pc, #156]	@ (800d654 <_strtod_l+0x59c>)
 800d5b6:	428b      	cmp	r3, r1
 800d5b8:	4682      	mov	sl, r0
 800d5ba:	d898      	bhi.n	800d4ee <_strtod_l+0x436>
 800d5bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d5c0:	428b      	cmp	r3, r1
 800d5c2:	bf86      	itte	hi
 800d5c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d658 <_strtod_l+0x5a0>
 800d5c8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d5cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9308      	str	r3, [sp, #32]
 800d5d4:	e07a      	b.n	800d6cc <_strtod_l+0x614>
 800d5d6:	07e2      	lsls	r2, r4, #31
 800d5d8:	d505      	bpl.n	800d5e6 <_strtod_l+0x52e>
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f3 f80a 	bl	80005f8 <__aeabi_dmul>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	9a08      	ldr	r2, [sp, #32]
 800d5e8:	3208      	adds	r2, #8
 800d5ea:	3601      	adds	r6, #1
 800d5ec:	1064      	asrs	r4, r4, #1
 800d5ee:	9208      	str	r2, [sp, #32]
 800d5f0:	e7cd      	b.n	800d58e <_strtod_l+0x4d6>
 800d5f2:	d0ed      	beq.n	800d5d0 <_strtod_l+0x518>
 800d5f4:	4264      	negs	r4, r4
 800d5f6:	f014 020f 	ands.w	r2, r4, #15
 800d5fa:	d00a      	beq.n	800d612 <_strtod_l+0x55a>
 800d5fc:	4b12      	ldr	r3, [pc, #72]	@ (800d648 <_strtod_l+0x590>)
 800d5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d602:	4650      	mov	r0, sl
 800d604:	4659      	mov	r1, fp
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	f7f3 f91f 	bl	800084c <__aeabi_ddiv>
 800d60e:	4682      	mov	sl, r0
 800d610:	468b      	mov	fp, r1
 800d612:	1124      	asrs	r4, r4, #4
 800d614:	d0dc      	beq.n	800d5d0 <_strtod_l+0x518>
 800d616:	2c1f      	cmp	r4, #31
 800d618:	dd20      	ble.n	800d65c <_strtod_l+0x5a4>
 800d61a:	2400      	movs	r4, #0
 800d61c:	46a0      	mov	r8, r4
 800d61e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d620:	46a1      	mov	r9, r4
 800d622:	9a05      	ldr	r2, [sp, #20]
 800d624:	2322      	movs	r3, #34	@ 0x22
 800d626:	f04f 0a00 	mov.w	sl, #0
 800d62a:	f04f 0b00 	mov.w	fp, #0
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	e768      	b.n	800d504 <_strtod_l+0x44c>
 800d632:	bf00      	nop
 800d634:	0800f049 	.word	0x0800f049
 800d638:	0800f25c 	.word	0x0800f25c
 800d63c:	0800f041 	.word	0x0800f041
 800d640:	0800f078 	.word	0x0800f078
 800d644:	0800f405 	.word	0x0800f405
 800d648:	0800f190 	.word	0x0800f190
 800d64c:	0800f168 	.word	0x0800f168
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	7ca00000 	.word	0x7ca00000
 800d658:	7fefffff 	.word	0x7fefffff
 800d65c:	f014 0310 	ands.w	r3, r4, #16
 800d660:	bf18      	it	ne
 800d662:	236a      	movne	r3, #106	@ 0x6a
 800d664:	4ea9      	ldr	r6, [pc, #676]	@ (800d90c <_strtod_l+0x854>)
 800d666:	9308      	str	r3, [sp, #32]
 800d668:	4650      	mov	r0, sl
 800d66a:	4659      	mov	r1, fp
 800d66c:	2300      	movs	r3, #0
 800d66e:	07e2      	lsls	r2, r4, #31
 800d670:	d504      	bpl.n	800d67c <_strtod_l+0x5c4>
 800d672:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d676:	f7f2 ffbf 	bl	80005f8 <__aeabi_dmul>
 800d67a:	2301      	movs	r3, #1
 800d67c:	1064      	asrs	r4, r4, #1
 800d67e:	f106 0608 	add.w	r6, r6, #8
 800d682:	d1f4      	bne.n	800d66e <_strtod_l+0x5b6>
 800d684:	b10b      	cbz	r3, 800d68a <_strtod_l+0x5d2>
 800d686:	4682      	mov	sl, r0
 800d688:	468b      	mov	fp, r1
 800d68a:	9b08      	ldr	r3, [sp, #32]
 800d68c:	b1b3      	cbz	r3, 800d6bc <_strtod_l+0x604>
 800d68e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d692:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d696:	2b00      	cmp	r3, #0
 800d698:	4659      	mov	r1, fp
 800d69a:	dd0f      	ble.n	800d6bc <_strtod_l+0x604>
 800d69c:	2b1f      	cmp	r3, #31
 800d69e:	dd55      	ble.n	800d74c <_strtod_l+0x694>
 800d6a0:	2b34      	cmp	r3, #52	@ 0x34
 800d6a2:	bfde      	ittt	le
 800d6a4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d6a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d6ac:	4093      	lslle	r3, r2
 800d6ae:	f04f 0a00 	mov.w	sl, #0
 800d6b2:	bfcc      	ite	gt
 800d6b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d6b8:	ea03 0b01 	andle.w	fp, r3, r1
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2300      	movs	r3, #0
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	f7f3 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d1a6      	bne.n	800d61a <_strtod_l+0x562>
 800d6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d6d2:	9805      	ldr	r0, [sp, #20]
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	463a      	mov	r2, r7
 800d6d8:	f7ff f8c6 	bl	800c868 <__s2b>
 800d6dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f af05 	beq.w	800d4ee <_strtod_l+0x436>
 800d6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	eba9 0308 	sub.w	r3, r9, r8
 800d6ec:	bfa8      	it	ge
 800d6ee:	2300      	movge	r3, #0
 800d6f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d6f2:	2400      	movs	r4, #0
 800d6f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d6f8:	9316      	str	r3, [sp, #88]	@ 0x58
 800d6fa:	46a0      	mov	r8, r4
 800d6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6fe:	9805      	ldr	r0, [sp, #20]
 800d700:	6859      	ldr	r1, [r3, #4]
 800d702:	f7ff f809 	bl	800c718 <_Balloc>
 800d706:	4681      	mov	r9, r0
 800d708:	2800      	cmp	r0, #0
 800d70a:	f43f aef4 	beq.w	800d4f6 <_strtod_l+0x43e>
 800d70e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d710:	691a      	ldr	r2, [r3, #16]
 800d712:	3202      	adds	r2, #2
 800d714:	f103 010c 	add.w	r1, r3, #12
 800d718:	0092      	lsls	r2, r2, #2
 800d71a:	300c      	adds	r0, #12
 800d71c:	f7fe f89b 	bl	800b856 <memcpy>
 800d720:	ec4b ab10 	vmov	d0, sl, fp
 800d724:	9805      	ldr	r0, [sp, #20]
 800d726:	aa1c      	add	r2, sp, #112	@ 0x70
 800d728:	a91b      	add	r1, sp, #108	@ 0x6c
 800d72a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d72e:	f7ff fbd7 	bl	800cee0 <__d2b>
 800d732:	901a      	str	r0, [sp, #104]	@ 0x68
 800d734:	2800      	cmp	r0, #0
 800d736:	f43f aede 	beq.w	800d4f6 <_strtod_l+0x43e>
 800d73a:	9805      	ldr	r0, [sp, #20]
 800d73c:	2101      	movs	r1, #1
 800d73e:	f7ff f929 	bl	800c994 <__i2b>
 800d742:	4680      	mov	r8, r0
 800d744:	b948      	cbnz	r0, 800d75a <_strtod_l+0x6a2>
 800d746:	f04f 0800 	mov.w	r8, #0
 800d74a:	e6d4      	b.n	800d4f6 <_strtod_l+0x43e>
 800d74c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d750:	fa02 f303 	lsl.w	r3, r2, r3
 800d754:	ea03 0a0a 	and.w	sl, r3, sl
 800d758:	e7b0      	b.n	800d6bc <_strtod_l+0x604>
 800d75a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d75c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d75e:	2d00      	cmp	r5, #0
 800d760:	bfab      	itete	ge
 800d762:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d764:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d766:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d768:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d76a:	bfac      	ite	ge
 800d76c:	18ef      	addge	r7, r5, r3
 800d76e:	1b5e      	sublt	r6, r3, r5
 800d770:	9b08      	ldr	r3, [sp, #32]
 800d772:	1aed      	subs	r5, r5, r3
 800d774:	4415      	add	r5, r2
 800d776:	4b66      	ldr	r3, [pc, #408]	@ (800d910 <_strtod_l+0x858>)
 800d778:	3d01      	subs	r5, #1
 800d77a:	429d      	cmp	r5, r3
 800d77c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d780:	da50      	bge.n	800d824 <_strtod_l+0x76c>
 800d782:	1b5b      	subs	r3, r3, r5
 800d784:	2b1f      	cmp	r3, #31
 800d786:	eba2 0203 	sub.w	r2, r2, r3
 800d78a:	f04f 0101 	mov.w	r1, #1
 800d78e:	dc3d      	bgt.n	800d80c <_strtod_l+0x754>
 800d790:	fa01 f303 	lsl.w	r3, r1, r3
 800d794:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d796:	2300      	movs	r3, #0
 800d798:	9310      	str	r3, [sp, #64]	@ 0x40
 800d79a:	18bd      	adds	r5, r7, r2
 800d79c:	9b08      	ldr	r3, [sp, #32]
 800d79e:	42af      	cmp	r7, r5
 800d7a0:	4416      	add	r6, r2
 800d7a2:	441e      	add	r6, r3
 800d7a4:	463b      	mov	r3, r7
 800d7a6:	bfa8      	it	ge
 800d7a8:	462b      	movge	r3, r5
 800d7aa:	42b3      	cmp	r3, r6
 800d7ac:	bfa8      	it	ge
 800d7ae:	4633      	movge	r3, r6
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	bfc2      	ittt	gt
 800d7b4:	1aed      	subgt	r5, r5, r3
 800d7b6:	1af6      	subgt	r6, r6, r3
 800d7b8:	1aff      	subgt	r7, r7, r3
 800d7ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dd16      	ble.n	800d7ee <_strtod_l+0x736>
 800d7c0:	4641      	mov	r1, r8
 800d7c2:	9805      	ldr	r0, [sp, #20]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	f7ff f9a5 	bl	800cb14 <__pow5mult>
 800d7ca:	4680      	mov	r8, r0
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d0ba      	beq.n	800d746 <_strtod_l+0x68e>
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d7d4:	9805      	ldr	r0, [sp, #20]
 800d7d6:	f7ff f8f3 	bl	800c9c0 <__multiply>
 800d7da:	900e      	str	r0, [sp, #56]	@ 0x38
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f43f ae8a 	beq.w	800d4f6 <_strtod_l+0x43e>
 800d7e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7e4:	9805      	ldr	r0, [sp, #20]
 800d7e6:	f7fe ffd7 	bl	800c798 <_Bfree>
 800d7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	dc1d      	bgt.n	800d82e <_strtod_l+0x776>
 800d7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	dd23      	ble.n	800d840 <_strtod_l+0x788>
 800d7f8:	4649      	mov	r1, r9
 800d7fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d7fc:	9805      	ldr	r0, [sp, #20]
 800d7fe:	f7ff f989 	bl	800cb14 <__pow5mult>
 800d802:	4681      	mov	r9, r0
 800d804:	b9e0      	cbnz	r0, 800d840 <_strtod_l+0x788>
 800d806:	f04f 0900 	mov.w	r9, #0
 800d80a:	e674      	b.n	800d4f6 <_strtod_l+0x43e>
 800d80c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d810:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d814:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d818:	35e2      	adds	r5, #226	@ 0xe2
 800d81a:	fa01 f305 	lsl.w	r3, r1, r5
 800d81e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d820:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d822:	e7ba      	b.n	800d79a <_strtod_l+0x6e2>
 800d824:	2300      	movs	r3, #0
 800d826:	9310      	str	r3, [sp, #64]	@ 0x40
 800d828:	2301      	movs	r3, #1
 800d82a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d82c:	e7b5      	b.n	800d79a <_strtod_l+0x6e2>
 800d82e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d830:	9805      	ldr	r0, [sp, #20]
 800d832:	462a      	mov	r2, r5
 800d834:	f7ff f9c8 	bl	800cbc8 <__lshift>
 800d838:	901a      	str	r0, [sp, #104]	@ 0x68
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d1d9      	bne.n	800d7f2 <_strtod_l+0x73a>
 800d83e:	e65a      	b.n	800d4f6 <_strtod_l+0x43e>
 800d840:	2e00      	cmp	r6, #0
 800d842:	dd07      	ble.n	800d854 <_strtod_l+0x79c>
 800d844:	4649      	mov	r1, r9
 800d846:	9805      	ldr	r0, [sp, #20]
 800d848:	4632      	mov	r2, r6
 800d84a:	f7ff f9bd 	bl	800cbc8 <__lshift>
 800d84e:	4681      	mov	r9, r0
 800d850:	2800      	cmp	r0, #0
 800d852:	d0d8      	beq.n	800d806 <_strtod_l+0x74e>
 800d854:	2f00      	cmp	r7, #0
 800d856:	dd08      	ble.n	800d86a <_strtod_l+0x7b2>
 800d858:	4641      	mov	r1, r8
 800d85a:	9805      	ldr	r0, [sp, #20]
 800d85c:	463a      	mov	r2, r7
 800d85e:	f7ff f9b3 	bl	800cbc8 <__lshift>
 800d862:	4680      	mov	r8, r0
 800d864:	2800      	cmp	r0, #0
 800d866:	f43f ae46 	beq.w	800d4f6 <_strtod_l+0x43e>
 800d86a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d86c:	9805      	ldr	r0, [sp, #20]
 800d86e:	464a      	mov	r2, r9
 800d870:	f7ff fa32 	bl	800ccd8 <__mdiff>
 800d874:	4604      	mov	r4, r0
 800d876:	2800      	cmp	r0, #0
 800d878:	f43f ae3d 	beq.w	800d4f6 <_strtod_l+0x43e>
 800d87c:	68c3      	ldr	r3, [r0, #12]
 800d87e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d880:	2300      	movs	r3, #0
 800d882:	60c3      	str	r3, [r0, #12]
 800d884:	4641      	mov	r1, r8
 800d886:	f7ff fa0b 	bl	800cca0 <__mcmp>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	da46      	bge.n	800d91c <_strtod_l+0x864>
 800d88e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d890:	ea53 030a 	orrs.w	r3, r3, sl
 800d894:	d16c      	bne.n	800d970 <_strtod_l+0x8b8>
 800d896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d168      	bne.n	800d970 <_strtod_l+0x8b8>
 800d89e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8a2:	0d1b      	lsrs	r3, r3, #20
 800d8a4:	051b      	lsls	r3, r3, #20
 800d8a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d8aa:	d961      	bls.n	800d970 <_strtod_l+0x8b8>
 800d8ac:	6963      	ldr	r3, [r4, #20]
 800d8ae:	b913      	cbnz	r3, 800d8b6 <_strtod_l+0x7fe>
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	dd5c      	ble.n	800d970 <_strtod_l+0x8b8>
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	9805      	ldr	r0, [sp, #20]
 800d8bc:	f7ff f984 	bl	800cbc8 <__lshift>
 800d8c0:	4641      	mov	r1, r8
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	f7ff f9ec 	bl	800cca0 <__mcmp>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	dd51      	ble.n	800d970 <_strtod_l+0x8b8>
 800d8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8d0:	9a08      	ldr	r2, [sp, #32]
 800d8d2:	0d1b      	lsrs	r3, r3, #20
 800d8d4:	051b      	lsls	r3, r3, #20
 800d8d6:	2a00      	cmp	r2, #0
 800d8d8:	d06b      	beq.n	800d9b2 <_strtod_l+0x8fa>
 800d8da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d8de:	d868      	bhi.n	800d9b2 <_strtod_l+0x8fa>
 800d8e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d8e4:	f67f ae9d 	bls.w	800d622 <_strtod_l+0x56a>
 800d8e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d914 <_strtod_l+0x85c>)
 800d8ea:	4650      	mov	r0, sl
 800d8ec:	4659      	mov	r1, fp
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f7f2 fe82 	bl	80005f8 <__aeabi_dmul>
 800d8f4:	4b08      	ldr	r3, [pc, #32]	@ (800d918 <_strtod_l+0x860>)
 800d8f6:	400b      	ands	r3, r1
 800d8f8:	4682      	mov	sl, r0
 800d8fa:	468b      	mov	fp, r1
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f47f ae05 	bne.w	800d50c <_strtod_l+0x454>
 800d902:	9a05      	ldr	r2, [sp, #20]
 800d904:	2322      	movs	r3, #34	@ 0x22
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	e600      	b.n	800d50c <_strtod_l+0x454>
 800d90a:	bf00      	nop
 800d90c:	0800f288 	.word	0x0800f288
 800d910:	fffffc02 	.word	0xfffffc02
 800d914:	39500000 	.word	0x39500000
 800d918:	7ff00000 	.word	0x7ff00000
 800d91c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d920:	d165      	bne.n	800d9ee <_strtod_l+0x936>
 800d922:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d928:	b35a      	cbz	r2, 800d982 <_strtod_l+0x8ca>
 800d92a:	4a9f      	ldr	r2, [pc, #636]	@ (800dba8 <_strtod_l+0xaf0>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d12b      	bne.n	800d988 <_strtod_l+0x8d0>
 800d930:	9b08      	ldr	r3, [sp, #32]
 800d932:	4651      	mov	r1, sl
 800d934:	b303      	cbz	r3, 800d978 <_strtod_l+0x8c0>
 800d936:	4b9d      	ldr	r3, [pc, #628]	@ (800dbac <_strtod_l+0xaf4>)
 800d938:	465a      	mov	r2, fp
 800d93a:	4013      	ands	r3, r2
 800d93c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d944:	d81b      	bhi.n	800d97e <_strtod_l+0x8c6>
 800d946:	0d1b      	lsrs	r3, r3, #20
 800d948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d94c:	fa02 f303 	lsl.w	r3, r2, r3
 800d950:	4299      	cmp	r1, r3
 800d952:	d119      	bne.n	800d988 <_strtod_l+0x8d0>
 800d954:	4b96      	ldr	r3, [pc, #600]	@ (800dbb0 <_strtod_l+0xaf8>)
 800d956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d958:	429a      	cmp	r2, r3
 800d95a:	d102      	bne.n	800d962 <_strtod_l+0x8aa>
 800d95c:	3101      	adds	r1, #1
 800d95e:	f43f adca 	beq.w	800d4f6 <_strtod_l+0x43e>
 800d962:	4b92      	ldr	r3, [pc, #584]	@ (800dbac <_strtod_l+0xaf4>)
 800d964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d966:	401a      	ands	r2, r3
 800d968:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d96c:	f04f 0a00 	mov.w	sl, #0
 800d970:	9b08      	ldr	r3, [sp, #32]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1b8      	bne.n	800d8e8 <_strtod_l+0x830>
 800d976:	e5c9      	b.n	800d50c <_strtod_l+0x454>
 800d978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d97c:	e7e8      	b.n	800d950 <_strtod_l+0x898>
 800d97e:	4613      	mov	r3, r2
 800d980:	e7e6      	b.n	800d950 <_strtod_l+0x898>
 800d982:	ea53 030a 	orrs.w	r3, r3, sl
 800d986:	d0a1      	beq.n	800d8cc <_strtod_l+0x814>
 800d988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d98a:	b1db      	cbz	r3, 800d9c4 <_strtod_l+0x90c>
 800d98c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d98e:	4213      	tst	r3, r2
 800d990:	d0ee      	beq.n	800d970 <_strtod_l+0x8b8>
 800d992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d994:	9a08      	ldr	r2, [sp, #32]
 800d996:	4650      	mov	r0, sl
 800d998:	4659      	mov	r1, fp
 800d99a:	b1bb      	cbz	r3, 800d9cc <_strtod_l+0x914>
 800d99c:	f7ff fb6e 	bl	800d07c <sulp>
 800d9a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9a4:	ec53 2b10 	vmov	r2, r3, d0
 800d9a8:	f7f2 fc70 	bl	800028c <__adddf3>
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	468b      	mov	fp, r1
 800d9b0:	e7de      	b.n	800d970 <_strtod_l+0x8b8>
 800d9b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d9b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d9ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d9be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d9c2:	e7d5      	b.n	800d970 <_strtod_l+0x8b8>
 800d9c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d9c6:	ea13 0f0a 	tst.w	r3, sl
 800d9ca:	e7e1      	b.n	800d990 <_strtod_l+0x8d8>
 800d9cc:	f7ff fb56 	bl	800d07c <sulp>
 800d9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9d4:	ec53 2b10 	vmov	r2, r3, d0
 800d9d8:	f7f2 fc56 	bl	8000288 <__aeabi_dsub>
 800d9dc:	2200      	movs	r2, #0
 800d9de:	2300      	movs	r3, #0
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	f7f3 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d0c1      	beq.n	800d970 <_strtod_l+0x8b8>
 800d9ec:	e619      	b.n	800d622 <_strtod_l+0x56a>
 800d9ee:	4641      	mov	r1, r8
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f7ff facd 	bl	800cf90 <__ratio>
 800d9f6:	ec57 6b10 	vmov	r6, r7, d0
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f3 f874 	bl	8000af0 <__aeabi_dcmple>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d06f      	beq.n	800daec <_strtod_l+0xa34>
 800da0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d17a      	bne.n	800db08 <_strtod_l+0xa50>
 800da12:	f1ba 0f00 	cmp.w	sl, #0
 800da16:	d158      	bne.n	800daca <_strtod_l+0xa12>
 800da18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d15a      	bne.n	800dad8 <_strtod_l+0xa20>
 800da22:	4b64      	ldr	r3, [pc, #400]	@ (800dbb4 <_strtod_l+0xafc>)
 800da24:	2200      	movs	r2, #0
 800da26:	4630      	mov	r0, r6
 800da28:	4639      	mov	r1, r7
 800da2a:	f7f3 f857 	bl	8000adc <__aeabi_dcmplt>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d159      	bne.n	800dae6 <_strtod_l+0xa2e>
 800da32:	4630      	mov	r0, r6
 800da34:	4639      	mov	r1, r7
 800da36:	4b60      	ldr	r3, [pc, #384]	@ (800dbb8 <_strtod_l+0xb00>)
 800da38:	2200      	movs	r2, #0
 800da3a:	f7f2 fddd 	bl	80005f8 <__aeabi_dmul>
 800da3e:	4606      	mov	r6, r0
 800da40:	460f      	mov	r7, r1
 800da42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800da46:	9606      	str	r6, [sp, #24]
 800da48:	9307      	str	r3, [sp, #28]
 800da4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da4e:	4d57      	ldr	r5, [pc, #348]	@ (800dbac <_strtod_l+0xaf4>)
 800da50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da56:	401d      	ands	r5, r3
 800da58:	4b58      	ldr	r3, [pc, #352]	@ (800dbbc <_strtod_l+0xb04>)
 800da5a:	429d      	cmp	r5, r3
 800da5c:	f040 80b2 	bne.w	800dbc4 <_strtod_l+0xb0c>
 800da60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800da66:	ec4b ab10 	vmov	d0, sl, fp
 800da6a:	f7ff f9c9 	bl	800ce00 <__ulp>
 800da6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da72:	ec51 0b10 	vmov	r0, r1, d0
 800da76:	f7f2 fdbf 	bl	80005f8 <__aeabi_dmul>
 800da7a:	4652      	mov	r2, sl
 800da7c:	465b      	mov	r3, fp
 800da7e:	f7f2 fc05 	bl	800028c <__adddf3>
 800da82:	460b      	mov	r3, r1
 800da84:	4949      	ldr	r1, [pc, #292]	@ (800dbac <_strtod_l+0xaf4>)
 800da86:	4a4e      	ldr	r2, [pc, #312]	@ (800dbc0 <_strtod_l+0xb08>)
 800da88:	4019      	ands	r1, r3
 800da8a:	4291      	cmp	r1, r2
 800da8c:	4682      	mov	sl, r0
 800da8e:	d942      	bls.n	800db16 <_strtod_l+0xa5e>
 800da90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da92:	4b47      	ldr	r3, [pc, #284]	@ (800dbb0 <_strtod_l+0xaf8>)
 800da94:	429a      	cmp	r2, r3
 800da96:	d103      	bne.n	800daa0 <_strtod_l+0x9e8>
 800da98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da9a:	3301      	adds	r3, #1
 800da9c:	f43f ad2b 	beq.w	800d4f6 <_strtod_l+0x43e>
 800daa0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dbb0 <_strtod_l+0xaf8>
 800daa4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800daa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800daaa:	9805      	ldr	r0, [sp, #20]
 800daac:	f7fe fe74 	bl	800c798 <_Bfree>
 800dab0:	9805      	ldr	r0, [sp, #20]
 800dab2:	4649      	mov	r1, r9
 800dab4:	f7fe fe70 	bl	800c798 <_Bfree>
 800dab8:	9805      	ldr	r0, [sp, #20]
 800daba:	4641      	mov	r1, r8
 800dabc:	f7fe fe6c 	bl	800c798 <_Bfree>
 800dac0:	9805      	ldr	r0, [sp, #20]
 800dac2:	4621      	mov	r1, r4
 800dac4:	f7fe fe68 	bl	800c798 <_Bfree>
 800dac8:	e618      	b.n	800d6fc <_strtod_l+0x644>
 800daca:	f1ba 0f01 	cmp.w	sl, #1
 800dace:	d103      	bne.n	800dad8 <_strtod_l+0xa20>
 800dad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f43f ada5 	beq.w	800d622 <_strtod_l+0x56a>
 800dad8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800db88 <_strtod_l+0xad0>
 800dadc:	4f35      	ldr	r7, [pc, #212]	@ (800dbb4 <_strtod_l+0xafc>)
 800dade:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dae2:	2600      	movs	r6, #0
 800dae4:	e7b1      	b.n	800da4a <_strtod_l+0x992>
 800dae6:	4f34      	ldr	r7, [pc, #208]	@ (800dbb8 <_strtod_l+0xb00>)
 800dae8:	2600      	movs	r6, #0
 800daea:	e7aa      	b.n	800da42 <_strtod_l+0x98a>
 800daec:	4b32      	ldr	r3, [pc, #200]	@ (800dbb8 <_strtod_l+0xb00>)
 800daee:	4630      	mov	r0, r6
 800daf0:	4639      	mov	r1, r7
 800daf2:	2200      	movs	r2, #0
 800daf4:	f7f2 fd80 	bl	80005f8 <__aeabi_dmul>
 800daf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dafa:	4606      	mov	r6, r0
 800dafc:	460f      	mov	r7, r1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d09f      	beq.n	800da42 <_strtod_l+0x98a>
 800db02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800db06:	e7a0      	b.n	800da4a <_strtod_l+0x992>
 800db08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800db90 <_strtod_l+0xad8>
 800db0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db10:	ec57 6b17 	vmov	r6, r7, d7
 800db14:	e799      	b.n	800da4a <_strtod_l+0x992>
 800db16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800db1a:	9b08      	ldr	r3, [sp, #32]
 800db1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1c1      	bne.n	800daa8 <_strtod_l+0x9f0>
 800db24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db28:	0d1b      	lsrs	r3, r3, #20
 800db2a:	051b      	lsls	r3, r3, #20
 800db2c:	429d      	cmp	r5, r3
 800db2e:	d1bb      	bne.n	800daa8 <_strtod_l+0x9f0>
 800db30:	4630      	mov	r0, r6
 800db32:	4639      	mov	r1, r7
 800db34:	f7f3 f8c0 	bl	8000cb8 <__aeabi_d2lz>
 800db38:	f7f2 fd30 	bl	800059c <__aeabi_l2d>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fba0 	bl	8000288 <__aeabi_dsub>
 800db48:	460b      	mov	r3, r1
 800db4a:	4602      	mov	r2, r0
 800db4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800db50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800db54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db56:	ea46 060a 	orr.w	r6, r6, sl
 800db5a:	431e      	orrs	r6, r3
 800db5c:	d06f      	beq.n	800dc3e <_strtod_l+0xb86>
 800db5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800db98 <_strtod_l+0xae0>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 ffba 	bl	8000adc <__aeabi_dcmplt>
 800db68:	2800      	cmp	r0, #0
 800db6a:	f47f accf 	bne.w	800d50c <_strtod_l+0x454>
 800db6e:	a30c      	add	r3, pc, #48	@ (adr r3, 800dba0 <_strtod_l+0xae8>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db78:	f7f2 ffce 	bl	8000b18 <__aeabi_dcmpgt>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d093      	beq.n	800daa8 <_strtod_l+0x9f0>
 800db80:	e4c4      	b.n	800d50c <_strtod_l+0x454>
 800db82:	bf00      	nop
 800db84:	f3af 8000 	nop.w
 800db88:	00000000 	.word	0x00000000
 800db8c:	bff00000 	.word	0xbff00000
 800db90:	00000000 	.word	0x00000000
 800db94:	3ff00000 	.word	0x3ff00000
 800db98:	94a03595 	.word	0x94a03595
 800db9c:	3fdfffff 	.word	0x3fdfffff
 800dba0:	35afe535 	.word	0x35afe535
 800dba4:	3fe00000 	.word	0x3fe00000
 800dba8:	000fffff 	.word	0x000fffff
 800dbac:	7ff00000 	.word	0x7ff00000
 800dbb0:	7fefffff 	.word	0x7fefffff
 800dbb4:	3ff00000 	.word	0x3ff00000
 800dbb8:	3fe00000 	.word	0x3fe00000
 800dbbc:	7fe00000 	.word	0x7fe00000
 800dbc0:	7c9fffff 	.word	0x7c9fffff
 800dbc4:	9b08      	ldr	r3, [sp, #32]
 800dbc6:	b323      	cbz	r3, 800dc12 <_strtod_l+0xb5a>
 800dbc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dbcc:	d821      	bhi.n	800dc12 <_strtod_l+0xb5a>
 800dbce:	a328      	add	r3, pc, #160	@ (adr r3, 800dc70 <_strtod_l+0xbb8>)
 800dbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	4639      	mov	r1, r7
 800dbd8:	f7f2 ff8a 	bl	8000af0 <__aeabi_dcmple>
 800dbdc:	b1a0      	cbz	r0, 800dc08 <_strtod_l+0xb50>
 800dbde:	4639      	mov	r1, r7
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f7f2 ffe1 	bl	8000ba8 <__aeabi_d2uiz>
 800dbe6:	2801      	cmp	r0, #1
 800dbe8:	bf38      	it	cc
 800dbea:	2001      	movcc	r0, #1
 800dbec:	f7f2 fc8a 	bl	8000504 <__aeabi_ui2d>
 800dbf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	460f      	mov	r7, r1
 800dbf6:	b9fb      	cbnz	r3, 800dc38 <_strtod_l+0xb80>
 800dbf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dbfc:	9014      	str	r0, [sp, #80]	@ 0x50
 800dbfe:	9315      	str	r3, [sp, #84]	@ 0x54
 800dc00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dc04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dc08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dc0e:	1b5b      	subs	r3, r3, r5
 800dc10:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dc16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dc1a:	f7ff f8f1 	bl	800ce00 <__ulp>
 800dc1e:	4650      	mov	r0, sl
 800dc20:	ec53 2b10 	vmov	r2, r3, d0
 800dc24:	4659      	mov	r1, fp
 800dc26:	f7f2 fce7 	bl	80005f8 <__aeabi_dmul>
 800dc2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dc2e:	f7f2 fb2d 	bl	800028c <__adddf3>
 800dc32:	4682      	mov	sl, r0
 800dc34:	468b      	mov	fp, r1
 800dc36:	e770      	b.n	800db1a <_strtod_l+0xa62>
 800dc38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dc3c:	e7e0      	b.n	800dc00 <_strtod_l+0xb48>
 800dc3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dc78 <_strtod_l+0xbc0>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 ff4a 	bl	8000adc <__aeabi_dcmplt>
 800dc48:	e798      	b.n	800db7c <_strtod_l+0xac4>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	f7ff ba6d 	b.w	800d132 <_strtod_l+0x7a>
 800dc58:	2a65      	cmp	r2, #101	@ 0x65
 800dc5a:	f43f ab66 	beq.w	800d32a <_strtod_l+0x272>
 800dc5e:	2a45      	cmp	r2, #69	@ 0x45
 800dc60:	f43f ab63 	beq.w	800d32a <_strtod_l+0x272>
 800dc64:	2301      	movs	r3, #1
 800dc66:	f7ff bb9e 	b.w	800d3a6 <_strtod_l+0x2ee>
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w
 800dc70:	ffc00000 	.word	0xffc00000
 800dc74:	41dfffff 	.word	0x41dfffff
 800dc78:	94a03595 	.word	0x94a03595
 800dc7c:	3fcfffff 	.word	0x3fcfffff

0800dc80 <_strtod_r>:
 800dc80:	4b01      	ldr	r3, [pc, #4]	@ (800dc88 <_strtod_r+0x8>)
 800dc82:	f7ff ba19 	b.w	800d0b8 <_strtod_l>
 800dc86:	bf00      	nop
 800dc88:	20000078 	.word	0x20000078

0800dc8c <_strtol_l.constprop.0>:
 800dc8c:	2b24      	cmp	r3, #36	@ 0x24
 800dc8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc92:	4686      	mov	lr, r0
 800dc94:	4690      	mov	r8, r2
 800dc96:	d801      	bhi.n	800dc9c <_strtol_l.constprop.0+0x10>
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d106      	bne.n	800dcaa <_strtol_l.constprop.0+0x1e>
 800dc9c:	f7fd fdae 	bl	800b7fc <__errno>
 800dca0:	2316      	movs	r3, #22
 800dca2:	6003      	str	r3, [r0, #0]
 800dca4:	2000      	movs	r0, #0
 800dca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcaa:	4834      	ldr	r0, [pc, #208]	@ (800dd7c <_strtol_l.constprop.0+0xf0>)
 800dcac:	460d      	mov	r5, r1
 800dcae:	462a      	mov	r2, r5
 800dcb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcb4:	5d06      	ldrb	r6, [r0, r4]
 800dcb6:	f016 0608 	ands.w	r6, r6, #8
 800dcba:	d1f8      	bne.n	800dcae <_strtol_l.constprop.0+0x22>
 800dcbc:	2c2d      	cmp	r4, #45	@ 0x2d
 800dcbe:	d12d      	bne.n	800dd1c <_strtol_l.constprop.0+0x90>
 800dcc0:	782c      	ldrb	r4, [r5, #0]
 800dcc2:	2601      	movs	r6, #1
 800dcc4:	1c95      	adds	r5, r2, #2
 800dcc6:	f033 0210 	bics.w	r2, r3, #16
 800dcca:	d109      	bne.n	800dce0 <_strtol_l.constprop.0+0x54>
 800dccc:	2c30      	cmp	r4, #48	@ 0x30
 800dcce:	d12a      	bne.n	800dd26 <_strtol_l.constprop.0+0x9a>
 800dcd0:	782a      	ldrb	r2, [r5, #0]
 800dcd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dcd6:	2a58      	cmp	r2, #88	@ 0x58
 800dcd8:	d125      	bne.n	800dd26 <_strtol_l.constprop.0+0x9a>
 800dcda:	786c      	ldrb	r4, [r5, #1]
 800dcdc:	2310      	movs	r3, #16
 800dcde:	3502      	adds	r5, #2
 800dce0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dce4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800dce8:	2200      	movs	r2, #0
 800dcea:	fbbc f9f3 	udiv	r9, ip, r3
 800dcee:	4610      	mov	r0, r2
 800dcf0:	fb03 ca19 	mls	sl, r3, r9, ip
 800dcf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dcf8:	2f09      	cmp	r7, #9
 800dcfa:	d81b      	bhi.n	800dd34 <_strtol_l.constprop.0+0xa8>
 800dcfc:	463c      	mov	r4, r7
 800dcfe:	42a3      	cmp	r3, r4
 800dd00:	dd27      	ble.n	800dd52 <_strtol_l.constprop.0+0xc6>
 800dd02:	1c57      	adds	r7, r2, #1
 800dd04:	d007      	beq.n	800dd16 <_strtol_l.constprop.0+0x8a>
 800dd06:	4581      	cmp	r9, r0
 800dd08:	d320      	bcc.n	800dd4c <_strtol_l.constprop.0+0xc0>
 800dd0a:	d101      	bne.n	800dd10 <_strtol_l.constprop.0+0x84>
 800dd0c:	45a2      	cmp	sl, r4
 800dd0e:	db1d      	blt.n	800dd4c <_strtol_l.constprop.0+0xc0>
 800dd10:	fb00 4003 	mla	r0, r0, r3, r4
 800dd14:	2201      	movs	r2, #1
 800dd16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd1a:	e7eb      	b.n	800dcf4 <_strtol_l.constprop.0+0x68>
 800dd1c:	2c2b      	cmp	r4, #43	@ 0x2b
 800dd1e:	bf04      	itt	eq
 800dd20:	782c      	ldrbeq	r4, [r5, #0]
 800dd22:	1c95      	addeq	r5, r2, #2
 800dd24:	e7cf      	b.n	800dcc6 <_strtol_l.constprop.0+0x3a>
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1da      	bne.n	800dce0 <_strtol_l.constprop.0+0x54>
 800dd2a:	2c30      	cmp	r4, #48	@ 0x30
 800dd2c:	bf0c      	ite	eq
 800dd2e:	2308      	moveq	r3, #8
 800dd30:	230a      	movne	r3, #10
 800dd32:	e7d5      	b.n	800dce0 <_strtol_l.constprop.0+0x54>
 800dd34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dd38:	2f19      	cmp	r7, #25
 800dd3a:	d801      	bhi.n	800dd40 <_strtol_l.constprop.0+0xb4>
 800dd3c:	3c37      	subs	r4, #55	@ 0x37
 800dd3e:	e7de      	b.n	800dcfe <_strtol_l.constprop.0+0x72>
 800dd40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dd44:	2f19      	cmp	r7, #25
 800dd46:	d804      	bhi.n	800dd52 <_strtol_l.constprop.0+0xc6>
 800dd48:	3c57      	subs	r4, #87	@ 0x57
 800dd4a:	e7d8      	b.n	800dcfe <_strtol_l.constprop.0+0x72>
 800dd4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd50:	e7e1      	b.n	800dd16 <_strtol_l.constprop.0+0x8a>
 800dd52:	1c53      	adds	r3, r2, #1
 800dd54:	d108      	bne.n	800dd68 <_strtol_l.constprop.0+0xdc>
 800dd56:	2322      	movs	r3, #34	@ 0x22
 800dd58:	f8ce 3000 	str.w	r3, [lr]
 800dd5c:	4660      	mov	r0, ip
 800dd5e:	f1b8 0f00 	cmp.w	r8, #0
 800dd62:	d0a0      	beq.n	800dca6 <_strtol_l.constprop.0+0x1a>
 800dd64:	1e69      	subs	r1, r5, #1
 800dd66:	e006      	b.n	800dd76 <_strtol_l.constprop.0+0xea>
 800dd68:	b106      	cbz	r6, 800dd6c <_strtol_l.constprop.0+0xe0>
 800dd6a:	4240      	negs	r0, r0
 800dd6c:	f1b8 0f00 	cmp.w	r8, #0
 800dd70:	d099      	beq.n	800dca6 <_strtol_l.constprop.0+0x1a>
 800dd72:	2a00      	cmp	r2, #0
 800dd74:	d1f6      	bne.n	800dd64 <_strtol_l.constprop.0+0xd8>
 800dd76:	f8c8 1000 	str.w	r1, [r8]
 800dd7a:	e794      	b.n	800dca6 <_strtol_l.constprop.0+0x1a>
 800dd7c:	0800f2b1 	.word	0x0800f2b1

0800dd80 <_strtol_r>:
 800dd80:	f7ff bf84 	b.w	800dc8c <_strtol_l.constprop.0>

0800dd84 <__ssputs_r>:
 800dd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd88:	688e      	ldr	r6, [r1, #8]
 800dd8a:	461f      	mov	r7, r3
 800dd8c:	42be      	cmp	r6, r7
 800dd8e:	680b      	ldr	r3, [r1, #0]
 800dd90:	4682      	mov	sl, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	4690      	mov	r8, r2
 800dd96:	d82d      	bhi.n	800ddf4 <__ssputs_r+0x70>
 800dd98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dda0:	d026      	beq.n	800ddf0 <__ssputs_r+0x6c>
 800dda2:	6965      	ldr	r5, [r4, #20]
 800dda4:	6909      	ldr	r1, [r1, #16]
 800dda6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddaa:	eba3 0901 	sub.w	r9, r3, r1
 800ddae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddb2:	1c7b      	adds	r3, r7, #1
 800ddb4:	444b      	add	r3, r9
 800ddb6:	106d      	asrs	r5, r5, #1
 800ddb8:	429d      	cmp	r5, r3
 800ddba:	bf38      	it	cc
 800ddbc:	461d      	movcc	r5, r3
 800ddbe:	0553      	lsls	r3, r2, #21
 800ddc0:	d527      	bpl.n	800de12 <__ssputs_r+0x8e>
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	f7fe fc1c 	bl	800c600 <_malloc_r>
 800ddc8:	4606      	mov	r6, r0
 800ddca:	b360      	cbz	r0, 800de26 <__ssputs_r+0xa2>
 800ddcc:	6921      	ldr	r1, [r4, #16]
 800ddce:	464a      	mov	r2, r9
 800ddd0:	f7fd fd41 	bl	800b856 <memcpy>
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ddda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddde:	81a3      	strh	r3, [r4, #12]
 800dde0:	6126      	str	r6, [r4, #16]
 800dde2:	6165      	str	r5, [r4, #20]
 800dde4:	444e      	add	r6, r9
 800dde6:	eba5 0509 	sub.w	r5, r5, r9
 800ddea:	6026      	str	r6, [r4, #0]
 800ddec:	60a5      	str	r5, [r4, #8]
 800ddee:	463e      	mov	r6, r7
 800ddf0:	42be      	cmp	r6, r7
 800ddf2:	d900      	bls.n	800ddf6 <__ssputs_r+0x72>
 800ddf4:	463e      	mov	r6, r7
 800ddf6:	6820      	ldr	r0, [r4, #0]
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	4641      	mov	r1, r8
 800ddfc:	f000 fb6a 	bl	800e4d4 <memmove>
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	1b9b      	subs	r3, r3, r6
 800de04:	60a3      	str	r3, [r4, #8]
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	4433      	add	r3, r6
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	2000      	movs	r0, #0
 800de0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de12:	462a      	mov	r2, r5
 800de14:	f000 ff41 	bl	800ec9a <_realloc_r>
 800de18:	4606      	mov	r6, r0
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d1e0      	bne.n	800dde0 <__ssputs_r+0x5c>
 800de1e:	6921      	ldr	r1, [r4, #16]
 800de20:	4650      	mov	r0, sl
 800de22:	f7fe fb79 	bl	800c518 <_free_r>
 800de26:	230c      	movs	r3, #12
 800de28:	f8ca 3000 	str.w	r3, [sl]
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de32:	81a3      	strh	r3, [r4, #12]
 800de34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de38:	e7e9      	b.n	800de0e <__ssputs_r+0x8a>
	...

0800de3c <_svfiprintf_r>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	4698      	mov	r8, r3
 800de42:	898b      	ldrh	r3, [r1, #12]
 800de44:	061b      	lsls	r3, r3, #24
 800de46:	b09d      	sub	sp, #116	@ 0x74
 800de48:	4607      	mov	r7, r0
 800de4a:	460d      	mov	r5, r1
 800de4c:	4614      	mov	r4, r2
 800de4e:	d510      	bpl.n	800de72 <_svfiprintf_r+0x36>
 800de50:	690b      	ldr	r3, [r1, #16]
 800de52:	b973      	cbnz	r3, 800de72 <_svfiprintf_r+0x36>
 800de54:	2140      	movs	r1, #64	@ 0x40
 800de56:	f7fe fbd3 	bl	800c600 <_malloc_r>
 800de5a:	6028      	str	r0, [r5, #0]
 800de5c:	6128      	str	r0, [r5, #16]
 800de5e:	b930      	cbnz	r0, 800de6e <_svfiprintf_r+0x32>
 800de60:	230c      	movs	r3, #12
 800de62:	603b      	str	r3, [r7, #0]
 800de64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de68:	b01d      	add	sp, #116	@ 0x74
 800de6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6e:	2340      	movs	r3, #64	@ 0x40
 800de70:	616b      	str	r3, [r5, #20]
 800de72:	2300      	movs	r3, #0
 800de74:	9309      	str	r3, [sp, #36]	@ 0x24
 800de76:	2320      	movs	r3, #32
 800de78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de80:	2330      	movs	r3, #48	@ 0x30
 800de82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e020 <_svfiprintf_r+0x1e4>
 800de86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de8a:	f04f 0901 	mov.w	r9, #1
 800de8e:	4623      	mov	r3, r4
 800de90:	469a      	mov	sl, r3
 800de92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de96:	b10a      	cbz	r2, 800de9c <_svfiprintf_r+0x60>
 800de98:	2a25      	cmp	r2, #37	@ 0x25
 800de9a:	d1f9      	bne.n	800de90 <_svfiprintf_r+0x54>
 800de9c:	ebba 0b04 	subs.w	fp, sl, r4
 800dea0:	d00b      	beq.n	800deba <_svfiprintf_r+0x7e>
 800dea2:	465b      	mov	r3, fp
 800dea4:	4622      	mov	r2, r4
 800dea6:	4629      	mov	r1, r5
 800dea8:	4638      	mov	r0, r7
 800deaa:	f7ff ff6b 	bl	800dd84 <__ssputs_r>
 800deae:	3001      	adds	r0, #1
 800deb0:	f000 80a7 	beq.w	800e002 <_svfiprintf_r+0x1c6>
 800deb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deb6:	445a      	add	r2, fp
 800deb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800deba:	f89a 3000 	ldrb.w	r3, [sl]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f000 809f 	beq.w	800e002 <_svfiprintf_r+0x1c6>
 800dec4:	2300      	movs	r3, #0
 800dec6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800deca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dece:	f10a 0a01 	add.w	sl, sl, #1
 800ded2:	9304      	str	r3, [sp, #16]
 800ded4:	9307      	str	r3, [sp, #28]
 800ded6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800deda:	931a      	str	r3, [sp, #104]	@ 0x68
 800dedc:	4654      	mov	r4, sl
 800dede:	2205      	movs	r2, #5
 800dee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee4:	484e      	ldr	r0, [pc, #312]	@ (800e020 <_svfiprintf_r+0x1e4>)
 800dee6:	f7f2 f973 	bl	80001d0 <memchr>
 800deea:	9a04      	ldr	r2, [sp, #16]
 800deec:	b9d8      	cbnz	r0, 800df26 <_svfiprintf_r+0xea>
 800deee:	06d0      	lsls	r0, r2, #27
 800def0:	bf44      	itt	mi
 800def2:	2320      	movmi	r3, #32
 800def4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800def8:	0711      	lsls	r1, r2, #28
 800defa:	bf44      	itt	mi
 800defc:	232b      	movmi	r3, #43	@ 0x2b
 800defe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df02:	f89a 3000 	ldrb.w	r3, [sl]
 800df06:	2b2a      	cmp	r3, #42	@ 0x2a
 800df08:	d015      	beq.n	800df36 <_svfiprintf_r+0xfa>
 800df0a:	9a07      	ldr	r2, [sp, #28]
 800df0c:	4654      	mov	r4, sl
 800df0e:	2000      	movs	r0, #0
 800df10:	f04f 0c0a 	mov.w	ip, #10
 800df14:	4621      	mov	r1, r4
 800df16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df1a:	3b30      	subs	r3, #48	@ 0x30
 800df1c:	2b09      	cmp	r3, #9
 800df1e:	d94b      	bls.n	800dfb8 <_svfiprintf_r+0x17c>
 800df20:	b1b0      	cbz	r0, 800df50 <_svfiprintf_r+0x114>
 800df22:	9207      	str	r2, [sp, #28]
 800df24:	e014      	b.n	800df50 <_svfiprintf_r+0x114>
 800df26:	eba0 0308 	sub.w	r3, r0, r8
 800df2a:	fa09 f303 	lsl.w	r3, r9, r3
 800df2e:	4313      	orrs	r3, r2
 800df30:	9304      	str	r3, [sp, #16]
 800df32:	46a2      	mov	sl, r4
 800df34:	e7d2      	b.n	800dedc <_svfiprintf_r+0xa0>
 800df36:	9b03      	ldr	r3, [sp, #12]
 800df38:	1d19      	adds	r1, r3, #4
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	9103      	str	r1, [sp, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	bfbb      	ittet	lt
 800df42:	425b      	neglt	r3, r3
 800df44:	f042 0202 	orrlt.w	r2, r2, #2
 800df48:	9307      	strge	r3, [sp, #28]
 800df4a:	9307      	strlt	r3, [sp, #28]
 800df4c:	bfb8      	it	lt
 800df4e:	9204      	strlt	r2, [sp, #16]
 800df50:	7823      	ldrb	r3, [r4, #0]
 800df52:	2b2e      	cmp	r3, #46	@ 0x2e
 800df54:	d10a      	bne.n	800df6c <_svfiprintf_r+0x130>
 800df56:	7863      	ldrb	r3, [r4, #1]
 800df58:	2b2a      	cmp	r3, #42	@ 0x2a
 800df5a:	d132      	bne.n	800dfc2 <_svfiprintf_r+0x186>
 800df5c:	9b03      	ldr	r3, [sp, #12]
 800df5e:	1d1a      	adds	r2, r3, #4
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	9203      	str	r2, [sp, #12]
 800df64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df68:	3402      	adds	r4, #2
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e030 <_svfiprintf_r+0x1f4>
 800df70:	7821      	ldrb	r1, [r4, #0]
 800df72:	2203      	movs	r2, #3
 800df74:	4650      	mov	r0, sl
 800df76:	f7f2 f92b 	bl	80001d0 <memchr>
 800df7a:	b138      	cbz	r0, 800df8c <_svfiprintf_r+0x150>
 800df7c:	9b04      	ldr	r3, [sp, #16]
 800df7e:	eba0 000a 	sub.w	r0, r0, sl
 800df82:	2240      	movs	r2, #64	@ 0x40
 800df84:	4082      	lsls	r2, r0
 800df86:	4313      	orrs	r3, r2
 800df88:	3401      	adds	r4, #1
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df90:	4824      	ldr	r0, [pc, #144]	@ (800e024 <_svfiprintf_r+0x1e8>)
 800df92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df96:	2206      	movs	r2, #6
 800df98:	f7f2 f91a 	bl	80001d0 <memchr>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d036      	beq.n	800e00e <_svfiprintf_r+0x1d2>
 800dfa0:	4b21      	ldr	r3, [pc, #132]	@ (800e028 <_svfiprintf_r+0x1ec>)
 800dfa2:	bb1b      	cbnz	r3, 800dfec <_svfiprintf_r+0x1b0>
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	3307      	adds	r3, #7
 800dfa8:	f023 0307 	bic.w	r3, r3, #7
 800dfac:	3308      	adds	r3, #8
 800dfae:	9303      	str	r3, [sp, #12]
 800dfb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb2:	4433      	add	r3, r6
 800dfb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfb6:	e76a      	b.n	800de8e <_svfiprintf_r+0x52>
 800dfb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfbc:	460c      	mov	r4, r1
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	e7a8      	b.n	800df14 <_svfiprintf_r+0xd8>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	3401      	adds	r4, #1
 800dfc6:	9305      	str	r3, [sp, #20]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f04f 0c0a 	mov.w	ip, #10
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfd4:	3a30      	subs	r2, #48	@ 0x30
 800dfd6:	2a09      	cmp	r2, #9
 800dfd8:	d903      	bls.n	800dfe2 <_svfiprintf_r+0x1a6>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0c6      	beq.n	800df6c <_svfiprintf_r+0x130>
 800dfde:	9105      	str	r1, [sp, #20]
 800dfe0:	e7c4      	b.n	800df6c <_svfiprintf_r+0x130>
 800dfe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e7f0      	b.n	800dfce <_svfiprintf_r+0x192>
 800dfec:	ab03      	add	r3, sp, #12
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	462a      	mov	r2, r5
 800dff2:	4b0e      	ldr	r3, [pc, #56]	@ (800e02c <_svfiprintf_r+0x1f0>)
 800dff4:	a904      	add	r1, sp, #16
 800dff6:	4638      	mov	r0, r7
 800dff8:	f7fc fb2e 	bl	800a658 <_printf_float>
 800dffc:	1c42      	adds	r2, r0, #1
 800dffe:	4606      	mov	r6, r0
 800e000:	d1d6      	bne.n	800dfb0 <_svfiprintf_r+0x174>
 800e002:	89ab      	ldrh	r3, [r5, #12]
 800e004:	065b      	lsls	r3, r3, #25
 800e006:	f53f af2d 	bmi.w	800de64 <_svfiprintf_r+0x28>
 800e00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e00c:	e72c      	b.n	800de68 <_svfiprintf_r+0x2c>
 800e00e:	ab03      	add	r3, sp, #12
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	462a      	mov	r2, r5
 800e014:	4b05      	ldr	r3, [pc, #20]	@ (800e02c <_svfiprintf_r+0x1f0>)
 800e016:	a904      	add	r1, sp, #16
 800e018:	4638      	mov	r0, r7
 800e01a:	f7fc fdb5 	bl	800ab88 <_printf_i>
 800e01e:	e7ed      	b.n	800dffc <_svfiprintf_r+0x1c0>
 800e020:	0800f3b1 	.word	0x0800f3b1
 800e024:	0800f3bb 	.word	0x0800f3bb
 800e028:	0800a659 	.word	0x0800a659
 800e02c:	0800dd85 	.word	0x0800dd85
 800e030:	0800f3b7 	.word	0x0800f3b7

0800e034 <__sfputc_r>:
 800e034:	6893      	ldr	r3, [r2, #8]
 800e036:	3b01      	subs	r3, #1
 800e038:	2b00      	cmp	r3, #0
 800e03a:	b410      	push	{r4}
 800e03c:	6093      	str	r3, [r2, #8]
 800e03e:	da08      	bge.n	800e052 <__sfputc_r+0x1e>
 800e040:	6994      	ldr	r4, [r2, #24]
 800e042:	42a3      	cmp	r3, r4
 800e044:	db01      	blt.n	800e04a <__sfputc_r+0x16>
 800e046:	290a      	cmp	r1, #10
 800e048:	d103      	bne.n	800e052 <__sfputc_r+0x1e>
 800e04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e04e:	f7fd ba98 	b.w	800b582 <__swbuf_r>
 800e052:	6813      	ldr	r3, [r2, #0]
 800e054:	1c58      	adds	r0, r3, #1
 800e056:	6010      	str	r0, [r2, #0]
 800e058:	7019      	strb	r1, [r3, #0]
 800e05a:	4608      	mov	r0, r1
 800e05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <__sfputs_r>:
 800e062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e064:	4606      	mov	r6, r0
 800e066:	460f      	mov	r7, r1
 800e068:	4614      	mov	r4, r2
 800e06a:	18d5      	adds	r5, r2, r3
 800e06c:	42ac      	cmp	r4, r5
 800e06e:	d101      	bne.n	800e074 <__sfputs_r+0x12>
 800e070:	2000      	movs	r0, #0
 800e072:	e007      	b.n	800e084 <__sfputs_r+0x22>
 800e074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e078:	463a      	mov	r2, r7
 800e07a:	4630      	mov	r0, r6
 800e07c:	f7ff ffda 	bl	800e034 <__sfputc_r>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	d1f3      	bne.n	800e06c <__sfputs_r+0xa>
 800e084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e088 <_vfiprintf_r>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	460d      	mov	r5, r1
 800e08e:	b09d      	sub	sp, #116	@ 0x74
 800e090:	4614      	mov	r4, r2
 800e092:	4698      	mov	r8, r3
 800e094:	4606      	mov	r6, r0
 800e096:	b118      	cbz	r0, 800e0a0 <_vfiprintf_r+0x18>
 800e098:	6a03      	ldr	r3, [r0, #32]
 800e09a:	b90b      	cbnz	r3, 800e0a0 <_vfiprintf_r+0x18>
 800e09c:	f7fd f934 	bl	800b308 <__sinit>
 800e0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0a2:	07d9      	lsls	r1, r3, #31
 800e0a4:	d405      	bmi.n	800e0b2 <_vfiprintf_r+0x2a>
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	059a      	lsls	r2, r3, #22
 800e0aa:	d402      	bmi.n	800e0b2 <_vfiprintf_r+0x2a>
 800e0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ae:	f7fd fbd0 	bl	800b852 <__retarget_lock_acquire_recursive>
 800e0b2:	89ab      	ldrh	r3, [r5, #12]
 800e0b4:	071b      	lsls	r3, r3, #28
 800e0b6:	d501      	bpl.n	800e0bc <_vfiprintf_r+0x34>
 800e0b8:	692b      	ldr	r3, [r5, #16]
 800e0ba:	b99b      	cbnz	r3, 800e0e4 <_vfiprintf_r+0x5c>
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7fd fa9e 	bl	800b600 <__swsetup_r>
 800e0c4:	b170      	cbz	r0, 800e0e4 <_vfiprintf_r+0x5c>
 800e0c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0c8:	07dc      	lsls	r4, r3, #31
 800e0ca:	d504      	bpl.n	800e0d6 <_vfiprintf_r+0x4e>
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0d0:	b01d      	add	sp, #116	@ 0x74
 800e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d6:	89ab      	ldrh	r3, [r5, #12]
 800e0d8:	0598      	lsls	r0, r3, #22
 800e0da:	d4f7      	bmi.n	800e0cc <_vfiprintf_r+0x44>
 800e0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0de:	f7fd fbb9 	bl	800b854 <__retarget_lock_release_recursive>
 800e0e2:	e7f3      	b.n	800e0cc <_vfiprintf_r+0x44>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0f2:	2330      	movs	r3, #48	@ 0x30
 800e0f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2a4 <_vfiprintf_r+0x21c>
 800e0f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0fc:	f04f 0901 	mov.w	r9, #1
 800e100:	4623      	mov	r3, r4
 800e102:	469a      	mov	sl, r3
 800e104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e108:	b10a      	cbz	r2, 800e10e <_vfiprintf_r+0x86>
 800e10a:	2a25      	cmp	r2, #37	@ 0x25
 800e10c:	d1f9      	bne.n	800e102 <_vfiprintf_r+0x7a>
 800e10e:	ebba 0b04 	subs.w	fp, sl, r4
 800e112:	d00b      	beq.n	800e12c <_vfiprintf_r+0xa4>
 800e114:	465b      	mov	r3, fp
 800e116:	4622      	mov	r2, r4
 800e118:	4629      	mov	r1, r5
 800e11a:	4630      	mov	r0, r6
 800e11c:	f7ff ffa1 	bl	800e062 <__sfputs_r>
 800e120:	3001      	adds	r0, #1
 800e122:	f000 80a7 	beq.w	800e274 <_vfiprintf_r+0x1ec>
 800e126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e128:	445a      	add	r2, fp
 800e12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e12c:	f89a 3000 	ldrb.w	r3, [sl]
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 809f 	beq.w	800e274 <_vfiprintf_r+0x1ec>
 800e136:	2300      	movs	r3, #0
 800e138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e140:	f10a 0a01 	add.w	sl, sl, #1
 800e144:	9304      	str	r3, [sp, #16]
 800e146:	9307      	str	r3, [sp, #28]
 800e148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e14e:	4654      	mov	r4, sl
 800e150:	2205      	movs	r2, #5
 800e152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e156:	4853      	ldr	r0, [pc, #332]	@ (800e2a4 <_vfiprintf_r+0x21c>)
 800e158:	f7f2 f83a 	bl	80001d0 <memchr>
 800e15c:	9a04      	ldr	r2, [sp, #16]
 800e15e:	b9d8      	cbnz	r0, 800e198 <_vfiprintf_r+0x110>
 800e160:	06d1      	lsls	r1, r2, #27
 800e162:	bf44      	itt	mi
 800e164:	2320      	movmi	r3, #32
 800e166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e16a:	0713      	lsls	r3, r2, #28
 800e16c:	bf44      	itt	mi
 800e16e:	232b      	movmi	r3, #43	@ 0x2b
 800e170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e174:	f89a 3000 	ldrb.w	r3, [sl]
 800e178:	2b2a      	cmp	r3, #42	@ 0x2a
 800e17a:	d015      	beq.n	800e1a8 <_vfiprintf_r+0x120>
 800e17c:	9a07      	ldr	r2, [sp, #28]
 800e17e:	4654      	mov	r4, sl
 800e180:	2000      	movs	r0, #0
 800e182:	f04f 0c0a 	mov.w	ip, #10
 800e186:	4621      	mov	r1, r4
 800e188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e18c:	3b30      	subs	r3, #48	@ 0x30
 800e18e:	2b09      	cmp	r3, #9
 800e190:	d94b      	bls.n	800e22a <_vfiprintf_r+0x1a2>
 800e192:	b1b0      	cbz	r0, 800e1c2 <_vfiprintf_r+0x13a>
 800e194:	9207      	str	r2, [sp, #28]
 800e196:	e014      	b.n	800e1c2 <_vfiprintf_r+0x13a>
 800e198:	eba0 0308 	sub.w	r3, r0, r8
 800e19c:	fa09 f303 	lsl.w	r3, r9, r3
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	9304      	str	r3, [sp, #16]
 800e1a4:	46a2      	mov	sl, r4
 800e1a6:	e7d2      	b.n	800e14e <_vfiprintf_r+0xc6>
 800e1a8:	9b03      	ldr	r3, [sp, #12]
 800e1aa:	1d19      	adds	r1, r3, #4
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	9103      	str	r1, [sp, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	bfbb      	ittet	lt
 800e1b4:	425b      	neglt	r3, r3
 800e1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ba:	9307      	strge	r3, [sp, #28]
 800e1bc:	9307      	strlt	r3, [sp, #28]
 800e1be:	bfb8      	it	lt
 800e1c0:	9204      	strlt	r2, [sp, #16]
 800e1c2:	7823      	ldrb	r3, [r4, #0]
 800e1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1c6:	d10a      	bne.n	800e1de <_vfiprintf_r+0x156>
 800e1c8:	7863      	ldrb	r3, [r4, #1]
 800e1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1cc:	d132      	bne.n	800e234 <_vfiprintf_r+0x1ac>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	1d1a      	adds	r2, r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	9203      	str	r2, [sp, #12]
 800e1d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1da:	3402      	adds	r4, #2
 800e1dc:	9305      	str	r3, [sp, #20]
 800e1de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2b4 <_vfiprintf_r+0x22c>
 800e1e2:	7821      	ldrb	r1, [r4, #0]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	f7f1 fff2 	bl	80001d0 <memchr>
 800e1ec:	b138      	cbz	r0, 800e1fe <_vfiprintf_r+0x176>
 800e1ee:	9b04      	ldr	r3, [sp, #16]
 800e1f0:	eba0 000a 	sub.w	r0, r0, sl
 800e1f4:	2240      	movs	r2, #64	@ 0x40
 800e1f6:	4082      	lsls	r2, r0
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	3401      	adds	r4, #1
 800e1fc:	9304      	str	r3, [sp, #16]
 800e1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e202:	4829      	ldr	r0, [pc, #164]	@ (800e2a8 <_vfiprintf_r+0x220>)
 800e204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e208:	2206      	movs	r2, #6
 800e20a:	f7f1 ffe1 	bl	80001d0 <memchr>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d03f      	beq.n	800e292 <_vfiprintf_r+0x20a>
 800e212:	4b26      	ldr	r3, [pc, #152]	@ (800e2ac <_vfiprintf_r+0x224>)
 800e214:	bb1b      	cbnz	r3, 800e25e <_vfiprintf_r+0x1d6>
 800e216:	9b03      	ldr	r3, [sp, #12]
 800e218:	3307      	adds	r3, #7
 800e21a:	f023 0307 	bic.w	r3, r3, #7
 800e21e:	3308      	adds	r3, #8
 800e220:	9303      	str	r3, [sp, #12]
 800e222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e224:	443b      	add	r3, r7
 800e226:	9309      	str	r3, [sp, #36]	@ 0x24
 800e228:	e76a      	b.n	800e100 <_vfiprintf_r+0x78>
 800e22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e22e:	460c      	mov	r4, r1
 800e230:	2001      	movs	r0, #1
 800e232:	e7a8      	b.n	800e186 <_vfiprintf_r+0xfe>
 800e234:	2300      	movs	r3, #0
 800e236:	3401      	adds	r4, #1
 800e238:	9305      	str	r3, [sp, #20]
 800e23a:	4619      	mov	r1, r3
 800e23c:	f04f 0c0a 	mov.w	ip, #10
 800e240:	4620      	mov	r0, r4
 800e242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e246:	3a30      	subs	r2, #48	@ 0x30
 800e248:	2a09      	cmp	r2, #9
 800e24a:	d903      	bls.n	800e254 <_vfiprintf_r+0x1cc>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d0c6      	beq.n	800e1de <_vfiprintf_r+0x156>
 800e250:	9105      	str	r1, [sp, #20]
 800e252:	e7c4      	b.n	800e1de <_vfiprintf_r+0x156>
 800e254:	fb0c 2101 	mla	r1, ip, r1, r2
 800e258:	4604      	mov	r4, r0
 800e25a:	2301      	movs	r3, #1
 800e25c:	e7f0      	b.n	800e240 <_vfiprintf_r+0x1b8>
 800e25e:	ab03      	add	r3, sp, #12
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	462a      	mov	r2, r5
 800e264:	4b12      	ldr	r3, [pc, #72]	@ (800e2b0 <_vfiprintf_r+0x228>)
 800e266:	a904      	add	r1, sp, #16
 800e268:	4630      	mov	r0, r6
 800e26a:	f7fc f9f5 	bl	800a658 <_printf_float>
 800e26e:	4607      	mov	r7, r0
 800e270:	1c78      	adds	r0, r7, #1
 800e272:	d1d6      	bne.n	800e222 <_vfiprintf_r+0x19a>
 800e274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e276:	07d9      	lsls	r1, r3, #31
 800e278:	d405      	bmi.n	800e286 <_vfiprintf_r+0x1fe>
 800e27a:	89ab      	ldrh	r3, [r5, #12]
 800e27c:	059a      	lsls	r2, r3, #22
 800e27e:	d402      	bmi.n	800e286 <_vfiprintf_r+0x1fe>
 800e280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e282:	f7fd fae7 	bl	800b854 <__retarget_lock_release_recursive>
 800e286:	89ab      	ldrh	r3, [r5, #12]
 800e288:	065b      	lsls	r3, r3, #25
 800e28a:	f53f af1f 	bmi.w	800e0cc <_vfiprintf_r+0x44>
 800e28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e290:	e71e      	b.n	800e0d0 <_vfiprintf_r+0x48>
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	462a      	mov	r2, r5
 800e298:	4b05      	ldr	r3, [pc, #20]	@ (800e2b0 <_vfiprintf_r+0x228>)
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4630      	mov	r0, r6
 800e29e:	f7fc fc73 	bl	800ab88 <_printf_i>
 800e2a2:	e7e4      	b.n	800e26e <_vfiprintf_r+0x1e6>
 800e2a4:	0800f3b1 	.word	0x0800f3b1
 800e2a8:	0800f3bb 	.word	0x0800f3bb
 800e2ac:	0800a659 	.word	0x0800a659
 800e2b0:	0800e063 	.word	0x0800e063
 800e2b4:	0800f3b7 	.word	0x0800f3b7

0800e2b8 <__sflush_r>:
 800e2b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c0:	0716      	lsls	r6, r2, #28
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	d454      	bmi.n	800e372 <__sflush_r+0xba>
 800e2c8:	684b      	ldr	r3, [r1, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	dc02      	bgt.n	800e2d4 <__sflush_r+0x1c>
 800e2ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	dd48      	ble.n	800e366 <__sflush_r+0xae>
 800e2d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	d045      	beq.n	800e366 <__sflush_r+0xae>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2e0:	682f      	ldr	r7, [r5, #0]
 800e2e2:	6a21      	ldr	r1, [r4, #32]
 800e2e4:	602b      	str	r3, [r5, #0]
 800e2e6:	d030      	beq.n	800e34a <__sflush_r+0x92>
 800e2e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e2ea:	89a3      	ldrh	r3, [r4, #12]
 800e2ec:	0759      	lsls	r1, r3, #29
 800e2ee:	d505      	bpl.n	800e2fc <__sflush_r+0x44>
 800e2f0:	6863      	ldr	r3, [r4, #4]
 800e2f2:	1ad2      	subs	r2, r2, r3
 800e2f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e2f6:	b10b      	cbz	r3, 800e2fc <__sflush_r+0x44>
 800e2f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2fa:	1ad2      	subs	r2, r2, r3
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e300:	6a21      	ldr	r1, [r4, #32]
 800e302:	4628      	mov	r0, r5
 800e304:	47b0      	blx	r6
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	d106      	bne.n	800e31a <__sflush_r+0x62>
 800e30c:	6829      	ldr	r1, [r5, #0]
 800e30e:	291d      	cmp	r1, #29
 800e310:	d82b      	bhi.n	800e36a <__sflush_r+0xb2>
 800e312:	4a2a      	ldr	r2, [pc, #168]	@ (800e3bc <__sflush_r+0x104>)
 800e314:	410a      	asrs	r2, r1
 800e316:	07d6      	lsls	r6, r2, #31
 800e318:	d427      	bmi.n	800e36a <__sflush_r+0xb2>
 800e31a:	2200      	movs	r2, #0
 800e31c:	6062      	str	r2, [r4, #4]
 800e31e:	04d9      	lsls	r1, r3, #19
 800e320:	6922      	ldr	r2, [r4, #16]
 800e322:	6022      	str	r2, [r4, #0]
 800e324:	d504      	bpl.n	800e330 <__sflush_r+0x78>
 800e326:	1c42      	adds	r2, r0, #1
 800e328:	d101      	bne.n	800e32e <__sflush_r+0x76>
 800e32a:	682b      	ldr	r3, [r5, #0]
 800e32c:	b903      	cbnz	r3, 800e330 <__sflush_r+0x78>
 800e32e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e332:	602f      	str	r7, [r5, #0]
 800e334:	b1b9      	cbz	r1, 800e366 <__sflush_r+0xae>
 800e336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e33a:	4299      	cmp	r1, r3
 800e33c:	d002      	beq.n	800e344 <__sflush_r+0x8c>
 800e33e:	4628      	mov	r0, r5
 800e340:	f7fe f8ea 	bl	800c518 <_free_r>
 800e344:	2300      	movs	r3, #0
 800e346:	6363      	str	r3, [r4, #52]	@ 0x34
 800e348:	e00d      	b.n	800e366 <__sflush_r+0xae>
 800e34a:	2301      	movs	r3, #1
 800e34c:	4628      	mov	r0, r5
 800e34e:	47b0      	blx	r6
 800e350:	4602      	mov	r2, r0
 800e352:	1c50      	adds	r0, r2, #1
 800e354:	d1c9      	bne.n	800e2ea <__sflush_r+0x32>
 800e356:	682b      	ldr	r3, [r5, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d0c6      	beq.n	800e2ea <__sflush_r+0x32>
 800e35c:	2b1d      	cmp	r3, #29
 800e35e:	d001      	beq.n	800e364 <__sflush_r+0xac>
 800e360:	2b16      	cmp	r3, #22
 800e362:	d11e      	bne.n	800e3a2 <__sflush_r+0xea>
 800e364:	602f      	str	r7, [r5, #0]
 800e366:	2000      	movs	r0, #0
 800e368:	e022      	b.n	800e3b0 <__sflush_r+0xf8>
 800e36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e36e:	b21b      	sxth	r3, r3
 800e370:	e01b      	b.n	800e3aa <__sflush_r+0xf2>
 800e372:	690f      	ldr	r7, [r1, #16]
 800e374:	2f00      	cmp	r7, #0
 800e376:	d0f6      	beq.n	800e366 <__sflush_r+0xae>
 800e378:	0793      	lsls	r3, r2, #30
 800e37a:	680e      	ldr	r6, [r1, #0]
 800e37c:	bf08      	it	eq
 800e37e:	694b      	ldreq	r3, [r1, #20]
 800e380:	600f      	str	r7, [r1, #0]
 800e382:	bf18      	it	ne
 800e384:	2300      	movne	r3, #0
 800e386:	eba6 0807 	sub.w	r8, r6, r7
 800e38a:	608b      	str	r3, [r1, #8]
 800e38c:	f1b8 0f00 	cmp.w	r8, #0
 800e390:	dde9      	ble.n	800e366 <__sflush_r+0xae>
 800e392:	6a21      	ldr	r1, [r4, #32]
 800e394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e396:	4643      	mov	r3, r8
 800e398:	463a      	mov	r2, r7
 800e39a:	4628      	mov	r0, r5
 800e39c:	47b0      	blx	r6
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	dc08      	bgt.n	800e3b4 <__sflush_r+0xfc>
 800e3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3aa:	81a3      	strh	r3, [r4, #12]
 800e3ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b4:	4407      	add	r7, r0
 800e3b6:	eba8 0800 	sub.w	r8, r8, r0
 800e3ba:	e7e7      	b.n	800e38c <__sflush_r+0xd4>
 800e3bc:	dfbffffe 	.word	0xdfbffffe

0800e3c0 <_fflush_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	690b      	ldr	r3, [r1, #16]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	b913      	cbnz	r3, 800e3d0 <_fflush_r+0x10>
 800e3ca:	2500      	movs	r5, #0
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	bd38      	pop	{r3, r4, r5, pc}
 800e3d0:	b118      	cbz	r0, 800e3da <_fflush_r+0x1a>
 800e3d2:	6a03      	ldr	r3, [r0, #32]
 800e3d4:	b90b      	cbnz	r3, 800e3da <_fflush_r+0x1a>
 800e3d6:	f7fc ff97 	bl	800b308 <__sinit>
 800e3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0f3      	beq.n	800e3ca <_fflush_r+0xa>
 800e3e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e3e4:	07d0      	lsls	r0, r2, #31
 800e3e6:	d404      	bmi.n	800e3f2 <_fflush_r+0x32>
 800e3e8:	0599      	lsls	r1, r3, #22
 800e3ea:	d402      	bmi.n	800e3f2 <_fflush_r+0x32>
 800e3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3ee:	f7fd fa30 	bl	800b852 <__retarget_lock_acquire_recursive>
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	4621      	mov	r1, r4
 800e3f6:	f7ff ff5f 	bl	800e2b8 <__sflush_r>
 800e3fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3fc:	07da      	lsls	r2, r3, #31
 800e3fe:	4605      	mov	r5, r0
 800e400:	d4e4      	bmi.n	800e3cc <_fflush_r+0xc>
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	059b      	lsls	r3, r3, #22
 800e406:	d4e1      	bmi.n	800e3cc <_fflush_r+0xc>
 800e408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e40a:	f7fd fa23 	bl	800b854 <__retarget_lock_release_recursive>
 800e40e:	e7dd      	b.n	800e3cc <_fflush_r+0xc>

0800e410 <__swhatbuf_r>:
 800e410:	b570      	push	{r4, r5, r6, lr}
 800e412:	460c      	mov	r4, r1
 800e414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e418:	2900      	cmp	r1, #0
 800e41a:	b096      	sub	sp, #88	@ 0x58
 800e41c:	4615      	mov	r5, r2
 800e41e:	461e      	mov	r6, r3
 800e420:	da0d      	bge.n	800e43e <__swhatbuf_r+0x2e>
 800e422:	89a3      	ldrh	r3, [r4, #12]
 800e424:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e428:	f04f 0100 	mov.w	r1, #0
 800e42c:	bf14      	ite	ne
 800e42e:	2340      	movne	r3, #64	@ 0x40
 800e430:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e434:	2000      	movs	r0, #0
 800e436:	6031      	str	r1, [r6, #0]
 800e438:	602b      	str	r3, [r5, #0]
 800e43a:	b016      	add	sp, #88	@ 0x58
 800e43c:	bd70      	pop	{r4, r5, r6, pc}
 800e43e:	466a      	mov	r2, sp
 800e440:	f000 f874 	bl	800e52c <_fstat_r>
 800e444:	2800      	cmp	r0, #0
 800e446:	dbec      	blt.n	800e422 <__swhatbuf_r+0x12>
 800e448:	9901      	ldr	r1, [sp, #4]
 800e44a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e44e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e452:	4259      	negs	r1, r3
 800e454:	4159      	adcs	r1, r3
 800e456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e45a:	e7eb      	b.n	800e434 <__swhatbuf_r+0x24>

0800e45c <__smakebuf_r>:
 800e45c:	898b      	ldrh	r3, [r1, #12]
 800e45e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e460:	079d      	lsls	r5, r3, #30
 800e462:	4606      	mov	r6, r0
 800e464:	460c      	mov	r4, r1
 800e466:	d507      	bpl.n	800e478 <__smakebuf_r+0x1c>
 800e468:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	6123      	str	r3, [r4, #16]
 800e470:	2301      	movs	r3, #1
 800e472:	6163      	str	r3, [r4, #20]
 800e474:	b003      	add	sp, #12
 800e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e478:	ab01      	add	r3, sp, #4
 800e47a:	466a      	mov	r2, sp
 800e47c:	f7ff ffc8 	bl	800e410 <__swhatbuf_r>
 800e480:	9f00      	ldr	r7, [sp, #0]
 800e482:	4605      	mov	r5, r0
 800e484:	4639      	mov	r1, r7
 800e486:	4630      	mov	r0, r6
 800e488:	f7fe f8ba 	bl	800c600 <_malloc_r>
 800e48c:	b948      	cbnz	r0, 800e4a2 <__smakebuf_r+0x46>
 800e48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e492:	059a      	lsls	r2, r3, #22
 800e494:	d4ee      	bmi.n	800e474 <__smakebuf_r+0x18>
 800e496:	f023 0303 	bic.w	r3, r3, #3
 800e49a:	f043 0302 	orr.w	r3, r3, #2
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	e7e2      	b.n	800e468 <__smakebuf_r+0xc>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	6020      	str	r0, [r4, #0]
 800e4a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4aa:	81a3      	strh	r3, [r4, #12]
 800e4ac:	9b01      	ldr	r3, [sp, #4]
 800e4ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4b2:	b15b      	cbz	r3, 800e4cc <__smakebuf_r+0x70>
 800e4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f000 f849 	bl	800e550 <_isatty_r>
 800e4be:	b128      	cbz	r0, 800e4cc <__smakebuf_r+0x70>
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	f043 0301 	orr.w	r3, r3, #1
 800e4ca:	81a3      	strh	r3, [r4, #12]
 800e4cc:	89a3      	ldrh	r3, [r4, #12]
 800e4ce:	431d      	orrs	r5, r3
 800e4d0:	81a5      	strh	r5, [r4, #12]
 800e4d2:	e7cf      	b.n	800e474 <__smakebuf_r+0x18>

0800e4d4 <memmove>:
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	eb01 0402 	add.w	r4, r1, r2
 800e4dc:	d902      	bls.n	800e4e4 <memmove+0x10>
 800e4de:	4284      	cmp	r4, r0
 800e4e0:	4623      	mov	r3, r4
 800e4e2:	d807      	bhi.n	800e4f4 <memmove+0x20>
 800e4e4:	1e43      	subs	r3, r0, #1
 800e4e6:	42a1      	cmp	r1, r4
 800e4e8:	d008      	beq.n	800e4fc <memmove+0x28>
 800e4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4f2:	e7f8      	b.n	800e4e6 <memmove+0x12>
 800e4f4:	4402      	add	r2, r0
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	d100      	bne.n	800e4fe <memmove+0x2a>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e506:	e7f7      	b.n	800e4f8 <memmove+0x24>

0800e508 <strncmp>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	b16a      	cbz	r2, 800e528 <strncmp+0x20>
 800e50c:	3901      	subs	r1, #1
 800e50e:	1884      	adds	r4, r0, r2
 800e510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e514:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e518:	429a      	cmp	r2, r3
 800e51a:	d103      	bne.n	800e524 <strncmp+0x1c>
 800e51c:	42a0      	cmp	r0, r4
 800e51e:	d001      	beq.n	800e524 <strncmp+0x1c>
 800e520:	2a00      	cmp	r2, #0
 800e522:	d1f5      	bne.n	800e510 <strncmp+0x8>
 800e524:	1ad0      	subs	r0, r2, r3
 800e526:	bd10      	pop	{r4, pc}
 800e528:	4610      	mov	r0, r2
 800e52a:	e7fc      	b.n	800e526 <strncmp+0x1e>

0800e52c <_fstat_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	4d07      	ldr	r5, [pc, #28]	@ (800e54c <_fstat_r+0x20>)
 800e530:	2300      	movs	r3, #0
 800e532:	4604      	mov	r4, r0
 800e534:	4608      	mov	r0, r1
 800e536:	4611      	mov	r1, r2
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	f7f3 ffa1 	bl	8002480 <_fstat>
 800e53e:	1c43      	adds	r3, r0, #1
 800e540:	d102      	bne.n	800e548 <_fstat_r+0x1c>
 800e542:	682b      	ldr	r3, [r5, #0]
 800e544:	b103      	cbz	r3, 800e548 <_fstat_r+0x1c>
 800e546:	6023      	str	r3, [r4, #0]
 800e548:	bd38      	pop	{r3, r4, r5, pc}
 800e54a:	bf00      	nop
 800e54c:	20003744 	.word	0x20003744

0800e550 <_isatty_r>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	4d06      	ldr	r5, [pc, #24]	@ (800e56c <_isatty_r+0x1c>)
 800e554:	2300      	movs	r3, #0
 800e556:	4604      	mov	r4, r0
 800e558:	4608      	mov	r0, r1
 800e55a:	602b      	str	r3, [r5, #0]
 800e55c:	f7f3 ffa0 	bl	80024a0 <_isatty>
 800e560:	1c43      	adds	r3, r0, #1
 800e562:	d102      	bne.n	800e56a <_isatty_r+0x1a>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	b103      	cbz	r3, 800e56a <_isatty_r+0x1a>
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	20003744 	.word	0x20003744

0800e570 <_sbrk_r>:
 800e570:	b538      	push	{r3, r4, r5, lr}
 800e572:	4d06      	ldr	r5, [pc, #24]	@ (800e58c <_sbrk_r+0x1c>)
 800e574:	2300      	movs	r3, #0
 800e576:	4604      	mov	r4, r0
 800e578:	4608      	mov	r0, r1
 800e57a:	602b      	str	r3, [r5, #0]
 800e57c:	f7f3 ffa8 	bl	80024d0 <_sbrk>
 800e580:	1c43      	adds	r3, r0, #1
 800e582:	d102      	bne.n	800e58a <_sbrk_r+0x1a>
 800e584:	682b      	ldr	r3, [r5, #0]
 800e586:	b103      	cbz	r3, 800e58a <_sbrk_r+0x1a>
 800e588:	6023      	str	r3, [r4, #0]
 800e58a:	bd38      	pop	{r3, r4, r5, pc}
 800e58c:	20003744 	.word	0x20003744

0800e590 <nan>:
 800e590:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e598 <nan+0x8>
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	00000000 	.word	0x00000000
 800e59c:	7ff80000 	.word	0x7ff80000

0800e5a0 <__assert_func>:
 800e5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5a2:	4614      	mov	r4, r2
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	4b09      	ldr	r3, [pc, #36]	@ (800e5cc <__assert_func+0x2c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	68d8      	ldr	r0, [r3, #12]
 800e5ae:	b954      	cbnz	r4, 800e5c6 <__assert_func+0x26>
 800e5b0:	4b07      	ldr	r3, [pc, #28]	@ (800e5d0 <__assert_func+0x30>)
 800e5b2:	461c      	mov	r4, r3
 800e5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5b8:	9100      	str	r1, [sp, #0]
 800e5ba:	462b      	mov	r3, r5
 800e5bc:	4905      	ldr	r1, [pc, #20]	@ (800e5d4 <__assert_func+0x34>)
 800e5be:	f000 fba7 	bl	800ed10 <fiprintf>
 800e5c2:	f000 fbb7 	bl	800ed34 <abort>
 800e5c6:	4b04      	ldr	r3, [pc, #16]	@ (800e5d8 <__assert_func+0x38>)
 800e5c8:	e7f4      	b.n	800e5b4 <__assert_func+0x14>
 800e5ca:	bf00      	nop
 800e5cc:	20000028 	.word	0x20000028
 800e5d0:	0800f405 	.word	0x0800f405
 800e5d4:	0800f3d7 	.word	0x0800f3d7
 800e5d8:	0800f3ca 	.word	0x0800f3ca

0800e5dc <_calloc_r>:
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	fba1 5402 	umull	r5, r4, r1, r2
 800e5e2:	b93c      	cbnz	r4, 800e5f4 <_calloc_r+0x18>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7fe f80b 	bl	800c600 <_malloc_r>
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	b928      	cbnz	r0, 800e5fa <_calloc_r+0x1e>
 800e5ee:	2600      	movs	r6, #0
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}
 800e5f4:	220c      	movs	r2, #12
 800e5f6:	6002      	str	r2, [r0, #0]
 800e5f8:	e7f9      	b.n	800e5ee <_calloc_r+0x12>
 800e5fa:	462a      	mov	r2, r5
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	f7fd f855 	bl	800b6ac <memset>
 800e602:	e7f5      	b.n	800e5f0 <_calloc_r+0x14>

0800e604 <rshift>:
 800e604:	6903      	ldr	r3, [r0, #16]
 800e606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e60a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e60e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e612:	f100 0414 	add.w	r4, r0, #20
 800e616:	dd45      	ble.n	800e6a4 <rshift+0xa0>
 800e618:	f011 011f 	ands.w	r1, r1, #31
 800e61c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e620:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e624:	d10c      	bne.n	800e640 <rshift+0x3c>
 800e626:	f100 0710 	add.w	r7, r0, #16
 800e62a:	4629      	mov	r1, r5
 800e62c:	42b1      	cmp	r1, r6
 800e62e:	d334      	bcc.n	800e69a <rshift+0x96>
 800e630:	1a9b      	subs	r3, r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	1eea      	subs	r2, r5, #3
 800e636:	4296      	cmp	r6, r2
 800e638:	bf38      	it	cc
 800e63a:	2300      	movcc	r3, #0
 800e63c:	4423      	add	r3, r4
 800e63e:	e015      	b.n	800e66c <rshift+0x68>
 800e640:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e644:	f1c1 0820 	rsb	r8, r1, #32
 800e648:	40cf      	lsrs	r7, r1
 800e64a:	f105 0e04 	add.w	lr, r5, #4
 800e64e:	46a1      	mov	r9, r4
 800e650:	4576      	cmp	r6, lr
 800e652:	46f4      	mov	ip, lr
 800e654:	d815      	bhi.n	800e682 <rshift+0x7e>
 800e656:	1a9a      	subs	r2, r3, r2
 800e658:	0092      	lsls	r2, r2, #2
 800e65a:	3a04      	subs	r2, #4
 800e65c:	3501      	adds	r5, #1
 800e65e:	42ae      	cmp	r6, r5
 800e660:	bf38      	it	cc
 800e662:	2200      	movcc	r2, #0
 800e664:	18a3      	adds	r3, r4, r2
 800e666:	50a7      	str	r7, [r4, r2]
 800e668:	b107      	cbz	r7, 800e66c <rshift+0x68>
 800e66a:	3304      	adds	r3, #4
 800e66c:	1b1a      	subs	r2, r3, r4
 800e66e:	42a3      	cmp	r3, r4
 800e670:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e674:	bf08      	it	eq
 800e676:	2300      	moveq	r3, #0
 800e678:	6102      	str	r2, [r0, #16]
 800e67a:	bf08      	it	eq
 800e67c:	6143      	streq	r3, [r0, #20]
 800e67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e682:	f8dc c000 	ldr.w	ip, [ip]
 800e686:	fa0c fc08 	lsl.w	ip, ip, r8
 800e68a:	ea4c 0707 	orr.w	r7, ip, r7
 800e68e:	f849 7b04 	str.w	r7, [r9], #4
 800e692:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e696:	40cf      	lsrs	r7, r1
 800e698:	e7da      	b.n	800e650 <rshift+0x4c>
 800e69a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e69e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6a2:	e7c3      	b.n	800e62c <rshift+0x28>
 800e6a4:	4623      	mov	r3, r4
 800e6a6:	e7e1      	b.n	800e66c <rshift+0x68>

0800e6a8 <__hexdig_fun>:
 800e6a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6ac:	2b09      	cmp	r3, #9
 800e6ae:	d802      	bhi.n	800e6b6 <__hexdig_fun+0xe>
 800e6b0:	3820      	subs	r0, #32
 800e6b2:	b2c0      	uxtb	r0, r0
 800e6b4:	4770      	bx	lr
 800e6b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e6ba:	2b05      	cmp	r3, #5
 800e6bc:	d801      	bhi.n	800e6c2 <__hexdig_fun+0x1a>
 800e6be:	3847      	subs	r0, #71	@ 0x47
 800e6c0:	e7f7      	b.n	800e6b2 <__hexdig_fun+0xa>
 800e6c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e6c6:	2b05      	cmp	r3, #5
 800e6c8:	d801      	bhi.n	800e6ce <__hexdig_fun+0x26>
 800e6ca:	3827      	subs	r0, #39	@ 0x27
 800e6cc:	e7f1      	b.n	800e6b2 <__hexdig_fun+0xa>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	4770      	bx	lr
	...

0800e6d4 <__gethex>:
 800e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d8:	b085      	sub	sp, #20
 800e6da:	468a      	mov	sl, r1
 800e6dc:	9302      	str	r3, [sp, #8]
 800e6de:	680b      	ldr	r3, [r1, #0]
 800e6e0:	9001      	str	r0, [sp, #4]
 800e6e2:	4690      	mov	r8, r2
 800e6e4:	1c9c      	adds	r4, r3, #2
 800e6e6:	46a1      	mov	r9, r4
 800e6e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e6ec:	2830      	cmp	r0, #48	@ 0x30
 800e6ee:	d0fa      	beq.n	800e6e6 <__gethex+0x12>
 800e6f0:	eba9 0303 	sub.w	r3, r9, r3
 800e6f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e6f8:	f7ff ffd6 	bl	800e6a8 <__hexdig_fun>
 800e6fc:	4605      	mov	r5, r0
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d168      	bne.n	800e7d4 <__gethex+0x100>
 800e702:	49a0      	ldr	r1, [pc, #640]	@ (800e984 <__gethex+0x2b0>)
 800e704:	2201      	movs	r2, #1
 800e706:	4648      	mov	r0, r9
 800e708:	f7ff fefe 	bl	800e508 <strncmp>
 800e70c:	4607      	mov	r7, r0
 800e70e:	2800      	cmp	r0, #0
 800e710:	d167      	bne.n	800e7e2 <__gethex+0x10e>
 800e712:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e716:	4626      	mov	r6, r4
 800e718:	f7ff ffc6 	bl	800e6a8 <__hexdig_fun>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d062      	beq.n	800e7e6 <__gethex+0x112>
 800e720:	4623      	mov	r3, r4
 800e722:	7818      	ldrb	r0, [r3, #0]
 800e724:	2830      	cmp	r0, #48	@ 0x30
 800e726:	4699      	mov	r9, r3
 800e728:	f103 0301 	add.w	r3, r3, #1
 800e72c:	d0f9      	beq.n	800e722 <__gethex+0x4e>
 800e72e:	f7ff ffbb 	bl	800e6a8 <__hexdig_fun>
 800e732:	fab0 f580 	clz	r5, r0
 800e736:	096d      	lsrs	r5, r5, #5
 800e738:	f04f 0b01 	mov.w	fp, #1
 800e73c:	464a      	mov	r2, r9
 800e73e:	4616      	mov	r6, r2
 800e740:	3201      	adds	r2, #1
 800e742:	7830      	ldrb	r0, [r6, #0]
 800e744:	f7ff ffb0 	bl	800e6a8 <__hexdig_fun>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d1f8      	bne.n	800e73e <__gethex+0x6a>
 800e74c:	498d      	ldr	r1, [pc, #564]	@ (800e984 <__gethex+0x2b0>)
 800e74e:	2201      	movs	r2, #1
 800e750:	4630      	mov	r0, r6
 800e752:	f7ff fed9 	bl	800e508 <strncmp>
 800e756:	2800      	cmp	r0, #0
 800e758:	d13f      	bne.n	800e7da <__gethex+0x106>
 800e75a:	b944      	cbnz	r4, 800e76e <__gethex+0x9a>
 800e75c:	1c74      	adds	r4, r6, #1
 800e75e:	4622      	mov	r2, r4
 800e760:	4616      	mov	r6, r2
 800e762:	3201      	adds	r2, #1
 800e764:	7830      	ldrb	r0, [r6, #0]
 800e766:	f7ff ff9f 	bl	800e6a8 <__hexdig_fun>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d1f8      	bne.n	800e760 <__gethex+0x8c>
 800e76e:	1ba4      	subs	r4, r4, r6
 800e770:	00a7      	lsls	r7, r4, #2
 800e772:	7833      	ldrb	r3, [r6, #0]
 800e774:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e778:	2b50      	cmp	r3, #80	@ 0x50
 800e77a:	d13e      	bne.n	800e7fa <__gethex+0x126>
 800e77c:	7873      	ldrb	r3, [r6, #1]
 800e77e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e780:	d033      	beq.n	800e7ea <__gethex+0x116>
 800e782:	2b2d      	cmp	r3, #45	@ 0x2d
 800e784:	d034      	beq.n	800e7f0 <__gethex+0x11c>
 800e786:	1c71      	adds	r1, r6, #1
 800e788:	2400      	movs	r4, #0
 800e78a:	7808      	ldrb	r0, [r1, #0]
 800e78c:	f7ff ff8c 	bl	800e6a8 <__hexdig_fun>
 800e790:	1e43      	subs	r3, r0, #1
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b18      	cmp	r3, #24
 800e796:	d830      	bhi.n	800e7fa <__gethex+0x126>
 800e798:	f1a0 0210 	sub.w	r2, r0, #16
 800e79c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7a0:	f7ff ff82 	bl	800e6a8 <__hexdig_fun>
 800e7a4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e7a8:	fa5f fc8c 	uxtb.w	ip, ip
 800e7ac:	f1bc 0f18 	cmp.w	ip, #24
 800e7b0:	f04f 030a 	mov.w	r3, #10
 800e7b4:	d91e      	bls.n	800e7f4 <__gethex+0x120>
 800e7b6:	b104      	cbz	r4, 800e7ba <__gethex+0xe6>
 800e7b8:	4252      	negs	r2, r2
 800e7ba:	4417      	add	r7, r2
 800e7bc:	f8ca 1000 	str.w	r1, [sl]
 800e7c0:	b1ed      	cbz	r5, 800e7fe <__gethex+0x12a>
 800e7c2:	f1bb 0f00 	cmp.w	fp, #0
 800e7c6:	bf0c      	ite	eq
 800e7c8:	2506      	moveq	r5, #6
 800e7ca:	2500      	movne	r5, #0
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	b005      	add	sp, #20
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	2500      	movs	r5, #0
 800e7d6:	462c      	mov	r4, r5
 800e7d8:	e7b0      	b.n	800e73c <__gethex+0x68>
 800e7da:	2c00      	cmp	r4, #0
 800e7dc:	d1c7      	bne.n	800e76e <__gethex+0x9a>
 800e7de:	4627      	mov	r7, r4
 800e7e0:	e7c7      	b.n	800e772 <__gethex+0x9e>
 800e7e2:	464e      	mov	r6, r9
 800e7e4:	462f      	mov	r7, r5
 800e7e6:	2501      	movs	r5, #1
 800e7e8:	e7c3      	b.n	800e772 <__gethex+0x9e>
 800e7ea:	2400      	movs	r4, #0
 800e7ec:	1cb1      	adds	r1, r6, #2
 800e7ee:	e7cc      	b.n	800e78a <__gethex+0xb6>
 800e7f0:	2401      	movs	r4, #1
 800e7f2:	e7fb      	b.n	800e7ec <__gethex+0x118>
 800e7f4:	fb03 0002 	mla	r0, r3, r2, r0
 800e7f8:	e7ce      	b.n	800e798 <__gethex+0xc4>
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	e7de      	b.n	800e7bc <__gethex+0xe8>
 800e7fe:	eba6 0309 	sub.w	r3, r6, r9
 800e802:	3b01      	subs	r3, #1
 800e804:	4629      	mov	r1, r5
 800e806:	2b07      	cmp	r3, #7
 800e808:	dc0a      	bgt.n	800e820 <__gethex+0x14c>
 800e80a:	9801      	ldr	r0, [sp, #4]
 800e80c:	f7fd ff84 	bl	800c718 <_Balloc>
 800e810:	4604      	mov	r4, r0
 800e812:	b940      	cbnz	r0, 800e826 <__gethex+0x152>
 800e814:	4b5c      	ldr	r3, [pc, #368]	@ (800e988 <__gethex+0x2b4>)
 800e816:	4602      	mov	r2, r0
 800e818:	21e4      	movs	r1, #228	@ 0xe4
 800e81a:	485c      	ldr	r0, [pc, #368]	@ (800e98c <__gethex+0x2b8>)
 800e81c:	f7ff fec0 	bl	800e5a0 <__assert_func>
 800e820:	3101      	adds	r1, #1
 800e822:	105b      	asrs	r3, r3, #1
 800e824:	e7ef      	b.n	800e806 <__gethex+0x132>
 800e826:	f100 0a14 	add.w	sl, r0, #20
 800e82a:	2300      	movs	r3, #0
 800e82c:	4655      	mov	r5, sl
 800e82e:	469b      	mov	fp, r3
 800e830:	45b1      	cmp	r9, r6
 800e832:	d337      	bcc.n	800e8a4 <__gethex+0x1d0>
 800e834:	f845 bb04 	str.w	fp, [r5], #4
 800e838:	eba5 050a 	sub.w	r5, r5, sl
 800e83c:	10ad      	asrs	r5, r5, #2
 800e83e:	6125      	str	r5, [r4, #16]
 800e840:	4658      	mov	r0, fp
 800e842:	f7fe f85b 	bl	800c8fc <__hi0bits>
 800e846:	016d      	lsls	r5, r5, #5
 800e848:	f8d8 6000 	ldr.w	r6, [r8]
 800e84c:	1a2d      	subs	r5, r5, r0
 800e84e:	42b5      	cmp	r5, r6
 800e850:	dd54      	ble.n	800e8fc <__gethex+0x228>
 800e852:	1bad      	subs	r5, r5, r6
 800e854:	4629      	mov	r1, r5
 800e856:	4620      	mov	r0, r4
 800e858:	f7fe fbef 	bl	800d03a <__any_on>
 800e85c:	4681      	mov	r9, r0
 800e85e:	b178      	cbz	r0, 800e880 <__gethex+0x1ac>
 800e860:	1e6b      	subs	r3, r5, #1
 800e862:	1159      	asrs	r1, r3, #5
 800e864:	f003 021f 	and.w	r2, r3, #31
 800e868:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e86c:	f04f 0901 	mov.w	r9, #1
 800e870:	fa09 f202 	lsl.w	r2, r9, r2
 800e874:	420a      	tst	r2, r1
 800e876:	d003      	beq.n	800e880 <__gethex+0x1ac>
 800e878:	454b      	cmp	r3, r9
 800e87a:	dc36      	bgt.n	800e8ea <__gethex+0x216>
 800e87c:	f04f 0902 	mov.w	r9, #2
 800e880:	4629      	mov	r1, r5
 800e882:	4620      	mov	r0, r4
 800e884:	f7ff febe 	bl	800e604 <rshift>
 800e888:	442f      	add	r7, r5
 800e88a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e88e:	42bb      	cmp	r3, r7
 800e890:	da42      	bge.n	800e918 <__gethex+0x244>
 800e892:	9801      	ldr	r0, [sp, #4]
 800e894:	4621      	mov	r1, r4
 800e896:	f7fd ff7f 	bl	800c798 <_Bfree>
 800e89a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e89c:	2300      	movs	r3, #0
 800e89e:	6013      	str	r3, [r2, #0]
 800e8a0:	25a3      	movs	r5, #163	@ 0xa3
 800e8a2:	e793      	b.n	800e7cc <__gethex+0xf8>
 800e8a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8aa:	d012      	beq.n	800e8d2 <__gethex+0x1fe>
 800e8ac:	2b20      	cmp	r3, #32
 800e8ae:	d104      	bne.n	800e8ba <__gethex+0x1e6>
 800e8b0:	f845 bb04 	str.w	fp, [r5], #4
 800e8b4:	f04f 0b00 	mov.w	fp, #0
 800e8b8:	465b      	mov	r3, fp
 800e8ba:	7830      	ldrb	r0, [r6, #0]
 800e8bc:	9303      	str	r3, [sp, #12]
 800e8be:	f7ff fef3 	bl	800e6a8 <__hexdig_fun>
 800e8c2:	9b03      	ldr	r3, [sp, #12]
 800e8c4:	f000 000f 	and.w	r0, r0, #15
 800e8c8:	4098      	lsls	r0, r3
 800e8ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	e7ae      	b.n	800e830 <__gethex+0x15c>
 800e8d2:	45b1      	cmp	r9, r6
 800e8d4:	d8ea      	bhi.n	800e8ac <__gethex+0x1d8>
 800e8d6:	492b      	ldr	r1, [pc, #172]	@ (800e984 <__gethex+0x2b0>)
 800e8d8:	9303      	str	r3, [sp, #12]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f7ff fe13 	bl	800e508 <strncmp>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d1e1      	bne.n	800e8ac <__gethex+0x1d8>
 800e8e8:	e7a2      	b.n	800e830 <__gethex+0x15c>
 800e8ea:	1ea9      	subs	r1, r5, #2
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f7fe fba4 	bl	800d03a <__any_on>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d0c2      	beq.n	800e87c <__gethex+0x1a8>
 800e8f6:	f04f 0903 	mov.w	r9, #3
 800e8fa:	e7c1      	b.n	800e880 <__gethex+0x1ac>
 800e8fc:	da09      	bge.n	800e912 <__gethex+0x23e>
 800e8fe:	1b75      	subs	r5, r6, r5
 800e900:	4621      	mov	r1, r4
 800e902:	9801      	ldr	r0, [sp, #4]
 800e904:	462a      	mov	r2, r5
 800e906:	f7fe f95f 	bl	800cbc8 <__lshift>
 800e90a:	1b7f      	subs	r7, r7, r5
 800e90c:	4604      	mov	r4, r0
 800e90e:	f100 0a14 	add.w	sl, r0, #20
 800e912:	f04f 0900 	mov.w	r9, #0
 800e916:	e7b8      	b.n	800e88a <__gethex+0x1b6>
 800e918:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e91c:	42bd      	cmp	r5, r7
 800e91e:	dd6f      	ble.n	800ea00 <__gethex+0x32c>
 800e920:	1bed      	subs	r5, r5, r7
 800e922:	42ae      	cmp	r6, r5
 800e924:	dc34      	bgt.n	800e990 <__gethex+0x2bc>
 800e926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d022      	beq.n	800e974 <__gethex+0x2a0>
 800e92e:	2b03      	cmp	r3, #3
 800e930:	d024      	beq.n	800e97c <__gethex+0x2a8>
 800e932:	2b01      	cmp	r3, #1
 800e934:	d115      	bne.n	800e962 <__gethex+0x28e>
 800e936:	42ae      	cmp	r6, r5
 800e938:	d113      	bne.n	800e962 <__gethex+0x28e>
 800e93a:	2e01      	cmp	r6, #1
 800e93c:	d10b      	bne.n	800e956 <__gethex+0x282>
 800e93e:	9a02      	ldr	r2, [sp, #8]
 800e940:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e944:	6013      	str	r3, [r2, #0]
 800e946:	2301      	movs	r3, #1
 800e948:	6123      	str	r3, [r4, #16]
 800e94a:	f8ca 3000 	str.w	r3, [sl]
 800e94e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e950:	2562      	movs	r5, #98	@ 0x62
 800e952:	601c      	str	r4, [r3, #0]
 800e954:	e73a      	b.n	800e7cc <__gethex+0xf8>
 800e956:	1e71      	subs	r1, r6, #1
 800e958:	4620      	mov	r0, r4
 800e95a:	f7fe fb6e 	bl	800d03a <__any_on>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d1ed      	bne.n	800e93e <__gethex+0x26a>
 800e962:	9801      	ldr	r0, [sp, #4]
 800e964:	4621      	mov	r1, r4
 800e966:	f7fd ff17 	bl	800c798 <_Bfree>
 800e96a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e96c:	2300      	movs	r3, #0
 800e96e:	6013      	str	r3, [r2, #0]
 800e970:	2550      	movs	r5, #80	@ 0x50
 800e972:	e72b      	b.n	800e7cc <__gethex+0xf8>
 800e974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1f3      	bne.n	800e962 <__gethex+0x28e>
 800e97a:	e7e0      	b.n	800e93e <__gethex+0x26a>
 800e97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1dd      	bne.n	800e93e <__gethex+0x26a>
 800e982:	e7ee      	b.n	800e962 <__gethex+0x28e>
 800e984:	0800f258 	.word	0x0800f258
 800e988:	0800f0f1 	.word	0x0800f0f1
 800e98c:	0800f406 	.word	0x0800f406
 800e990:	1e6f      	subs	r7, r5, #1
 800e992:	f1b9 0f00 	cmp.w	r9, #0
 800e996:	d130      	bne.n	800e9fa <__gethex+0x326>
 800e998:	b127      	cbz	r7, 800e9a4 <__gethex+0x2d0>
 800e99a:	4639      	mov	r1, r7
 800e99c:	4620      	mov	r0, r4
 800e99e:	f7fe fb4c 	bl	800d03a <__any_on>
 800e9a2:	4681      	mov	r9, r0
 800e9a4:	117a      	asrs	r2, r7, #5
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9ac:	f007 071f 	and.w	r7, r7, #31
 800e9b0:	40bb      	lsls	r3, r7
 800e9b2:	4213      	tst	r3, r2
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	bf18      	it	ne
 800e9ba:	f049 0902 	orrne.w	r9, r9, #2
 800e9be:	f7ff fe21 	bl	800e604 <rshift>
 800e9c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e9c6:	1b76      	subs	r6, r6, r5
 800e9c8:	2502      	movs	r5, #2
 800e9ca:	f1b9 0f00 	cmp.w	r9, #0
 800e9ce:	d047      	beq.n	800ea60 <__gethex+0x38c>
 800e9d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	d015      	beq.n	800ea04 <__gethex+0x330>
 800e9d8:	2b03      	cmp	r3, #3
 800e9da:	d017      	beq.n	800ea0c <__gethex+0x338>
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d109      	bne.n	800e9f4 <__gethex+0x320>
 800e9e0:	f019 0f02 	tst.w	r9, #2
 800e9e4:	d006      	beq.n	800e9f4 <__gethex+0x320>
 800e9e6:	f8da 3000 	ldr.w	r3, [sl]
 800e9ea:	ea49 0903 	orr.w	r9, r9, r3
 800e9ee:	f019 0f01 	tst.w	r9, #1
 800e9f2:	d10e      	bne.n	800ea12 <__gethex+0x33e>
 800e9f4:	f045 0510 	orr.w	r5, r5, #16
 800e9f8:	e032      	b.n	800ea60 <__gethex+0x38c>
 800e9fa:	f04f 0901 	mov.w	r9, #1
 800e9fe:	e7d1      	b.n	800e9a4 <__gethex+0x2d0>
 800ea00:	2501      	movs	r5, #1
 800ea02:	e7e2      	b.n	800e9ca <__gethex+0x2f6>
 800ea04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea06:	f1c3 0301 	rsb	r3, r3, #1
 800ea0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d0f0      	beq.n	800e9f4 <__gethex+0x320>
 800ea12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea16:	f104 0314 	add.w	r3, r4, #20
 800ea1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea22:	f04f 0c00 	mov.w	ip, #0
 800ea26:	4618      	mov	r0, r3
 800ea28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea2c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800ea30:	d01b      	beq.n	800ea6a <__gethex+0x396>
 800ea32:	3201      	adds	r2, #1
 800ea34:	6002      	str	r2, [r0, #0]
 800ea36:	2d02      	cmp	r5, #2
 800ea38:	f104 0314 	add.w	r3, r4, #20
 800ea3c:	d13c      	bne.n	800eab8 <__gethex+0x3e4>
 800ea3e:	f8d8 2000 	ldr.w	r2, [r8]
 800ea42:	3a01      	subs	r2, #1
 800ea44:	42b2      	cmp	r2, r6
 800ea46:	d109      	bne.n	800ea5c <__gethex+0x388>
 800ea48:	1171      	asrs	r1, r6, #5
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea50:	f006 061f 	and.w	r6, r6, #31
 800ea54:	fa02 f606 	lsl.w	r6, r2, r6
 800ea58:	421e      	tst	r6, r3
 800ea5a:	d13a      	bne.n	800ead2 <__gethex+0x3fe>
 800ea5c:	f045 0520 	orr.w	r5, r5, #32
 800ea60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea62:	601c      	str	r4, [r3, #0]
 800ea64:	9b02      	ldr	r3, [sp, #8]
 800ea66:	601f      	str	r7, [r3, #0]
 800ea68:	e6b0      	b.n	800e7cc <__gethex+0xf8>
 800ea6a:	4299      	cmp	r1, r3
 800ea6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea70:	d8d9      	bhi.n	800ea26 <__gethex+0x352>
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	459b      	cmp	fp, r3
 800ea76:	db17      	blt.n	800eaa8 <__gethex+0x3d4>
 800ea78:	6861      	ldr	r1, [r4, #4]
 800ea7a:	9801      	ldr	r0, [sp, #4]
 800ea7c:	3101      	adds	r1, #1
 800ea7e:	f7fd fe4b 	bl	800c718 <_Balloc>
 800ea82:	4681      	mov	r9, r0
 800ea84:	b918      	cbnz	r0, 800ea8e <__gethex+0x3ba>
 800ea86:	4b1a      	ldr	r3, [pc, #104]	@ (800eaf0 <__gethex+0x41c>)
 800ea88:	4602      	mov	r2, r0
 800ea8a:	2184      	movs	r1, #132	@ 0x84
 800ea8c:	e6c5      	b.n	800e81a <__gethex+0x146>
 800ea8e:	6922      	ldr	r2, [r4, #16]
 800ea90:	3202      	adds	r2, #2
 800ea92:	f104 010c 	add.w	r1, r4, #12
 800ea96:	0092      	lsls	r2, r2, #2
 800ea98:	300c      	adds	r0, #12
 800ea9a:	f7fc fedc 	bl	800b856 <memcpy>
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	9801      	ldr	r0, [sp, #4]
 800eaa2:	f7fd fe79 	bl	800c798 <_Bfree>
 800eaa6:	464c      	mov	r4, r9
 800eaa8:	6923      	ldr	r3, [r4, #16]
 800eaaa:	1c5a      	adds	r2, r3, #1
 800eaac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eab0:	6122      	str	r2, [r4, #16]
 800eab2:	2201      	movs	r2, #1
 800eab4:	615a      	str	r2, [r3, #20]
 800eab6:	e7be      	b.n	800ea36 <__gethex+0x362>
 800eab8:	6922      	ldr	r2, [r4, #16]
 800eaba:	455a      	cmp	r2, fp
 800eabc:	dd0b      	ble.n	800ead6 <__gethex+0x402>
 800eabe:	2101      	movs	r1, #1
 800eac0:	4620      	mov	r0, r4
 800eac2:	f7ff fd9f 	bl	800e604 <rshift>
 800eac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaca:	3701      	adds	r7, #1
 800eacc:	42bb      	cmp	r3, r7
 800eace:	f6ff aee0 	blt.w	800e892 <__gethex+0x1be>
 800ead2:	2501      	movs	r5, #1
 800ead4:	e7c2      	b.n	800ea5c <__gethex+0x388>
 800ead6:	f016 061f 	ands.w	r6, r6, #31
 800eada:	d0fa      	beq.n	800ead2 <__gethex+0x3fe>
 800eadc:	4453      	add	r3, sl
 800eade:	f1c6 0620 	rsb	r6, r6, #32
 800eae2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eae6:	f7fd ff09 	bl	800c8fc <__hi0bits>
 800eaea:	42b0      	cmp	r0, r6
 800eaec:	dbe7      	blt.n	800eabe <__gethex+0x3ea>
 800eaee:	e7f0      	b.n	800ead2 <__gethex+0x3fe>
 800eaf0:	0800f0f1 	.word	0x0800f0f1

0800eaf4 <L_shift>:
 800eaf4:	f1c2 0208 	rsb	r2, r2, #8
 800eaf8:	0092      	lsls	r2, r2, #2
 800eafa:	b570      	push	{r4, r5, r6, lr}
 800eafc:	f1c2 0620 	rsb	r6, r2, #32
 800eb00:	6843      	ldr	r3, [r0, #4]
 800eb02:	6804      	ldr	r4, [r0, #0]
 800eb04:	fa03 f506 	lsl.w	r5, r3, r6
 800eb08:	432c      	orrs	r4, r5
 800eb0a:	40d3      	lsrs	r3, r2
 800eb0c:	6004      	str	r4, [r0, #0]
 800eb0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb12:	4288      	cmp	r0, r1
 800eb14:	d3f4      	bcc.n	800eb00 <L_shift+0xc>
 800eb16:	bd70      	pop	{r4, r5, r6, pc}

0800eb18 <__match>:
 800eb18:	b530      	push	{r4, r5, lr}
 800eb1a:	6803      	ldr	r3, [r0, #0]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb22:	b914      	cbnz	r4, 800eb2a <__match+0x12>
 800eb24:	6003      	str	r3, [r0, #0]
 800eb26:	2001      	movs	r0, #1
 800eb28:	bd30      	pop	{r4, r5, pc}
 800eb2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb32:	2d19      	cmp	r5, #25
 800eb34:	bf98      	it	ls
 800eb36:	3220      	addls	r2, #32
 800eb38:	42a2      	cmp	r2, r4
 800eb3a:	d0f0      	beq.n	800eb1e <__match+0x6>
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e7f3      	b.n	800eb28 <__match+0x10>

0800eb40 <__hexnan>:
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	680b      	ldr	r3, [r1, #0]
 800eb46:	6801      	ldr	r1, [r0, #0]
 800eb48:	115e      	asrs	r6, r3, #5
 800eb4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb4e:	f013 031f 	ands.w	r3, r3, #31
 800eb52:	b087      	sub	sp, #28
 800eb54:	bf18      	it	ne
 800eb56:	3604      	addne	r6, #4
 800eb58:	2500      	movs	r5, #0
 800eb5a:	1f37      	subs	r7, r6, #4
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	4690      	mov	r8, r2
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb66:	46b9      	mov	r9, r7
 800eb68:	463c      	mov	r4, r7
 800eb6a:	9502      	str	r5, [sp, #8]
 800eb6c:	46ab      	mov	fp, r5
 800eb6e:	784a      	ldrb	r2, [r1, #1]
 800eb70:	1c4b      	adds	r3, r1, #1
 800eb72:	9303      	str	r3, [sp, #12]
 800eb74:	b342      	cbz	r2, 800ebc8 <__hexnan+0x88>
 800eb76:	4610      	mov	r0, r2
 800eb78:	9105      	str	r1, [sp, #20]
 800eb7a:	9204      	str	r2, [sp, #16]
 800eb7c:	f7ff fd94 	bl	800e6a8 <__hexdig_fun>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d151      	bne.n	800ec28 <__hexnan+0xe8>
 800eb84:	9a04      	ldr	r2, [sp, #16]
 800eb86:	9905      	ldr	r1, [sp, #20]
 800eb88:	2a20      	cmp	r2, #32
 800eb8a:	d818      	bhi.n	800ebbe <__hexnan+0x7e>
 800eb8c:	9b02      	ldr	r3, [sp, #8]
 800eb8e:	459b      	cmp	fp, r3
 800eb90:	dd13      	ble.n	800ebba <__hexnan+0x7a>
 800eb92:	454c      	cmp	r4, r9
 800eb94:	d206      	bcs.n	800eba4 <__hexnan+0x64>
 800eb96:	2d07      	cmp	r5, #7
 800eb98:	dc04      	bgt.n	800eba4 <__hexnan+0x64>
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7ff ffa8 	bl	800eaf4 <L_shift>
 800eba4:	4544      	cmp	r4, r8
 800eba6:	d952      	bls.n	800ec4e <__hexnan+0x10e>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ebae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ebb6:	464c      	mov	r4, r9
 800ebb8:	461d      	mov	r5, r3
 800ebba:	9903      	ldr	r1, [sp, #12]
 800ebbc:	e7d7      	b.n	800eb6e <__hexnan+0x2e>
 800ebbe:	2a29      	cmp	r2, #41	@ 0x29
 800ebc0:	d157      	bne.n	800ec72 <__hexnan+0x132>
 800ebc2:	3102      	adds	r1, #2
 800ebc4:	f8ca 1000 	str.w	r1, [sl]
 800ebc8:	f1bb 0f00 	cmp.w	fp, #0
 800ebcc:	d051      	beq.n	800ec72 <__hexnan+0x132>
 800ebce:	454c      	cmp	r4, r9
 800ebd0:	d206      	bcs.n	800ebe0 <__hexnan+0xa0>
 800ebd2:	2d07      	cmp	r5, #7
 800ebd4:	dc04      	bgt.n	800ebe0 <__hexnan+0xa0>
 800ebd6:	462a      	mov	r2, r5
 800ebd8:	4649      	mov	r1, r9
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f7ff ff8a 	bl	800eaf4 <L_shift>
 800ebe0:	4544      	cmp	r4, r8
 800ebe2:	d936      	bls.n	800ec52 <__hexnan+0x112>
 800ebe4:	f1a8 0204 	sub.w	r2, r8, #4
 800ebe8:	4623      	mov	r3, r4
 800ebea:	f853 1b04 	ldr.w	r1, [r3], #4
 800ebee:	f842 1f04 	str.w	r1, [r2, #4]!
 800ebf2:	429f      	cmp	r7, r3
 800ebf4:	d2f9      	bcs.n	800ebea <__hexnan+0xaa>
 800ebf6:	1b3b      	subs	r3, r7, r4
 800ebf8:	f023 0303 	bic.w	r3, r3, #3
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	3401      	adds	r4, #1
 800ec00:	3e03      	subs	r6, #3
 800ec02:	42b4      	cmp	r4, r6
 800ec04:	bf88      	it	hi
 800ec06:	2304      	movhi	r3, #4
 800ec08:	4443      	add	r3, r8
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f843 2b04 	str.w	r2, [r3], #4
 800ec10:	429f      	cmp	r7, r3
 800ec12:	d2fb      	bcs.n	800ec0c <__hexnan+0xcc>
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	b91b      	cbnz	r3, 800ec20 <__hexnan+0xe0>
 800ec18:	4547      	cmp	r7, r8
 800ec1a:	d128      	bne.n	800ec6e <__hexnan+0x12e>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	603b      	str	r3, [r7, #0]
 800ec20:	2005      	movs	r0, #5
 800ec22:	b007      	add	sp, #28
 800ec24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec28:	3501      	adds	r5, #1
 800ec2a:	2d08      	cmp	r5, #8
 800ec2c:	f10b 0b01 	add.w	fp, fp, #1
 800ec30:	dd06      	ble.n	800ec40 <__hexnan+0x100>
 800ec32:	4544      	cmp	r4, r8
 800ec34:	d9c1      	bls.n	800ebba <__hexnan+0x7a>
 800ec36:	2300      	movs	r3, #0
 800ec38:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec3c:	2501      	movs	r5, #1
 800ec3e:	3c04      	subs	r4, #4
 800ec40:	6822      	ldr	r2, [r4, #0]
 800ec42:	f000 000f 	and.w	r0, r0, #15
 800ec46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec4a:	6020      	str	r0, [r4, #0]
 800ec4c:	e7b5      	b.n	800ebba <__hexnan+0x7a>
 800ec4e:	2508      	movs	r5, #8
 800ec50:	e7b3      	b.n	800ebba <__hexnan+0x7a>
 800ec52:	9b01      	ldr	r3, [sp, #4]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0dd      	beq.n	800ec14 <__hexnan+0xd4>
 800ec58:	f1c3 0320 	rsb	r3, r3, #32
 800ec5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec60:	40da      	lsrs	r2, r3
 800ec62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec66:	4013      	ands	r3, r2
 800ec68:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec6c:	e7d2      	b.n	800ec14 <__hexnan+0xd4>
 800ec6e:	3f04      	subs	r7, #4
 800ec70:	e7d0      	b.n	800ec14 <__hexnan+0xd4>
 800ec72:	2004      	movs	r0, #4
 800ec74:	e7d5      	b.n	800ec22 <__hexnan+0xe2>

0800ec76 <__ascii_mbtowc>:
 800ec76:	b082      	sub	sp, #8
 800ec78:	b901      	cbnz	r1, 800ec7c <__ascii_mbtowc+0x6>
 800ec7a:	a901      	add	r1, sp, #4
 800ec7c:	b142      	cbz	r2, 800ec90 <__ascii_mbtowc+0x1a>
 800ec7e:	b14b      	cbz	r3, 800ec94 <__ascii_mbtowc+0x1e>
 800ec80:	7813      	ldrb	r3, [r2, #0]
 800ec82:	600b      	str	r3, [r1, #0]
 800ec84:	7812      	ldrb	r2, [r2, #0]
 800ec86:	1e10      	subs	r0, r2, #0
 800ec88:	bf18      	it	ne
 800ec8a:	2001      	movne	r0, #1
 800ec8c:	b002      	add	sp, #8
 800ec8e:	4770      	bx	lr
 800ec90:	4610      	mov	r0, r2
 800ec92:	e7fb      	b.n	800ec8c <__ascii_mbtowc+0x16>
 800ec94:	f06f 0001 	mvn.w	r0, #1
 800ec98:	e7f8      	b.n	800ec8c <__ascii_mbtowc+0x16>

0800ec9a <_realloc_r>:
 800ec9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9e:	4680      	mov	r8, r0
 800eca0:	4615      	mov	r5, r2
 800eca2:	460c      	mov	r4, r1
 800eca4:	b921      	cbnz	r1, 800ecb0 <_realloc_r+0x16>
 800eca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecaa:	4611      	mov	r1, r2
 800ecac:	f7fd bca8 	b.w	800c600 <_malloc_r>
 800ecb0:	b92a      	cbnz	r2, 800ecbe <_realloc_r+0x24>
 800ecb2:	f7fd fc31 	bl	800c518 <_free_r>
 800ecb6:	2400      	movs	r4, #0
 800ecb8:	4620      	mov	r0, r4
 800ecba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecbe:	f000 f840 	bl	800ed42 <_malloc_usable_size_r>
 800ecc2:	4285      	cmp	r5, r0
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	d802      	bhi.n	800ecce <_realloc_r+0x34>
 800ecc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eccc:	d8f4      	bhi.n	800ecb8 <_realloc_r+0x1e>
 800ecce:	4629      	mov	r1, r5
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	f7fd fc95 	bl	800c600 <_malloc_r>
 800ecd6:	4607      	mov	r7, r0
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d0ec      	beq.n	800ecb6 <_realloc_r+0x1c>
 800ecdc:	42b5      	cmp	r5, r6
 800ecde:	462a      	mov	r2, r5
 800ece0:	4621      	mov	r1, r4
 800ece2:	bf28      	it	cs
 800ece4:	4632      	movcs	r2, r6
 800ece6:	f7fc fdb6 	bl	800b856 <memcpy>
 800ecea:	4621      	mov	r1, r4
 800ecec:	4640      	mov	r0, r8
 800ecee:	f7fd fc13 	bl	800c518 <_free_r>
 800ecf2:	463c      	mov	r4, r7
 800ecf4:	e7e0      	b.n	800ecb8 <_realloc_r+0x1e>

0800ecf6 <__ascii_wctomb>:
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4608      	mov	r0, r1
 800ecfa:	b141      	cbz	r1, 800ed0e <__ascii_wctomb+0x18>
 800ecfc:	2aff      	cmp	r2, #255	@ 0xff
 800ecfe:	d904      	bls.n	800ed0a <__ascii_wctomb+0x14>
 800ed00:	228a      	movs	r2, #138	@ 0x8a
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed08:	4770      	bx	lr
 800ed0a:	700a      	strb	r2, [r1, #0]
 800ed0c:	2001      	movs	r0, #1
 800ed0e:	4770      	bx	lr

0800ed10 <fiprintf>:
 800ed10:	b40e      	push	{r1, r2, r3}
 800ed12:	b503      	push	{r0, r1, lr}
 800ed14:	4601      	mov	r1, r0
 800ed16:	ab03      	add	r3, sp, #12
 800ed18:	4805      	ldr	r0, [pc, #20]	@ (800ed30 <fiprintf+0x20>)
 800ed1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed1e:	6800      	ldr	r0, [r0, #0]
 800ed20:	9301      	str	r3, [sp, #4]
 800ed22:	f7ff f9b1 	bl	800e088 <_vfiprintf_r>
 800ed26:	b002      	add	sp, #8
 800ed28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed2c:	b003      	add	sp, #12
 800ed2e:	4770      	bx	lr
 800ed30:	20000028 	.word	0x20000028

0800ed34 <abort>:
 800ed34:	b508      	push	{r3, lr}
 800ed36:	2006      	movs	r0, #6
 800ed38:	f000 f834 	bl	800eda4 <raise>
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	f7f3 fb4f 	bl	80023e0 <_exit>

0800ed42 <_malloc_usable_size_r>:
 800ed42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed46:	1f18      	subs	r0, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	bfbc      	itt	lt
 800ed4c:	580b      	ldrlt	r3, [r1, r0]
 800ed4e:	18c0      	addlt	r0, r0, r3
 800ed50:	4770      	bx	lr

0800ed52 <_raise_r>:
 800ed52:	291f      	cmp	r1, #31
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	4605      	mov	r5, r0
 800ed58:	460c      	mov	r4, r1
 800ed5a:	d904      	bls.n	800ed66 <_raise_r+0x14>
 800ed5c:	2316      	movs	r3, #22
 800ed5e:	6003      	str	r3, [r0, #0]
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed64:	bd38      	pop	{r3, r4, r5, pc}
 800ed66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed68:	b112      	cbz	r2, 800ed70 <_raise_r+0x1e>
 800ed6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed6e:	b94b      	cbnz	r3, 800ed84 <_raise_r+0x32>
 800ed70:	4628      	mov	r0, r5
 800ed72:	f000 f831 	bl	800edd8 <_getpid_r>
 800ed76:	4622      	mov	r2, r4
 800ed78:	4601      	mov	r1, r0
 800ed7a:	4628      	mov	r0, r5
 800ed7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed80:	f000 b818 	b.w	800edb4 <_kill_r>
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d00a      	beq.n	800ed9e <_raise_r+0x4c>
 800ed88:	1c59      	adds	r1, r3, #1
 800ed8a:	d103      	bne.n	800ed94 <_raise_r+0x42>
 800ed8c:	2316      	movs	r3, #22
 800ed8e:	6003      	str	r3, [r0, #0]
 800ed90:	2001      	movs	r0, #1
 800ed92:	e7e7      	b.n	800ed64 <_raise_r+0x12>
 800ed94:	2100      	movs	r1, #0
 800ed96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	4798      	blx	r3
 800ed9e:	2000      	movs	r0, #0
 800eda0:	e7e0      	b.n	800ed64 <_raise_r+0x12>
	...

0800eda4 <raise>:
 800eda4:	4b02      	ldr	r3, [pc, #8]	@ (800edb0 <raise+0xc>)
 800eda6:	4601      	mov	r1, r0
 800eda8:	6818      	ldr	r0, [r3, #0]
 800edaa:	f7ff bfd2 	b.w	800ed52 <_raise_r>
 800edae:	bf00      	nop
 800edb0:	20000028 	.word	0x20000028

0800edb4 <_kill_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	4d07      	ldr	r5, [pc, #28]	@ (800edd4 <_kill_r+0x20>)
 800edb8:	2300      	movs	r3, #0
 800edba:	4604      	mov	r4, r0
 800edbc:	4608      	mov	r0, r1
 800edbe:	4611      	mov	r1, r2
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	f7f3 fafd 	bl	80023c0 <_kill>
 800edc6:	1c43      	adds	r3, r0, #1
 800edc8:	d102      	bne.n	800edd0 <_kill_r+0x1c>
 800edca:	682b      	ldr	r3, [r5, #0]
 800edcc:	b103      	cbz	r3, 800edd0 <_kill_r+0x1c>
 800edce:	6023      	str	r3, [r4, #0]
 800edd0:	bd38      	pop	{r3, r4, r5, pc}
 800edd2:	bf00      	nop
 800edd4:	20003744 	.word	0x20003744

0800edd8 <_getpid_r>:
 800edd8:	f7f3 baea 	b.w	80023b0 <_getpid>

0800eddc <_init>:
 800eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edde:	bf00      	nop
 800ede0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede2:	bc08      	pop	{r3}
 800ede4:	469e      	mov	lr, r3
 800ede6:	4770      	bx	lr

0800ede8 <_fini>:
 800ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edea:	bf00      	nop
 800edec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edee:	bc08      	pop	{r3}
 800edf0:	469e      	mov	lr, r3
 800edf2:	4770      	bx	lr
