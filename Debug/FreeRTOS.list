
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08010258  08010258  00011258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108d8  080108d8  000121e4  2**0
                  CONTENTS
  4 .ARM          00000008  080108d8  080108d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108e0  080108e0  000121e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108e0  080108e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108e4  080108e4  000118e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080108e8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a0c  200001e4  08010acc  000121e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf0  08010acc  00012bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b3ce  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005da9  00000000  00000000  0003d5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002578  00000000  00000000  00043390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d02  00000000  00000000  00045908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b574  00000000  00000000  0004760a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c0b4  00000000  00000000  00072b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c22a  00000000  00000000  0009ec32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aae5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b4a4  00000000  00000000  001aaea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001b6344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801023c 	.word	0x0801023c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0801023c 	.word	0x0801023c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vTaskDCMotorControl>:
#include "stm32l4xx_hal_gpio.h" // Include the HAL header file for GPIO functions
#include "stm32l4xx_hal_rcc.h" // Include the HAL header file for RCC functions


void vTaskDCMotorControl(void *pvParameters)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09e      	sub	sp, #120	@ 0x78
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	for(;;){
		// Configure the TIM2 peripheral
		TIM_HandleTypeDef htim2;
		TIM_OC_InitTypeDef sConfigOC = {0};
 8000fec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

		__HAL_RCC_TIM2_CLK_ENABLE();
 8001000:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <vTaskDCMotorControl+0xc0>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <vTaskDCMotorControl+0xc0>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6593      	str	r3, [r2, #88]	@ 0x58
 800100c:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <vTaskDCMotorControl+0xc0>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
 8001016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

		htim2.Instance = TIM2;
 8001018:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800101c:	60bb      	str	r3, [r7, #8]
		htim2.Init.Prescaler = 79;
 800101e:	234f      	movs	r3, #79	@ 0x4f
 8001020:	60fb      	str	r3, [r7, #12]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
		htim2.Init.Period = 999;
 8001026:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800102a:	617b      	str	r3, [r7, #20]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f005 fbae 	bl	800679a <HAL_TIM_PWM_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <vTaskDCMotorControl+0x64>
		{
			// Initialization Error
			Error_Handler();
 8001044:	f000 fd7a 	bl	8001b3c <Error_Handler>
		}

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001048:	2360      	movs	r3, #96	@ 0x60
 800104a:	65bb      	str	r3, [r7, #88]	@ 0x58
		sConfigOC.Pulse = 500; // Set the pulse width
 800104c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001050:	65fb      	str	r3, [r7, #92]	@ 0x5c
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	66bb      	str	r3, [r7, #104]	@ 0x68
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800105a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	220c      	movs	r2, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f005 fe81 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <vTaskDCMotorControl+0x90>
		{
			// Configuration Error
			Error_Handler();
 8001070:	f000 fd64 	bl	8001b3c <Error_Handler>
		}

		// Start PWM signal generation
		if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	210c      	movs	r1, #12
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fbee 	bl	800685c <HAL_TIM_PWM_Start>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <vTaskDCMotorControl+0xa6>
		{
			// PWM Generation Error
			Error_Handler();
 8001086:	f000 fd59 	bl	8001b3c <Error_Handler>
		}

		// Control the duty cycle of the PWM signal
		uint16_t dutyCycle = (uint16_t)pvParameters;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, dutyCycle); // Set duty cycle
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
		vTaskDelay(1000);
 8001098:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800109c:	f009 faca 	bl	800a634 <vTaskDelay>
	for(;;){
 80010a0:	e7a4      	b.n	8000fec <vTaskDCMotorControl+0x8>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <vApplicationGetIdleTaskMemory+0x30>)
 80010be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2280      	movs	r2, #128	@ 0x80
 80010c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000200 	.word	0x20000200
 80010d8:	200002a0 	.word	0x200002a0

080010dc <__io_putchar>:

TaskHandle_t xTask1Handle;
TaskHandle_t xTask2Handle;

int __io_putchar(int ch)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100))
 80010e4:	bf00      	nop
 80010e6:	1d39      	adds	r1, r7, #4
 80010e8:	2364      	movs	r3, #100	@ 0x64
 80010ea:	2201      	movs	r2, #1
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <__io_putchar+0x28>)
 80010ee:	f006 fd73 	bl	8007bd8 <HAL_UART_Transmit>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f6      	bne.n	80010e6 <__io_putchar+0xa>
	{

	}
	return ch;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200006b8 	.word	0x200006b8

08001108 <__io_getchar>:

int __io_getchar(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <__io_getchar+0x30>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2208      	movs	r2, #8
 8001118:	621a      	str	r2, [r3, #32]
	while(HAL_UART_Receive(&huart1, &ch, 1, 10) != HAL_OK){
 800111a:	bf00      	nop
 800111c:	1df9      	adds	r1, r7, #7
 800111e:	230a      	movs	r3, #10
 8001120:	2201      	movs	r2, #1
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <__io_getchar+0x30>)
 8001124:	f006 fde1 	bl	8007cea <HAL_UART_Receive>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f6      	bne.n	800111c <__io_getchar+0x14>

	}
	return ch;
 800112e:	79fb      	ldrb	r3, [r7, #7]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200006b8 	.word	0x200006b8

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f002 f802 	bl	800314a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f851 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 fb3f 	bl	80017cc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800114e:	f000 f8af 	bl	80012b0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001152:	f000 f8e5 	bl	8001320 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001156:	f000 f923 	bl	80013a0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800115a:	f000 f947 	bl	80013ec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800115e:	f000 fa9f 	bl	80016a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001162:	f000 fad5 	bl	8001710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001166:	f000 fb03 	bl	8001770 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800116a:	f000 f97d 	bl	8001468 <MX_TIM2_Init>
  MX_TIM3_Init();
 800116e:	f000 f9f1 	bl	8001554 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001172:	f000 fa47 	bl	8001604 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  printf("Start!! \r\n");
 8001176:	4816      	ldr	r0, [pc, #88]	@ (80011d0 <main+0x94>)
 8001178:	f00b fb94 	bl	800c8a4 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <main+0x98>)
 800117e:	1d3c      	adds	r4, r7, #4
 8001180:	461d      	mov	r5, r3
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fc4e 	bl	8009a34 <osThreadCreate>
 8001198:	4603      	mov	r3, r0
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <main+0x9c>)
 800119c:	6013      	str	r3, [r2, #0]
  /*
  xTaskCreate(vTask1, "Task1", 128, NULL, 3, &xTask1Handle);
  xTaskCreate(vTask2, "Task2", 128, NULL, 4, &xTask2Handle);
  */
 
  if (xTaskCreate(vTaskUARTReceiver, "UART Receiver", 256, NULL, 5, NULL) == pdPASS)
 800119e:	2300      	movs	r3, #0
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	2305      	movs	r3, #5
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ac:	490b      	ldr	r1, [pc, #44]	@ (80011dc <main+0xa0>)
 80011ae:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <main+0xa4>)
 80011b0:	f009 f8f0 	bl	800a394 <xTaskCreate>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d103      	bne.n	80011c2 <main+0x86>
  {
      printf("UART Receiver Task created successfully.\r\n");
 80011ba:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <main+0xa8>)
 80011bc:	f00b fb72 	bl	800c8a4 <puts>
 80011c0:	e002      	b.n	80011c8 <main+0x8c>
  }
  else
  {
      printf("Failed to create UART Receiver Task.\r\n");
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <main+0xac>)
 80011c4:	f00b fb6e 	bl	800c8a4 <puts>

  //xTaskCreate(vTaskDCMotorControl, "DC Motor Control", 128, NULL, 5, NULL);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011c8:	f008 fc2d 	bl	8009a26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <main+0x90>
 80011d0:	08010258 	.word	0x08010258
 80011d4:	080102d4 	.word	0x080102d4
 80011d8:	20000cac 	.word	0x20000cac
 80011dc:	08010264 	.word	0x08010264
 80011e0:	08001e01 	.word	0x08001e01
 80011e4:	08010274 	.word	0x08010274
 80011e8:	080102a0 	.word	0x080102a0

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	@ 0x58
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2244      	movs	r2, #68	@ 0x44
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00b fc86 	bl	800cb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001212:	f003 fce1 	bl	8004bd8 <HAL_PWREx_ControlVoltageScaling>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800121c:	f000 fc8e 	bl	8001b3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001220:	f003 fcbc 	bl	8004b9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <SystemClock_Config+0xc0>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122a:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <SystemClock_Config+0xc0>)
 800122c:	f023 0318 	bic.w	r3, r3, #24
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001234:	2314      	movs	r3, #20
 8001236:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001244:	2360      	movs	r3, #96	@ 0x60
 8001246:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800124c:	2301      	movs	r3, #1
 800124e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001254:	2328      	movs	r3, #40	@ 0x28
 8001256:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001258:	2307      	movs	r3, #7
 800125a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fdd7 	bl	8004e1c <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001274:	f000 fc62 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2303      	movs	r3, #3
 800127e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	2104      	movs	r1, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f004 f99f 	bl	80055d4 <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800129c:	f000 fc4e 	bl	8001b3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012a0:	f004 fed8 	bl	8006054 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012a4:	bf00      	nop
 80012a6:	3758      	adds	r7, #88	@ 0x58
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012b6:	4a19      	ldr	r2, [pc, #100]	@ (800131c <MX_DFSDM1_Init+0x6c>)
 80012b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80012ba:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012bc:	2201      	movs	r2, #1
 80012be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_DFSDM1_Init+0x68>)
 8001306:	f002 f85f 	bl	80033c8 <HAL_DFSDM_ChannelInit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001310:	f000 fc14 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200004a0 	.word	0x200004a0
 800131c:	40016020 	.word	0x40016020

08001320 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <MX_I2C2_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_I2C2_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <MX_I2C2_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001338:	2201      	movs	r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_I2C2_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_I2C2_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <MX_I2C2_Init+0x74>)
 800135c:	f002 fc99 	bl	8003c92 <HAL_I2C_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001366:	f000 fbe9 	bl	8001b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	@ (8001394 <MX_I2C2_Init+0x74>)
 800136e:	f003 fa4b 	bl	8004808 <HAL_I2CEx_ConfigAnalogFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 fbe0 	bl	8001b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_I2C2_Init+0x74>)
 8001380:	f003 fa8d 	bl	800489e <HAL_I2CEx_ConfigDigitalFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 fbd7 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200004d8 	.word	0x200004d8
 8001398:	40005800 	.word	0x40005800
 800139c:	10d19ce4 	.word	0x10d19ce4

080013a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <MX_QUADSPI_Init+0x48>)
 80013a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013b8:	2210      	movs	r2, #16
 80013ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013be:	2217      	movs	r2, #23
 80013c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_QUADSPI_Init+0x44>)
 80013d0:	f003 fc68 	bl	8004ca4 <HAL_QSPI_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80013da:	f000 fbaf 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000052c 	.word	0x2000052c
 80013e8:	a0001000 	.word	0xa0001000

080013ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_SPI3_Init+0x74>)
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <MX_SPI3_Init+0x78>)
 80013f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_SPI3_Init+0x74>)
 80013f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001406:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800140a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_SPI3_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_SPI3_Init+0x74>)
 800141a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_SPI3_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_SPI3_Init+0x74>)
 800143a:	2207      	movs	r2, #7
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_SPI3_Init+0x74>)
 8001446:	2208      	movs	r2, #8
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_SPI3_Init+0x74>)
 800144c:	f004 ffe4 	bl	8006418 <HAL_SPI_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001456:	f000 fb71 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000570 	.word	0x20000570
 8001464:	40003c00 	.word	0x40003c00

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	@ 0x38
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_TIM2_Init+0xe8>)
 800149c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014a4:	f240 3247 	movw	r2, #839	@ 0x347
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014b2:	2263      	movs	r2, #99	@ 0x63
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c2:	4823      	ldr	r0, [pc, #140]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014c4:	f005 f84b 	bl	800655e <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014ce:	f000 fb35 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014dc:	4619      	mov	r1, r3
 80014de:	481c      	ldr	r0, [pc, #112]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014e0:	f005 fd58 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014ea:	f000 fb27 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ee:	4818      	ldr	r0, [pc, #96]	@ (8001550 <MX_TIM2_Init+0xe8>)
 80014f0:	f005 f953 	bl	800679a <HAL_TIM_PWM_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014fa:	f000 fb1f 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4810      	ldr	r0, [pc, #64]	@ (8001550 <MX_TIM2_Init+0xe8>)
 800150e:	f006 fa6f 	bl	80079f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001518:	f000 fb10 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151c:	2360      	movs	r3, #96	@ 0x60
 800151e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60-1;
 8001520:	233b      	movs	r3, #59	@ 0x3b
 8001522:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001528:	2304      	movs	r3, #4
 800152a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	220c      	movs	r2, #12
 8001530:	4619      	mov	r1, r3
 8001532:	4807      	ldr	r0, [pc, #28]	@ (8001550 <MX_TIM2_Init+0xe8>)
 8001534:	f005 fc1a 	bl	8006d6c <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800153e:	f000 fafd 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001542:	4803      	ldr	r0, [pc, #12]	@ (8001550 <MX_TIM2_Init+0xe8>)
 8001544:	f000 feee 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8001548:	bf00      	nop
 800154a:	3738      	adds	r7, #56	@ 0x38
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200005d4 	.word	0x200005d4

08001554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <MX_TIM3_Init+0xa8>)
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <MX_TIM3_Init+0xac>)
 800157c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157e:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM3_Init+0xa8>)
 800158c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_TIM3_Init+0xa8>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_TIM3_Init+0xa8>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800159e:	4817      	ldr	r0, [pc, #92]	@ (80015fc <MX_TIM3_Init+0xa8>)
 80015a0:	f005 f8a4 	bl	80066ec <HAL_TIM_OC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80015aa:	f000 fac7 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	480f      	ldr	r0, [pc, #60]	@ (80015fc <MX_TIM3_Init+0xa8>)
 80015be:	f006 fa17 	bl	80079f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80015c8:	f000 fab8 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <MX_TIM3_Init+0xa8>)
 80015e4:	f005 fb48 	bl	8006c78 <HAL_TIM_OC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015ee:	f000 faa5 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000620 	.word	0x20000620
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001622:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <MX_TIM5_Init+0x94>)
 8001624:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <MX_TIM5_Init+0x98>)
 8001626:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <MX_TIM5_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_TIM5_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_TIM5_Init+0x94>)
 8001636:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800163a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_TIM5_Init+0x94>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_TIM5_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001648:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_TIM5_Init+0x94>)
 800164a:	f004 ff88 	bl	800655e <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001654:	f000 fa72 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <MX_TIM5_Init+0x94>)
 8001666:	f005 fc95 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001670:	f000 fa64 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_TIM5_Init+0x94>)
 8001682:	f006 f9b5 	bl	80079f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800168c:	f000 fa56 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000066c 	.word	0x2000066c
 800169c:	40000c00 	.word	0x40000c00

080016a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016a6:	4a19      	ldr	r2, [pc, #100]	@ (800170c <MX_USART1_UART_Init+0x6c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <MX_USART1_UART_Init+0x68>)
 80016e4:	f006 fa2a 	bl	8007b3c <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 fa25 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2105      	movs	r1, #5
 80016f6:	2025      	movs	r0, #37	@ 0x25
 80016f8:	f001 fe3c 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016fc:	2025      	movs	r0, #37	@ 0x25
 80016fe:	f001 fe55 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200006b8 	.word	0x200006b8
 800170c:	40013800 	.word	0x40013800

08001710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001716:	4a15      	ldr	r2, [pc, #84]	@ (800176c <MX_USART3_UART_Init+0x5c>)
 8001718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_USART3_UART_Init+0x58>)
 8001754:	f006 f9f2 	bl	8007b3c <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800175e:	f000 f9ed 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000740 	.word	0x20000740
 800176c:	40004800 	.word	0x40004800

08001770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001776:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800177a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177e:	2206      	movs	r2, #6
 8001780:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001784:	2202      	movs	r2, #2
 8001786:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178a:	2202      	movs	r2, #2
 800178c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b4:	f003 f8bf 	bl	8004936 <HAL_PCD_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017be:	f000 f9bd 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200007c8 	.word	0x200007c8

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e2:	4bbd      	ldr	r3, [pc, #756]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	4abc      	ldr	r2, [pc, #752]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ee:	4bba      	ldr	r3, [pc, #744]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4bb7      	ldr	r3, [pc, #732]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	4ab6      	ldr	r2, [pc, #728]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001806:	4bb4      	ldr	r3, [pc, #720]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4bb1      	ldr	r3, [pc, #708]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	4ab0      	ldr	r2, [pc, #704]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181e:	4bae      	ldr	r3, [pc, #696]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4bab      	ldr	r3, [pc, #684]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4aaa      	ldr	r2, [pc, #680]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4ba8      	ldr	r3, [pc, #672]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	4ba5      	ldr	r3, [pc, #660]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	4aa4      	ldr	r2, [pc, #656]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ad8 <MX_GPIO_Init+0x30c>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001860:	489e      	ldr	r0, [pc, #632]	@ (8001adc <MX_GPIO_Init+0x310>)
 8001862:	f002 f9db 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f248 1104 	movw	r1, #33028	@ 0x8104
 800186c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001870:	f002 f9d4 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001874:	2200      	movs	r2, #0
 8001876:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800187a:	4899      	ldr	r0, [pc, #612]	@ (8001ae0 <MX_GPIO_Init+0x314>)
 800187c:	f002 f9ce 	bl	8003c1c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001886:	4897      	ldr	r0, [pc, #604]	@ (8001ae4 <MX_GPIO_Init+0x318>)
 8001888:	f002 f9c8 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001892:	4894      	ldr	r0, [pc, #592]	@ (8001ae4 <MX_GPIO_Init+0x318>)
 8001894:	f002 f9c2 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800189e:	4892      	ldr	r0, [pc, #584]	@ (8001ae8 <MX_GPIO_Init+0x31c>)
 80018a0:	f002 f9bc 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2120      	movs	r1, #32
 80018a8:	488d      	ldr	r0, [pc, #564]	@ (8001ae0 <MX_GPIO_Init+0x314>)
 80018aa:	f002 f9b7 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	2101      	movs	r1, #1
 80018b2:	488a      	ldr	r0, [pc, #552]	@ (8001adc <MX_GPIO_Init+0x310>)
 80018b4:	f002 f9b2 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018b8:	f240 1315 	movw	r3, #277	@ 0x115
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4882      	ldr	r0, [pc, #520]	@ (8001adc <MX_GPIO_Init+0x310>)
 80018d2:	f001 ff05 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80018d6:	236a      	movs	r3, #106	@ 0x6a
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	487c      	ldr	r0, [pc, #496]	@ (8001adc <MX_GPIO_Init+0x310>)
 80018ec:	f001 fef8 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4878      	ldr	r0, [pc, #480]	@ (8001ae8 <MX_GPIO_Init+0x31c>)
 8001908:	f001 feea 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800190c:	233f      	movs	r3, #63	@ 0x3f
 800190e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001910:	230b      	movs	r3, #11
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4872      	ldr	r0, [pc, #456]	@ (8001ae8 <MX_GPIO_Init+0x31c>)
 8001920:	f001 fede 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001924:	2303      	movs	r3, #3
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001934:	2308      	movs	r3, #8
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001942:	f001 fecd 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001946:	f248 1304 	movw	r3, #33028	@ 0x8104
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001962:	f001 febd 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001966:	2310      	movs	r3, #16
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800196a:	230b      	movs	r3, #11
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197c:	f001 feb0 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001980:	23e0      	movs	r3, #224	@ 0xe0
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001990:	2305      	movs	r3, #5
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199e:	f001 fe9f 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	484a      	ldr	r0, [pc, #296]	@ (8001ae0 <MX_GPIO_Init+0x314>)
 80019b8:	f001 fe92 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80019bc:	2302      	movs	r3, #2
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019c0:	230b      	movs	r3, #11
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4844      	ldr	r0, [pc, #272]	@ (8001ae0 <MX_GPIO_Init+0x314>)
 80019d0:	f001 fe86 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80019d4:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80019d8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	483c      	ldr	r0, [pc, #240]	@ (8001ae0 <MX_GPIO_Init+0x314>)
 80019ee:	f001 fe77 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80019f2:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80019f6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4836      	ldr	r0, [pc, #216]	@ (8001ae4 <MX_GPIO_Init+0x318>)
 8001a0a:	f001 fe69 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001a0e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	482f      	ldr	r0, [pc, #188]	@ (8001ae4 <MX_GPIO_Init+0x318>)
 8001a28:	f001 fe5a 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a2c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4828      	ldr	r0, [pc, #160]	@ (8001ae8 <MX_GPIO_Init+0x31c>)
 8001a46:	f001 fe4b 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a4a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4821      	ldr	r0, [pc, #132]	@ (8001ae8 <MX_GPIO_Init+0x31c>)
 8001a62:	f001 fe3d 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a66:	2302      	movs	r3, #2
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a76:	2305      	movs	r3, #5
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4818      	ldr	r0, [pc, #96]	@ (8001ae4 <MX_GPIO_Init+0x318>)
 8001a82:	f001 fe2d 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a86:	2378      	movs	r3, #120	@ 0x78
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a96:	2307      	movs	r3, #7
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4810      	ldr	r0, [pc, #64]	@ (8001ae4 <MX_GPIO_Init+0x318>)
 8001aa2:	f001 fe1d 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001aa6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4807      	ldr	r0, [pc, #28]	@ (8001ae0 <MX_GPIO_Init+0x314>)
 8001ac4:	f001 fe0c 	bl	80036e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	2017      	movs	r0, #23
 8001ace:	f001 fc51 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ad2:	2017      	movs	r0, #23
 8001ad4:	e00a      	b.n	8001aec <MX_GPIO_Init+0x320>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000c00 	.word	0x48000c00
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	f001 fc5e 	bl	80033ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2105      	movs	r1, #5
 8001af4:	2028      	movs	r0, #40	@ 0x28
 8001af6:	f001 fc3d 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	@ 0x28
 8001afc:	f001 fc56 	bl	80033ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	@ 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f007 ffdb 	bl	8009acc <osDelay>
 8001b16:	e7fb      	b.n	8001b10 <StartDefaultTask+0x8>

08001b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b2a:	f001 fb27 	bl	800317c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40001000 	.word	0x40001000

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <Error_Handler+0x8>

08001b48 <initSensorBSP>:
#include "module_sensors.h"

TSENSOR_InitTypeDef gTemp = {};

void initSensorBSP()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	if(BSP_HSENSOR_Init() != 0)
 8001b4c:	f001 f88a 	bl	8002c64 <BSP_HSENSOR_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <initSensorBSP+0x16>
	{
		printf("Error initializing HSENSOR\n");
 8001b56:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <initSensorBSP+0x48>)
 8001b58:	f00a fea4 	bl	800c8a4 <puts>
		return;
 8001b5c:	e016      	b.n	8001b8c <initSensorBSP+0x44>
	}
	if(0xBC == HTS221_H_ReadID(HTS221_DEVICE_ID))
 8001b5e:	20be      	movs	r0, #190	@ 0xbe
 8001b60:	f001 f8cc 	bl	8002cfc <HTS221_H_ReadID>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2bbc      	cmp	r3, #188	@ 0xbc
 8001b68:	d106      	bne.n	8001b78 <initSensorBSP+0x30>
	{
		HTS221_H_Init((uint16_t)HTS221_DEVICE_ID);
 8001b6a:	20be      	movs	r0, #190	@ 0xbe
 8001b6c:	f001 f89a 	bl	8002ca4 <HTS221_H_Init>
		HTS221_T_Init((uint16_t)HTS221_DEVICE_ID, &gTemp);
 8001b70:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <initSensorBSP+0x4c>)
 8001b72:	20be      	movs	r0, #190	@ 0xbe
 8001b74:	f001 f974 	bl	8002e60 <HTS221_T_Init>
	}

	if (LPS22HB_WHO_AL_I_VAL == LPS22HB_P_ReadID(LPS22HB_I2C_ADDRESS))
 8001b78:	20ba      	movs	r0, #186	@ 0xba
 8001b7a:	f001 fa32 	bl	8002fe2 <LPS22HB_P_ReadID>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	22b1      	movs	r2, #177	@ 0xb1
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d102      	bne.n	8001b8c <initSensorBSP+0x44>
	{
		LPS22HB_P_Init(LPS22HB_I2C_ADDRESS);
 8001b86:	20ba      	movs	r0, #186	@ 0xba
 8001b88:	f001 fa1e 	bl	8002fc8 <LPS22HB_P_Init>
	}
}
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	080102f0 	.word	0x080102f0
 8001b94:	20000cb0 	.word	0x20000cb0

08001b98 <seperateRxPacket>:

void seperateRxPacket(UartPacket packet)
{
 8001b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b9c:	b0a4      	sub	sp, #144	@ 0x90
 8001b9e:	af06      	add	r7, sp, #24
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t length = packet.data[1];
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t reqType = packet.data[2];
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	uint8_t sensorType = packet.data[3];
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

	char str[100]; // Allocate memory for the string
	switch (sensorType){
 8001bb8:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001bbc:	2bff      	cmp	r3, #255	@ 0xff
 8001bbe:	d040      	beq.n	8001c42 <seperateRxPacket+0xaa>
 8001bc0:	2bff      	cmp	r3, #255	@ 0xff
 8001bc2:	dc66      	bgt.n	8001c92 <seperateRxPacket+0xfa>
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d02a      	beq.n	8001c1e <seperateRxPacket+0x86>
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	dc62      	bgt.n	8001c92 <seperateRxPacket+0xfa>
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <seperateRxPacket+0x3e>
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d012      	beq.n	8001bfa <seperateRxPacket+0x62>
 8001bd4:	e05d      	b.n	8001c92 <seperateRxPacket+0xfa>
		case REQ_SENSOR_TYPE_INDOOR_TEMP:
			snprintf(str, sizeof(str), "temp : %.2f \r\n", get_temp_info());
 8001bd6:	f000 f885 	bl	8001ce4 <get_temp_info>
 8001bda:	ee10 3a10 	vmov	r3, s0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fcb2 	bl	8000548 <__aeabi_f2d>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	f107 0010 	add.w	r0, r7, #16
 8001bec:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf0:	4a31      	ldr	r2, [pc, #196]	@ (8001cb8 <seperateRxPacket+0x120>)
 8001bf2:	2164      	movs	r1, #100	@ 0x64
 8001bf4:	f00a fe5e 	bl	800c8b4 <sniprintf>
			/*
			C 언어에서는 문자열 리터럴("temp : ")과 숫자형(double)을 직접 더하는 연산은 지원하지 않습니다.
			문자열과 숫자를 결합하여 출력하려면 sprintf 또는 snprintf와 같은 함수를 사용해서 포맷팅된 문자열을 만들어야 합니다.
			*/
			break;
 8001bf8:	e053      	b.n	8001ca2 <seperateRxPacket+0x10a>
		case REQ_SENSOR_TYPE_INDOOR_HUMIDITY:
			snprintf(str, sizeof(str), "humid : %.2f \r\n", get_humidity_info());
 8001bfa:	f000 f869 	bl	8001cd0 <get_humidity_info>
 8001bfe:	ee10 3a10 	vmov	r3, s0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fca0 	bl	8000548 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f107 0010 	add.w	r0, r7, #16
 8001c10:	e9cd 2300 	strd	r2, r3, [sp]
 8001c14:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <seperateRxPacket+0x124>)
 8001c16:	2164      	movs	r1, #100	@ 0x64
 8001c18:	f00a fe4c 	bl	800c8b4 <sniprintf>
			break;
 8001c1c:	e041      	b.n	8001ca2 <seperateRxPacket+0x10a>
		case REQ_SENSOR_TYPE_ATMOSPHERIC_PRESSURE:
			snprintf(str, sizeof(str), "atmospheric pressure :%.2f \r\n", get_atmospheric_pressure_info());
 8001c1e:	f000 f883 	bl	8001d28 <get_atmospheric_pressure_info>
 8001c22:	ee10 3a10 	vmov	r3, s0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc8e 	bl	8000548 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f107 0010 	add.w	r0, r7, #16
 8001c34:	e9cd 2300 	strd	r2, r3, [sp]
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <seperateRxPacket+0x128>)
 8001c3a:	2164      	movs	r1, #100	@ 0x64
 8001c3c:	f00a fe3a 	bl	800c8b4 <sniprintf>
			break;
 8001c40:	e02f      	b.n	8001ca2 <seperateRxPacket+0x10a>
		case REQ_SENSOR_TYPE_ALL:
			snprintf(str, sizeof(str), "temp: %.2f \r\n humid : %.2f \r\n atmospheric pressure : %.2f \r\n", get_temp_info(), get_humidity_info(), get_atmospheric_pressure_info());
 8001c42:	f000 f84f 	bl	8001ce4 <get_temp_info>
 8001c46:	ee10 3a10 	vmov	r3, s0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
 8001c54:	f000 f83c 	bl	8001cd0 <get_humidity_info>
 8001c58:	ee10 3a10 	vmov	r3, s0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc73 	bl	8000548 <__aeabi_f2d>
 8001c62:	4680      	mov	r8, r0
 8001c64:	4689      	mov	r9, r1
 8001c66:	f000 f85f 	bl	8001d28 <get_atmospheric_pressure_info>
 8001c6a:	ee10 3a10 	vmov	r3, s0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc6a 	bl	8000548 <__aeabi_f2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	f107 0010 	add.w	r0, r7, #16
 8001c7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c80:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c84:	e9cd 4500 	strd	r4, r5, [sp]
 8001c88:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <seperateRxPacket+0x12c>)
 8001c8a:	2164      	movs	r1, #100	@ 0x64
 8001c8c:	f00a fe12 	bl	800c8b4 <sniprintf>
			break;
 8001c90:	e007      	b.n	8001ca2 <seperateRxPacket+0x10a>
		default:
			snprintf(str, sizeof(str), "DATA ERROR");
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <seperateRxPacket+0x130>)
 8001c98:	2164      	movs	r1, #100	@ 0x64
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00a fe0a 	bl	800c8b4 <sniprintf>
			break;
 8001ca0:	bf00      	nop
	}
	// Print the result after the switch statement
	printf("%s", str);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <seperateRxPacket+0x134>)
 8001caa:	f00a fd93 	bl	800c7d4 <iprintf>
	// No need to free str as it is allocated on the stack

}
 8001cae:	bf00      	nop
 8001cb0:	3778      	adds	r7, #120	@ 0x78
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cb8:	0801030c 	.word	0x0801030c
 8001cbc:	0801031c 	.word	0x0801031c
 8001cc0:	0801032c 	.word	0x0801032c
 8001cc4:	0801034c 	.word	0x0801034c
 8001cc8:	0801038c 	.word	0x0801038c
 8001ccc:	08010398 	.word	0x08010398

08001cd0 <get_humidity_info>:

float get_humidity_info()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	return HTS221_H_ReadHumidity((uint16_t)HTS221_DEVICE_ID);
 8001cd4:	20be      	movs	r0, #190	@ 0xbe
 8001cd6:	f001 f827 	bl	8002d28 <HTS221_H_ReadHumidity>
 8001cda:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <get_temp_info>:

float get_temp_info()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	float temp = HTS221_T_ReadTemp((uint16_t)HTS221_DEVICE_ID);
 8001cea:	20be      	movs	r0, #190	@ 0xbe
 8001cec:	f001 f8e5 	bl	8002eba <HTS221_T_ReadTemp>
 8001cf0:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temp == -1) // Assuming -1 indicates an error
 8001cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001cfc:	eef4 7a47 	vcmp.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d105      	bne.n	8001d12 <get_temp_info+0x2e>
	{
		printf("Error reading temperature\n");
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <get_temp_info+0x40>)
 8001d08:	f00a fdcc 	bl	800c8a4 <puts>
		return 0.0; // Return a default value or handle the error as needed
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	e000      	b.n	8001d14 <get_temp_info+0x30>
	}
	return temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	0801039c 	.word	0x0801039c

08001d28 <get_atmospheric_pressure_info>:

float get_atmospheric_pressure_info()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	return LPS22HB_P_ReadPressure(LPS22HB_I2C_ADDRESS);
 8001d2c:	20ba      	movs	r0, #186	@ 0xba
 8001d2e:	f001 f96f 	bl	8003010 <LPS22HB_P_ReadPressure>
 8001d32:	ee07 0a90 	vmov	s15, r0
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <target_function>:
uint8_t uartBuff[RX_BUFFER_SIZE] = {0x00, };
QueueHandle_t uartQueue;


void target_function(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	printf("Target packet received! Executing function... \r\n");
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <target_function+0x10>)
 8001d46:	f00a fdad 	bl	800c8a4 <puts>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	080103b8 	.word	0x080103b8

08001d54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
	if (huart->Instance == USART1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a21      	ldr	r2, [pc, #132]	@ (8001dec <HAL_UART_RxCpltCallback+0x98>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d130      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x78>
	{
		// 수신된 데이터의 크기를 확인
		size_t dataLength = huart->RxXferSize - huart->RxXferCount;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001d70:	461a      	mov	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	61fb      	str	r3, [r7, #28]

		// 수신된 데이터를 큐에 넣음
		UartPacket packet;
		memset(packet.data, 0, RX_BUFFER_SIZE); // Initialize packet data buffer
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2208      	movs	r2, #8
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00a fec0 	bl	800cb0c <memset>
		memcpy(packet.data, uartBuff, dataLength);
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	4917      	ldr	r1, [pc, #92]	@ (8001df0 <HAL_UART_RxCpltCallback+0x9c>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00a ff8e 	bl	800ccb6 <memcpy>
		packet.length = dataLength;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	617b      	str	r3, [r7, #20]

		// 수신된 데이터가 버퍼 크기를 초과하는지 확인
		if (dataLength > RX_BUFFER_SIZE)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d905      	bls.n	8001db0 <HAL_UART_RxCpltCallback+0x5c>
		{
			// 버퍼 초기화
			memset(uartBuff, 0, RX_BUFFER_SIZE);
 8001da4:	2208      	movs	r2, #8
 8001da6:	2100      	movs	r1, #0
 8001da8:	4811      	ldr	r0, [pc, #68]	@ (8001df0 <HAL_UART_RxCpltCallback+0x9c>)
 8001daa:	f00a feaf 	bl	800cb0c <memset>
 8001dae:	e008      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0x6e>
		}
		else
		{
			// 수신된 데이터를 큐에 넣음
			xQueueSendFromISR(uartQueue, &packet, &xHigherPriorityTaskWoken);
 8001db0:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_UART_RxCpltCallback+0xa0>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	f107 0218 	add.w	r2, r7, #24
 8001db8:	f107 010c 	add.w	r1, r7, #12
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f008 f811 	bl	8009de4 <xQueueGenericSendFromISR>
		}

		// 다시 수신 대기
		HAL_UART_Receive_IT(&huart1, uartBuff, RX_BUFFER_SIZE);
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <HAL_UART_RxCpltCallback+0x9c>)
 8001dc6:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <HAL_UART_RxCpltCallback+0xa4>)
 8001dc8:	f006 f858 	bl	8007e7c <HAL_UART_Receive_IT>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_UART_RxCpltCallback+0x8e>
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <HAL_UART_RxCpltCallback+0xa8>)
 8001dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40013800 	.word	0x40013800
 8001df0:	20000cb8 	.word	0x20000cb8
 8001df4:	20000cc0 	.word	0x20000cc0
 8001df8:	200006b8 	.word	0x200006b8
 8001dfc:	e000ed04 	.word	0xe000ed04

08001e00 <vTaskUARTReceiver>:

void vTaskUARTReceiver(void *pvParameters)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b090      	sub	sp, #64	@ 0x40
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6078      	str	r0, [r7, #4]
	uartQueue = xQueueCreate(10, sizeof(UartPacket));
 8001e08:	2200      	movs	r2, #0
 8001e0a:	210c      	movs	r1, #12
 8001e0c:	200a      	movs	r0, #10
 8001e0e:	f007 ff8f 	bl	8009d30 <xQueueGenericCreate>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a46      	ldr	r2, [pc, #280]	@ (8001f30 <vTaskUARTReceiver+0x130>)
 8001e16:	6013      	str	r3, [r2, #0]
	if (uartQueue == NULL)	return;		// 큐 생성 실패
 8001e18:	4b45      	ldr	r3, [pc, #276]	@ (8001f30 <vTaskUARTReceiver+0x130>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8081 	beq.w	8001f24 <vTaskUARTReceiver+0x124>

	// 센서 초기화
	initSensorBSP();
 8001e22:	f7ff fe91 	bl	8001b48 <initSensorBSP>

	// 첫 번째 수신 시작
	if (HAL_UART_Receive_IT(&huart1, uartBuff, RX_BUFFER_SIZE) != HAL_OK)	return;
 8001e26:	2208      	movs	r2, #8
 8001e28:	4942      	ldr	r1, [pc, #264]	@ (8001f34 <vTaskUARTReceiver+0x134>)
 8001e2a:	4843      	ldr	r0, [pc, #268]	@ (8001f38 <vTaskUARTReceiver+0x138>)
 8001e2c:	f006 f826 	bl	8007e7c <HAL_UART_Receive_IT>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d178      	bne.n	8001f28 <vTaskUARTReceiver+0x128>

	while (1)
	{
		// 큐에서 수신된 데이터를 가져옴
		UartPacket packet;
		if (xQueueReceive(uartQueue, &packet, portMAX_DELAY) == pdPASS)
 8001e36:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <vTaskUARTReceiver+0x130>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f107 011c 	add.w	r1, r7, #28
 8001e3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e42:	4618      	mov	r0, r3
 8001e44:	f008 f86c 	bl	8009f20 <xQueueReceive>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d163      	bne.n	8001f16 <vTaskUARTReceiver+0x116>
		{
			// 패킷을 문자열 형식으로 변환하여 출력
			char strPacket[RX_BUFFER_SIZE * 2 + 1];
			for (size_t i = 0; i < packet.length; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e52:	e010      	b.n	8001e76 <vTaskUARTReceiver+0x76>
			{
				sprintf(&strPacket[i * 2], "%02X ", packet.data[i]);
 8001e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	f107 0208 	add.w	r2, r7, #8
 8001e5c:	18d0      	adds	r0, r2, r3
 8001e5e:	f107 021c 	add.w	r2, r7, #28
 8001e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4934      	ldr	r1, [pc, #208]	@ (8001f3c <vTaskUARTReceiver+0x13c>)
 8001e6c:	f00a fd56 	bl	800c91c <siprintf>
			for (size_t i = 0; i < packet.length; i++)
 8001e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e72:	3301      	adds	r3, #1
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d3ea      	bcc.n	8001e54 <vTaskUARTReceiver+0x54>
			}
			strPacket[packet.length * 2] = '\0'; // Null-terminate the string
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	3338      	adds	r3, #56	@ 0x38
 8001e84:	443b      	add	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	f803 2c30 	strb.w	r2, [r3, #-48]
			printf("PData Receiving Success: %s \r\n", strPacket);
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	4619      	mov	r1, r3
 8001e92:	482b      	ldr	r0, [pc, #172]	@ (8001f40 <vTaskUARTReceiver+0x140>)
 8001e94:	f00a fc9e 	bl	800c7d4 <iprintf>

			// 받은 데이터가 버퍼 크기를 초과하는지 확인
			size_t dataLength = packet.length;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30

			int reqType = packet.data[2];
 8001e9c:	7fbb      	ldrb	r3, [r7, #30]
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			if (dataLength < RX_BUFFER_SIZE){
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea2:	2b07      	cmp	r3, #7
 8001ea4:	d806      	bhi.n	8001eb4 <vTaskUARTReceiver+0xb4>
				xQueueReset(uartQueue);    //reset queue
 8001ea6:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <vTaskUARTReceiver+0x130>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 fed5 	bl	8009c5c <xQueueGenericReset>
 8001eb2:	e7c0      	b.n	8001e36 <vTaskUARTReceiver+0x36>
				continue;
			}

			// 받은 데이터를 다시 TX로 전송
			if (HAL_UART_Transmit(&huart1, packet.data, dataLength, HAL_MAX_DELAY) != HAL_OK)
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	f107 011c 	add.w	r1, r7, #28
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec0:	481d      	ldr	r0, [pc, #116]	@ (8001f38 <vTaskUARTReceiver+0x138>)
 8001ec2:	f005 fe89 	bl	8007bd8 <HAL_UART_Transmit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <vTaskUARTReceiver+0xd4>
			{
				printf("Failed to transmit data.\r\n");
 8001ecc:	481d      	ldr	r0, [pc, #116]	@ (8001f44 <vTaskUARTReceiver+0x144>)
 8001ece:	f00a fce9 	bl	800c8a4 <puts>
 8001ed2:	e020      	b.n	8001f16 <vTaskUARTReceiver+0x116>
			}
			else {
				switch (reqType){
 8001ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <vTaskUARTReceiver+0xe2>
 8001eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d007      	beq.n	8001ef0 <vTaskUARTReceiver+0xf0>
 8001ee0:	e016      	b.n	8001f10 <vTaskUARTReceiver+0x110>
					case REQ_TYPE_SENSOR:
						// Process the received sensor packet
						seperateRxPacket(packet);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eea:	f7ff fe55 	bl	8001b98 <seperateRxPacket>
						break;
 8001eee:	e012      	b.n	8001f16 <vTaskUARTReceiver+0x116>
					case REQ_TYPE_CONTROL:
						printf("Are you request Controller? \r\n");
 8001ef0:	4815      	ldr	r0, [pc, #84]	@ (8001f48 <vTaskUARTReceiver+0x148>)
 8001ef2:	f00a fcd7 	bl	800c8a4 <puts>
						int rpm = packet.data[3];
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
						// Create a new task for control request
						xTaskCreate(vTaskDCMotorControl, "ControlHandler", configMINIMAL_STACK_SIZE, rpm, tskIDLE_PRIORITY, NULL);
 8001efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efc:	2200      	movs	r2, #0
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	9200      	str	r2, [sp, #0]
 8001f04:	2280      	movs	r2, #128	@ 0x80
 8001f06:	4911      	ldr	r1, [pc, #68]	@ (8001f4c <vTaskUARTReceiver+0x14c>)
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <vTaskUARTReceiver+0x150>)
 8001f0a:	f008 fa43 	bl	800a394 <xTaskCreate>
						break;
 8001f0e:	e002      	b.n	8001f16 <vTaskUARTReceiver+0x116>
					default:
						target_function();
 8001f10:	f7ff ff16 	bl	8001d40 <target_function>
						break;
 8001f14:	bf00      	nop
				}
			}
		}

		xQueueReset(uartQueue);    //reset queue
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <vTaskUARTReceiver+0x130>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f007 fe9d 	bl	8009c5c <xQueueGenericReset>
	{
 8001f22:	e788      	b.n	8001e36 <vTaskUARTReceiver+0x36>
	if (uartQueue == NULL)	return;		// 큐 생성 실패
 8001f24:	bf00      	nop
 8001f26:	e000      	b.n	8001f2a <vTaskUARTReceiver+0x12a>
	if (HAL_UART_Receive_IT(&huart1, uartBuff, RX_BUFFER_SIZE) != HAL_OK)	return;
 8001f28:	bf00      	nop
	}
}
 8001f2a:	3738      	adds	r7, #56	@ 0x38
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000cc0 	.word	0x20000cc0
 8001f34:	20000cb8 	.word	0x20000cb8
 8001f38:	200006b8 	.word	0x200006b8
 8001f3c:	080103e8 	.word	0x080103e8
 8001f40:	080103f0 	.word	0x080103f0
 8001f44:	08010410 	.word	0x08010410
 8001f48:	0801042c 	.word	0x0801042c
 8001f4c:	0801044c 	.word	0x0801044c
 8001f50:	08000fe5 	.word	0x08000fe5

08001f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_MspInit+0x4c>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	f001 f9ef 	bl	8003374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0ac      	sub	sp, #176	@ 0xb0
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2288      	movs	r2, #136	@ 0x88
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00a fda1 	bl	800cb0c <memset>
  if(DFSDM1_Init == 0)
 8001fca:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d142      	bne.n	8002058 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001fd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fd4c 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001fee:	f7ff fda5 	bl	8001b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8002064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ff8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002022:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800203c:	2306      	movs	r3, #6
 800203e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002042:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	@ (8002068 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800204a:	f001 fb49 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	4a02      	ldr	r2, [pc, #8]	@ (8002060 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002056:	6013      	str	r3, [r2, #0]
  }

}
 8002058:	bf00      	nop
 800205a:	37b0      	adds	r7, #176	@ 0xb0
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000cc4 	.word	0x20000cc4
 8002064:	40021000 	.word	0x40021000
 8002068:	48001000 	.word	0x48001000

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0ac      	sub	sp, #176	@ 0xb0
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2288      	movs	r2, #136	@ 0x88
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f00a fd3d 	bl	800cb0c <memset>
  if(hi2c->Instance==I2C2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_I2C_MspInit+0xb0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d13b      	bne.n	8002114 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fce9 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020b4:	f7ff fd42 	bl	8001b3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_I2C_MspInit+0xb4>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	4a18      	ldr	r2, [pc, #96]	@ (8002120 <HAL_I2C_MspInit+0xb4>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_I2C_MspInit+0xb4>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80020d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d8:	2312      	movs	r3, #18
 80020da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020de:	2301      	movs	r3, #1
 80020e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020ea:	2304      	movs	r3, #4
 80020ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020f4:	4619      	mov	r1, r3
 80020f6:	480b      	ldr	r0, [pc, #44]	@ (8002124 <HAL_I2C_MspInit+0xb8>)
 80020f8:	f001 faf2 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <HAL_I2C_MspInit+0xb4>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <HAL_I2C_MspInit+0xb4>)
 8002102:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002106:	6593      	str	r3, [r2, #88]	@ 0x58
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_I2C_MspInit+0xb4>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002114:	bf00      	nop
 8002116:	37b0      	adds	r7, #176	@ 0xb0
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40005800 	.word	0x40005800
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400

08002128 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <HAL_I2C_MspDeInit+0x3c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10f      	bne.n	800215a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_I2C_MspDeInit+0x40>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_I2C_MspDeInit+0x40>)
 8002140:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800214a:	4808      	ldr	r0, [pc, #32]	@ (800216c <HAL_I2C_MspDeInit+0x44>)
 800214c:	f001 fc72 	bl	8003a34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002150:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002154:	4805      	ldr	r0, [pc, #20]	@ (800216c <HAL_I2C_MspDeInit+0x44>)
 8002156:	f001 fc6d 	bl	8003a34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40005800 	.word	0x40005800
 8002168:	40021000 	.word	0x40021000
 800216c:	48000400 	.word	0x48000400

08002170 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_QSPI_MspInit+0x7c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d128      	bne.n	80021e4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002192:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_QSPI_MspInit+0x80>)
 8002194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002196:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_QSPI_MspInit+0x80>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219c:	6513      	str	r3, [r2, #80]	@ 0x50
 800219e:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <HAL_QSPI_MspInit+0x80>)
 80021a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_QSPI_MspInit+0x80>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_QSPI_MspInit+0x80>)
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_QSPI_MspInit+0x80>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80021c2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80021c6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021d4:	230a      	movs	r3, #10
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <HAL_QSPI_MspInit+0x84>)
 80021e0:	f001 fa7e 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	@ 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	a0001000 	.word	0xa0001000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48001000 	.word	0x48001000

080021f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <HAL_SPI_MspInit+0x7c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d128      	bne.n	800226c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_SPI_MspInit+0x80>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <HAL_SPI_MspInit+0x80>)
 8002220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002224:	6593      	str	r3, [r2, #88]	@ 0x58
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <HAL_SPI_MspInit+0x80>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_SPI_MspInit+0x80>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <HAL_SPI_MspInit+0x80>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_SPI_MspInit+0x80>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800224a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800225c:	2306      	movs	r3, #6
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <HAL_SPI_MspInit+0x84>)
 8002268:	f001 fa3a 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	@ 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40003c00 	.word	0x40003c00
 8002278:	40021000 	.word	0x40021000
 800227c:	48000800 	.word	0x48000800

08002280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002290:	d10c      	bne.n	80022ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_TIM_Base_MspInit+0x5c>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002296:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_TIM_Base_MspInit+0x5c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6593      	str	r3, [r2, #88]	@ 0x58
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <HAL_TIM_Base_MspInit+0x5c>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022aa:	e010      	b.n	80022ce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	@ (80022e0 <HAL_TIM_Base_MspInit+0x60>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10b      	bne.n	80022ce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_TIM_Base_MspInit+0x5c>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_TIM_Base_MspInit+0x5c>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_TIM_Base_MspInit+0x5c>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40000c00 	.word	0x40000c00

080022e4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_TIM_OC_MspInit+0x38>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10b      	bne.n	800230e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_TIM_OC_MspInit+0x3c>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_TIM_OC_MspInit+0x3c>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <HAL_TIM_OC_MspInit+0x3c>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40000400 	.word	0x40000400
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002344:	d11c      	bne.n	8002380 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_TIM_MspPostInit+0x64>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	4a0f      	ldr	r2, [pc, #60]	@ (8002388 <HAL_TIM_MspPostInit+0x64>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_TIM_MspPostInit+0x64>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800235e:	2308      	movs	r3, #8
 8002360:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800237c:	f001 f9b0 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000

0800238c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0ae      	sub	sp, #184	@ 0xb8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	2288      	movs	r2, #136	@ 0x88
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f00a fbad 	bl	800cb0c <memset>
  if(huart->Instance==USART1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a46      	ldr	r2, [pc, #280]	@ (80024d0 <HAL_UART_MspInit+0x144>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d143      	bne.n	8002444 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023bc:	2301      	movs	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023c0:	2300      	movs	r3, #0
 80023c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fb59 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023d4:	f7ff fbb2 	bl	8001b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023d8:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 80023da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023dc:	4a3d      	ldr	r2, [pc, #244]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 80023de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80023e4:	4b3b      	ldr	r3, [pc, #236]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 80023e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b38      	ldr	r3, [pc, #224]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 80023f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f4:	4a37      	ldr	r2, [pc, #220]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023fc:	4b35      	ldr	r3, [pc, #212]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002408:	23c0      	movs	r3, #192	@ 0xc0
 800240a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002420:	2307      	movs	r3, #7
 8002422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800242a:	4619      	mov	r1, r3
 800242c:	482a      	ldr	r0, [pc, #168]	@ (80024d8 <HAL_UART_MspInit+0x14c>)
 800242e:	f001 f957 	bl	80036e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2105      	movs	r1, #5
 8002436:	2025      	movs	r0, #37	@ 0x25
 8002438:	f000 ff9c 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800243c:	2025      	movs	r0, #37	@ 0x25
 800243e:	f000 ffb5 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002442:	e040      	b.n	80024c6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a24      	ldr	r2, [pc, #144]	@ (80024dc <HAL_UART_MspInit+0x150>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d13b      	bne.n	80024c6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800244e:	2304      	movs	r3, #4
 8002450:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002452:	2300      	movs	r3, #0
 8002454:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fb10 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002466:	f7ff fb69 	bl	8001b3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002474:	6593      	str	r3, [r2, #88]	@ 0x58
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248e:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_UART_MspInit+0x148>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800249a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800249e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b4:	2307      	movs	r3, #7
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024be:	4619      	mov	r1, r3
 80024c0:	4807      	ldr	r0, [pc, #28]	@ (80024e0 <HAL_UART_MspInit+0x154>)
 80024c2:	f001 f90d 	bl	80036e0 <HAL_GPIO_Init>
}
 80024c6:	bf00      	nop
 80024c8:	37b8      	adds	r7, #184	@ 0xb8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40021000 	.word	0x40021000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	40004800 	.word	0x40004800
 80024e0:	48000c00 	.word	0x48000c00

080024e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0ac      	sub	sp, #176	@ 0xb0
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2288      	movs	r2, #136	@ 0x88
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f00a fb01 	bl	800cb0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002512:	d17c      	bne.n	800260e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002518:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800251a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800251e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800252a:	2318      	movs	r3, #24
 800252c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800252e:	2307      	movs	r3, #7
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002532:	2302      	movs	r3, #2
 8002534:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002536:	2302      	movs	r3, #2
 8002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800253a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4618      	mov	r0, r3
 8002546:	f003 fa9b 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002550:	f7ff faf4 	bl	8001b3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002558:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 8002562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800256c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002580:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800258a:	f001 f8a9 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800258e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025a8:	230a      	movs	r3, #10
 80025aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b8:	f001 f892 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d114      	bne.n	800260a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80025f8:	f002 fb44 	bl	8004c84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <HAL_PCD_MspInit+0x134>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002608:	e001      	b.n	800260e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800260a:	f002 fb3b 	bl	8004c84 <HAL_PWREx_EnableVddUSB>
}
 800260e:	bf00      	nop
 8002610:	37b0      	adds	r7, #176	@ 0xb0
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	@ 0x38
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800262a:	4b34      	ldr	r3, [pc, #208]	@ (80026fc <HAL_InitTick+0xe0>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4a33      	ldr	r2, [pc, #204]	@ (80026fc <HAL_InitTick+0xe0>)
 8002630:	f043 0310 	orr.w	r3, r3, #16
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
 8002636:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <HAL_InitTick+0xe0>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002642:	f107 0210 	add.w	r2, r7, #16
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f003 f985 	bl	800595c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800265c:	f003 f952 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8002660:	6378      	str	r0, [r7, #52]	@ 0x34
 8002662:	e004      	b.n	800266e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002664:	f003 f94e 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8002668:	4603      	mov	r3, r0
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800266e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002670:	4a23      	ldr	r2, [pc, #140]	@ (8002700 <HAL_InitTick+0xe4>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	3b01      	subs	r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800267c:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_InitTick+0xe8>)
 800267e:	4a22      	ldr	r2, [pc, #136]	@ (8002708 <HAL_InitTick+0xec>)
 8002680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_InitTick+0xe8>)
 8002684:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002688:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800268a:	4a1e      	ldr	r2, [pc, #120]	@ (8002704 <HAL_InitTick+0xe8>)
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002690:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <HAL_InitTick+0xe8>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <HAL_InitTick+0xe8>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HAL_InitTick+0xe8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80026a2:	4818      	ldr	r0, [pc, #96]	@ (8002704 <HAL_InitTick+0xe8>)
 80026a4:	f003 ff5b 	bl	800655e <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80026ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11b      	bne.n	80026ee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80026b6:	4813      	ldr	r0, [pc, #76]	@ (8002704 <HAL_InitTick+0xe8>)
 80026b8:	f003 ffa8 	bl	800660c <HAL_TIM_Base_Start_IT>
 80026bc:	4603      	mov	r3, r0
 80026be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80026c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026ca:	2036      	movs	r0, #54	@ 0x36
 80026cc:	f000 fe6e 	bl	80033ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	d808      	bhi.n	80026e8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80026d6:	2200      	movs	r2, #0
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	2036      	movs	r0, #54	@ 0x36
 80026dc:	f000 fe4a 	bl	8003374 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e0:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <HAL_InitTick+0xf0>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e002      	b.n	80026ee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3738      	adds	r7, #56	@ 0x38
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	431bde83 	.word	0x431bde83
 8002704:	20000cc8 	.word	0x20000cc8
 8002708:	40001000 	.word	0x40001000
 800270c:	20000010 	.word	0x20000010

08002710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <NMI_Handler+0x4>

08002718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <HardFault_Handler+0x4>

08002720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <MemManage_Handler+0x4>

08002728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <BusFault_Handler+0x4>

08002730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <UsageFault_Handler+0x4>

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800274a:	2020      	movs	r0, #32
 800274c:	f001 fa7e 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002750:	2040      	movs	r0, #64	@ 0x40
 8002752:	f001 fa7b 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002756:	2080      	movs	r0, #128	@ 0x80
 8002758:	f001 fa78 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800275c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002760:	f001 fa74 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}

08002768 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <USART1_IRQHandler+0x10>)
 800276e:	f005 fbd1 	bl	8007f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200006b8 	.word	0x200006b8

0800277c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002780:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002784:	f001 fa62 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002788:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800278c:	f001 fa5e 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002790:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002794:	f001 fa5a 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002798:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800279c:	f001 fa56 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80027a0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027a4:	f001 fa52 	bl	8003c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027b0:	4802      	ldr	r0, [pc, #8]	@ (80027bc <TIM6_DAC_IRQHandler+0x10>)
 80027b2:	f004 f959 	bl	8006a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000cc8 	.word	0x20000cc8

080027c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return 1;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_kill>:

int _kill(int pid, int sig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027da:	f00a fa3f 	bl	800cc5c <__errno>
 80027de:	4603      	mov	r3, r0
 80027e0:	2216      	movs	r2, #22
 80027e2:	601a      	str	r2, [r3, #0]
  return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_exit>:

void _exit (int status)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffe7 	bl	80027d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002802:	bf00      	nop
 8002804:	e7fd      	b.n	8002802 <_exit+0x12>

08002806 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e00a      	b.n	800282e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002818:	f7fe fc76 	bl	8001108 <__io_getchar>
 800281c:	4601      	mov	r1, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	60ba      	str	r2, [r7, #8]
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	dbf0      	blt.n	8002818 <_read+0x12>
  }

  return len;
 8002836:	687b      	ldr	r3, [r7, #4]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e009      	b.n	8002866 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	60ba      	str	r2, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fc3e 	bl	80010dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	dbf1      	blt.n	8002852 <_write+0x12>
  }
  return len;
 800286e:	687b      	ldr	r3, [r7, #4]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_close>:

int _close(int file)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a0:	605a      	str	r2, [r3, #4]
  return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_isatty>:

int _isatty(int file)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	@ (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f00a f9a4 	bl	800cc5c <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	@ (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20018000 	.word	0x20018000
 8002940:	00000400 	.word	0x00000400
 8002944:	20000d14 	.word	0x20000d14
 8002948:	20001bf0 	.word	0x20001bf0

0800294c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002974:	f7ff ffea 	bl	800294c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	@ (80029ac <LoopForever+0x6>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	@ (80029b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <LoopForever+0xe>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	@ (80029bc <LoopForever+0x16>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299e:	f00a f963 	bl	800cc68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029a2:	f7fe fbcb 	bl	800113c <main>

080029a6 <LoopForever>:

LoopForever:
    b LoopForever
 80029a6:	e7fe      	b.n	80029a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029a8:	20018000 	.word	0x20018000
   ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80029b4:	080108e8 	.word	0x080108e8
  ldr r2, =_sbss
 80029b8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80029bc:	20001bf0 	.word	0x20001bf0

080029c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC1_2_IRQHandler>
	...

080029c4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80029cc:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d8:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80029e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80029ea:	2312      	movs	r3, #18
 80029ec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80029f6:	2304      	movs	r3, #4
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	481b      	ldr	r0, [pc, #108]	@ (8002a70 <I2Cx_MspInit+0xac>)
 8002a02:	f000 fe6d 	bl	80036e0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4818      	ldr	r0, [pc, #96]	@ (8002a70 <I2Cx_MspInit+0xac>)
 8002a0e:	f000 fe67 	bl	80036e0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002a12:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	4a15      	ldr	r2, [pc, #84]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a1e:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a34:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <I2Cx_MspInit+0xa8>)
 8002a3c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a40:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	210f      	movs	r1, #15
 8002a46:	2021      	movs	r0, #33	@ 0x21
 8002a48:	f000 fc94 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002a4c:	2021      	movs	r0, #33	@ 0x21
 8002a4e:	f000 fcad 	bl	80033ac <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	210f      	movs	r1, #15
 8002a56:	2022      	movs	r0, #34	@ 0x22
 8002a58:	f000 fc8c 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002a5c:	2022      	movs	r0, #34	@ 0x22
 8002a5e:	f000 fca5 	bl	80033ac <HAL_NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	@ 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	48000400 	.word	0x48000400

08002a74 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <I2Cx_Init+0x54>)
 8002a80:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a11      	ldr	r2, [pc, #68]	@ (8002acc <I2Cx_Init+0x58>)
 8002a86:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff89 	bl	80029c4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 f8ed 	bl	8003c92 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002ab8:	2100      	movs	r1, #0
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f001 fea4 	bl	8004808 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40005800 	.word	0x40005800
 8002acc:	00702681 	.word	0x00702681

08002ad0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	@ 0x28
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	72fb      	strb	r3, [r7, #11]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	b299      	uxth	r1, r3
 8002af2:	88f8      	ldrh	r0, [r7, #6]
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	4603      	mov	r3, r0
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f001 faa2 	bl	8004050 <HAL_I2C_Mem_Read>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f832 	bl	8002b84 <I2Cx_Error>
  }
  return status;
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b08a      	sub	sp, #40	@ 0x28
 8002b2e:	af04      	add	r7, sp, #16
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	4608      	mov	r0, r1
 8002b34:	4611      	mov	r1, r2
 8002b36:	461a      	mov	r2, r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	72fb      	strb	r3, [r7, #11]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	813b      	strh	r3, [r7, #8]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	88f8      	ldrh	r0, [r7, #6]
 8002b4e:	893a      	ldrh	r2, [r7, #8]
 8002b50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4603      	mov	r3, r0
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f001 f961 	bl	8003e28 <HAL_I2C_Mem_Write>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	4619      	mov	r1, r3
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f805 	bl	8002b84 <I2Cx_Error>
  }
  return status;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f001 f919 	bl	8003dc8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff6c 	bl	8002a74 <I2Cx_Init>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <SENSOR_IO_Init+0x10>)
 8002baa:	f7ff ff63 	bl	8002a74 <I2Cx_Init>
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000d18 	.word	0x20000d18

08002bb8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	71bb      	strb	r3, [r7, #6]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	79f9      	ldrb	r1, [r7, #7]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	1d7b      	adds	r3, r7, #5
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	4803      	ldr	r0, [pc, #12]	@ (8002be8 <SENSOR_IO_Write+0x30>)
 8002bdc:	f7ff ffa5 	bl	8002b2a <I2Cx_WriteMultiple>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000d18 	.word	0x20000d18

08002bec <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460a      	mov	r2, r1
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002c00:	79bb      	ldrb	r3, [r7, #6]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	79f9      	ldrb	r1, [r7, #7]
 8002c06:	2301      	movs	r3, #1
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	f107 030f 	add.w	r3, r7, #15
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2301      	movs	r3, #1
 8002c12:	4804      	ldr	r0, [pc, #16]	@ (8002c24 <SENSOR_IO_Read+0x38>)
 8002c14:	f7ff ff5c 	bl	8002ad0 <I2Cx_ReadMultiple>

  return read_value;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000d18 	.word	0x20000d18

08002c28 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	603a      	str	r2, [r7, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	460b      	mov	r3, r1
 8002c38:	71bb      	strb	r3, [r7, #6]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002c3e:	79bb      	ldrb	r3, [r7, #6]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	79f9      	ldrb	r1, [r7, #7]
 8002c44:	88bb      	ldrh	r3, [r7, #4]
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	4804      	ldr	r0, [pc, #16]	@ (8002c60 <SENSOR_IO_ReadMultiple+0x38>)
 8002c50:	f7ff ff3e 	bl	8002ad0 <I2Cx_ReadMultiple>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000d18 	.word	0x20000d18

08002c64 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <BSP_HSENSOR_Init+0x38>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	20be      	movs	r0, #190	@ 0xbe
 8002c70:	4798      	blx	r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	2bbc      	cmp	r3, #188	@ 0xbc
 8002c76:	d002      	beq.n	8002c7e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e009      	b.n	8002c92 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <BSP_HSENSOR_Init+0x3c>)
 8002c80:	4a06      	ldr	r2, [pc, #24]	@ (8002c9c <BSP_HSENSOR_Init+0x38>)
 8002c82:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <BSP_HSENSOR_Init+0x3c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	20be      	movs	r0, #190	@ 0xbe
 8002c8c:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002c92:	687b      	ldr	r3, [r7, #4]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000d6c 	.word	0x20000d6c

08002ca4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff99 	bl	8002bec <SENSOR_IO_Read>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	f023 0303 	bic.w	r3, r3, #3
 8002cd4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ce4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	2120      	movs	r1, #32
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff62 	bl	8002bb8 <SENSOR_IO_Write>
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002d0a:	f7ff ff4b 	bl	8002ba4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	210f      	movs	r1, #15
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff69 	bl	8002bec <SENSOR_IO_Read>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	f107 020c 	add.w	r2, r7, #12
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	21b0      	movs	r1, #176	@ 0xb0
 8002d3e:	f7ff ff73 	bl	8002c28 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002d42:	7b3b      	ldrb	r3, [r7, #12]
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	b2d8      	uxtb	r0, r3
 8002d56:	f107 020c 	add.w	r2, r7, #12
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	21b6      	movs	r1, #182	@ 0xb6
 8002d5e:	f7ff ff63 	bl	8002c28 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002d62:	7b7b      	ldrb	r3, [r7, #13]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	7b3b      	ldrb	r3, [r7, #12]
 8002d6a:	b21b      	sxth	r3, r3
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	f107 020c 	add.w	r2, r7, #12
 8002d78:	2302      	movs	r3, #2
 8002d7a:	21ba      	movs	r1, #186	@ 0xba
 8002d7c:	f7ff ff54 	bl	8002c28 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002d80:	7b7b      	ldrb	r3, [r7, #13]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	7b3b      	ldrb	r3, [r7, #12]
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	b2d8      	uxtb	r0, r3
 8002d92:	f107 020c 	add.w	r2, r7, #12
 8002d96:	2302      	movs	r3, #2
 8002d98:	21a8      	movs	r1, #168	@ 0xa8
 8002d9a:	f7ff ff45 	bl	8002c28 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002d9e:	7b7b      	ldrb	r3, [r7, #13]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	7b3b      	ldrb	r3, [r7, #12]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	4313      	orrs	r3, r2
 8002daa:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002dac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002db0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dbe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002dc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	ee07 3a90 	vmov	s15, r3
 8002dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002dd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002dd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfa:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002dfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e02:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002e0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e12:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002e58 <HTS221_H_ReadHumidity+0x130>
 8002e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	dd01      	ble.n	8002e24 <HTS221_H_ReadHumidity+0xfc>
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HTS221_H_ReadHumidity+0x134>)
 8002e22:	e00a      	b.n	8002e3a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d502      	bpl.n	8002e38 <HTS221_H_ReadHumidity+0x110>
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e000      	b.n	8002e3a <HTS221_H_ReadHumidity+0x112>
 8002e38:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002e3a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002e3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e40:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002e44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e48:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	447a0000 	.word	0x447a0000
 8002e5c:	447a0000 	.word	0x447a0000

08002e60 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2120      	movs	r1, #32
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff feba 	bl	8002bec <SENSOR_IO_Read>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	2120      	movs	r1, #32
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fe83 	bl	8002bb8 <SENSOR_IO_Write>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b088      	sub	sp, #32
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	b2d8      	uxtb	r0, r3
 8002ec8:	f107 0208 	add.w	r2, r7, #8
 8002ecc:	2302      	movs	r3, #2
 8002ece:	21b2      	movs	r1, #178	@ 0xb2
 8002ed0:	f7ff feaa 	bl	8002c28 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2135      	movs	r1, #53	@ 0x35
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fe86 	bl	8002bec <SENSOR_IO_Read>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	7a3b      	ldrb	r3, [r7, #8]
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	019b      	lsls	r3, r3, #6
 8002efc:	b21b      	sxth	r3, r3
 8002efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	7a7b      	ldrb	r3, [r7, #9]
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002f0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f10:	10db      	asrs	r3, r3, #3
 8002f12:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002f14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f18:	10db      	asrs	r3, r3, #3
 8002f1a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	b2d8      	uxtb	r0, r3
 8002f20:	f107 0208 	add.w	r2, r7, #8
 8002f24:	2304      	movs	r3, #4
 8002f26:	21bc      	movs	r1, #188	@ 0xbc
 8002f28:	f7ff fe7e 	bl	8002c28 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002f2c:	7a7b      	ldrb	r3, [r7, #9]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	b21a      	sxth	r2, r3
 8002f32:	7a3b      	ldrb	r3, [r7, #8]
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	4313      	orrs	r3, r2
 8002f38:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	7abb      	ldrb	r3, [r7, #10]
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	b2d8      	uxtb	r0, r3
 8002f4c:	f107 0208 	add.w	r2, r7, #8
 8002f50:	2302      	movs	r3, #2
 8002f52:	21aa      	movs	r1, #170	@ 0xaa
 8002f54:	f7ff fe68 	bl	8002c28 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002f58:	7a7b      	ldrb	r3, [r7, #9]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	b21a      	sxth	r2, r3
 8002f5e:	7a3b      	ldrb	r3, [r7, #8]
 8002f60:	b21b      	sxth	r3, r3
 8002f62:	4313      	orrs	r3, r2
 8002f64:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002f66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	ee07 3a90 	vmov	s15, r3
}
 8002fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f879 	bl	80030cc <LPS22HB_Init>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002ff0:	f7ff fdd8 	bl	8002ba4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fdf6 	bl	8002bec <SENSOR_IO_Read>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	74fb      	strb	r3, [r7, #19]
 8003022:	e013      	b.n	800304c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	3328      	adds	r3, #40	@ 0x28
 800302c:	b2db      	uxtb	r3, r3
 800302e:	7cfc      	ldrb	r4, [r7, #19]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7ff fdda 	bl	8002bec <SENSOR_IO_Read>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	f104 0318 	add.w	r3, r4, #24
 8003040:	443b      	add	r3, r7
 8003042:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	3301      	adds	r3, #1
 800304a:	74fb      	strb	r3, [r7, #19]
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d9e8      	bls.n	8003024 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	74fb      	strb	r3, [r7, #19]
 8003056:	e00f      	b.n	8003078 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	3318      	adds	r3, #24
 800305c:	443b      	add	r3, r7
 800305e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003062:	461a      	mov	r2, r3
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	3301      	adds	r3, #1
 8003076:	74fb      	strb	r3, [r7, #19]
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d9ec      	bls.n	8003058 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800308e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2264      	movs	r2, #100	@ 0x64
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	da01      	bge.n	80030a4 <LPS22HB_P_ReadPressure+0x94>
 80030a0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80030a4:	131b      	asrs	r3, r3, #12
 80030a6:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80030c8 <LPS22HB_P_ReadPressure+0xb8>
 80030b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80030be:	eeb0 0a67 	vmov.f32	s0, s15
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}
 80030c8:	42c80000 	.word	0x42c80000

080030cc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	211a      	movs	r1, #26
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fd85 	bl	8002bec <SENSOR_IO_Read>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	211a      	movs	r1, #26
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fd5a 	bl	8002bb8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2110      	movs	r1, #16
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fd6e 	bl	8002bec <SENSOR_IO_Read>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003122:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	f023 0302 	bic.w	r3, r3, #2
 800312a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	2110      	movs	r1, #16
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fd3b 	bl	8002bb8 <SENSOR_IO_Write>
}  
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f000 f902 	bl	800335e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800315a:	200f      	movs	r0, #15
 800315c:	f7ff fa5e 	bl	800261c <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	71fb      	strb	r3, [r7, #7]
 800316a:	e001      	b.n	8003170 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800316c:	f7fe fef2 	bl	8001f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003170:	79fb      	ldrb	r3, [r7, #7]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_IncTick+0x20>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_IncTick+0x24>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a04      	ldr	r2, [pc, #16]	@ (80031a0 <HAL_IncTick+0x24>)
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000014 	.word	0x20000014
 80031a0:	20000d70 	.word	0x20000d70

080031a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return uwTick;
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <HAL_GetTick+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000d70 	.word	0x20000d70

080031bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff ffee 	bl	80031a4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031d4:	d005      	beq.n	80031e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <HAL_Delay+0x44>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031e2:	bf00      	nop
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d8f7      	bhi.n	80031e4 <HAL_Delay+0x28>
  {
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000014 	.word	0x20000014

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	@ (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	@ (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	@ (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	@ 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	@ 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff4c 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003386:	f7ff ff61 	bl	800324c <__NVIC_GetPriorityGrouping>
 800338a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	6978      	ldr	r0, [r7, #20]
 8003392:	f7ff ffb1 	bl	80032f8 <NVIC_EncodePriority>
 8003396:	4602      	mov	r2, r0
 8003398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff80 	bl	80032a4 <__NVIC_SetPriority>
}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff54 	bl	8003268 <__NVIC_EnableIRQ>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0ac      	b.n	8003534 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f8b2 	bl	8003548 <DFSDM_GetChannelFromInstance>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4a55      	ldr	r2, [pc, #340]	@ (800353c <HAL_DFSDM_ChannelInit+0x174>)
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e09f      	b.n	8003534 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe fdd5 	bl	8001fa4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80033fa:	4b51      	ldr	r3, [pc, #324]	@ (8003540 <HAL_DFSDM_ChannelInit+0x178>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3301      	adds	r3, #1
 8003400:	4a4f      	ldr	r2, [pc, #316]	@ (8003540 <HAL_DFSDM_ChannelInit+0x178>)
 8003402:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003404:	4b4e      	ldr	r3, [pc, #312]	@ (8003540 <HAL_DFSDM_ChannelInit+0x178>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d125      	bne.n	8003458 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800340c:	4b4d      	ldr	r3, [pc, #308]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4c      	ldr	r2, [pc, #304]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 8003412:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003416:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003418:	4b4a      	ldr	r3, [pc, #296]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4948      	ldr	r1, [pc, #288]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a46      	ldr	r2, [pc, #280]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 800342c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003430:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800343a:	4b42      	ldr	r3, [pc, #264]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	493f      	ldr	r1, [pc, #252]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800344c:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3c      	ldr	r2, [pc, #240]	@ (8003544 <HAL_DFSDM_ChannelInit+0x17c>)
 8003452:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003456:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003466:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003476:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800347c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 020f 	bic.w	r2, r2, #15
 8003494:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80034bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f002 0207 	and.w	r2, r2, #7
 80034e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003514:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f810 	bl	8003548 <DFSDM_GetChannelFromInstance>
 8003528:	4602      	mov	r2, r0
 800352a:	4904      	ldr	r1, [pc, #16]	@ (800353c <HAL_DFSDM_ChannelInit+0x174>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000d78 	.word	0x20000d78
 8003540:	20000d74 	.word	0x20000d74
 8003544:	40016000 	.word	0x40016000

08003548 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d102      	bne.n	800355e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e02b      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a19      	ldr	r2, [pc, #100]	@ (80035c8 <DFSDM_GetChannelFromInstance+0x80>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d102      	bne.n	800356c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e024      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <DFSDM_GetChannelFromInstance+0x84>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003574:	2302      	movs	r3, #2
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e01d      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a14      	ldr	r2, [pc, #80]	@ (80035d0 <DFSDM_GetChannelFromInstance+0x88>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d102      	bne.n	8003588 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003582:	2304      	movs	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e016      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <DFSDM_GetChannelFromInstance+0x8c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d102      	bne.n	8003596 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003590:	2305      	movs	r3, #5
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e00f      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0f      	ldr	r2, [pc, #60]	@ (80035d8 <DFSDM_GetChannelFromInstance+0x90>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d102      	bne.n	80035a4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800359e:	2306      	movs	r3, #6
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e008      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <DFSDM_GetChannelFromInstance+0x94>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d102      	bne.n	80035b2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80035ac:	2307      	movs	r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e001      	b.n	80035b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80035b2:	2303      	movs	r3, #3
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40016000 	.word	0x40016000
 80035c8:	40016020 	.word	0x40016020
 80035cc:	40016040 	.word	0x40016040
 80035d0:	40016080 	.word	0x40016080
 80035d4:	400160a0 	.word	0x400160a0
 80035d8:	400160c0 	.word	0x400160c0
 80035dc:	400160e0 	.word	0x400160e0

080035e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d008      	beq.n	800360a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2204      	movs	r2, #4
 80035fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e022      	b.n	8003650 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 020e 	bic.w	r2, r2, #14
 8003618:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 021c 	and.w	r2, r3, #28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d005      	beq.n	8003680 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2204      	movs	r2, #4
 8003678:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e029      	b.n	80036d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 020e 	bic.w	r2, r2, #14
 800368e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a4:	f003 021c 	and.w	r2, r3, #28
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
    }
  }
  return status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ee:	e17f      	b.n	80039f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2101      	movs	r1, #1
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8171 	beq.w	80039ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d005      	beq.n	8003720 <HAL_GPIO_Init+0x40>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d130      	bne.n	8003782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003756:	2201      	movs	r2, #1
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0201 	and.w	r2, r3, #1
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b03      	cmp	r3, #3
 800378c:	d118      	bne.n	80037c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	08db      	lsrs	r3, r3, #3
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d017      	beq.n	80037fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d123      	bne.n	8003850 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80ac 	beq.w	80039ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	4b5f      	ldr	r3, [pc, #380]	@ (8003a10 <HAL_GPIO_Init+0x330>)
 8003894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003896:	4a5e      	ldr	r2, [pc, #376]	@ (8003a10 <HAL_GPIO_Init+0x330>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6613      	str	r3, [r2, #96]	@ 0x60
 800389e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a10 <HAL_GPIO_Init+0x330>)
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003a14 <HAL_GPIO_Init+0x334>)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	3302      	adds	r3, #2
 80038b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	220f      	movs	r2, #15
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038d4:	d025      	beq.n	8003922 <HAL_GPIO_Init+0x242>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a18 <HAL_GPIO_Init+0x338>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01f      	beq.n	800391e <HAL_GPIO_Init+0x23e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4e      	ldr	r2, [pc, #312]	@ (8003a1c <HAL_GPIO_Init+0x33c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d019      	beq.n	800391a <HAL_GPIO_Init+0x23a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a20 <HAL_GPIO_Init+0x340>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_GPIO_Init+0x236>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003a24 <HAL_GPIO_Init+0x344>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00d      	beq.n	8003912 <HAL_GPIO_Init+0x232>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a28 <HAL_GPIO_Init+0x348>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <HAL_GPIO_Init+0x22e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4a      	ldr	r2, [pc, #296]	@ (8003a2c <HAL_GPIO_Init+0x34c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_GPIO_Init+0x22a>
 8003906:	2306      	movs	r3, #6
 8003908:	e00c      	b.n	8003924 <HAL_GPIO_Init+0x244>
 800390a:	2307      	movs	r3, #7
 800390c:	e00a      	b.n	8003924 <HAL_GPIO_Init+0x244>
 800390e:	2305      	movs	r3, #5
 8003910:	e008      	b.n	8003924 <HAL_GPIO_Init+0x244>
 8003912:	2304      	movs	r3, #4
 8003914:	e006      	b.n	8003924 <HAL_GPIO_Init+0x244>
 8003916:	2303      	movs	r3, #3
 8003918:	e004      	b.n	8003924 <HAL_GPIO_Init+0x244>
 800391a:	2302      	movs	r3, #2
 800391c:	e002      	b.n	8003924 <HAL_GPIO_Init+0x244>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_GPIO_Init+0x244>
 8003922:	2300      	movs	r3, #0
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	f002 0203 	and.w	r2, r2, #3
 800392a:	0092      	lsls	r2, r2, #2
 800392c:	4093      	lsls	r3, r2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003934:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <HAL_GPIO_Init+0x334>)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	3302      	adds	r3, #2
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003942:	4b3b      	ldr	r3, [pc, #236]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003966:	4a32      	ldr	r2, [pc, #200]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800396c:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003990:	4a27      	ldr	r2, [pc, #156]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003996:	4b26      	ldr	r3, [pc, #152]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039e4:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <HAL_GPIO_Init+0x350>)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3301      	adds	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f47f ae78 	bne.w	80036f0 <HAL_GPIO_Init+0x10>
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40010000 	.word	0x40010000
 8003a18:	48000400 	.word	0x48000400
 8003a1c:	48000800 	.word	0x48000800
 8003a20:	48000c00 	.word	0x48000c00
 8003a24:	48001000 	.word	0x48001000
 8003a28:	48001400 	.word	0x48001400
 8003a2c:	48001800 	.word	0x48001800
 8003a30:	40010400 	.word	0x40010400

08003a34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003a42:	e0cd      	b.n	8003be0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a44:	2201      	movs	r2, #1
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80c0 	beq.w	8003bda <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003a5a:	4a68      	ldr	r2, [pc, #416]	@ (8003bfc <HAL_GPIO_DeInit+0x1c8>)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	220f      	movs	r2, #15
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a82:	d025      	beq.n	8003ad0 <HAL_GPIO_DeInit+0x9c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a5e      	ldr	r2, [pc, #376]	@ (8003c00 <HAL_GPIO_DeInit+0x1cc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01f      	beq.n	8003acc <HAL_GPIO_DeInit+0x98>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c04 <HAL_GPIO_DeInit+0x1d0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d019      	beq.n	8003ac8 <HAL_GPIO_DeInit+0x94>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a5c      	ldr	r2, [pc, #368]	@ (8003c08 <HAL_GPIO_DeInit+0x1d4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_GPIO_DeInit+0x90>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c0c <HAL_GPIO_DeInit+0x1d8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_GPIO_DeInit+0x8c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8003c10 <HAL_GPIO_DeInit+0x1dc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <HAL_GPIO_DeInit+0x88>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a59      	ldr	r2, [pc, #356]	@ (8003c14 <HAL_GPIO_DeInit+0x1e0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_GPIO_DeInit+0x84>
 8003ab4:	2306      	movs	r3, #6
 8003ab6:	e00c      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003ab8:	2307      	movs	r3, #7
 8003aba:	e00a      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003abc:	2305      	movs	r3, #5
 8003abe:	e008      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e006      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e004      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e002      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_GPIO_DeInit+0x9e>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	f002 0203 	and.w	r2, r2, #3
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	4093      	lsls	r3, r2
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d132      	bne.n	8003b48 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	494b      	ldr	r1, [pc, #300]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003af0:	4b49      	ldr	r3, [pc, #292]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	4947      	ldr	r1, [pc, #284]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003afe:	4b46      	ldr	r3, [pc, #280]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	4944      	ldr	r1, [pc, #272]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003b0c:	4b42      	ldr	r3, [pc, #264]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	4940      	ldr	r1, [pc, #256]	@ (8003c18 <HAL_GPIO_DeInit+0x1e4>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003b2a:	4a34      	ldr	r2, [pc, #208]	@ (8003bfc <HAL_GPIO_DeInit+0x1c8>)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	4830      	ldr	r0, [pc, #192]	@ (8003bfc <HAL_GPIO_DeInit+0x1c8>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	400a      	ands	r2, r1
 8003b42:	3302      	adds	r3, #2
 8003b44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	2103      	movs	r1, #3
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	08da      	lsrs	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3208      	adds	r2, #8
 8003b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	220f      	movs	r2, #15
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	08d2      	lsrs	r2, r2, #3
 8003b7c:	4019      	ands	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2103      	movs	r1, #3
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	401a      	ands	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2103      	movs	r1, #3
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bca:	2101      	movs	r1, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f af2b 	bne.w	8003a44 <HAL_GPIO_DeInit+0x10>
  }
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	48000400 	.word	0x48000400
 8003c04:	48000800 	.word	0x48000800
 8003c08:	48000c00 	.word	0x48000c00
 8003c0c:	48001000 	.word	0x48001000
 8003c10:	48001400 	.word	0x48001400
 8003c14:	48001800 	.word	0x48001800
 8003c18:	40010400 	.word	0x40010400

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c38:	e002      	b.n	8003c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c56:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d006      	beq.n	8003c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c62:	4a05      	ldr	r2, [pc, #20]	@ (8003c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f806 	bl	8003c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40010400 	.word	0x40010400

08003c7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e08d      	b.n	8003dc0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fe f9d7 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2224      	movs	r2, #36	@ 0x24
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ce2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	e006      	b.n	8003d1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d108      	bne.n	8003d34 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	e007      	b.n	8003d44 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d42:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d56:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69d9      	ldr	r1, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e021      	b.n	8003e1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2224      	movs	r2, #36	@ 0x24
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe f998 	bl	8002128 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	f040 80f9 	bne.w	8004042 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x34>
 8003e56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0ed      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Mem_Write+0x4e>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e0e6      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e7e:	f7ff f991 	bl	80031a4 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2319      	movs	r3, #25
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fac3 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0d1      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	@ 0x21
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ec8:	88f8      	ldrh	r0, [r7, #6]
 8003eca:	893a      	ldrh	r2, [r7, #8]
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f9d3 	bl	8004284 <I2C_RequestMemoryWrite>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0a9      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2bff      	cmp	r3, #255	@ 0xff
 8003ef8:	d90e      	bls.n	8003f18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	22ff      	movs	r2, #255	@ 0xff
 8003efe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	8979      	ldrh	r1, [r7, #10]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fc47 	bl	80047a4 <I2C_TransferConfig>
 8003f16:	e00f      	b.n	8003f38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	8979      	ldrh	r1, [r7, #10]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fc36 	bl	80047a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fac6 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e07b      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d034      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x1c8>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d130      	bne.n	8003ff0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	2200      	movs	r2, #0
 8003f96:	2180      	movs	r1, #128	@ 0x80
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa3f 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e04d      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2bff      	cmp	r3, #255	@ 0xff
 8003fb0:	d90e      	bls.n	8003fd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	@ 0xff
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	8979      	ldrh	r1, [r7, #10]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fbeb 	bl	80047a4 <I2C_TransferConfig>
 8003fce:	e00f      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	8979      	ldrh	r1, [r7, #10]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fbda 	bl	80047a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d19e      	bne.n	8003f38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 faac 	bl	800455c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e01a      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2220      	movs	r2, #32
 8004014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_I2C_Mem_Write+0x224>)
 8004022:	400b      	ands	r3, r1
 8004024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b20      	cmp	r3, #32
 8004074:	f040 80fd 	bne.w	8004272 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_I2C_Mem_Read+0x34>
 800407e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0f1      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_I2C_Mem_Read+0x4e>
 800409a:	2302      	movs	r3, #2
 800409c:	e0ea      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040a6:	f7ff f87d 	bl	80031a4 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2319      	movs	r3, #25
 80040b2:	2201      	movs	r2, #1
 80040b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f9af 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0d5      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2222      	movs	r2, #34	@ 0x22
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2240      	movs	r2, #64	@ 0x40
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f0:	88f8      	ldrh	r0, [r7, #6]
 80040f2:	893a      	ldrh	r2, [r7, #8]
 80040f4:	8979      	ldrh	r1, [r7, #10]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4603      	mov	r3, r0
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f913 	bl	800432c <I2C_RequestMemoryRead>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0ad      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2bff      	cmp	r3, #255	@ 0xff
 8004120:	d90e      	bls.n	8004140 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	b2da      	uxtb	r2, r3
 800412e:	8979      	ldrh	r1, [r7, #10]
 8004130:	4b52      	ldr	r3, [pc, #328]	@ (800427c <HAL_I2C_Mem_Read+0x22c>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fb33 	bl	80047a4 <I2C_TransferConfig>
 800413e:	e00f      	b.n	8004160 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414e:	b2da      	uxtb	r2, r3
 8004150:	8979      	ldrh	r1, [r7, #10]
 8004152:	4b4a      	ldr	r3, [pc, #296]	@ (800427c <HAL_I2C_Mem_Read+0x22c>)
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fb22 	bl	80047a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	2200      	movs	r2, #0
 8004168:	2104      	movs	r1, #4
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f956 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07c      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d034      	beq.n	8004220 <HAL_I2C_Mem_Read+0x1d0>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d130      	bne.n	8004220 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2200      	movs	r2, #0
 80041c6:	2180      	movs	r1, #128	@ 0x80
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f927 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04d      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2bff      	cmp	r3, #255	@ 0xff
 80041e0:	d90e      	bls.n	8004200 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fad3 	bl	80047a4 <I2C_TransferConfig>
 80041fe:	e00f      	b.n	8004220 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	b2da      	uxtb	r2, r3
 8004210:	8979      	ldrh	r1, [r7, #10]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fac2 	bl	80047a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d19a      	bne.n	8004160 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f994 	bl	800455c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e01a      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2220      	movs	r2, #32
 8004244:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_I2C_Mem_Read+0x230>)
 8004252:	400b      	ands	r3, r1
 8004254:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e000      	b.n	8004274 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	80002400 	.word	0x80002400
 8004280:	fe00e800 	.word	0xfe00e800

08004284 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	8979      	ldrh	r1, [r7, #10]
 80042a4:	4b20      	ldr	r3, [pc, #128]	@ (8004328 <I2C_RequestMemoryWrite+0xa4>)
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fa79 	bl	80047a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	69b9      	ldr	r1, [r7, #24]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f909 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e02c      	b.n	8004320 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80042d6:	e015      	b.n	8004304 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f8ef 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e012      	b.n	8004320 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042fa:	893b      	ldrh	r3, [r7, #8]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2200      	movs	r2, #0
 800430c:	2180      	movs	r1, #128	@ 0x80
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f884 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	80002000 	.word	0x80002000

0800432c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	4603      	mov	r3, r0
 800433c:	817b      	strh	r3, [r7, #10]
 800433e:	460b      	mov	r3, r1
 8004340:	813b      	strh	r3, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	8979      	ldrh	r1, [r7, #10]
 800434c:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <I2C_RequestMemoryRead+0xa4>)
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2300      	movs	r3, #0
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fa26 	bl	80047a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	69b9      	ldr	r1, [r7, #24]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f8b6 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e02c      	b.n	80043c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004372:	893b      	ldrh	r3, [r7, #8]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28
 800437c:	e015      	b.n	80043aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800437e:	893b      	ldrh	r3, [r7, #8]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	b29b      	uxth	r3, r3
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	69b9      	ldr	r1, [r7, #24]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f89c 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e012      	b.n	80043c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a0:	893b      	ldrh	r3, [r7, #8]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2140      	movs	r1, #64	@ 0x40
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f831 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	80002000 	.word	0x80002000

080043d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d103      	bne.n	80043f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d007      	beq.n	8004410 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	619a      	str	r2, [r3, #24]
  }
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800442c:	e03b      	b.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8d6 	bl	80045e4 <I2C_IsErrorOccurred>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e041      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004448:	d02d      	beq.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe feab 	bl	80031a4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <I2C_WaitOnFlagUntilTimeout+0x44>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d122      	bne.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	429a      	cmp	r2, r3
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	429a      	cmp	r2, r3
 800447c:	d113      	bne.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d0b4      	beq.n	800442e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044da:	e033      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f87f 	bl	80045e4 <I2C_IsErrorOccurred>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e031      	b.n	8004554 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044f6:	d025      	beq.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7fe fe54 	bl	80031a4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11a      	bne.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d013      	beq.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d1c4      	bne.n	80044dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004568:	e02f      	b.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f838 	bl	80045e4 <I2C_IsErrorOccurred>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e02d      	b.n	80045da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fe11 	bl	80031a4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11a      	bne.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d013      	beq.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e007      	b.n	80045da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d1c8      	bne.n	800456a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	@ 0x28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d068      	beq.n	80046e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2210      	movs	r2, #16
 8004616:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004618:	e049      	b.n	80046ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004620:	d045      	beq.n	80046ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fe fdbf 	bl	80031a4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_IsErrorOccurred+0x54>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d13a      	bne.n	80046ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004642:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800464a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465a:	d121      	bne.n	80046a0 <I2C_IsErrorOccurred+0xbc>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004662:	d01d      	beq.n	80046a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b20      	cmp	r3, #32
 8004668:	d01a      	beq.n	80046a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004678:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800467a:	f7fe fd93 	bl	80031a4 <HAL_GetTick>
 800467e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004680:	e00e      	b.n	80046a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004682:	f7fe fd8f 	bl	80031a4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b19      	cmp	r3, #25
 800468e:	d907      	bls.n	80046a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f043 0320 	orr.w	r3, r3, #32
 8004696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800469e:	e006      	b.n	80046ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d1e9      	bne.n	8004682 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d003      	beq.n	80046c4 <I2C_IsErrorOccurred+0xe0>
 80046bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0aa      	beq.n	800461a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2220      	movs	r2, #32
 80046d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f043 0304 	orr.w	r3, r3, #4
 80046da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f043 0308 	orr.w	r3, r3, #8
 800471c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01c      	beq.n	8004792 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff fe3b 	bl	80043d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <I2C_IsErrorOccurred+0x1bc>)
 800476a:	400b      	ands	r3, r1
 800476c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004796:	4618      	mov	r0, r3
 8004798:	3728      	adds	r7, #40	@ 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	fe00e800 	.word	0xfe00e800

080047a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607b      	str	r3, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	817b      	strh	r3, [r7, #10]
 80047b2:	4613      	mov	r3, r2
 80047b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047bc:	7a7b      	ldrb	r3, [r7, #9]
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	0d5b      	lsrs	r3, r3, #21
 80047de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047e2:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <I2C_TransferConfig+0x60>)
 80047e4:	430b      	orrs	r3, r1
 80047e6:	43db      	mvns	r3, r3
 80047e8:	ea02 0103 	and.w	r1, r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	03ff63ff 	.word	0x03ff63ff

08004808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b20      	cmp	r3, #32
 800481c:	d138      	bne.n	8004890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004828:	2302      	movs	r3, #2
 800482a:	e032      	b.n	8004892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2224      	movs	r2, #36	@ 0x24
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800485a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d139      	bne.n	8004928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048be:	2302      	movs	r3, #2
 80048c0:	e033      	b.n	800492a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	@ 0x24
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af02      	add	r7, sp, #8
 800493c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e101      	b.n	8004b4c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fd fdc1 	bl	80024e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2203      	movs	r2, #3
 8004966:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f004 fdc0 	bl	80094fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7c1a      	ldrb	r2, [r3, #16]
 8004982:	f88d 2000 	strb.w	r2, [sp]
 8004986:	3304      	adds	r3, #4
 8004988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800498a:	f004 fd89 	bl	80094a0 <USB_CoreInit>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0d5      	b.n	8004b4c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 fdb8 	bl	800951c <USB_SetCurrentMode>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0c6      	b.n	8004b4c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	e04a      	b.n	8004a5a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	3315      	adds	r3, #21
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049d8:	7bfa      	ldrb	r2, [r7, #15]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	3314      	adds	r3, #20
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	b298      	uxth	r0, r3
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	332e      	adds	r3, #46	@ 0x2e
 8004a00:	4602      	mov	r2, r0
 8004a02:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	3318      	adds	r3, #24
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	331c      	adds	r3, #28
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	3320      	adds	r3, #32
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3324      	adds	r3, #36	@ 0x24
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	3301      	adds	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	791b      	ldrb	r3, [r3, #4]
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3af      	bcc.n	80049c4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e044      	b.n	8004af4 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	3301      	adds	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d3b5      	bcc.n	8004a6a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	7c1a      	ldrb	r2, [r3, #16]
 8004b06:	f88d 2000 	strb.w	r2, [sp]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0e:	f004 fd51 	bl	80095b4 <USB_DevInit>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e013      	b.n	8004b4c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7b1b      	ldrb	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d102      	bne.n	8004b40 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f80a 	bl	8004b54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f004 fef6 	bl	8009936 <USB_DevDisconnect>

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	f043 0303 	orr.w	r3, r3, #3
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	@ (8004bb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40007000 	.word	0x40007000

08004bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004bc0:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40007000 	.word	0x40007000

08004bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be6:	d130      	bne.n	8004c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004be8:	4b23      	ldr	r3, [pc, #140]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf4:	d038      	beq.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf6:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c06:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2232      	movs	r2, #50	@ 0x32
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	4a1b      	ldr	r2, [pc, #108]	@ (8004c80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0c9b      	lsrs	r3, r3, #18
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1c:	e002      	b.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c24:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c30:	d102      	bne.n	8004c38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f2      	bne.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c38:	4b0f      	ldr	r3, [pc, #60]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c44:	d110      	bne.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e00f      	b.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c56:	d007      	beq.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c58:	4b07      	ldr	r3, [pc, #28]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c60:	4a05      	ldr	r2, [pc, #20]	@ (8004c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40007000 	.word	0x40007000
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	431bde83 	.word	0x431bde83

08004c84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ca0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c92:	6053      	str	r3, [r2, #4]
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40007000 	.word	0x40007000

08004ca4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004cac:	f7fe fa7a 	bl	80031a4 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e063      	b.n	8004d84 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fd fa4d 	bl	8002170 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004cd6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f858 	bl	8004d90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	021a      	lsls	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2120      	movs	r1, #32
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f850 	bl	8004dac <QSPI_WaitFlagStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d131      	bne.n	8004d7a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d20:	f023 0310 	bic.w	r3, r3, #16
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6852      	ldr	r2, [r2, #4]
 8004d28:	0611      	lsls	r1, r2, #24
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68d2      	ldr	r2, [r2, #12]
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	4b13      	ldr	r3, [pc, #76]	@ (8004d8c <HAL_QSPI_Init+0xe8>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6912      	ldr	r2, [r2, #16]
 8004d46:	0411      	lsls	r1, r2, #16
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6952      	ldr	r2, [r2, #20]
 8004d4c:	4311      	orrs	r1, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6992      	ldr	r2, [r2, #24]
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004d82:	7afb      	ldrb	r3, [r7, #11]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	ffe0f8fe 	.word	0xffe0f8fe

08004d90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004dbc:	e01a      	b.n	8004df4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dc4:	d016      	beq.n	8004df4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fe f9ed 	bl	80031a4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2204      	movs	r2, #4
 8004de0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de8:	f043 0201 	orr.w	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e00e      	b.n	8004e12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d1d6      	bne.n	8004dbe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e3ca      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	4b97      	ldr	r3, [pc, #604]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e38:	4b94      	ldr	r3, [pc, #592]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80e4 	beq.w	8005018 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4a>
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	f040 808b 	bne.w	8004f74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 8087 	bne.w	8004f74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e66:	4b89      	ldr	r3, [pc, #548]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x62>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e3a2      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	4b82      	ldr	r3, [pc, #520]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_RCC_OscConfig+0x7c>
 8004e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e96:	e005      	b.n	8004ea4 <HAL_RCC_OscConfig+0x88>
 8004e98:	4b7c      	ldr	r3, [pc, #496]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d223      	bcs.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fd87 	bl	80059c0 <RCC_SetFlashLatencyFromMSIRange>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e383      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ebc:	4b73      	ldr	r3, [pc, #460]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a72      	ldr	r2, [pc, #456]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004ec2:	f043 0308 	orr.w	r3, r3, #8
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b70      	ldr	r3, [pc, #448]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	496d      	ldr	r1, [pc, #436]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eda:	4b6c      	ldr	r3, [pc, #432]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	4968      	ldr	r1, [pc, #416]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
 8004eee:	e025      	b.n	8004f3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef0:	4b66      	ldr	r3, [pc, #408]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a65      	ldr	r2, [pc, #404]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004ef6:	f043 0308 	orr.w	r3, r3, #8
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b63      	ldr	r3, [pc, #396]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4960      	ldr	r1, [pc, #384]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	495b      	ldr	r1, [pc, #364]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fd47 	bl	80059c0 <RCC_SetFlashLatencyFromMSIRange>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e343      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f3c:	f000 fc4a 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b52      	ldr	r3, [pc, #328]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	4950      	ldr	r1, [pc, #320]	@ (8005090 <HAL_RCC_OscConfig+0x274>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	4a4e      	ldr	r2, [pc, #312]	@ (8005094 <HAL_RCC_OscConfig+0x278>)
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fd fb5b 	bl	800261c <HAL_InitTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d052      	beq.n	8005016 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	e327      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d032      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f7c:	4b43      	ldr	r3, [pc, #268]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a42      	ldr	r2, [pc, #264]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f88:	f7fe f90c 	bl	80031a4 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f90:	f7fe f908 	bl	80031a4 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e310      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fae:	4b37      	ldr	r3, [pc, #220]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a36      	ldr	r2, [pc, #216]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fb4:	f043 0308 	orr.w	r3, r3, #8
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	4931      	ldr	r1, [pc, #196]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	492c      	ldr	r1, [pc, #176]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	604b      	str	r3, [r1, #4]
 8004fe0:	e01a      	b.n	8005018 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a29      	ldr	r2, [pc, #164]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fee:	f7fe f8d9 	bl	80031a4 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ff6:	f7fe f8d5 	bl	80031a4 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e2dd      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005008:	4b20      	ldr	r3, [pc, #128]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x1da>
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005016:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d074      	beq.n	800510e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b08      	cmp	r3, #8
 8005028:	d005      	beq.n	8005036 <HAL_RCC_OscConfig+0x21a>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d10e      	bne.n	800504e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d10b      	bne.n	800504e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005036:	4b15      	ldr	r3, [pc, #84]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d064      	beq.n	800510c <HAL_RCC_OscConfig+0x2f0>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d160      	bne.n	800510c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e2ba      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005056:	d106      	bne.n	8005066 <HAL_RCC_OscConfig+0x24a>
 8005058:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0b      	ldr	r2, [pc, #44]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 800505e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e026      	b.n	80050b4 <HAL_RCC_OscConfig+0x298>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800506e:	d115      	bne.n	800509c <HAL_RCC_OscConfig+0x280>
 8005070:	4b06      	ldr	r3, [pc, #24]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a05      	ldr	r2, [pc, #20]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8005076:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b03      	ldr	r3, [pc, #12]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a02      	ldr	r2, [pc, #8]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e014      	b.n	80050b4 <HAL_RCC_OscConfig+0x298>
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000
 8005090:	08010464 	.word	0x08010464
 8005094:	20000000 	.word	0x20000000
 8005098:	20000010 	.word	0x20000010
 800509c:	4ba0      	ldr	r3, [pc, #640]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a9f      	ldr	r2, [pc, #636]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b9d      	ldr	r3, [pc, #628]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a9c      	ldr	r2, [pc, #624]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80050ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fe f872 	bl	80031a4 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c4:	f7fe f86e 	bl	80031a4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	@ 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e276      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d6:	4b92      	ldr	r3, [pc, #584]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x2a8>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe f85e 	bl	80031a4 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fe f85a 	bl	80031a4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	@ 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e262      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050fe:	4b88      	ldr	r3, [pc, #544]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x2d0>
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d060      	beq.n	80051dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d005      	beq.n	800512c <HAL_RCC_OscConfig+0x310>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d119      	bne.n	800515a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d116      	bne.n	800515a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512c:	4b7c      	ldr	r3, [pc, #496]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_OscConfig+0x328>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e23f      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005144:	4b76      	ldr	r3, [pc, #472]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	4973      	ldr	r1, [pc, #460]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005158:	e040      	b.n	80051dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d023      	beq.n	80051aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005162:	4b6f      	ldr	r3, [pc, #444]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6e      	ldr	r2, [pc, #440]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800516c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fe f819 	bl	80031a4 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005176:	f7fe f815 	bl	80031a4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e21d      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005188:	4b65      	ldr	r3, [pc, #404]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b62      	ldr	r3, [pc, #392]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	495f      	ldr	r1, [pc, #380]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
 80051a8:	e018      	b.n	80051dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80051b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fd fff5 	bl	80031a4 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051be:	f7fd fff1 	bl	80031a4 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e1f9      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d0:	4b53      	ldr	r3, [pc, #332]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d03c      	beq.n	8005262 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01c      	beq.n	800522a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80051f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fd ffd0 	bl	80031a4 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005208:	f7fd ffcc 	bl	80031a4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1d4      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800521c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCC_OscConfig+0x3ec>
 8005228:	e01b      	b.n	8005262 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522a:	4b3d      	ldr	r3, [pc, #244]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005230:	4a3b      	ldr	r2, [pc, #236]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fd ffb3 	bl	80031a4 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005242:	f7fd ffaf 	bl	80031a4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1b7      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005254:	4b32      	ldr	r3, [pc, #200]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1ef      	bne.n	8005242 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80a6 	beq.w	80053bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005274:	4b2a      	ldr	r3, [pc, #168]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b27      	ldr	r3, [pc, #156]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005284:	4a26      	ldr	r2, [pc, #152]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528a:	6593      	str	r3, [r2, #88]	@ 0x58
 800528c:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005298:	2301      	movs	r3, #1
 800529a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529c:	4b21      	ldr	r3, [pc, #132]	@ (8005324 <HAL_RCC_OscConfig+0x508>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d118      	bne.n	80052da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005324 <HAL_RCC_OscConfig+0x508>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005324 <HAL_RCC_OscConfig+0x508>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b4:	f7fd ff76 	bl	80031a4 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fd ff72 	bl	80031a4 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e17a      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ce:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_RCC_OscConfig+0x508>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d108      	bne.n	80052f4 <HAL_RCC_OscConfig+0x4d8>
 80052e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052f2:	e029      	b.n	8005348 <HAL_RCC_OscConfig+0x52c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	d115      	bne.n	8005328 <HAL_RCC_OscConfig+0x50c>
 80052fc:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005302:	4a07      	ldr	r2, [pc, #28]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800530c:	4b04      	ldr	r3, [pc, #16]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005312:	4a03      	ldr	r2, [pc, #12]	@ (8005320 <HAL_RCC_OscConfig+0x504>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800531c:	e014      	b.n	8005348 <HAL_RCC_OscConfig+0x52c>
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	40007000 	.word	0x40007000
 8005328:	4b9c      	ldr	r3, [pc, #624]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532e:	4a9b      	ldr	r2, [pc, #620]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005338:	4b98      	ldr	r3, [pc, #608]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	4a97      	ldr	r2, [pc, #604]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fd ff28 	bl	80031a4 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fd ff24 	bl	80031a4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e12a      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536e:	4b8b      	ldr	r3, [pc, #556]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ed      	beq.n	8005358 <HAL_RCC_OscConfig+0x53c>
 800537c:	e015      	b.n	80053aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537e:	f7fd ff11 	bl	80031a4 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005384:	e00a      	b.n	800539c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fd ff0d 	bl	80031a4 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e113      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800539c:	4b7f      	ldr	r3, [pc, #508]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ed      	bne.n	8005386 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d105      	bne.n	80053bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b0:	4b7a      	ldr	r3, [pc, #488]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	4a79      	ldr	r2, [pc, #484]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80053b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80fe 	beq.w	80055c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 80d0 	bne.w	8005570 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053d0:	4b72      	ldr	r3, [pc, #456]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f003 0203 	and.w	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d130      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	3b01      	subs	r3, #1
 80053f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d127      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005400:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d11f      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005410:	2a07      	cmp	r2, #7
 8005412:	bf14      	ite	ne
 8005414:	2201      	movne	r2, #1
 8005416:	2200      	moveq	r2, #0
 8005418:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800541a:	4293      	cmp	r3, r2
 800541c:	d113      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	3b01      	subs	r3, #1
 800542c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d109      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	3b01      	subs	r3, #1
 8005440:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d06e      	beq.n	8005524 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d069      	beq.n	8005520 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800544c:	4b53      	ldr	r3, [pc, #332]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005458:	4b50      	ldr	r3, [pc, #320]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0ad      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005468:	4b4c      	ldr	r3, [pc, #304]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a4b      	ldr	r2, [pc, #300]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005472:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005474:	f7fd fe96 	bl	80031a4 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fe92 	bl	80031a4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e09a      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800548e:	4b43      	ldr	r3, [pc, #268]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800549a:	4b40      	ldr	r3, [pc, #256]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	4b40      	ldr	r3, [pc, #256]	@ (80055a0 <HAL_RCC_OscConfig+0x784>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054aa:	3a01      	subs	r2, #1
 80054ac:	0112      	lsls	r2, r2, #4
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054b4:	0212      	lsls	r2, r2, #8
 80054b6:	4311      	orrs	r1, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054bc:	0852      	lsrs	r2, r2, #1
 80054be:	3a01      	subs	r2, #1
 80054c0:	0552      	lsls	r2, r2, #21
 80054c2:	4311      	orrs	r1, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	3a01      	subs	r2, #1
 80054cc:	0652      	lsls	r2, r2, #25
 80054ce:	4311      	orrs	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054d4:	0912      	lsrs	r2, r2, #4
 80054d6:	0452      	lsls	r2, r2, #17
 80054d8:	430a      	orrs	r2, r1
 80054da:	4930      	ldr	r1, [pc, #192]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054e0:	4b2e      	ldr	r3, [pc, #184]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2d      	ldr	r2, [pc, #180]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80054e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ec:	4b2b      	ldr	r3, [pc, #172]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054f8:	f7fd fe54 	bl	80031a4 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd fe50 	bl	80031a4 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e058      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005512:	4b22      	ldr	r3, [pc, #136]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800551e:	e050      	b.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e04f      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005524:	4b1d      	ldr	r3, [pc, #116]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d148      	bne.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005530:	4b1a      	ldr	r3, [pc, #104]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a19      	ldr	r2, [pc, #100]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800553a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800553c:	4b17      	ldr	r3, [pc, #92]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a16      	ldr	r2, [pc, #88]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005546:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005548:	f7fd fe2c 	bl	80031a4 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7fd fe28 	bl	80031a4 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e030      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005562:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x734>
 800556e:	e028      	b.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d023      	beq.n	80055be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	4b09      	ldr	r3, [pc, #36]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a08      	ldr	r2, [pc, #32]	@ (800559c <HAL_RCC_OscConfig+0x780>)
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fd fe0f 	bl	80031a4 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	e00c      	b.n	80055a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7fd fe0b 	bl	80031a4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d905      	bls.n	80055a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e013      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
 800559c:	40021000 	.word	0x40021000
 80055a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a4:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <HAL_RCC_OscConfig+0x7b0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ec      	bne.n	800558a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_RCC_OscConfig+0x7b0>)
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	4905      	ldr	r1, [pc, #20]	@ (80055cc <HAL_RCC_OscConfig+0x7b0>)
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <HAL_RCC_OscConfig+0x7b4>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60cb      	str	r3, [r1, #12]
 80055bc:	e001      	b.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	feeefffc 	.word	0xfeeefffc

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0e7      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b75      	ldr	r3, [pc, #468]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b72      	ldr	r3, [pc, #456]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4970      	ldr	r1, [pc, #448]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b6e      	ldr	r3, [pc, #440]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0cf      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005630:	429a      	cmp	r2, r3
 8005632:	d908      	bls.n	8005646 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b63      	ldr	r3, [pc, #396]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4960      	ldr	r1, [pc, #384]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04c      	beq.n	80056ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	4b5a      	ldr	r3, [pc, #360]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d121      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0a6      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005672:	4b54      	ldr	r3, [pc, #336]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d115      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e09a      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800568a:	4b4e      	ldr	r3, [pc, #312]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e08e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800569a:	4b4a      	ldr	r3, [pc, #296]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e086      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b46      	ldr	r3, [pc, #280]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4943      	ldr	r1, [pc, #268]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056bc:	f7fd fd72 	bl	80031a4 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7fd fd6e 	bl	80031a4 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e06e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b3a      	ldr	r3, [pc, #232]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4b31      	ldr	r3, [pc, #196]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005704:	429a      	cmp	r2, r3
 8005706:	d208      	bcs.n	800571a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b2e      	ldr	r3, [pc, #184]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	492b      	ldr	r1, [pc, #172]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800571a:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d210      	bcs.n	800574a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005728:	4b25      	ldr	r3, [pc, #148]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 0207 	bic.w	r2, r3, #7
 8005730:	4923      	ldr	r1, [pc, #140]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005738:	4b21      	ldr	r3, [pc, #132]	@ (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e036      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005756:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4918      	ldr	r1, [pc, #96]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005774:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4910      	ldr	r1, [pc, #64]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005788:	f000 f824 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	490b      	ldr	r1, [pc, #44]	@ (80057c8 <HAL_RCC_ClockConfig+0x1f4>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	4a09      	ldr	r2, [pc, #36]	@ (80057cc <HAL_RCC_ClockConfig+0x1f8>)
 80057a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057a8:	4b09      	ldr	r3, [pc, #36]	@ (80057d0 <HAL_RCC_ClockConfig+0x1fc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fc ff35 	bl	800261c <HAL_InitTick>
 80057b2:	4603      	mov	r3, r0
 80057b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40022000 	.word	0x40022000
 80057c4:	40021000 	.word	0x40021000
 80057c8:	08010464 	.word	0x08010464
 80057cc:	20000000 	.word	0x20000000
 80057d0:	20000010 	.word	0x20000010

080057d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	@ 0x24
 80057d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	4b3e      	ldr	r3, [pc, #248]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ec:	4b3b      	ldr	r3, [pc, #236]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0x34>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d121      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d11e      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005808:	4b34      	ldr	r3, [pc, #208]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005814:	4b31      	ldr	r3, [pc, #196]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e005      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005824:	4b2d      	ldr	r3, [pc, #180]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005830:	4a2b      	ldr	r2, [pc, #172]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005844:	e00a      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d102      	bne.n	8005852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e004      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d101      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800585a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d134      	bne.n	80058cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005862:	4b1e      	ldr	r3, [pc, #120]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0xa6>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d003      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0xac>
 8005878:	e005      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800587a:	4b1a      	ldr	r3, [pc, #104]	@ (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800587c:	617b      	str	r3, [r7, #20]
      break;
 800587e:	e005      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005880:	4b19      	ldr	r3, [pc, #100]	@ (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005882:	617b      	str	r3, [r7, #20]
      break;
 8005884:	e002      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	617b      	str	r3, [r7, #20]
      break;
 800588a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800588c:	4b13      	ldr	r3, [pc, #76]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	3301      	adds	r3, #1
 8005898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800589a:	4b10      	ldr	r3, [pc, #64]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	0e5b      	lsrs	r3, r3, #25
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	3301      	adds	r3, #1
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058cc:	69bb      	ldr	r3, [r7, #24]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3724      	adds	r7, #36	@ 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0801047c 	.word	0x0801047c
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200

080058ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f0:	4b03      	ldr	r3, [pc, #12]	@ (8005900 <HAL_RCC_GetHCLKFreq+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000000 	.word	0x20000000

08005904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005908:	f7ff fff0 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	@ (800592c <HAL_RCC_GetPCLK1Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	08010474 	.word	0x08010474

08005930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005934:	f7ff ffda 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0adb      	lsrs	r3, r3, #11
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	@ (8005958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	08010474 	.word	0x08010474

0800595c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	220f      	movs	r2, #15
 800596a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800596c:	4b12      	ldr	r3, [pc, #72]	@ (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0203 	and.w	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005978:	4b0f      	ldr	r3, [pc, #60]	@ (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005984:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005990:	4b09      	ldr	r3, [pc, #36]	@ (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800599e:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <HAL_RCC_GetClockConfig+0x60>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0207 	and.w	r2, r3, #7
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40022000 	.word	0x40022000

080059c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059c8:	2300      	movs	r3, #0
 80059ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059d8:	f7ff f8f0 	bl	8004bbc <HAL_PWREx_GetVoltageRange>
 80059dc:	6178      	str	r0, [r7, #20]
 80059de:	e014      	b.n	8005a0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059e0:	4b25      	ldr	r3, [pc, #148]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e4:	4a24      	ldr	r2, [pc, #144]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ec:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059f8:	f7ff f8e0 	bl	8004bbc <HAL_PWREx_GetVoltageRange>
 80059fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a02:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a10:	d10b      	bne.n	8005a2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b80      	cmp	r3, #128	@ 0x80
 8005a16:	d919      	bls.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a1c:	d902      	bls.n	8005a24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a1e:	2302      	movs	r3, #2
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e013      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a24:	2301      	movs	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	e010      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b80      	cmp	r3, #128	@ 0x80
 8005a2e:	d902      	bls.n	8005a36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a30:	2303      	movs	r3, #3
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e00a      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b80      	cmp	r3, #128	@ 0x80
 8005a3a:	d102      	bne.n	8005a42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	e004      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b70      	cmp	r3, #112	@ 0x70
 8005a46:	d101      	bne.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a48:	2301      	movs	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 0207 	bic.w	r2, r3, #7
 8005a54:	4909      	ldr	r1, [pc, #36]	@ (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a5c:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d001      	beq.n	8005a6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40022000 	.word	0x40022000

08005a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d041      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005aa4:	d02a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005aa6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005aaa:	d824      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005aac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab0:	d008      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab6:	d81e      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ac0:	d010      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ac2:	e018      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac4:	4b86      	ldr	r3, [pc, #536]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a85      	ldr	r2, [pc, #532]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ace:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ad0:	e015      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 facb 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ae2:	e00c      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3320      	adds	r3, #32
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fbb6 	bl	800625c <RCCEx_PLLSAI2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af4:	e003      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	74fb      	strb	r3, [r7, #19]
      break;
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b04:	4b76      	ldr	r3, [pc, #472]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b12:	4973      	ldr	r1, [pc, #460]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b1a:	e001      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d041      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b34:	d02a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b3a:	d824      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b40:	d008      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b46:	d81e      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b50:	d010      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b52:	e018      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b54:	4b62      	ldr	r3, [pc, #392]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a61      	ldr	r2, [pc, #388]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b60:	e015      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa83 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b72:	e00c      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3320      	adds	r3, #32
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fb6e 	bl	800625c <RCCEx_PLLSAI2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b84:	e003      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	74fb      	strb	r3, [r7, #19]
      break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b94:	4b52      	ldr	r3, [pc, #328]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ba2:	494f      	ldr	r1, [pc, #316]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005baa:	e001      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80a0 	beq.w	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bc2:	4b47      	ldr	r3, [pc, #284]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b41      	ldr	r3, [pc, #260]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	4a40      	ldr	r2, [pc, #256]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c00:	f7fd fad0 	bl	80031a4 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c06:	e009      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c08:	f7fd facc 	bl	80031a4 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d902      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	74fb      	strb	r3, [r7, #19]
        break;
 8005c1a:	e005      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c1c:	4b31      	ldr	r3, [pc, #196]	@ (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0ef      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d15c      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d019      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c4c:	4b24      	ldr	r3, [pc, #144]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c58:	4b21      	ldr	r3, [pc, #132]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c78:	4a19      	ldr	r2, [pc, #100]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8a:	f7fd fa8b 	bl	80031a4 <HAL_GetTick>
 8005c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c90:	e00b      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c92:	f7fd fa87 	bl	80031a4 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d902      	bls.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ec      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbe:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cce:	4904      	ldr	r1, [pc, #16]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cd6:	e009      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	74bb      	strb	r3, [r7, #18]
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cec:	7c7b      	ldrb	r3, [r7, #17]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d105      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf2:	4b9e      	ldr	r3, [pc, #632]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	4a9d      	ldr	r2, [pc, #628]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cfc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d0a:	4b98      	ldr	r3, [pc, #608]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d10:	f023 0203 	bic.w	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	4994      	ldr	r1, [pc, #592]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d2c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d32:	f023 020c 	bic.w	r2, r3, #12
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3a:	498c      	ldr	r1, [pc, #560]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d4e:	4b87      	ldr	r3, [pc, #540]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	4983      	ldr	r1, [pc, #524]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d70:	4b7e      	ldr	r3, [pc, #504]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	497b      	ldr	r1, [pc, #492]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d92:	4b76      	ldr	r3, [pc, #472]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da0:	4972      	ldr	r1, [pc, #456]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db4:	4b6d      	ldr	r3, [pc, #436]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc2:	496a      	ldr	r1, [pc, #424]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd6:	4b65      	ldr	r3, [pc, #404]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	4961      	ldr	r1, [pc, #388]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005df8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e06:	4959      	ldr	r1, [pc, #356]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e1a:	4b54      	ldr	r3, [pc, #336]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	4950      	ldr	r1, [pc, #320]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	4948      	ldr	r1, [pc, #288]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e5e:	4b43      	ldr	r3, [pc, #268]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	493f      	ldr	r1, [pc, #252]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d028      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e80:	4b3a      	ldr	r3, [pc, #232]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8e:	4937      	ldr	r1, [pc, #220]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e9e:	d106      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea0:	4b32      	ldr	r3, [pc, #200]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a31      	ldr	r2, [pc, #196]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eaa:	60d3      	str	r3, [r2, #12]
 8005eac:	e011      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f8d8 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
 8005ed0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d028      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ede:	4b23      	ldr	r3, [pc, #140]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eec:	491f      	ldr	r1, [pc, #124]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005efc:	d106      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005efe:	4b1b      	ldr	r3, [pc, #108]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	4a1a      	ldr	r2, [pc, #104]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f08:	60d3      	str	r3, [r2, #12]
 8005f0a:	e011      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f14:	d10c      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 f8a9 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f26:	7cfb      	ldrb	r3, [r7, #19]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02b      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4a:	4908      	ldr	r1, [pc, #32]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5c:	4b03      	ldr	r3, [pc, #12]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4a02      	ldr	r2, [pc, #8]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f66:	60d3      	str	r3, [r2, #12]
 8005f68:	e014      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f877 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f8a:	7cfb      	ldrb	r3, [r7, #19]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d02f      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fae:	4928      	ldr	r1, [pc, #160]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fbe:	d10d      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f854 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd0:	7cfb      	ldrb	r3, [r7, #19]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d014      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fd6:	7cfb      	ldrb	r3, [r7, #19]
 8005fd8:	74bb      	strb	r3, [r7, #18]
 8005fda:	e011      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3320      	adds	r3, #32
 8005fea:	2102      	movs	r1, #2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f935 	bl	800625c <RCCEx_PLLSAI2_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ffc:	7cfb      	ldrb	r3, [r7, #19]
 8005ffe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800600c:	4b10      	ldr	r3, [pc, #64]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006012:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800601a:	490d      	ldr	r1, [pc, #52]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800602e:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006034:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800603e:	4904      	ldr	r1, [pc, #16]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006046:	7cbb      	ldrb	r3, [r7, #18]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000

08006054 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a04      	ldr	r2, [pc, #16]	@ (8006070 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800605e:	f043 0304 	orr.w	r3, r3, #4
 8006062:	6013      	str	r3, [r2, #0]
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000

08006074 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006082:	4b75      	ldr	r3, [pc, #468]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800608e:	4b72      	ldr	r3, [pc, #456]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d10d      	bne.n	80060ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
       ||
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060a6:	4b6c      	ldr	r3, [pc, #432]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
       ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d047      	beq.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
 80060be:	e044      	b.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d018      	beq.n	80060fa <RCCEx_PLLSAI1_Config+0x86>
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d825      	bhi.n	8006118 <RCCEx_PLLSAI1_Config+0xa4>
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d002      	beq.n	80060d6 <RCCEx_PLLSAI1_Config+0x62>
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d009      	beq.n	80060e8 <RCCEx_PLLSAI1_Config+0x74>
 80060d4:	e020      	b.n	8006118 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060d6:	4b60      	ldr	r3, [pc, #384]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11d      	bne.n	800611e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e6:	e01a      	b.n	800611e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060e8:	4b5b      	ldr	r3, [pc, #364]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d116      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f8:	e013      	b.n	8006122 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060fa:	4b57      	ldr	r3, [pc, #348]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006106:	4b54      	ldr	r3, [pc, #336]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006116:	e006      	b.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	e004      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006126:	bf00      	nop
    }

    if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800612e:	4b4a      	ldr	r3, [pc, #296]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	430b      	orrs	r3, r1
 8006144:	4944      	ldr	r1, [pc, #272]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006146:	4313      	orrs	r3, r2
 8006148:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d17d      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006150:	4b41      	ldr	r3, [pc, #260]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a40      	ldr	r2, [pc, #256]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006156:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800615a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615c:	f7fd f822 	bl	80031a4 <HAL_GetTick>
 8006160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006162:	e009      	b.n	8006178 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006164:	f7fd f81e 	bl	80031a4 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d902      	bls.n	8006178 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	73fb      	strb	r3, [r7, #15]
        break;
 8006176:	e005      	b.n	8006184 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006178:	4b37      	ldr	r3, [pc, #220]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ef      	bne.n	8006164 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d160      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d111      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006190:	4b31      	ldr	r3, [pc, #196]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6892      	ldr	r2, [r2, #8]
 80061a0:	0211      	lsls	r1, r2, #8
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68d2      	ldr	r2, [r2, #12]
 80061a6:	0912      	lsrs	r2, r2, #4
 80061a8:	0452      	lsls	r2, r2, #17
 80061aa:	430a      	orrs	r2, r1
 80061ac:	492a      	ldr	r1, [pc, #168]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	610b      	str	r3, [r1, #16]
 80061b2:	e027      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d112      	bne.n	80061e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061ba:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80061c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6892      	ldr	r2, [r2, #8]
 80061ca:	0211      	lsls	r1, r2, #8
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6912      	ldr	r2, [r2, #16]
 80061d0:	0852      	lsrs	r2, r2, #1
 80061d2:	3a01      	subs	r2, #1
 80061d4:	0552      	lsls	r2, r2, #21
 80061d6:	430a      	orrs	r2, r1
 80061d8:	491f      	ldr	r1, [pc, #124]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	610b      	str	r3, [r1, #16]
 80061de:	e011      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80061e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	0211      	lsls	r1, r2, #8
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6952      	ldr	r2, [r2, #20]
 80061f6:	0852      	lsrs	r2, r2, #1
 80061f8:	3a01      	subs	r2, #1
 80061fa:	0652      	lsls	r2, r2, #25
 80061fc:	430a      	orrs	r2, r1
 80061fe:	4916      	ldr	r1, [pc, #88]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006200:	4313      	orrs	r3, r2
 8006202:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a13      	ldr	r2, [pc, #76]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800620e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7fc ffc8 	bl	80031a4 <HAL_GetTick>
 8006214:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006216:	e009      	b.n	800622c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006218:	f7fc ffc4 	bl	80031a4 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d902      	bls.n	800622c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	73fb      	strb	r3, [r7, #15]
          break;
 800622a:	e005      	b.n	8006238 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ef      	beq.n	8006218 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800623e:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	4904      	ldr	r1, [pc, #16]	@ (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006248:	4313      	orrs	r3, r2
 800624a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000

0800625c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800626a:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006276:	4b67      	ldr	r3, [pc, #412]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0203 	and.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d10d      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
       ||
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800628e:	4b61      	ldr	r3, [pc, #388]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
       ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d047      	beq.n	8006332 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
 80062a6:	e044      	b.n	8006332 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d018      	beq.n	80062e2 <RCCEx_PLLSAI2_Config+0x86>
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d825      	bhi.n	8006300 <RCCEx_PLLSAI2_Config+0xa4>
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d002      	beq.n	80062be <RCCEx_PLLSAI2_Config+0x62>
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d009      	beq.n	80062d0 <RCCEx_PLLSAI2_Config+0x74>
 80062bc:	e020      	b.n	8006300 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062be:	4b55      	ldr	r3, [pc, #340]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11d      	bne.n	8006306 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ce:	e01a      	b.n	8006306 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062d0:	4b50      	ldr	r3, [pc, #320]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d116      	bne.n	800630a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e0:	e013      	b.n	800630a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ee:	4b49      	ldr	r3, [pc, #292]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062fe:	e006      	b.n	800630e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
      break;
 8006304:	e004      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006306:	bf00      	nop
 8006308:	e002      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800630a:	bf00      	nop
 800630c:	e000      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800630e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006316:	4b3f      	ldr	r3, [pc, #252]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	3b01      	subs	r3, #1
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	430b      	orrs	r3, r1
 800632c:	4939      	ldr	r1, [pc, #228]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800632e:	4313      	orrs	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d167      	bne.n	8006408 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006338:	4b36      	ldr	r3, [pc, #216]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a35      	ldr	r2, [pc, #212]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006344:	f7fc ff2e 	bl	80031a4 <HAL_GetTick>
 8006348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800634a:	e009      	b.n	8006360 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800634c:	f7fc ff2a 	bl	80031a4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d902      	bls.n	8006360 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	73fb      	strb	r3, [r7, #15]
        break;
 800635e:	e005      	b.n	800636c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006360:	4b2c      	ldr	r3, [pc, #176]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1ef      	bne.n	800634c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d14a      	bne.n	8006408 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d111      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006378:	4b26      	ldr	r3, [pc, #152]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
 8006388:	0211      	lsls	r1, r2, #8
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68d2      	ldr	r2, [r2, #12]
 800638e:	0912      	lsrs	r2, r2, #4
 8006390:	0452      	lsls	r2, r2, #17
 8006392:	430a      	orrs	r2, r1
 8006394:	491f      	ldr	r1, [pc, #124]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006396:	4313      	orrs	r3, r2
 8006398:	614b      	str	r3, [r1, #20]
 800639a:	e011      	b.n	80063c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800639c:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80063a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	0211      	lsls	r1, r2, #8
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6912      	ldr	r2, [r2, #16]
 80063b2:	0852      	lsrs	r2, r2, #1
 80063b4:	3a01      	subs	r2, #1
 80063b6:	0652      	lsls	r2, r2, #25
 80063b8:	430a      	orrs	r2, r1
 80063ba:	4916      	ldr	r1, [pc, #88]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063c0:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a13      	ldr	r2, [pc, #76]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fc feea 	bl	80031a4 <HAL_GetTick>
 80063d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063d2:	e009      	b.n	80063e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063d4:	f7fc fee6 	bl	80031a4 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d902      	bls.n	80063e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	73fb      	strb	r3, [r7, #15]
          break;
 80063e6:	e005      	b.n	80063f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0ef      	beq.n	80063d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063fa:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	4904      	ldr	r1, [pc, #16]	@ (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006404:	4313      	orrs	r3, r2
 8006406:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000

08006418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e095      	b.n	8006556 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d108      	bne.n	8006444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800643a:	d009      	beq.n	8006450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	61da      	str	r2, [r3, #28]
 8006442:	e005      	b.n	8006450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb fec4 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006486:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006490:	d902      	bls.n	8006498 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	e002      	b.n	800649e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800649c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80064a6:	d007      	beq.n	80064b8 <HAL_SPI_Init+0xa0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064b0:	d002      	beq.n	80064b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fa:	ea42 0103 	orr.w	r1, r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	0c1b      	lsrs	r3, r3, #16
 8006514:	f003 0204 	and.w	r2, r3, #4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006534:	ea42 0103 	orr.w	r1, r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e049      	b.n	8006604 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d106      	bne.n	800658a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fb fe7b 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f000 fdeb 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d001      	beq.n	8006624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e04f      	b.n	80066c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a23      	ldr	r2, [pc, #140]	@ (80066d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01d      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0x76>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664e:	d018      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0x76>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1f      	ldr	r2, [pc, #124]	@ (80066d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0x76>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1e      	ldr	r2, [pc, #120]	@ (80066d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0x76>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1c      	ldr	r2, [pc, #112]	@ (80066dc <HAL_TIM_Base_Start_IT+0xd0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d009      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0x76>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d004      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0x76>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a19      	ldr	r2, [pc, #100]	@ (80066e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d115      	bne.n	80066ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	4b17      	ldr	r3, [pc, #92]	@ (80066e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800668a:	4013      	ands	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b06      	cmp	r3, #6
 8006692:	d015      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0xb4>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669a:	d011      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	e008      	b.n	80066c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e000      	b.n	80066c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40000400 	.word	0x40000400
 80066d8:	40000800 	.word	0x40000800
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40014000 	.word	0x40014000
 80066e8:	00010007 	.word	0x00010007

080066ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e049      	b.n	8006792 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fb fde6 	bl	80022e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f000 fd24 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e049      	b.n	8006840 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f841 	bl	8006848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f000 fccd 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_TIM_PWM_Start+0x24>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	e03c      	b.n	80068fa <HAL_TIM_PWM_Start+0x9e>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d109      	bne.n	800689a <HAL_TIM_PWM_Start+0x3e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	e02f      	b.n	80068fa <HAL_TIM_PWM_Start+0x9e>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d109      	bne.n	80068b4 <HAL_TIM_PWM_Start+0x58>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	e022      	b.n	80068fa <HAL_TIM_PWM_Start+0x9e>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b0c      	cmp	r3, #12
 80068b8:	d109      	bne.n	80068ce <HAL_TIM_PWM_Start+0x72>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	e015      	b.n	80068fa <HAL_TIM_PWM_Start+0x9e>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d109      	bne.n	80068e8 <HAL_TIM_PWM_Start+0x8c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e008      	b.n	80068fa <HAL_TIM_PWM_Start+0x9e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	bf14      	ite	ne
 80068f4:	2301      	movne	r3, #1
 80068f6:	2300      	moveq	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e09c      	b.n	8006a3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_TIM_PWM_Start+0xb6>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006910:	e023      	b.n	800695a <HAL_TIM_PWM_Start+0xfe>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d104      	bne.n	8006922 <HAL_TIM_PWM_Start+0xc6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006920:	e01b      	b.n	800695a <HAL_TIM_PWM_Start+0xfe>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d104      	bne.n	8006932 <HAL_TIM_PWM_Start+0xd6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006930:	e013      	b.n	800695a <HAL_TIM_PWM_Start+0xfe>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d104      	bne.n	8006942 <HAL_TIM_PWM_Start+0xe6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006940:	e00b      	b.n	800695a <HAL_TIM_PWM_Start+0xfe>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b10      	cmp	r3, #16
 8006946:	d104      	bne.n	8006952 <HAL_TIM_PWM_Start+0xf6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006950:	e003      	b.n	800695a <HAL_TIM_PWM_Start+0xfe>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f81e 	bl	80079a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a35      	ldr	r2, [pc, #212]	@ (8006a44 <HAL_TIM_PWM_Start+0x1e8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_TIM_PWM_Start+0x13e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a34      	ldr	r2, [pc, #208]	@ (8006a48 <HAL_TIM_PWM_Start+0x1ec>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIM_PWM_Start+0x13e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a32      	ldr	r2, [pc, #200]	@ (8006a4c <HAL_TIM_PWM_Start+0x1f0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIM_PWM_Start+0x13e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a31      	ldr	r2, [pc, #196]	@ (8006a50 <HAL_TIM_PWM_Start+0x1f4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIM_PWM_Start+0x13e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2f      	ldr	r2, [pc, #188]	@ (8006a54 <HAL_TIM_PWM_Start+0x1f8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d101      	bne.n	800699e <HAL_TIM_PWM_Start+0x142>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <HAL_TIM_PWM_Start+0x144>
 800699e:	2300      	movs	r3, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d007      	beq.n	80069b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <HAL_TIM_PWM_Start+0x1e8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_TIM_PWM_Start+0x19e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c6:	d018      	beq.n	80069fa <HAL_TIM_PWM_Start+0x19e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a22      	ldr	r2, [pc, #136]	@ (8006a58 <HAL_TIM_PWM_Start+0x1fc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIM_PWM_Start+0x19e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a21      	ldr	r2, [pc, #132]	@ (8006a5c <HAL_TIM_PWM_Start+0x200>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_PWM_Start+0x19e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <HAL_TIM_PWM_Start+0x204>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_PWM_Start+0x19e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a17      	ldr	r2, [pc, #92]	@ (8006a48 <HAL_TIM_PWM_Start+0x1ec>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_PWM_Start+0x19e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a15      	ldr	r2, [pc, #84]	@ (8006a4c <HAL_TIM_PWM_Start+0x1f0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d115      	bne.n	8006a26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <HAL_TIM_PWM_Start+0x208>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	d015      	beq.n	8006a38 <HAL_TIM_PWM_Start+0x1dc>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a12:	d011      	beq.n	8006a38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a24:	e008      	b.n	8006a38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e000      	b.n	8006a3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40013400 	.word	0x40013400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40014800 	.word	0x40014800
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	00010007 	.word	0x00010007

08006a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d020      	beq.n	8006acc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0202 	mvn.w	r2, #2
 8006a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fb41 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb33 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb44 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d020      	beq.n	8006b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01b      	beq.n	8006b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0204 	mvn.w	r2, #4
 8006ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fb1b 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006b04:	e005      	b.n	8006b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fb0d 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fb1e 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d020      	beq.n	8006b64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01b      	beq.n	8006b64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0208 	mvn.w	r2, #8
 8006b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2204      	movs	r2, #4
 8006b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 faf5 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006b50:	e005      	b.n	8006b5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fae7 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 faf8 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d020      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01b      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0210 	mvn.w	r2, #16
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2208      	movs	r2, #8
 8006b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 facf 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006b9c:	e005      	b.n	8006baa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fac1 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fad2 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0201 	mvn.w	r2, #1
 8006bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fa ffa2 	bl	8001b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 ff89 	bl	8007b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 ff81 	bl	8007b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa8c 	bl	8007162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00c      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f06f 0220 	mvn.w	r2, #32
 8006c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 ff49 	bl	8007b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e066      	b.n	8006d64 <HAL_TIM_OC_ConfigChannel+0xec>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b14      	cmp	r3, #20
 8006ca2:	d857      	bhi.n	8006d54 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <HAL_TIM_OC_ConfigChannel+0x34>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006d01 	.word	0x08006d01
 8006cb0:	08006d55 	.word	0x08006d55
 8006cb4:	08006d55 	.word	0x08006d55
 8006cb8:	08006d55 	.word	0x08006d55
 8006cbc:	08006d0f 	.word	0x08006d0f
 8006cc0:	08006d55 	.word	0x08006d55
 8006cc4:	08006d55 	.word	0x08006d55
 8006cc8:	08006d55 	.word	0x08006d55
 8006ccc:	08006d1d 	.word	0x08006d1d
 8006cd0:	08006d55 	.word	0x08006d55
 8006cd4:	08006d55 	.word	0x08006d55
 8006cd8:	08006d55 	.word	0x08006d55
 8006cdc:	08006d2b 	.word	0x08006d2b
 8006ce0:	08006d55 	.word	0x08006d55
 8006ce4:	08006d55 	.word	0x08006d55
 8006ce8:	08006d55 	.word	0x08006d55
 8006cec:	08006d39 	.word	0x08006d39
 8006cf0:	08006d55 	.word	0x08006d55
 8006cf4:	08006d55 	.word	0x08006d55
 8006cf8:	08006d55 	.word	0x08006d55
 8006cfc:	08006d47 	.word	0x08006d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fadc 	bl	80072c4 <TIM_OC1_SetConfig>
      break;
 8006d0c:	e025      	b.n	8006d5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fb65 	bl	80073e4 <TIM_OC2_SetConfig>
      break;
 8006d1a:	e01e      	b.n	8006d5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fbe8 	bl	80074f8 <TIM_OC3_SetConfig>
      break;
 8006d28:	e017      	b.n	8006d5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fc69 	bl	8007608 <TIM_OC4_SetConfig>
      break;
 8006d36:	e010      	b.n	8006d5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fccc 	bl	80076dc <TIM_OC5_SetConfig>
      break;
 8006d44:	e009      	b.n	8006d5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fd29 	bl	80077a4 <TIM_OC6_SetConfig>
      break;
 8006d52:	e002      	b.n	8006d5a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
      break;
 8006d58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e0ff      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b14      	cmp	r3, #20
 8006d96:	f200 80f0 	bhi.w	8006f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006f7b 	.word	0x08006f7b
 8006da8:	08006f7b 	.word	0x08006f7b
 8006dac:	08006f7b 	.word	0x08006f7b
 8006db0:	08006e35 	.word	0x08006e35
 8006db4:	08006f7b 	.word	0x08006f7b
 8006db8:	08006f7b 	.word	0x08006f7b
 8006dbc:	08006f7b 	.word	0x08006f7b
 8006dc0:	08006e77 	.word	0x08006e77
 8006dc4:	08006f7b 	.word	0x08006f7b
 8006dc8:	08006f7b 	.word	0x08006f7b
 8006dcc:	08006f7b 	.word	0x08006f7b
 8006dd0:	08006eb7 	.word	0x08006eb7
 8006dd4:	08006f7b 	.word	0x08006f7b
 8006dd8:	08006f7b 	.word	0x08006f7b
 8006ddc:	08006f7b 	.word	0x08006f7b
 8006de0:	08006ef9 	.word	0x08006ef9
 8006de4:	08006f7b 	.word	0x08006f7b
 8006de8:	08006f7b 	.word	0x08006f7b
 8006dec:	08006f7b 	.word	0x08006f7b
 8006df0:	08006f39 	.word	0x08006f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fa62 	bl	80072c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	619a      	str	r2, [r3, #24]
      break;
 8006e32:	e0a5      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fad2 	bl	80073e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	619a      	str	r2, [r3, #24]
      break;
 8006e74:	e084      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fb3b 	bl	80074f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0208 	orr.w	r2, r2, #8
 8006e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0204 	bic.w	r2, r2, #4
 8006ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	61da      	str	r2, [r3, #28]
      break;
 8006eb4:	e064      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fba3 	bl	8007608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	021a      	lsls	r2, r3, #8
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	61da      	str	r2, [r3, #28]
      break;
 8006ef6:	e043      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fbec 	bl	80076dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0208 	orr.w	r2, r2, #8
 8006f12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0204 	bic.w	r2, r2, #4
 8006f22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f36:	e023      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fc30 	bl	80077a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f78:	e002      	b.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop

08006f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0b6      	b.n	800711e <HAL_TIM_ConfigClockSource+0x18a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fec:	d03e      	beq.n	800706c <HAL_TIM_ConfigClockSource+0xd8>
 8006fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff2:	f200 8087 	bhi.w	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffa:	f000 8086 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x176>
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007002:	d87f      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007004:	2b70      	cmp	r3, #112	@ 0x70
 8007006:	d01a      	beq.n	800703e <HAL_TIM_ConfigClockSource+0xaa>
 8007008:	2b70      	cmp	r3, #112	@ 0x70
 800700a:	d87b      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 800700c:	2b60      	cmp	r3, #96	@ 0x60
 800700e:	d050      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x11e>
 8007010:	2b60      	cmp	r3, #96	@ 0x60
 8007012:	d877      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007014:	2b50      	cmp	r3, #80	@ 0x50
 8007016:	d03c      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0xfe>
 8007018:	2b50      	cmp	r3, #80	@ 0x50
 800701a:	d873      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 800701c:	2b40      	cmp	r3, #64	@ 0x40
 800701e:	d058      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x13e>
 8007020:	2b40      	cmp	r3, #64	@ 0x40
 8007022:	d86f      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007024:	2b30      	cmp	r3, #48	@ 0x30
 8007026:	d064      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 8007028:	2b30      	cmp	r3, #48	@ 0x30
 800702a:	d86b      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 800702c:	2b20      	cmp	r3, #32
 800702e:	d060      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 8007030:	2b20      	cmp	r3, #32
 8007032:	d867      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05c      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 8007038:	2b10      	cmp	r3, #16
 800703a:	d05a      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 800703c:	e062      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800704e:	f000 fc89 	bl	8007964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	609a      	str	r2, [r3, #8]
      break;
 800706a:	e04f      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800707c:	f000 fc72 	bl	8007964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800708e:	609a      	str	r2, [r3, #8]
      break;
 8007090:	e03c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800709e:	461a      	mov	r2, r3
 80070a0:	f000 fbe6 	bl	8007870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2150      	movs	r1, #80	@ 0x50
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fc3f 	bl	800792e <TIM_ITRx_SetConfig>
      break;
 80070b0:	e02c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 fc05 	bl	80078ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2160      	movs	r1, #96	@ 0x60
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fc2f 	bl	800792e <TIM_ITRx_SetConfig>
      break;
 80070d0:	e01c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 fbc6 	bl	8007870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2140      	movs	r1, #64	@ 0x40
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fc1f 	bl	800792e <TIM_ITRx_SetConfig>
      break;
 80070f0:	e00c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f000 fc16 	bl	800792e <TIM_ITRx_SetConfig>
      break;
 8007102:	e003      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e000      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800710a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a46      	ldr	r2, [pc, #280]	@ (80072a4 <TIM_Base_SetConfig+0x12c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007196:	d00f      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a43      	ldr	r2, [pc, #268]	@ (80072a8 <TIM_Base_SetConfig+0x130>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a42      	ldr	r2, [pc, #264]	@ (80072ac <TIM_Base_SetConfig+0x134>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a41      	ldr	r2, [pc, #260]	@ (80072b0 <TIM_Base_SetConfig+0x138>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a40      	ldr	r2, [pc, #256]	@ (80072b4 <TIM_Base_SetConfig+0x13c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d108      	bne.n	80071ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a35      	ldr	r2, [pc, #212]	@ (80072a4 <TIM_Base_SetConfig+0x12c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01f      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d8:	d01b      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a32      	ldr	r2, [pc, #200]	@ (80072a8 <TIM_Base_SetConfig+0x130>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d017      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a31      	ldr	r2, [pc, #196]	@ (80072ac <TIM_Base_SetConfig+0x134>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a30      	ldr	r2, [pc, #192]	@ (80072b0 <TIM_Base_SetConfig+0x138>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2f      	ldr	r2, [pc, #188]	@ (80072b4 <TIM_Base_SetConfig+0x13c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00b      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2e      	ldr	r2, [pc, #184]	@ (80072b8 <TIM_Base_SetConfig+0x140>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a2d      	ldr	r2, [pc, #180]	@ (80072bc <TIM_Base_SetConfig+0x144>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a2c      	ldr	r2, [pc, #176]	@ (80072c0 <TIM_Base_SetConfig+0x148>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d108      	bne.n	8007224 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a16      	ldr	r2, [pc, #88]	@ (80072a4 <TIM_Base_SetConfig+0x12c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00f      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a18      	ldr	r2, [pc, #96]	@ (80072b4 <TIM_Base_SetConfig+0x13c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00b      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a17      	ldr	r2, [pc, #92]	@ (80072b8 <TIM_Base_SetConfig+0x140>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d007      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a16      	ldr	r2, [pc, #88]	@ (80072bc <TIM_Base_SetConfig+0x144>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a15      	ldr	r2, [pc, #84]	@ (80072c0 <TIM_Base_SetConfig+0x148>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d103      	bne.n	8007278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d105      	bne.n	8007296 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	611a      	str	r2, [r3, #16]
  }
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800

080072c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f023 0201 	bic.w	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 0302 	bic.w	r3, r3, #2
 8007310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a2c      	ldr	r2, [pc, #176]	@ (80073d0 <TIM_OC1_SetConfig+0x10c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00f      	beq.n	8007344 <TIM_OC1_SetConfig+0x80>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a2b      	ldr	r2, [pc, #172]	@ (80073d4 <TIM_OC1_SetConfig+0x110>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_OC1_SetConfig+0x80>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <TIM_OC1_SetConfig+0x114>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <TIM_OC1_SetConfig+0x80>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a29      	ldr	r2, [pc, #164]	@ (80073dc <TIM_OC1_SetConfig+0x118>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC1_SetConfig+0x80>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a28      	ldr	r2, [pc, #160]	@ (80073e0 <TIM_OC1_SetConfig+0x11c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d10c      	bne.n	800735e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0308 	bic.w	r3, r3, #8
 800734a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 0304 	bic.w	r3, r3, #4
 800735c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a1b      	ldr	r2, [pc, #108]	@ (80073d0 <TIM_OC1_SetConfig+0x10c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00f      	beq.n	8007386 <TIM_OC1_SetConfig+0xc2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a1a      	ldr	r2, [pc, #104]	@ (80073d4 <TIM_OC1_SetConfig+0x110>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00b      	beq.n	8007386 <TIM_OC1_SetConfig+0xc2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a19      	ldr	r2, [pc, #100]	@ (80073d8 <TIM_OC1_SetConfig+0x114>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d007      	beq.n	8007386 <TIM_OC1_SetConfig+0xc2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a18      	ldr	r2, [pc, #96]	@ (80073dc <TIM_OC1_SetConfig+0x118>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC1_SetConfig+0xc2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a17      	ldr	r2, [pc, #92]	@ (80073e0 <TIM_OC1_SetConfig+0x11c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d111      	bne.n	80073aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800738c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	621a      	str	r2, [r3, #32]
}
 80073c4:	bf00      	nop
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40013400 	.word	0x40013400
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40014400 	.word	0x40014400
 80073e0:	40014800 	.word	0x40014800

080073e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f023 0210 	bic.w	r2, r3, #16
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f023 0320 	bic.w	r3, r3, #32
 8007432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a28      	ldr	r2, [pc, #160]	@ (80074e4 <TIM_OC2_SetConfig+0x100>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_OC2_SetConfig+0x6c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a27      	ldr	r2, [pc, #156]	@ (80074e8 <TIM_OC2_SetConfig+0x104>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10d      	bne.n	800746c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800746a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <TIM_OC2_SetConfig+0x100>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00f      	beq.n	8007494 <TIM_OC2_SetConfig+0xb0>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1c      	ldr	r2, [pc, #112]	@ (80074e8 <TIM_OC2_SetConfig+0x104>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00b      	beq.n	8007494 <TIM_OC2_SetConfig+0xb0>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1b      	ldr	r2, [pc, #108]	@ (80074ec <TIM_OC2_SetConfig+0x108>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_OC2_SetConfig+0xb0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1a      	ldr	r2, [pc, #104]	@ (80074f0 <TIM_OC2_SetConfig+0x10c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC2_SetConfig+0xb0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a19      	ldr	r2, [pc, #100]	@ (80074f4 <TIM_OC2_SetConfig+0x110>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d113      	bne.n	80074bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800749a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40012c00 	.word	0x40012c00
 80074e8:	40013400 	.word	0x40013400
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40014400 	.word	0x40014400
 80074f4:	40014800 	.word	0x40014800

080074f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0303 	bic.w	r3, r3, #3
 8007532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a27      	ldr	r2, [pc, #156]	@ (80075f4 <TIM_OC3_SetConfig+0xfc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_OC3_SetConfig+0x6a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a26      	ldr	r2, [pc, #152]	@ (80075f8 <TIM_OC3_SetConfig+0x100>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d10d      	bne.n	800757e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800757c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1c      	ldr	r2, [pc, #112]	@ (80075f4 <TIM_OC3_SetConfig+0xfc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00f      	beq.n	80075a6 <TIM_OC3_SetConfig+0xae>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1b      	ldr	r2, [pc, #108]	@ (80075f8 <TIM_OC3_SetConfig+0x100>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00b      	beq.n	80075a6 <TIM_OC3_SetConfig+0xae>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1a      	ldr	r2, [pc, #104]	@ (80075fc <TIM_OC3_SetConfig+0x104>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d007      	beq.n	80075a6 <TIM_OC3_SetConfig+0xae>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a19      	ldr	r2, [pc, #100]	@ (8007600 <TIM_OC3_SetConfig+0x108>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d003      	beq.n	80075a6 <TIM_OC3_SetConfig+0xae>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a18      	ldr	r2, [pc, #96]	@ (8007604 <TIM_OC3_SetConfig+0x10c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d113      	bne.n	80075ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	621a      	str	r2, [r3, #32]
}
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40013400 	.word	0x40013400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800

08007608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800763a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	031b      	lsls	r3, r3, #12
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a18      	ldr	r2, [pc, #96]	@ (80076c8 <TIM_OC4_SetConfig+0xc0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00f      	beq.n	800768c <TIM_OC4_SetConfig+0x84>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a17      	ldr	r2, [pc, #92]	@ (80076cc <TIM_OC4_SetConfig+0xc4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00b      	beq.n	800768c <TIM_OC4_SetConfig+0x84>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a16      	ldr	r2, [pc, #88]	@ (80076d0 <TIM_OC4_SetConfig+0xc8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_OC4_SetConfig+0x84>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a15      	ldr	r2, [pc, #84]	@ (80076d4 <TIM_OC4_SetConfig+0xcc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC4_SetConfig+0x84>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a14      	ldr	r2, [pc, #80]	@ (80076d8 <TIM_OC4_SetConfig+0xd0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d109      	bne.n	80076a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	019b      	lsls	r3, r3, #6
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40013400 	.word	0x40013400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40014400 	.word	0x40014400
 80076d8:	40014800 	.word	0x40014800

080076dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	041b      	lsls	r3, r3, #16
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <TIM_OC5_SetConfig+0xb4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00f      	beq.n	8007756 <TIM_OC5_SetConfig+0x7a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a16      	ldr	r2, [pc, #88]	@ (8007794 <TIM_OC5_SetConfig+0xb8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <TIM_OC5_SetConfig+0x7a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <TIM_OC5_SetConfig+0xbc>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_OC5_SetConfig+0x7a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a14      	ldr	r2, [pc, #80]	@ (800779c <TIM_OC5_SetConfig+0xc0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_OC5_SetConfig+0x7a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a13      	ldr	r2, [pc, #76]	@ (80077a0 <TIM_OC5_SetConfig+0xc4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d109      	bne.n	800776a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800775c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	621a      	str	r2, [r3, #32]
}
 8007784:	bf00      	nop
 8007786:	371c      	adds	r7, #28
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40013400 	.word	0x40013400
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400
 80077a0:	40014800 	.word	0x40014800

080077a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	051b      	lsls	r3, r3, #20
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a18      	ldr	r2, [pc, #96]	@ (800785c <TIM_OC6_SetConfig+0xb8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00f      	beq.n	8007820 <TIM_OC6_SetConfig+0x7c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a17      	ldr	r2, [pc, #92]	@ (8007860 <TIM_OC6_SetConfig+0xbc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00b      	beq.n	8007820 <TIM_OC6_SetConfig+0x7c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a16      	ldr	r2, [pc, #88]	@ (8007864 <TIM_OC6_SetConfig+0xc0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_OC6_SetConfig+0x7c>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a15      	ldr	r2, [pc, #84]	@ (8007868 <TIM_OC6_SetConfig+0xc4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC6_SetConfig+0x7c>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a14      	ldr	r2, [pc, #80]	@ (800786c <TIM_OC6_SetConfig+0xc8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d109      	bne.n	8007834 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40014000 	.word	0x40014000
 8007868:	40014400 	.word	0x40014400
 800786c:	40014800 	.word	0x40014800

08007870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f023 0201 	bic.w	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800789a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f023 030a 	bic.w	r3, r3, #10
 80078ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b087      	sub	sp, #28
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	f023 0210 	bic.w	r2, r3, #16
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	031b      	lsls	r3, r3, #12
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800790a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	621a      	str	r2, [r3, #32]
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800792e:	b480      	push	{r7}
 8007930:	b085      	sub	sp, #20
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	f043 0307 	orr.w	r3, r3, #7
 8007950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	609a      	str	r2, [r3, #8]
}
 8007958:	bf00      	nop
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800797e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	021a      	lsls	r2, r3, #8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	431a      	orrs	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4313      	orrs	r3, r2
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	609a      	str	r2, [r3, #8]
}
 8007998:	bf00      	nop
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	2201      	movs	r2, #1
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1a      	ldr	r2, [r3, #32]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	43db      	mvns	r3, r3
 80079c6:	401a      	ands	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1a      	ldr	r2, [r3, #32]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	fa01 f303 	lsl.w	r3, r1, r3
 80079dc:	431a      	orrs	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e068      	b.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d004      	beq.n	8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a2d      	ldr	r2, [pc, #180]	@ (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d108      	bne.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d01d      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a7a:	d018      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a1b      	ldr	r2, [pc, #108]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00e      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a18      	ldr	r2, [pc, #96]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a13      	ldr	r2, [pc, #76]	@ (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a14      	ldr	r2, [pc, #80]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d10c      	bne.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40013400 	.word	0x40013400
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40014000 	.word	0x40014000

08007b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e040      	b.n	8007bd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fa fc14 	bl	800238c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2224      	movs	r2, #36	@ 0x24
 8007b68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0201 	bic.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 ffa4 	bl	8008ad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fce9 	bl	8008560 <UART_SetConfig>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e01b      	b.n	8007bd0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 f823 	bl	8008c14 <UART_CheckIdleState>
 8007bce:	4603      	mov	r3, r0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d177      	bne.n	8007ce0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_UART_Transmit+0x24>
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e070      	b.n	8007ce2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2221      	movs	r2, #33	@ 0x21
 8007c0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c0e:	f7fb fac9 	bl	80031a4 <HAL_GetTick>
 8007c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	88fa      	ldrh	r2, [r7, #6]
 8007c20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c2c:	d108      	bne.n	8007c40 <HAL_UART_Transmit+0x68>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d104      	bne.n	8007c40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	61bb      	str	r3, [r7, #24]
 8007c3e:	e003      	b.n	8007c48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c48:	e02f      	b.n	8007caa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2180      	movs	r1, #128	@ 0x80
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f001 f885 	bl	8008d64 <UART_WaitOnFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2220      	movs	r2, #32
 8007c64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e03b      	b.n	8007ce2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10b      	bne.n	8007c88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	881a      	ldrh	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c7c:	b292      	uxth	r2, r2
 8007c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	3302      	adds	r3, #2
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	e007      	b.n	8007c98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	3301      	adds	r3, #1
 8007c96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1c9      	bne.n	8007c4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2140      	movs	r1, #64	@ 0x40
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f001 f84f 	bl	8008d64 <UART_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e005      	b.n	8007ce2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e000      	b.n	8007ce2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
  }
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b08a      	sub	sp, #40	@ 0x28
 8007cee:	af02      	add	r7, sp, #8
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	603b      	str	r3, [r7, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	f040 80b6 	bne.w	8007e72 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_UART_Receive+0x28>
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0ae      	b.n	8007e74 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2222      	movs	r2, #34	@ 0x22
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2c:	f7fb fa3a 	bl	80031a4 <HAL_GetTick>
 8007d30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d4a:	d10e      	bne.n	8007d6a <HAL_UART_Receive+0x80>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d105      	bne.n	8007d60 <HAL_UART_Receive+0x76>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d5e:	e02d      	b.n	8007dbc <HAL_UART_Receive+0xd2>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	22ff      	movs	r2, #255	@ 0xff
 8007d64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d68:	e028      	b.n	8007dbc <HAL_UART_Receive+0xd2>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10d      	bne.n	8007d8e <HAL_UART_Receive+0xa4>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <HAL_UART_Receive+0x9a>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	22ff      	movs	r2, #255	@ 0xff
 8007d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d82:	e01b      	b.n	8007dbc <HAL_UART_Receive+0xd2>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	227f      	movs	r2, #127	@ 0x7f
 8007d88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d8c:	e016      	b.n	8007dbc <HAL_UART_Receive+0xd2>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d96:	d10d      	bne.n	8007db4 <HAL_UART_Receive+0xca>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <HAL_UART_Receive+0xc0>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	227f      	movs	r2, #127	@ 0x7f
 8007da4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007da8:	e008      	b.n	8007dbc <HAL_UART_Receive+0xd2>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	223f      	movs	r2, #63	@ 0x3f
 8007dae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007db2:	e003      	b.n	8007dbc <HAL_UART_Receive+0xd2>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dc2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dcc:	d108      	bne.n	8007de0 <HAL_UART_Receive+0xf6>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	e003      	b.n	8007de8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007de8:	e037      	b.n	8007e5a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2200      	movs	r2, #0
 8007df2:	2120      	movs	r1, #32
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 ffb5 	bl	8008d64 <UART_WaitOnFlagUntilTimeout>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e033      	b.n	8007e74 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10c      	bne.n	8007e2c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	8a7b      	ldrh	r3, [r7, #18]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	3302      	adds	r3, #2
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	e00d      	b.n	8007e48 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	8a7b      	ldrh	r3, [r7, #18]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	3301      	adds	r3, #1
 8007e46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1c1      	bne.n	8007dea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
  }
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08a      	sub	sp, #40	@ 0x28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d137      	bne.n	8007f04 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_UART_Receive_IT+0x24>
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e030      	b.n	8007f06 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a18      	ldr	r2, [pc, #96]	@ (8007f10 <HAL_UART_Receive_IT+0x94>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d01f      	beq.n	8007ef4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d018      	beq.n	8007ef4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	623b      	str	r3, [r7, #32]
 8007ee2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	69f9      	ldr	r1, [r7, #28]
 8007ee6:	6a3a      	ldr	r2, [r7, #32]
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e6      	bne.n	8007ec2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68b9      	ldr	r1, [r7, #8]
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 ffa0 	bl	8008e40 <UART_Start_Receive_IT>
 8007f00:	4603      	mov	r3, r0
 8007f02:	e000      	b.n	8007f06 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f04:	2302      	movs	r3, #2
  }
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3728      	adds	r7, #40	@ 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	40008000 	.word	0x40008000

08007f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b0ba      	sub	sp, #232	@ 0xe8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f42:	4013      	ands	r3, r2
 8007f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d115      	bne.n	8007f7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00f      	beq.n	8007f7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 82ca 	beq.w	8008506 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
      }
      return;
 8007f7a:	e2c4      	b.n	8008506 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8117 	beq.w	80081b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f96:	4b85      	ldr	r3, [pc, #532]	@ (80081ac <HAL_UART_IRQHandler+0x298>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 810a 	beq.w	80081b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d011      	beq.n	8007fd0 <HAL_UART_IRQHandler+0xbc>
 8007fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fc6:	f043 0201 	orr.w	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d011      	beq.n	8008000 <HAL_UART_IRQHandler+0xec>
 8007fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2202      	movs	r2, #2
 8007fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff6:	f043 0204 	orr.w	r2, r3, #4
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d011      	beq.n	8008030 <HAL_UART_IRQHandler+0x11c>
 800800c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2204      	movs	r2, #4
 800801e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008026:	f043 0202 	orr.w	r2, r3, #2
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d017      	beq.n	800806c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800803c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b00      	cmp	r3, #0
 8008046:	d105      	bne.n	8008054 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800804c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2208      	movs	r2, #8
 800805a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008062:	f043 0208 	orr.w	r2, r3, #8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008074:	2b00      	cmp	r3, #0
 8008076:	d012      	beq.n	800809e <HAL_UART_IRQHandler+0x18a>
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800808c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008094:	f043 0220 	orr.w	r2, r3, #32
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8230 	beq.w	800850a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e6:	2b40      	cmp	r3, #64	@ 0x40
 80080e8:	d005      	beq.n	80080f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d04f      	beq.n	8008196 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 ff68 	bl	8008fcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008106:	2b40      	cmp	r3, #64	@ 0x40
 8008108:	d141      	bne.n	800818e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3308      	adds	r3, #8
 8008132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008136:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800813a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800814e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1d9      	bne.n	800810a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800815a:	2b00      	cmp	r3, #0
 800815c:	d013      	beq.n	8008186 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008162:	4a13      	ldr	r2, [pc, #76]	@ (80081b0 <HAL_UART_IRQHandler+0x29c>)
 8008164:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800816a:	4618      	mov	r0, r3
 800816c:	f7fb fa76 	bl	800365c <HAL_DMA_Abort_IT>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d017      	beq.n	80081a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	e00f      	b.n	80081a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9d4 	bl	8008534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800818c:	e00b      	b.n	80081a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f9d0 	bl	8008534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008194:	e007      	b.n	80081a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9cc 	bl	8008534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80081a4:	e1b1      	b.n	800850a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a6:	bf00      	nop
    return;
 80081a8:	e1af      	b.n	800850a <HAL_UART_IRQHandler+0x5f6>
 80081aa:	bf00      	nop
 80081ac:	04000120 	.word	0x04000120
 80081b0:	08009095 	.word	0x08009095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f040 816a 	bne.w	8008492 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8163 	beq.w	8008492 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 815c 	beq.w	8008492 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2210      	movs	r2, #16
 80081e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	f040 80d4 	bne.w	800839a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 80ad 	beq.w	8008362 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800820e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008212:	429a      	cmp	r2, r3
 8008214:	f080 80a5 	bcs.w	8008362 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800821e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	f040 8086 	bne.w	8008340 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800824c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800825e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008262:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800826a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1da      	bne.n	8008234 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3308      	adds	r3, #8
 8008284:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800828e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3308      	adds	r3, #8
 800829e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e1      	bne.n	800827e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3308      	adds	r3, #8
 80082da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e3      	bne.n	80082ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800830e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008310:	f023 0310 	bic.w	r3, r3, #16
 8008314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008322:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008324:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e4      	bne.n	8008300 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800833a:	4618      	mov	r0, r3
 800833c:	f7fb f950 	bl	80035e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008352:	b29b      	uxth	r3, r3
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	b29b      	uxth	r3, r3
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8f4 	bl	8008548 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008360:	e0d5      	b.n	800850e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800836c:	429a      	cmp	r2, r3
 800836e:	f040 80ce 	bne.w	800850e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b20      	cmp	r3, #32
 8008380:	f040 80c5 	bne.w	800850e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f8d8 	bl	8008548 <HAL_UARTEx_RxEventCallback>
      return;
 8008398:	e0b9      	b.n	800850e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 80ab 	beq.w	8008512 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80083bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80a6 	beq.w	8008512 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e4      	bne.n	80083c6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	623b      	str	r3, [r7, #32]
   return(result);
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	f023 0301 	bic.w	r3, r3, #1
 8008412:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008420:	633a      	str	r2, [r7, #48]	@ 0x30
 8008422:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e3      	bne.n	80083fc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2220      	movs	r2, #32
 8008438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60fb      	str	r3, [r7, #12]
   return(result);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800846a:	61fb      	str	r3, [r7, #28]
 800846c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	69b9      	ldr	r1, [r7, #24]
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	617b      	str	r3, [r7, #20]
   return(result);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e4      	bne.n	8008448 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f85c 	bl	8008548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008490:	e03f      	b.n	8008512 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00e      	beq.n	80084bc <HAL_UART_IRQHandler+0x5a8>
 800849e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d008      	beq.n	80084bc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 ffe9 	bl	800948c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ba:	e02d      	b.n	8008518 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00e      	beq.n	80084e6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01c      	beq.n	8008516 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
    }
    return;
 80084e4:	e017      	b.n	8008516 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d012      	beq.n	8008518 <HAL_UART_IRQHandler+0x604>
 80084f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fdde 	bl	80090c0 <UART_EndTransmit_IT>
    return;
 8008504:	e008      	b.n	8008518 <HAL_UART_IRQHandler+0x604>
      return;
 8008506:	bf00      	nop
 8008508:	e006      	b.n	8008518 <HAL_UART_IRQHandler+0x604>
    return;
 800850a:	bf00      	nop
 800850c:	e004      	b.n	8008518 <HAL_UART_IRQHandler+0x604>
      return;
 800850e:	bf00      	nop
 8008510:	e002      	b.n	8008518 <HAL_UART_IRQHandler+0x604>
      return;
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <HAL_UART_IRQHandler+0x604>
    return;
 8008516:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008518:	37e8      	adds	r7, #232	@ 0xe8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop

08008520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008564:	b08a      	sub	sp, #40	@ 0x28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	431a      	orrs	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	431a      	orrs	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	4313      	orrs	r3, r2
 8008586:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4ba4      	ldr	r3, [pc, #656]	@ (8008820 <UART_SetConfig+0x2c0>)
 8008590:	4013      	ands	r3, r2
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008598:	430b      	orrs	r3, r1
 800859a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a99      	ldr	r2, [pc, #612]	@ (8008824 <UART_SetConfig+0x2c4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d004      	beq.n	80085cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c8:	4313      	orrs	r3, r2
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085dc:	430a      	orrs	r2, r1
 80085de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a90      	ldr	r2, [pc, #576]	@ (8008828 <UART_SetConfig+0x2c8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d126      	bne.n	8008638 <UART_SetConfig+0xd8>
 80085ea:	4b90      	ldr	r3, [pc, #576]	@ (800882c <UART_SetConfig+0x2cc>)
 80085ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d81b      	bhi.n	8008630 <UART_SetConfig+0xd0>
 80085f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <UART_SetConfig+0xa0>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008611 	.word	0x08008611
 8008604:	08008621 	.word	0x08008621
 8008608:	08008619 	.word	0x08008619
 800860c:	08008629 	.word	0x08008629
 8008610:	2301      	movs	r3, #1
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008616:	e116      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008618:	2302      	movs	r3, #2
 800861a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861e:	e112      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008620:	2304      	movs	r3, #4
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008626:	e10e      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008628:	2308      	movs	r3, #8
 800862a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862e:	e10a      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008630:	2310      	movs	r3, #16
 8008632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008636:	e106      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a7c      	ldr	r2, [pc, #496]	@ (8008830 <UART_SetConfig+0x2d0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d138      	bne.n	80086b4 <UART_SetConfig+0x154>
 8008642:	4b7a      	ldr	r3, [pc, #488]	@ (800882c <UART_SetConfig+0x2cc>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008648:	f003 030c 	and.w	r3, r3, #12
 800864c:	2b0c      	cmp	r3, #12
 800864e:	d82d      	bhi.n	80086ac <UART_SetConfig+0x14c>
 8008650:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <UART_SetConfig+0xf8>)
 8008652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008656:	bf00      	nop
 8008658:	0800868d 	.word	0x0800868d
 800865c:	080086ad 	.word	0x080086ad
 8008660:	080086ad 	.word	0x080086ad
 8008664:	080086ad 	.word	0x080086ad
 8008668:	0800869d 	.word	0x0800869d
 800866c:	080086ad 	.word	0x080086ad
 8008670:	080086ad 	.word	0x080086ad
 8008674:	080086ad 	.word	0x080086ad
 8008678:	08008695 	.word	0x08008695
 800867c:	080086ad 	.word	0x080086ad
 8008680:	080086ad 	.word	0x080086ad
 8008684:	080086ad 	.word	0x080086ad
 8008688:	080086a5 	.word	0x080086a5
 800868c:	2300      	movs	r3, #0
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008692:	e0d8      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008694:	2302      	movs	r3, #2
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869a:	e0d4      	b.n	8008846 <UART_SetConfig+0x2e6>
 800869c:	2304      	movs	r3, #4
 800869e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086a2:	e0d0      	b.n	8008846 <UART_SetConfig+0x2e6>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086aa:	e0cc      	b.n	8008846 <UART_SetConfig+0x2e6>
 80086ac:	2310      	movs	r3, #16
 80086ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086b2:	e0c8      	b.n	8008846 <UART_SetConfig+0x2e6>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a5e      	ldr	r2, [pc, #376]	@ (8008834 <UART_SetConfig+0x2d4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d125      	bne.n	800870a <UART_SetConfig+0x1aa>
 80086be:	4b5b      	ldr	r3, [pc, #364]	@ (800882c <UART_SetConfig+0x2cc>)
 80086c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086c8:	2b30      	cmp	r3, #48	@ 0x30
 80086ca:	d016      	beq.n	80086fa <UART_SetConfig+0x19a>
 80086cc:	2b30      	cmp	r3, #48	@ 0x30
 80086ce:	d818      	bhi.n	8008702 <UART_SetConfig+0x1a2>
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d00a      	beq.n	80086ea <UART_SetConfig+0x18a>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d814      	bhi.n	8008702 <UART_SetConfig+0x1a2>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <UART_SetConfig+0x182>
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d008      	beq.n	80086f2 <UART_SetConfig+0x192>
 80086e0:	e00f      	b.n	8008702 <UART_SetConfig+0x1a2>
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e8:	e0ad      	b.n	8008846 <UART_SetConfig+0x2e6>
 80086ea:	2302      	movs	r3, #2
 80086ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f0:	e0a9      	b.n	8008846 <UART_SetConfig+0x2e6>
 80086f2:	2304      	movs	r3, #4
 80086f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f8:	e0a5      	b.n	8008846 <UART_SetConfig+0x2e6>
 80086fa:	2308      	movs	r3, #8
 80086fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008700:	e0a1      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008702:	2310      	movs	r3, #16
 8008704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008708:	e09d      	b.n	8008846 <UART_SetConfig+0x2e6>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a4a      	ldr	r2, [pc, #296]	@ (8008838 <UART_SetConfig+0x2d8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d125      	bne.n	8008760 <UART_SetConfig+0x200>
 8008714:	4b45      	ldr	r3, [pc, #276]	@ (800882c <UART_SetConfig+0x2cc>)
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800871a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800871e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008720:	d016      	beq.n	8008750 <UART_SetConfig+0x1f0>
 8008722:	2bc0      	cmp	r3, #192	@ 0xc0
 8008724:	d818      	bhi.n	8008758 <UART_SetConfig+0x1f8>
 8008726:	2b80      	cmp	r3, #128	@ 0x80
 8008728:	d00a      	beq.n	8008740 <UART_SetConfig+0x1e0>
 800872a:	2b80      	cmp	r3, #128	@ 0x80
 800872c:	d814      	bhi.n	8008758 <UART_SetConfig+0x1f8>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <UART_SetConfig+0x1d8>
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d008      	beq.n	8008748 <UART_SetConfig+0x1e8>
 8008736:	e00f      	b.n	8008758 <UART_SetConfig+0x1f8>
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800873e:	e082      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008740:	2302      	movs	r3, #2
 8008742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008746:	e07e      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008748:	2304      	movs	r3, #4
 800874a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800874e:	e07a      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008750:	2308      	movs	r3, #8
 8008752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008756:	e076      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008758:	2310      	movs	r3, #16
 800875a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800875e:	e072      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a35      	ldr	r2, [pc, #212]	@ (800883c <UART_SetConfig+0x2dc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d12a      	bne.n	80087c0 <UART_SetConfig+0x260>
 800876a:	4b30      	ldr	r3, [pc, #192]	@ (800882c <UART_SetConfig+0x2cc>)
 800876c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008770:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008774:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008778:	d01a      	beq.n	80087b0 <UART_SetConfig+0x250>
 800877a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800877e:	d81b      	bhi.n	80087b8 <UART_SetConfig+0x258>
 8008780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008784:	d00c      	beq.n	80087a0 <UART_SetConfig+0x240>
 8008786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800878a:	d815      	bhi.n	80087b8 <UART_SetConfig+0x258>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <UART_SetConfig+0x238>
 8008790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008794:	d008      	beq.n	80087a8 <UART_SetConfig+0x248>
 8008796:	e00f      	b.n	80087b8 <UART_SetConfig+0x258>
 8008798:	2300      	movs	r3, #0
 800879a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800879e:	e052      	b.n	8008846 <UART_SetConfig+0x2e6>
 80087a0:	2302      	movs	r3, #2
 80087a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087a6:	e04e      	b.n	8008846 <UART_SetConfig+0x2e6>
 80087a8:	2304      	movs	r3, #4
 80087aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ae:	e04a      	b.n	8008846 <UART_SetConfig+0x2e6>
 80087b0:	2308      	movs	r3, #8
 80087b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087b6:	e046      	b.n	8008846 <UART_SetConfig+0x2e6>
 80087b8:	2310      	movs	r3, #16
 80087ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087be:	e042      	b.n	8008846 <UART_SetConfig+0x2e6>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a17      	ldr	r2, [pc, #92]	@ (8008824 <UART_SetConfig+0x2c4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d13a      	bne.n	8008840 <UART_SetConfig+0x2e0>
 80087ca:	4b18      	ldr	r3, [pc, #96]	@ (800882c <UART_SetConfig+0x2cc>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087d8:	d01a      	beq.n	8008810 <UART_SetConfig+0x2b0>
 80087da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087de:	d81b      	bhi.n	8008818 <UART_SetConfig+0x2b8>
 80087e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e4:	d00c      	beq.n	8008800 <UART_SetConfig+0x2a0>
 80087e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ea:	d815      	bhi.n	8008818 <UART_SetConfig+0x2b8>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <UART_SetConfig+0x298>
 80087f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f4:	d008      	beq.n	8008808 <UART_SetConfig+0x2a8>
 80087f6:	e00f      	b.n	8008818 <UART_SetConfig+0x2b8>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087fe:	e022      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008806:	e01e      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800880e:	e01a      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008816:	e016      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800881e:	e012      	b.n	8008846 <UART_SetConfig+0x2e6>
 8008820:	efff69f3 	.word	0xefff69f3
 8008824:	40008000 	.word	0x40008000
 8008828:	40013800 	.word	0x40013800
 800882c:	40021000 	.word	0x40021000
 8008830:	40004400 	.word	0x40004400
 8008834:	40004800 	.word	0x40004800
 8008838:	40004c00 	.word	0x40004c00
 800883c:	40005000 	.word	0x40005000
 8008840:	2310      	movs	r3, #16
 8008842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ac8 <UART_SetConfig+0x568>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d17a      	bne.n	8008946 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008850:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008854:	2b08      	cmp	r3, #8
 8008856:	d824      	bhi.n	80088a2 <UART_SetConfig+0x342>
 8008858:	a201      	add	r2, pc, #4	@ (adr r2, 8008860 <UART_SetConfig+0x300>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008885 	.word	0x08008885
 8008864:	080088a3 	.word	0x080088a3
 8008868:	0800888d 	.word	0x0800888d
 800886c:	080088a3 	.word	0x080088a3
 8008870:	08008893 	.word	0x08008893
 8008874:	080088a3 	.word	0x080088a3
 8008878:	080088a3 	.word	0x080088a3
 800887c:	080088a3 	.word	0x080088a3
 8008880:	0800889b 	.word	0x0800889b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008884:	f7fd f83e 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8008888:	61f8      	str	r0, [r7, #28]
        break;
 800888a:	e010      	b.n	80088ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800888c:	4b8f      	ldr	r3, [pc, #572]	@ (8008acc <UART_SetConfig+0x56c>)
 800888e:	61fb      	str	r3, [r7, #28]
        break;
 8008890:	e00d      	b.n	80088ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008892:	f7fc ff9f 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8008896:	61f8      	str	r0, [r7, #28]
        break;
 8008898:	e009      	b.n	80088ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889e:	61fb      	str	r3, [r7, #28]
        break;
 80088a0:	e005      	b.n	80088ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80fb 	beq.w	8008aac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	4413      	add	r3, r2
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d305      	bcc.n	80088d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d903      	bls.n	80088da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088d8:	e0e8      	b.n	8008aac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	2200      	movs	r2, #0
 80088de:	461c      	mov	r4, r3
 80088e0:	4615      	mov	r5, r2
 80088e2:	f04f 0200 	mov.w	r2, #0
 80088e6:	f04f 0300 	mov.w	r3, #0
 80088ea:	022b      	lsls	r3, r5, #8
 80088ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80088f0:	0222      	lsls	r2, r4, #8
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	6849      	ldr	r1, [r1, #4]
 80088f6:	0849      	lsrs	r1, r1, #1
 80088f8:	2000      	movs	r0, #0
 80088fa:	4688      	mov	r8, r1
 80088fc:	4681      	mov	r9, r0
 80088fe:	eb12 0a08 	adds.w	sl, r2, r8
 8008902:	eb43 0b09 	adc.w	fp, r3, r9
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008914:	4650      	mov	r0, sl
 8008916:	4659      	mov	r1, fp
 8008918:	f7f8 f9b6 	bl	8000c88 <__aeabi_uldivmod>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4613      	mov	r3, r2
 8008922:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800892a:	d308      	bcc.n	800893e <UART_SetConfig+0x3de>
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008932:	d204      	bcs.n	800893e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	e0b6      	b.n	8008aac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008944:	e0b2      	b.n	8008aac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800894e:	d15e      	bne.n	8008a0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008954:	2b08      	cmp	r3, #8
 8008956:	d828      	bhi.n	80089aa <UART_SetConfig+0x44a>
 8008958:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <UART_SetConfig+0x400>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008985 	.word	0x08008985
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008995 	.word	0x08008995
 800896c:	080089ab 	.word	0x080089ab
 8008970:	0800899b 	.word	0x0800899b
 8008974:	080089ab 	.word	0x080089ab
 8008978:	080089ab 	.word	0x080089ab
 800897c:	080089ab 	.word	0x080089ab
 8008980:	080089a3 	.word	0x080089a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008984:	f7fc ffbe 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8008988:	61f8      	str	r0, [r7, #28]
        break;
 800898a:	e014      	b.n	80089b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800898c:	f7fc ffd0 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8008990:	61f8      	str	r0, [r7, #28]
        break;
 8008992:	e010      	b.n	80089b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008994:	4b4d      	ldr	r3, [pc, #308]	@ (8008acc <UART_SetConfig+0x56c>)
 8008996:	61fb      	str	r3, [r7, #28]
        break;
 8008998:	e00d      	b.n	80089b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800899a:	f7fc ff1b 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800899e:	61f8      	str	r0, [r7, #28]
        break;
 80089a0:	e009      	b.n	80089b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a6:	61fb      	str	r3, [r7, #28]
        break;
 80089a8:	e005      	b.n	80089b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80089b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d077      	beq.n	8008aac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	005a      	lsls	r2, r3, #1
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	441a      	add	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	d916      	bls.n	8008a06 <UART_SetConfig+0x4a6>
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089de:	d212      	bcs.n	8008a06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f023 030f 	bic.w	r3, r3, #15
 80089e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	8afb      	ldrh	r3, [r7, #22]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	8afa      	ldrh	r2, [r7, #22]
 8008a02:	60da      	str	r2, [r3, #12]
 8008a04:	e052      	b.n	8008aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a0c:	e04e      	b.n	8008aac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d827      	bhi.n	8008a66 <UART_SetConfig+0x506>
 8008a16:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <UART_SetConfig+0x4bc>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	08008a67 	.word	0x08008a67
 8008a2c:	08008a57 	.word	0x08008a57
 8008a30:	08008a67 	.word	0x08008a67
 8008a34:	08008a67 	.word	0x08008a67
 8008a38:	08008a67 	.word	0x08008a67
 8008a3c:	08008a5f 	.word	0x08008a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a40:	f7fc ff60 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8008a44:	61f8      	str	r0, [r7, #28]
        break;
 8008a46:	e014      	b.n	8008a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7fc ff72 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8008a4c:	61f8      	str	r0, [r7, #28]
        break;
 8008a4e:	e010      	b.n	8008a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a50:	4b1e      	ldr	r3, [pc, #120]	@ (8008acc <UART_SetConfig+0x56c>)
 8008a52:	61fb      	str	r3, [r7, #28]
        break;
 8008a54:	e00d      	b.n	8008a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a56:	f7fc febd 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8008a5a:	61f8      	str	r0, [r7, #28]
        break;
 8008a5c:	e009      	b.n	8008a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a62:	61fb      	str	r3, [r7, #28]
        break;
 8008a64:	e005      	b.n	8008a72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a70:	bf00      	nop
    }

    if (pclk != 0U)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d019      	beq.n	8008aac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	085a      	lsrs	r2, r3, #1
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	441a      	add	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d909      	bls.n	8008aa6 <UART_SetConfig+0x546>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a98:	d205      	bcs.n	8008aa6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60da      	str	r2, [r3, #12]
 8008aa4:	e002      	b.n	8008aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008ab8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3728      	adds	r7, #40	@ 0x28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40008000 	.word	0x40008000
 8008acc:	00f42400 	.word	0x00f42400

08008ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	f003 0310 	and.w	r3, r3, #16
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00a      	beq.n	8008b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	f003 0320 	and.w	r3, r3, #32
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00a      	beq.n	8008ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01a      	beq.n	8008be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bce:	d10a      	bne.n	8008be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00a      	beq.n	8008c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	605a      	str	r2, [r3, #4]
  }
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b098      	sub	sp, #96	@ 0x60
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c24:	f7fa fabe 	bl	80031a4 <HAL_GetTick>
 8008c28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0308 	and.w	r3, r3, #8
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d12e      	bne.n	8008c96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c40:	2200      	movs	r2, #0
 8008c42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f88c 	bl	8008d64 <UART_WaitOnFlagUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d021      	beq.n	8008c96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e6      	bne.n	8008c52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e062      	b.n	8008d5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d149      	bne.n	8008d38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cac:	2200      	movs	r2, #0
 8008cae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f856 	bl	8008d64 <UART_WaitOnFlagUntilTimeout>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d03c      	beq.n	8008d38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	623b      	str	r3, [r7, #32]
   return(result);
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e6      	bne.n	8008cbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0301 	bic.w	r3, r3, #1
 8008d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d10:	61fa      	str	r2, [r7, #28]
 8008d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	69b9      	ldr	r1, [r7, #24]
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e5      	bne.n	8008cf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e011      	b.n	8008d5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3758      	adds	r7, #88	@ 0x58
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	4613      	mov	r3, r2
 8008d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d74:	e04f      	b.n	8008e16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d7c:	d04b      	beq.n	8008e16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7e:	f7fa fa11 	bl	80031a4 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e04e      	b.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d037      	beq.n	8008e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b80      	cmp	r3, #128	@ 0x80
 8008daa:	d034      	beq.n	8008e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d031      	beq.n	8008e16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d110      	bne.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f8ff 	bl	8008fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e029      	b.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008df0:	d111      	bne.n	8008e16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f8e5 	bl	8008fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e00f      	b.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69da      	ldr	r2, [r3, #28]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	bf0c      	ite	eq
 8008e26:	2301      	moveq	r3, #1
 8008e28:	2300      	movne	r3, #0
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d0a0      	beq.n	8008d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b097      	sub	sp, #92	@ 0x5c
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	88fa      	ldrh	r2, [r7, #6]
 8008e58:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	88fa      	ldrh	r2, [r7, #6]
 8008e60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e72:	d10e      	bne.n	8008e92 <UART_Start_Receive_IT+0x52>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <UART_Start_Receive_IT+0x48>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e86:	e02d      	b.n	8008ee4 <UART_Start_Receive_IT+0xa4>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	22ff      	movs	r2, #255	@ 0xff
 8008e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e90:	e028      	b.n	8008ee4 <UART_Start_Receive_IT+0xa4>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <UART_Start_Receive_IT+0x76>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d104      	bne.n	8008eac <UART_Start_Receive_IT+0x6c>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	22ff      	movs	r2, #255	@ 0xff
 8008ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008eaa:	e01b      	b.n	8008ee4 <UART_Start_Receive_IT+0xa4>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	227f      	movs	r2, #127	@ 0x7f
 8008eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008eb4:	e016      	b.n	8008ee4 <UART_Start_Receive_IT+0xa4>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ebe:	d10d      	bne.n	8008edc <UART_Start_Receive_IT+0x9c>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <UART_Start_Receive_IT+0x92>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	227f      	movs	r2, #127	@ 0x7f
 8008ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008ed0:	e008      	b.n	8008ee4 <UART_Start_Receive_IT+0xa4>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	223f      	movs	r2, #63	@ 0x3f
 8008ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008eda:	e003      	b.n	8008ee4 <UART_Start_Receive_IT+0xa4>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2222      	movs	r2, #34	@ 0x22
 8008ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f06:	f043 0301 	orr.w	r3, r3, #1
 8008f0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3308      	adds	r3, #8
 8008f12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f14:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f16:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e5      	bne.n	8008ef4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f30:	d107      	bne.n	8008f42 <UART_Start_Receive_IT+0x102>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	4a21      	ldr	r2, [pc, #132]	@ (8008fc4 <UART_Start_Receive_IT+0x184>)
 8008f3e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008f40:	e002      	b.n	8008f48 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4a20      	ldr	r2, [pc, #128]	@ (8008fc8 <UART_Start_Receive_IT+0x188>)
 8008f46:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d019      	beq.n	8008f84 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f70:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e6      	bne.n	8008f50 <UART_Start_Receive_IT+0x110>
 8008f82:	e018      	b.n	8008fb6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	613b      	str	r3, [r7, #16]
   return(result);
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f043 0320 	orr.w	r3, r3, #32
 8008f98:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fa2:	623b      	str	r3, [r7, #32]
 8008fa4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	69f9      	ldr	r1, [r7, #28]
 8008fa8:	6a3a      	ldr	r2, [r7, #32]
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e6      	bne.n	8008f84 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	375c      	adds	r7, #92	@ 0x5c
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	080092d1 	.word	0x080092d1
 8008fc8:	08009115 	.word	0x08009115

08008fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b095      	sub	sp, #84	@ 0x54
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e6      	bne.n	8008fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	61fb      	str	r3, [r7, #28]
   return(result);
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009028:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800902c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e5      	bne.n	8009006 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800903e:	2b01      	cmp	r3, #1
 8009040:	d118      	bne.n	8009074 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f023 0310 	bic.w	r3, r3, #16
 8009056:	647b      	str	r3, [r7, #68]	@ 0x44
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009060:	61bb      	str	r3, [r7, #24]
 8009062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6979      	ldr	r1, [r7, #20]
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	613b      	str	r3, [r7, #16]
   return(result);
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e6      	bne.n	8009042 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009088:	bf00      	nop
 800908a:	3754      	adds	r7, #84	@ 0x54
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff fa3e 	bl	8008534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6979      	ldr	r1, [r7, #20]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	613b      	str	r3, [r7, #16]
   return(result);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e6      	bne.n	80090c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fa0a 	bl	8008520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910c:	bf00      	nop
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b09c      	sub	sp, #112	@ 0x70
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009122:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912c:	2b22      	cmp	r3, #34	@ 0x22
 800912e:	f040 80be 	bne.w	80092ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009138:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800913c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009140:	b2d9      	uxtb	r1, r3
 8009142:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009146:	b2da      	uxtb	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914c:	400a      	ands	r2, r1
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009162:	b29b      	uxth	r3, r3
 8009164:	3b01      	subs	r3, #1
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 80a3 	bne.w	80092c2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800918a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800918c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009190:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800919a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800919c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e6      	bne.n	800917c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c0:	f023 0301 	bic.w	r3, r3, #1
 80091c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3308      	adds	r3, #8
 80091cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80091d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e5      	bne.n	80091ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a34      	ldr	r2, [pc, #208]	@ (80092cc <UART_RxISR_8BIT+0x1b8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d01f      	beq.n	8009240 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d018      	beq.n	8009240 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	623b      	str	r3, [r7, #32]
   return(result);
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009222:	663b      	str	r3, [r7, #96]	@ 0x60
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800922c:	633b      	str	r3, [r7, #48]	@ 0x30
 800922e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800923a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e6      	bne.n	800920e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009244:	2b01      	cmp	r3, #1
 8009246:	d12e      	bne.n	80092a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	60fb      	str	r3, [r7, #12]
   return(result);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f023 0310 	bic.w	r3, r3, #16
 8009262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	69b9      	ldr	r1, [r7, #24]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	617b      	str	r3, [r7, #20]
   return(result);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e6      	bne.n	800924e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b10      	cmp	r3, #16
 800928c:	d103      	bne.n	8009296 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2210      	movs	r2, #16
 8009294:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff f952 	bl	8008548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a4:	e00d      	b.n	80092c2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f8 fd54 	bl	8001d54 <HAL_UART_RxCpltCallback>
}
 80092ac:	e009      	b.n	80092c2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	8b1b      	ldrh	r3, [r3, #24]
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0208 	orr.w	r2, r2, #8
 80092be:	b292      	uxth	r2, r2
 80092c0:	831a      	strh	r2, [r3, #24]
}
 80092c2:	bf00      	nop
 80092c4:	3770      	adds	r7, #112	@ 0x70
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40008000 	.word	0x40008000

080092d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b09c      	sub	sp, #112	@ 0x70
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092e8:	2b22      	cmp	r3, #34	@ 0x22
 80092ea:	f040 80be 	bne.w	800946a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80092f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80092fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009302:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009306:	4013      	ands	r3, r2
 8009308:	b29a      	uxth	r2, r3
 800930a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800930c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009312:	1c9a      	adds	r2, r3, #2
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009330:	b29b      	uxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 80a3 	bne.w	800947e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800934c:	667b      	str	r3, [r7, #100]	@ 0x64
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009356:	657b      	str	r3, [r7, #84]	@ 0x54
 8009358:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800935c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e6      	bne.n	8009338 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	663b      	str	r3, [r7, #96]	@ 0x60
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800938a:	643a      	str	r2, [r7, #64]	@ 0x40
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009390:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e5      	bne.n	800936a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a34      	ldr	r2, [pc, #208]	@ (8009488 <UART_RxISR_16BIT+0x1b8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d01f      	beq.n	80093fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d018      	beq.n	80093fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e6      	bne.n	80093ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009400:	2b01      	cmp	r3, #1
 8009402:	d12e      	bne.n	8009462 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	60bb      	str	r3, [r7, #8]
   return(result);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f023 0310 	bic.w	r3, r3, #16
 800941e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6979      	ldr	r1, [r7, #20]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	613b      	str	r3, [r7, #16]
   return(result);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e6      	bne.n	800940a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f003 0310 	and.w	r3, r3, #16
 8009446:	2b10      	cmp	r3, #16
 8009448:	d103      	bne.n	8009452 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2210      	movs	r2, #16
 8009450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff f874 	bl	8008548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009460:	e00d      	b.n	800947e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f8 fc76 	bl	8001d54 <HAL_UART_RxCpltCallback>
}
 8009468:	e009      	b.n	800947e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	8b1b      	ldrh	r3, [r3, #24]
 8009470:	b29a      	uxth	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0208 	orr.w	r2, r2, #8
 800947a:	b292      	uxth	r2, r2
 800947c:	831a      	strh	r2, [r3, #24]
}
 800947e:	bf00      	nop
 8009480:	3770      	adds	r7, #112	@ 0x70
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40008000 	.word	0x40008000

0800948c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094a0:	b084      	sub	sp, #16
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	f107 001c 	add.w	r0, r7, #28
 80094ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa68 	bl	8009994 <USB_CoreReset>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80094c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d106      	bne.n	80094de <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	639a      	str	r2, [r3, #56]	@ 0x38
 80094dc:	e005      	b.n	80094ea <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094f6:	b004      	add	sp, #16
 80094f8:	4770      	bx	lr

080094fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f023 0201 	bic.w	r2, r3, #1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d115      	bne.n	800956a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800954a:	200a      	movs	r0, #10
 800954c:	f7f9 fe36 	bl	80031bc <HAL_Delay>
      ms += 10U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	330a      	adds	r3, #10
 8009554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa0e 	bl	8009978 <USB_GetMode>
 800955c:	4603      	mov	r3, r0
 800955e:	2b01      	cmp	r3, #1
 8009560:	d01e      	beq.n	80095a0 <USB_SetCurrentMode+0x84>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2bc7      	cmp	r3, #199	@ 0xc7
 8009566:	d9f0      	bls.n	800954a <USB_SetCurrentMode+0x2e>
 8009568:	e01a      	b.n	80095a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d115      	bne.n	800959c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800957c:	200a      	movs	r0, #10
 800957e:	f7f9 fe1d 	bl	80031bc <HAL_Delay>
      ms += 10U;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	330a      	adds	r3, #10
 8009586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f9f5 	bl	8009978 <USB_GetMode>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d005      	beq.n	80095a0 <USB_SetCurrentMode+0x84>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2bc7      	cmp	r3, #199	@ 0xc7
 8009598:	d9f0      	bls.n	800957c <USB_SetCurrentMode+0x60>
 800959a:	e001      	b.n	80095a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e005      	b.n	80095ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80095a4:	d101      	bne.n	80095aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095b4:	b084      	sub	sp, #16
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b086      	sub	sp, #24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80095c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095ce:	2300      	movs	r3, #0
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	e009      	b.n	80095e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	3340      	adds	r3, #64	@ 0x40
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3301      	adds	r3, #1
 80095e6:	613b      	str	r3, [r7, #16]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b0e      	cmp	r3, #14
 80095ec:	d9f2      	bls.n	80095d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d11c      	bne.n	8009630 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009604:	f043 0302 	orr.w	r3, r3, #2
 8009608:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e005      	b.n	800963c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009642:	461a      	mov	r2, r3
 8009644:	2300      	movs	r3, #0
 8009646:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009648:	2103      	movs	r1, #3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f95a 	bl	8009904 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009650:	2110      	movs	r1, #16
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f8f6 	bl	8009844 <USB_FlushTxFifo>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f920 	bl	80098a8 <USB_FlushRxFifo>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009678:	461a      	mov	r2, r3
 800967a:	2300      	movs	r3, #0
 800967c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009684:	461a      	mov	r2, r3
 8009686:	2300      	movs	r3, #0
 8009688:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009690:	461a      	mov	r2, r3
 8009692:	2300      	movs	r3, #0
 8009694:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	e043      	b.n	8009724 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096b2:	d118      	bne.n	80096e6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c6:	461a      	mov	r2, r3
 80096c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	e013      	b.n	80096f8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096dc:	461a      	mov	r2, r3
 80096de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e008      	b.n	80096f8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f2:	461a      	mov	r2, r3
 80096f4:	2300      	movs	r3, #0
 80096f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009704:	461a      	mov	r2, r3
 8009706:	2300      	movs	r3, #0
 8009708:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009716:	461a      	mov	r2, r3
 8009718:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800971c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3301      	adds	r3, #1
 8009722:	613b      	str	r3, [r7, #16]
 8009724:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009728:	461a      	mov	r2, r3
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	4293      	cmp	r3, r2
 800972e:	d3b5      	bcc.n	800969c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
 8009734:	e043      	b.n	80097be <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800974c:	d118      	bne.n	8009780 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009760:	461a      	mov	r2, r3
 8009762:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	e013      	b.n	8009792 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009776:	461a      	mov	r2, r3
 8009778:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	e008      	b.n	8009792 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800978c:	461a      	mov	r2, r3
 800978e:	2300      	movs	r3, #0
 8009790:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979e:	461a      	mov	r2, r3
 80097a0:	2300      	movs	r3, #0
 80097a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b0:	461a      	mov	r2, r3
 80097b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	3301      	adds	r3, #1
 80097bc:	613b      	str	r3, [r7, #16]
 80097be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097c2:	461a      	mov	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d3b5      	bcc.n	8009736 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80097ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	f043 0210 	orr.w	r2, r3, #16
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	4b10      	ldr	r3, [pc, #64]	@ (8009840 <USB_DevInit+0x28c>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009804:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f043 0208 	orr.w	r2, r3, #8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009818:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800981c:	2b01      	cmp	r3, #1
 800981e:	d107      	bne.n	8009830 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009828:	f043 0304 	orr.w	r3, r3, #4
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800983c:	b004      	add	sp, #16
 800983e:	4770      	bx	lr
 8009840:	803c3800 	.word	0x803c3800

08009844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800985e:	d901      	bls.n	8009864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e01b      	b.n	800989c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	daf2      	bge.n	8009852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	019b      	lsls	r3, r3, #6
 8009874:	f043 0220 	orr.w	r2, r3, #32
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3301      	adds	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009888:	d901      	bls.n	800988e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e006      	b.n	800989c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b20      	cmp	r3, #32
 8009898:	d0f0      	beq.n	800987c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098c0:	d901      	bls.n	80098c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e018      	b.n	80098f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	daf2      	bge.n	80098b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2210      	movs	r2, #16
 80098d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098e4:	d901      	bls.n	80098ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e006      	b.n	80098f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0310 	and.w	r3, r3, #16
 80098f2:	2b10      	cmp	r3, #16
 80098f4:	d0f0      	beq.n	80098d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009924:	4313      	orrs	r3, r2
 8009926:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009936:	b480      	push	{r7}
 8009938:	b085      	sub	sp, #20
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009950:	f023 0303 	bic.w	r3, r3, #3
 8009954:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009964:	f043 0302 	orr.w	r3, r3, #2
 8009968:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	f003 0301 	and.w	r3, r3, #1
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099ac:	d901      	bls.n	80099b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e01b      	b.n	80099ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	daf2      	bge.n	80099a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f043 0201 	orr.w	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099d6:	d901      	bls.n	80099dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e006      	b.n	80099ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d0f0      	beq.n	80099ca <USB_CoreReset+0x36>

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	4603      	mov	r3, r0
 80099fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a08:	2b84      	cmp	r3, #132	@ 0x84
 8009a0a:	d005      	beq.n	8009a18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	3303      	adds	r3, #3
 8009a16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a18:	68fb      	ldr	r3, [r7, #12]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a2a:	f000 fe39 	bl	800a6a0 <vTaskStartScheduler>
  
  return osOK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a36:	b089      	sub	sp, #36	@ 0x24
 8009a38:	af04      	add	r7, sp, #16
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d020      	beq.n	8009a88 <osThreadCreate+0x54>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d01c      	beq.n	8009a88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685c      	ldr	r4, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691e      	ldr	r6, [r3, #16]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ffc8 	bl	80099f6 <makeFreeRtosPriority>
 8009a66:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a70:	9202      	str	r2, [sp, #8]
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	9100      	str	r1, [sp, #0]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	4632      	mov	r2, r6
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fc29 	bl	800a2d4 <xTaskCreateStatic>
 8009a82:	4603      	mov	r3, r0
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	e01c      	b.n	8009ac2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685c      	ldr	r4, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a94:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff ffaa 	bl	80099f6 <makeFreeRtosPriority>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	f107 030c 	add.w	r3, r7, #12
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	9200      	str	r2, [sp, #0]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	4632      	mov	r2, r6
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 fc6e 	bl	800a394 <xTaskCreate>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d001      	beq.n	8009ac2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e000      	b.n	8009ac4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009acc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <osDelay+0x16>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	e000      	b.n	8009ae4 <osDelay+0x18>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fda5 	bl	800a634 <vTaskDelay>
  
  return osOK;
 8009aea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f103 0208 	add.w	r2, r3, #8
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f103 0208 	add.w	r2, r3, #8
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f103 0208 	add.w	r2, r3, #8
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b085      	sub	sp, #20
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bac:	d103      	bne.n	8009bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e00c      	b.n	8009bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e002      	b.n	8009bc4 <vListInsert+0x2e>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d2f6      	bcs.n	8009bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	601a      	str	r2, [r3, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6892      	ldr	r2, [r2, #8]
 8009c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6852      	ldr	r2, [r2, #4]
 8009c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d103      	bne.n	8009c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	689a      	ldr	r2, [r3, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	1e5a      	subs	r2, r3, #1
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10b      	bne.n	8009c88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	e7fd      	b.n	8009c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c88:	f001 fb66 	bl	800b358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c94:	68f9      	ldr	r1, [r7, #12]
 8009c96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	441a      	add	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009cbe:	fb01 f303 	mul.w	r3, r1, r3
 8009cc2:	441a      	add	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	22ff      	movs	r2, #255	@ 0xff
 8009ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	22ff      	movs	r2, #255	@ 0xff
 8009cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d114      	bne.n	8009d08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01a      	beq.n	8009d1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3310      	adds	r3, #16
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 ff32 	bl	800ab54 <xTaskRemoveFromEventList>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d012      	beq.n	8009d1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <xQueueGenericReset+0xd0>)
 8009cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	e009      	b.n	8009d1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3310      	adds	r3, #16
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff fef1 	bl	8009af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3324      	adds	r3, #36	@ 0x24
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff feec 	bl	8009af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d1c:	f001 fb4e 	bl	800b3bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d20:	2301      	movs	r3, #1
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	@ 0x28
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10b      	bne.n	8009d5c <xQueueGenericCreate+0x2c>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	613b      	str	r3, [r7, #16]
}
 8009d56:	bf00      	nop
 8009d58:	bf00      	nop
 8009d5a:	e7fd      	b.n	8009d58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	fb02 f303 	mul.w	r3, r2, r3
 8009d64:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	3348      	adds	r3, #72	@ 0x48
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fc16 	bl	800b59c <pvPortMalloc>
 8009d70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d011      	beq.n	8009d9c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	3348      	adds	r3, #72	@ 0x48
 8009d80:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d8a:	79fa      	ldrb	r2, [r7, #7]
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	4613      	mov	r3, r2
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f805 	bl	8009da6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
	}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3720      	adds	r7, #32
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d103      	bne.n	8009dc2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	e002      	b.n	8009dc8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	69b8      	ldr	r0, [r7, #24]
 8009dd8:	f7ff ff40 	bl	8009c5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ddc:	bf00      	nop
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b090      	sub	sp, #64	@ 0x40
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <xQueueGenericSendFromISR+0x3e>
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <xQueueGenericSendFromISR+0x42>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueGenericSendFromISR+0x44>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10b      	bne.n	8009e44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e3e:	bf00      	nop
 8009e40:	bf00      	nop
 8009e42:	e7fd      	b.n	8009e40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d103      	bne.n	8009e52 <xQueueGenericSendFromISR+0x6e>
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <xQueueGenericSendFromISR+0x72>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <xQueueGenericSendFromISR+0x74>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	623b      	str	r3, [r7, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e74:	f001 fb50 	bl	800b518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e78:	f3ef 8211 	mrs	r2, BASEPRI
 8009e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	61fa      	str	r2, [r7, #28]
 8009e8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d302      	bcc.n	8009ea6 <xQueueGenericSendFromISR+0xc2>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d12f      	bne.n	8009f06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009eac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ebc:	f000 f912 	bl	800a0e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ec0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ec8:	d112      	bne.n	8009ef0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d016      	beq.n	8009f00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	3324      	adds	r3, #36	@ 0x24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fe3c 	bl	800ab54 <xTaskRemoveFromEventList>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00e      	beq.n	8009f00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00b      	beq.n	8009f00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e007      	b.n	8009f00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	b25a      	sxtb	r2, r3
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009f00:	2301      	movs	r3, #1
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009f04:	e001      	b.n	8009f0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3740      	adds	r7, #64	@ 0x40
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08c      	sub	sp, #48	@ 0x30
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10b      	bne.n	8009f52 <xQueueReceive+0x32>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	623b      	str	r3, [r7, #32]
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	e7fd      	b.n	8009f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d103      	bne.n	8009f60 <xQueueReceive+0x40>
 8009f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <xQueueReceive+0x44>
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <xQueueReceive+0x46>
 8009f64:	2300      	movs	r3, #0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <xQueueReceive+0x62>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	61fb      	str	r3, [r7, #28]
}
 8009f7c:	bf00      	nop
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f82:	f000 ffad 	bl	800aee0 <xTaskGetSchedulerState>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d102      	bne.n	8009f92 <xQueueReceive+0x72>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <xQueueReceive+0x76>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <xQueueReceive+0x78>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10b      	bne.n	8009fb4 <xQueueReceive+0x94>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	61bb      	str	r3, [r7, #24]
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fb4:	f001 f9d0 	bl	800b358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d01f      	beq.n	800a004 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fc8:	f000 f8f6 	bl	800a1b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fce:	1e5a      	subs	r2, r3, #1
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00f      	beq.n	8009ffc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fde:	3310      	adds	r3, #16
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fdb7 	bl	800ab54 <xTaskRemoveFromEventList>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fec:	4b3c      	ldr	r3, [pc, #240]	@ (800a0e0 <xQueueReceive+0x1c0>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ffc:	f001 f9de 	bl	800b3bc <vPortExitCritical>
				return pdPASS;
 800a000:	2301      	movs	r3, #1
 800a002:	e069      	b.n	800a0d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d103      	bne.n	800a012 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a00a:	f001 f9d7 	bl	800b3bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a00e:	2300      	movs	r3, #0
 800a010:	e062      	b.n	800a0d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d106      	bne.n	800a026 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a018:	f107 0310 	add.w	r3, r7, #16
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fdfd 	bl	800ac1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a022:	2301      	movs	r3, #1
 800a024:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a026:	f001 f9c9 	bl	800b3bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a02a:	f000 fba3 	bl	800a774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a02e:	f001 f993 	bl	800b358 <vPortEnterCritical>
 800a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a038:	b25b      	sxtb	r3, r3
 800a03a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a03e:	d103      	bne.n	800a048 <xQueueReceive+0x128>
 800a040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a04e:	b25b      	sxtb	r3, r3
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a054:	d103      	bne.n	800a05e <xQueueReceive+0x13e>
 800a056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a05e:	f001 f9ad 	bl	800b3bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a062:	1d3a      	adds	r2, r7, #4
 800a064:	f107 0310 	add.w	r3, r7, #16
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fdec 	bl	800ac48 <xTaskCheckForTimeOut>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d123      	bne.n	800a0be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a078:	f000 f916 	bl	800a2a8 <prvIsQueueEmpty>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d017      	beq.n	800a0b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	3324      	adds	r3, #36	@ 0x24
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fd3c 	bl	800ab08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a092:	f000 f8b7 	bl	800a204 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a096:	f000 fb7b 	bl	800a790 <xTaskResumeAll>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d189      	bne.n	8009fb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e0 <xQueueReceive+0x1c0>)
 800a0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	e780      	b.n	8009fb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a0b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0b4:	f000 f8a6 	bl	800a204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0b8:	f000 fb6a 	bl	800a790 <xTaskResumeAll>
 800a0bc:	e77a      	b.n	8009fb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a0be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0c0:	f000 f8a0 	bl	800a204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0c4:	f000 fb64 	bl	800a790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ca:	f000 f8ed 	bl	800a2a8 <prvIsQueueEmpty>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f43f af6f 	beq.w	8009fb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3730      	adds	r7, #48	@ 0x30
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10d      	bne.n	800a11e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d14d      	bne.n	800a1a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 ff04 	bl	800af1c <xTaskPriorityDisinherit>
 800a114:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	609a      	str	r2, [r3, #8]
 800a11c:	e043      	b.n	800a1a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d119      	bne.n	800a158 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6858      	ldr	r0, [r3, #4]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a12c:	461a      	mov	r2, r3
 800a12e:	68b9      	ldr	r1, [r7, #8]
 800a130:	f002 fdc1 	bl	800ccb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	441a      	add	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d32b      	bcc.n	800a1a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	605a      	str	r2, [r3, #4]
 800a156:	e026      	b.n	800a1a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68d8      	ldr	r0, [r3, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a160:	461a      	mov	r2, r3
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	f002 fda7 	bl	800ccb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	68da      	ldr	r2, [r3, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a170:	425b      	negs	r3, r3
 800a172:	441a      	add	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d207      	bcs.n	800a194 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18c:	425b      	negs	r3, r3
 800a18e:	441a      	add	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d105      	bne.n	800a1a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	1c5a      	adds	r2, r3, #1
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a1ae:	697b      	ldr	r3, [r7, #20]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d018      	beq.n	800a1fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d2:	441a      	add	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68da      	ldr	r2, [r3, #12]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d303      	bcc.n	800a1ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68d9      	ldr	r1, [r3, #12]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6838      	ldr	r0, [r7, #0]
 800a1f8:	f002 fd5d 	bl	800ccb6 <memcpy>
	}
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a20c:	f001 f8a4 	bl	800b358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a216:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a218:	e011      	b.n	800a23e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d012      	beq.n	800a248 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3324      	adds	r3, #36	@ 0x24
 800a226:	4618      	mov	r0, r3
 800a228:	f000 fc94 	bl	800ab54 <xTaskRemoveFromEventList>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a232:	f000 fd6d 	bl	800ad10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	3b01      	subs	r3, #1
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a242:	2b00      	cmp	r3, #0
 800a244:	dce9      	bgt.n	800a21a <prvUnlockQueue+0x16>
 800a246:	e000      	b.n	800a24a <prvUnlockQueue+0x46>
					break;
 800a248:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	22ff      	movs	r2, #255	@ 0xff
 800a24e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a252:	f001 f8b3 	bl	800b3bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a256:	f001 f87f 	bl	800b358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a260:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a262:	e011      	b.n	800a288 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d012      	beq.n	800a292 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3310      	adds	r3, #16
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fc6f 	bl	800ab54 <xTaskRemoveFromEventList>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a27c:	f000 fd48 	bl	800ad10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	3b01      	subs	r3, #1
 800a284:	b2db      	uxtb	r3, r3
 800a286:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dce9      	bgt.n	800a264 <prvUnlockQueue+0x60>
 800a290:	e000      	b.n	800a294 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a292:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	22ff      	movs	r2, #255	@ 0xff
 800a298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a29c:	f001 f88e 	bl	800b3bc <vPortExitCritical>
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2b0:	f001 f852 	bl	800b358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e001      	b.n	800a2c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2c6:	f001 f879 	bl	800b3bc <vPortExitCritical>

	return xReturn;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08e      	sub	sp, #56	@ 0x38
 800a2d8:	af04      	add	r7, sp, #16
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10b      	bne.n	800a300 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	623b      	str	r3, [r7, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	61fb      	str	r3, [r7, #28]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a31e:	23a0      	movs	r3, #160	@ 0xa0
 800a320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2ba0      	cmp	r3, #160	@ 0xa0
 800a326:	d00b      	beq.n	800a340 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61bb      	str	r3, [r7, #24]
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	e7fd      	b.n	800a33c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a340:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01e      	beq.n	800a386 <xTaskCreateStatic+0xb2>
 800a348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01b      	beq.n	800a386 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a356:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a360:	2300      	movs	r3, #0
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	f107 0314 	add.w	r3, r7, #20
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f851 	bl	800a420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a37e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a380:	f000 f8ee 	bl	800a560 <prvAddNewTaskToReadyList>
 800a384:	e001      	b.n	800a38a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a38a:	697b      	ldr	r3, [r7, #20]
	}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3728      	adds	r7, #40	@ 0x28
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08c      	sub	sp, #48	@ 0x30
 800a398:	af04      	add	r7, sp, #16
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f001 f8f7 	bl	800b59c <pvPortMalloc>
 800a3ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00e      	beq.n	800a3d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a3b6:	20a0      	movs	r0, #160	@ 0xa0
 800a3b8:	f001 f8f0 	bl	800b59c <pvPortMalloc>
 800a3bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3ca:	e005      	b.n	800a3d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a3cc:	6978      	ldr	r0, [r7, #20]
 800a3ce:	f001 f9b3 	bl	800b738 <vPortFree>
 800a3d2:	e001      	b.n	800a3d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d017      	beq.n	800a40e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3e6:	88fa      	ldrh	r2, [r7, #6]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9303      	str	r3, [sp, #12]
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	9302      	str	r3, [sp, #8]
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f80f 	bl	800a420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a402:	69f8      	ldr	r0, [r7, #28]
 800a404:	f000 f8ac 	bl	800a560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a408:	2301      	movs	r3, #1
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e002      	b.n	800a414 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a40e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a412:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a414:	69bb      	ldr	r3, [r7, #24]
	}
 800a416:	4618      	mov	r0, r3
 800a418:	3720      	adds	r7, #32
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a438:	3b01      	subs	r3, #1
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	f023 0307 	bic.w	r3, r3, #7
 800a446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	617b      	str	r3, [r7, #20]
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	e7fd      	b.n	800a466 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01f      	beq.n	800a4b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a470:	2300      	movs	r3, #0
 800a472:	61fb      	str	r3, [r7, #28]
 800a474:	e012      	b.n	800a49c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	7819      	ldrb	r1, [r3, #0]
 800a47e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	4413      	add	r3, r2
 800a484:	3334      	adds	r3, #52	@ 0x34
 800a486:	460a      	mov	r2, r1
 800a488:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	4413      	add	r3, r2
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d006      	beq.n	800a4a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	3301      	adds	r3, #1
 800a49a:	61fb      	str	r3, [r7, #28]
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	2b0f      	cmp	r3, #15
 800a4a0:	d9e9      	bls.n	800a476 <prvInitialiseNewTask+0x56>
 800a4a2:	e000      	b.n	800a4a6 <prvInitialiseNewTask+0x86>
			{
				break;
 800a4a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a4ae:	e003      	b.n	800a4b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	d901      	bls.n	800a4c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4be:	2306      	movs	r3, #6
 800a4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fb2b 	bl	8009b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	3318      	adds	r3, #24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fb26 	bl	8009b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	f1c3 0207 	rsb	r2, r3, #7
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	2200      	movs	r2, #0
 800a502:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	334c      	adds	r3, #76	@ 0x4c
 800a512:	224c      	movs	r2, #76	@ 0x4c
 800a514:	2100      	movs	r1, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f002 faf8 	bl	800cb0c <memset>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	4a0d      	ldr	r2, [pc, #52]	@ (800a554 <prvInitialiseNewTask+0x134>)
 800a520:	651a      	str	r2, [r3, #80]	@ 0x50
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	4a0c      	ldr	r2, [pc, #48]	@ (800a558 <prvInitialiseNewTask+0x138>)
 800a526:	655a      	str	r2, [r3, #84]	@ 0x54
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	4a0c      	ldr	r2, [pc, #48]	@ (800a55c <prvInitialiseNewTask+0x13c>)
 800a52c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	68f9      	ldr	r1, [r7, #12]
 800a532:	69b8      	ldr	r0, [r7, #24]
 800a534:	f000 fde0 	bl	800b0f8 <pxPortInitialiseStack>
 800a538:	4602      	mov	r2, r0
 800a53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a54a:	bf00      	nop
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20001aa4 	.word	0x20001aa4
 800a558:	20001b0c 	.word	0x20001b0c
 800a55c:	20001b74 	.word	0x20001b74

0800a560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a568:	f000 fef6 	bl	800b358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a56c:	4b2a      	ldr	r3, [pc, #168]	@ (800a618 <prvAddNewTaskToReadyList+0xb8>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3301      	adds	r3, #1
 800a572:	4a29      	ldr	r2, [pc, #164]	@ (800a618 <prvAddNewTaskToReadyList+0xb8>)
 800a574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a576:	4b29      	ldr	r3, [pc, #164]	@ (800a61c <prvAddNewTaskToReadyList+0xbc>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d109      	bne.n	800a592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a57e:	4a27      	ldr	r2, [pc, #156]	@ (800a61c <prvAddNewTaskToReadyList+0xbc>)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a584:	4b24      	ldr	r3, [pc, #144]	@ (800a618 <prvAddNewTaskToReadyList+0xb8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d110      	bne.n	800a5ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a58c:	f000 fbe4 	bl	800ad58 <prvInitialiseTaskLists>
 800a590:	e00d      	b.n	800a5ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a592:	4b23      	ldr	r3, [pc, #140]	@ (800a620 <prvAddNewTaskToReadyList+0xc0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d109      	bne.n	800a5ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a59a:	4b20      	ldr	r3, [pc, #128]	@ (800a61c <prvAddNewTaskToReadyList+0xbc>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d802      	bhi.n	800a5ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a61c <prvAddNewTaskToReadyList+0xbc>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a624 <prvAddNewTaskToReadyList+0xc4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a624 <prvAddNewTaskToReadyList+0xc4>)
 800a5b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5bc:	2201      	movs	r2, #1
 800a5be:	409a      	lsls	r2, r3
 800a5c0:	4b19      	ldr	r3, [pc, #100]	@ (800a628 <prvAddNewTaskToReadyList+0xc8>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	4a18      	ldr	r2, [pc, #96]	@ (800a628 <prvAddNewTaskToReadyList+0xc8>)
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4a15      	ldr	r2, [pc, #84]	@ (800a62c <prvAddNewTaskToReadyList+0xcc>)
 800a5d8:	441a      	add	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7ff fab4 	bl	8009b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5e6:	f000 fee9 	bl	800b3bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a620 <prvAddNewTaskToReadyList+0xc0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00e      	beq.n	800a610 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a61c <prvAddNewTaskToReadyList+0xbc>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d207      	bcs.n	800a610 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a600:	4b0b      	ldr	r3, [pc, #44]	@ (800a630 <prvAddNewTaskToReadyList+0xd0>)
 800a602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000e98 	.word	0x20000e98
 800a61c:	20000d98 	.word	0x20000d98
 800a620:	20000ea4 	.word	0x20000ea4
 800a624:	20000eb4 	.word	0x20000eb4
 800a628:	20000ea0 	.word	0x20000ea0
 800a62c:	20000d9c 	.word	0x20000d9c
 800a630:	e000ed04 	.word	0xe000ed04

0800a634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d018      	beq.n	800a678 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a646:	4b14      	ldr	r3, [pc, #80]	@ (800a698 <vTaskDelay+0x64>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00b      	beq.n	800a666 <vTaskDelay+0x32>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	60bb      	str	r3, [r7, #8]
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	e7fd      	b.n	800a662 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a666:	f000 f885 	bl	800a774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a66a:	2100      	movs	r1, #0
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fcdd 	bl	800b02c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a672:	f000 f88d 	bl	800a790 <xTaskResumeAll>
 800a676:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d107      	bne.n	800a68e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a67e:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <vTaskDelay+0x68>)
 800a680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20000ec0 	.word	0x20000ec0
 800a69c:	e000ed04 	.word	0xe000ed04

0800a6a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08a      	sub	sp, #40	@ 0x28
 800a6a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6ae:	463a      	mov	r2, r7
 800a6b0:	1d39      	adds	r1, r7, #4
 800a6b2:	f107 0308 	add.w	r3, r7, #8
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f6 fcf6 	bl	80010a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	9202      	str	r2, [sp, #8]
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	460a      	mov	r2, r1
 800a6ce:	4921      	ldr	r1, [pc, #132]	@ (800a754 <vTaskStartScheduler+0xb4>)
 800a6d0:	4821      	ldr	r0, [pc, #132]	@ (800a758 <vTaskStartScheduler+0xb8>)
 800a6d2:	f7ff fdff 	bl	800a2d4 <xTaskCreateStatic>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4a20      	ldr	r2, [pc, #128]	@ (800a75c <vTaskStartScheduler+0xbc>)
 800a6da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a75c <vTaskStartScheduler+0xbc>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	e001      	b.n	800a6ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d11b      	bne.n	800a72c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	613b      	str	r3, [r7, #16]
}
 800a706:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a708:	4b15      	ldr	r3, [pc, #84]	@ (800a760 <vTaskStartScheduler+0xc0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	334c      	adds	r3, #76	@ 0x4c
 800a70e:	4a15      	ldr	r2, [pc, #84]	@ (800a764 <vTaskStartScheduler+0xc4>)
 800a710:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a712:	4b15      	ldr	r3, [pc, #84]	@ (800a768 <vTaskStartScheduler+0xc8>)
 800a714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a718:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a71a:	4b14      	ldr	r3, [pc, #80]	@ (800a76c <vTaskStartScheduler+0xcc>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a720:	4b13      	ldr	r3, [pc, #76]	@ (800a770 <vTaskStartScheduler+0xd0>)
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a726:	f000 fd73 	bl	800b210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a72a:	e00f      	b.n	800a74c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a732:	d10b      	bne.n	800a74c <vTaskStartScheduler+0xac>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	e7fd      	b.n	800a748 <vTaskStartScheduler+0xa8>
}
 800a74c:	bf00      	nop
 800a74e:	3718      	adds	r7, #24
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	0801045c 	.word	0x0801045c
 800a758:	0800ad29 	.word	0x0800ad29
 800a75c:	20000ebc 	.word	0x20000ebc
 800a760:	20000d98 	.word	0x20000d98
 800a764:	20000028 	.word	0x20000028
 800a768:	20000eb8 	.word	0x20000eb8
 800a76c:	20000ea4 	.word	0x20000ea4
 800a770:	20000e9c 	.word	0x20000e9c

0800a774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a778:	4b04      	ldr	r3, [pc, #16]	@ (800a78c <vTaskSuspendAll+0x18>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3301      	adds	r3, #1
 800a77e:	4a03      	ldr	r2, [pc, #12]	@ (800a78c <vTaskSuspendAll+0x18>)
 800a780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a782:	bf00      	nop
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	20000ec0 	.word	0x20000ec0

0800a790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a79a:	2300      	movs	r3, #0
 800a79c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a79e:	4b42      	ldr	r3, [pc, #264]	@ (800a8a8 <xTaskResumeAll+0x118>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10b      	bne.n	800a7be <xTaskResumeAll+0x2e>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	603b      	str	r3, [r7, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7be:	f000 fdcb 	bl	800b358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7c2:	4b39      	ldr	r3, [pc, #228]	@ (800a8a8 <xTaskResumeAll+0x118>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	4a37      	ldr	r2, [pc, #220]	@ (800a8a8 <xTaskResumeAll+0x118>)
 800a7ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7cc:	4b36      	ldr	r3, [pc, #216]	@ (800a8a8 <xTaskResumeAll+0x118>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d161      	bne.n	800a898 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7d4:	4b35      	ldr	r3, [pc, #212]	@ (800a8ac <xTaskResumeAll+0x11c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d05d      	beq.n	800a898 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7dc:	e02e      	b.n	800a83c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7de:	4b34      	ldr	r3, [pc, #208]	@ (800a8b0 <xTaskResumeAll+0x120>)
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3318      	adds	r3, #24
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff fa0c 	bl	8009c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff fa07 	bl	8009c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fe:	2201      	movs	r2, #1
 800a800:	409a      	lsls	r2, r3
 800a802:	4b2c      	ldr	r3, [pc, #176]	@ (800a8b4 <xTaskResumeAll+0x124>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4313      	orrs	r3, r2
 800a808:	4a2a      	ldr	r2, [pc, #168]	@ (800a8b4 <xTaskResumeAll+0x124>)
 800a80a:	6013      	str	r3, [r2, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4a27      	ldr	r2, [pc, #156]	@ (800a8b8 <xTaskResumeAll+0x128>)
 800a81a:	441a      	add	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3304      	adds	r3, #4
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7ff f993 	bl	8009b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a82c:	4b23      	ldr	r3, [pc, #140]	@ (800a8bc <xTaskResumeAll+0x12c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a832:	429a      	cmp	r2, r3
 800a834:	d302      	bcc.n	800a83c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a836:	4b22      	ldr	r3, [pc, #136]	@ (800a8c0 <xTaskResumeAll+0x130>)
 800a838:	2201      	movs	r2, #1
 800a83a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a83c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b0 <xTaskResumeAll+0x120>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1cc      	bne.n	800a7de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a84a:	f000 fb29 	bl	800aea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a84e:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c4 <xTaskResumeAll+0x134>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d010      	beq.n	800a87c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a85a:	f000 f837 	bl	800a8cc <xTaskIncrementTick>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a864:	4b16      	ldr	r3, [pc, #88]	@ (800a8c0 <xTaskResumeAll+0x130>)
 800a866:	2201      	movs	r2, #1
 800a868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f1      	bne.n	800a85a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a876:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <xTaskResumeAll+0x134>)
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a87c:	4b10      	ldr	r3, [pc, #64]	@ (800a8c0 <xTaskResumeAll+0x130>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a884:	2301      	movs	r3, #1
 800a886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a888:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c8 <xTaskResumeAll+0x138>)
 800a88a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a898:	f000 fd90 	bl	800b3bc <vPortExitCritical>

	return xAlreadyYielded;
 800a89c:	68bb      	ldr	r3, [r7, #8]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000ec0 	.word	0x20000ec0
 800a8ac:	20000e98 	.word	0x20000e98
 800a8b0:	20000e58 	.word	0x20000e58
 800a8b4:	20000ea0 	.word	0x20000ea0
 800a8b8:	20000d9c 	.word	0x20000d9c
 800a8bc:	20000d98 	.word	0x20000d98
 800a8c0:	20000eac 	.word	0x20000eac
 800a8c4:	20000ea8 	.word	0x20000ea8
 800a8c8:	e000ed04 	.word	0xe000ed04

0800a8cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8d6:	4b4f      	ldr	r3, [pc, #316]	@ (800aa14 <xTaskIncrementTick+0x148>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 808f 	bne.w	800a9fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8e0:	4b4d      	ldr	r3, [pc, #308]	@ (800aa18 <xTaskIncrementTick+0x14c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8e8:	4a4b      	ldr	r2, [pc, #300]	@ (800aa18 <xTaskIncrementTick+0x14c>)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d121      	bne.n	800a938 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8f4:	4b49      	ldr	r3, [pc, #292]	@ (800aa1c <xTaskIncrementTick+0x150>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	603b      	str	r3, [r7, #0]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <xTaskIncrementTick+0x46>
 800a916:	4b41      	ldr	r3, [pc, #260]	@ (800aa1c <xTaskIncrementTick+0x150>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	4b40      	ldr	r3, [pc, #256]	@ (800aa20 <xTaskIncrementTick+0x154>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a3e      	ldr	r2, [pc, #248]	@ (800aa1c <xTaskIncrementTick+0x150>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	4a3e      	ldr	r2, [pc, #248]	@ (800aa20 <xTaskIncrementTick+0x154>)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	4b3e      	ldr	r3, [pc, #248]	@ (800aa24 <xTaskIncrementTick+0x158>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	4a3c      	ldr	r2, [pc, #240]	@ (800aa24 <xTaskIncrementTick+0x158>)
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	f000 fab4 	bl	800aea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a938:	4b3b      	ldr	r3, [pc, #236]	@ (800aa28 <xTaskIncrementTick+0x15c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d348      	bcc.n	800a9d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a942:	4b36      	ldr	r3, [pc, #216]	@ (800aa1c <xTaskIncrementTick+0x150>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d104      	bne.n	800a956 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a94c:	4b36      	ldr	r3, [pc, #216]	@ (800aa28 <xTaskIncrementTick+0x15c>)
 800a94e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a952:	601a      	str	r2, [r3, #0]
					break;
 800a954:	e03e      	b.n	800a9d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a956:	4b31      	ldr	r3, [pc, #196]	@ (800aa1c <xTaskIncrementTick+0x150>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d203      	bcs.n	800a976 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a96e:	4a2e      	ldr	r2, [pc, #184]	@ (800aa28 <xTaskIncrementTick+0x15c>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a974:	e02e      	b.n	800a9d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	3304      	adds	r3, #4
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff f944 	bl	8009c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a984:	2b00      	cmp	r3, #0
 800a986:	d004      	beq.n	800a992 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	3318      	adds	r3, #24
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff f93b 	bl	8009c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a996:	2201      	movs	r2, #1
 800a998:	409a      	lsls	r2, r3
 800a99a:	4b24      	ldr	r3, [pc, #144]	@ (800aa2c <xTaskIncrementTick+0x160>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	4a22      	ldr	r2, [pc, #136]	@ (800aa2c <xTaskIncrementTick+0x160>)
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4a1f      	ldr	r2, [pc, #124]	@ (800aa30 <xTaskIncrementTick+0x164>)
 800a9b2:	441a      	add	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7ff f8c7 	bl	8009b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c4:	4b1b      	ldr	r3, [pc, #108]	@ (800aa34 <xTaskIncrementTick+0x168>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d3b9      	bcc.n	800a942 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9d2:	e7b6      	b.n	800a942 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9d4:	4b17      	ldr	r3, [pc, #92]	@ (800aa34 <xTaskIncrementTick+0x168>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9da:	4915      	ldr	r1, [pc, #84]	@ (800aa30 <xTaskIncrementTick+0x164>)
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	440b      	add	r3, r1
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d901      	bls.n	800a9f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9f0:	4b11      	ldr	r3, [pc, #68]	@ (800aa38 <xTaskIncrementTick+0x16c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d007      	beq.n	800aa08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	617b      	str	r3, [r7, #20]
 800a9fc:	e004      	b.n	800aa08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800aa3c <xTaskIncrementTick+0x170>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3301      	adds	r3, #1
 800aa04:	4a0d      	ldr	r2, [pc, #52]	@ (800aa3c <xTaskIncrementTick+0x170>)
 800aa06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa08:	697b      	ldr	r3, [r7, #20]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20000ec0 	.word	0x20000ec0
 800aa18:	20000e9c 	.word	0x20000e9c
 800aa1c:	20000e50 	.word	0x20000e50
 800aa20:	20000e54 	.word	0x20000e54
 800aa24:	20000eb0 	.word	0x20000eb0
 800aa28:	20000eb8 	.word	0x20000eb8
 800aa2c:	20000ea0 	.word	0x20000ea0
 800aa30:	20000d9c 	.word	0x20000d9c
 800aa34:	20000d98 	.word	0x20000d98
 800aa38:	20000eac 	.word	0x20000eac
 800aa3c:	20000ea8 	.word	0x20000ea8

0800aa40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa46:	4b2a      	ldr	r3, [pc, #168]	@ (800aaf0 <vTaskSwitchContext+0xb0>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa4e:	4b29      	ldr	r3, [pc, #164]	@ (800aaf4 <vTaskSwitchContext+0xb4>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa54:	e045      	b.n	800aae2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800aa56:	4b27      	ldr	r3, [pc, #156]	@ (800aaf4 <vTaskSwitchContext+0xb4>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5c:	4b26      	ldr	r3, [pc, #152]	@ (800aaf8 <vTaskSwitchContext+0xb8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	fab3 f383 	clz	r3, r3
 800aa68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa6a:	7afb      	ldrb	r3, [r7, #11]
 800aa6c:	f1c3 031f 	rsb	r3, r3, #31
 800aa70:	617b      	str	r3, [r7, #20]
 800aa72:	4922      	ldr	r1, [pc, #136]	@ (800aafc <vTaskSwitchContext+0xbc>)
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	440b      	add	r3, r1
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10b      	bne.n	800aa9e <vTaskSwitchContext+0x5e>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	607b      	str	r3, [r7, #4]
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <vTaskSwitchContext+0x5a>
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4a14      	ldr	r2, [pc, #80]	@ (800aafc <vTaskSwitchContext+0xbc>)
 800aaaa:	4413      	add	r3, r2
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	605a      	str	r2, [r3, #4]
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3308      	adds	r3, #8
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d104      	bne.n	800aace <vTaskSwitchContext+0x8e>
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	4a0a      	ldr	r2, [pc, #40]	@ (800ab00 <vTaskSwitchContext+0xc0>)
 800aad6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aad8:	4b09      	ldr	r3, [pc, #36]	@ (800ab00 <vTaskSwitchContext+0xc0>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	334c      	adds	r3, #76	@ 0x4c
 800aade:	4a09      	ldr	r2, [pc, #36]	@ (800ab04 <vTaskSwitchContext+0xc4>)
 800aae0:	6013      	str	r3, [r2, #0]
}
 800aae2:	bf00      	nop
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	20000ec0 	.word	0x20000ec0
 800aaf4:	20000eac 	.word	0x20000eac
 800aaf8:	20000ea0 	.word	0x20000ea0
 800aafc:	20000d9c 	.word	0x20000d9c
 800ab00:	20000d98 	.word	0x20000d98
 800ab04:	20000028 	.word	0x20000028

0800ab08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10b      	bne.n	800ab30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	60fb      	str	r3, [r7, #12]
}
 800ab2a:	bf00      	nop
 800ab2c:	bf00      	nop
 800ab2e:	e7fd      	b.n	800ab2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab30:	4b07      	ldr	r3, [pc, #28]	@ (800ab50 <vTaskPlaceOnEventList+0x48>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3318      	adds	r3, #24
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff f82c 	bl	8009b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab3e:	2101      	movs	r1, #1
 800ab40:	6838      	ldr	r0, [r7, #0]
 800ab42:	f000 fa73 	bl	800b02c <prvAddCurrentTaskToDelayedList>
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000d98 	.word	0x20000d98

0800ab54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10b      	bne.n	800ab82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	60fb      	str	r3, [r7, #12]
}
 800ab7c:	bf00      	nop
 800ab7e:	bf00      	nop
 800ab80:	e7fd      	b.n	800ab7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	3318      	adds	r3, #24
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff f83e 	bl	8009c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab8c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac04 <xTaskRemoveFromEventList+0xb0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d11c      	bne.n	800abce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff f835 	bl	8009c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba2:	2201      	movs	r2, #1
 800aba4:	409a      	lsls	r2, r3
 800aba6:	4b18      	ldr	r3, [pc, #96]	@ (800ac08 <xTaskRemoveFromEventList+0xb4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4313      	orrs	r3, r2
 800abac:	4a16      	ldr	r2, [pc, #88]	@ (800ac08 <xTaskRemoveFromEventList+0xb4>)
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4a13      	ldr	r2, [pc, #76]	@ (800ac0c <xTaskRemoveFromEventList+0xb8>)
 800abbe:	441a      	add	r2, r3
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fe ffc1 	bl	8009b4e <vListInsertEnd>
 800abcc:	e005      	b.n	800abda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	3318      	adds	r3, #24
 800abd2:	4619      	mov	r1, r3
 800abd4:	480e      	ldr	r0, [pc, #56]	@ (800ac10 <xTaskRemoveFromEventList+0xbc>)
 800abd6:	f7fe ffba 	bl	8009b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abde:	4b0d      	ldr	r3, [pc, #52]	@ (800ac14 <xTaskRemoveFromEventList+0xc0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d905      	bls.n	800abf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abe8:	2301      	movs	r3, #1
 800abea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abec:	4b0a      	ldr	r3, [pc, #40]	@ (800ac18 <xTaskRemoveFromEventList+0xc4>)
 800abee:	2201      	movs	r2, #1
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	e001      	b.n	800abf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800abf8:	697b      	ldr	r3, [r7, #20]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20000ec0 	.word	0x20000ec0
 800ac08:	20000ea0 	.word	0x20000ea0
 800ac0c:	20000d9c 	.word	0x20000d9c
 800ac10:	20000e58 	.word	0x20000e58
 800ac14:	20000d98 	.word	0x20000d98
 800ac18:	20000eac 	.word	0x20000eac

0800ac1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac24:	4b06      	ldr	r3, [pc, #24]	@ (800ac40 <vTaskInternalSetTimeOutState+0x24>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac2c:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <vTaskInternalSetTimeOutState+0x28>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	605a      	str	r2, [r3, #4]
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000eb0 	.word	0x20000eb0
 800ac44:	20000e9c 	.word	0x20000e9c

0800ac48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10b      	bne.n	800ac70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	613b      	str	r3, [r7, #16]
}
 800ac6a:	bf00      	nop
 800ac6c:	bf00      	nop
 800ac6e:	e7fd      	b.n	800ac6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10b      	bne.n	800ac8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	60fb      	str	r3, [r7, #12]
}
 800ac88:	bf00      	nop
 800ac8a:	bf00      	nop
 800ac8c:	e7fd      	b.n	800ac8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ac8e:	f000 fb63 	bl	800b358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac92:	4b1d      	ldr	r3, [pc, #116]	@ (800ad08 <xTaskCheckForTimeOut+0xc0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acaa:	d102      	bne.n	800acb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acac:	2300      	movs	r3, #0
 800acae:	61fb      	str	r3, [r7, #28]
 800acb0:	e023      	b.n	800acfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b15      	ldr	r3, [pc, #84]	@ (800ad0c <xTaskCheckForTimeOut+0xc4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d007      	beq.n	800acce <xTaskCheckForTimeOut+0x86>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d302      	bcc.n	800acce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800acc8:	2301      	movs	r3, #1
 800acca:	61fb      	str	r3, [r7, #28]
 800accc:	e015      	b.n	800acfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d20b      	bcs.n	800acf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	1ad2      	subs	r2, r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff ff99 	bl	800ac1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	e004      	b.n	800acfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800acf6:	2301      	movs	r3, #1
 800acf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800acfa:	f000 fb5f 	bl	800b3bc <vPortExitCritical>

	return xReturn;
 800acfe:	69fb      	ldr	r3, [r7, #28]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3720      	adds	r7, #32
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000e9c 	.word	0x20000e9c
 800ad0c:	20000eb0 	.word	0x20000eb0

0800ad10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad10:	b480      	push	{r7}
 800ad12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad14:	4b03      	ldr	r3, [pc, #12]	@ (800ad24 <vTaskMissedYield+0x14>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
}
 800ad1a:	bf00      	nop
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000eac 	.word	0x20000eac

0800ad28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad30:	f000 f852 	bl	800add8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad34:	4b06      	ldr	r3, [pc, #24]	@ (800ad50 <prvIdleTask+0x28>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d9f9      	bls.n	800ad30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad3c:	4b05      	ldr	r3, [pc, #20]	@ (800ad54 <prvIdleTask+0x2c>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad4c:	e7f0      	b.n	800ad30 <prvIdleTask+0x8>
 800ad4e:	bf00      	nop
 800ad50:	20000d9c 	.word	0x20000d9c
 800ad54:	e000ed04 	.word	0xe000ed04

0800ad58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad5e:	2300      	movs	r3, #0
 800ad60:	607b      	str	r3, [r7, #4]
 800ad62:	e00c      	b.n	800ad7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4a12      	ldr	r2, [pc, #72]	@ (800adb8 <prvInitialiseTaskLists+0x60>)
 800ad70:	4413      	add	r3, r2
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe febe 	bl	8009af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	607b      	str	r3, [r7, #4]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b06      	cmp	r3, #6
 800ad82:	d9ef      	bls.n	800ad64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad84:	480d      	ldr	r0, [pc, #52]	@ (800adbc <prvInitialiseTaskLists+0x64>)
 800ad86:	f7fe feb5 	bl	8009af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad8a:	480d      	ldr	r0, [pc, #52]	@ (800adc0 <prvInitialiseTaskLists+0x68>)
 800ad8c:	f7fe feb2 	bl	8009af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad90:	480c      	ldr	r0, [pc, #48]	@ (800adc4 <prvInitialiseTaskLists+0x6c>)
 800ad92:	f7fe feaf 	bl	8009af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad96:	480c      	ldr	r0, [pc, #48]	@ (800adc8 <prvInitialiseTaskLists+0x70>)
 800ad98:	f7fe feac 	bl	8009af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad9c:	480b      	ldr	r0, [pc, #44]	@ (800adcc <prvInitialiseTaskLists+0x74>)
 800ad9e:	f7fe fea9 	bl	8009af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ada2:	4b0b      	ldr	r3, [pc, #44]	@ (800add0 <prvInitialiseTaskLists+0x78>)
 800ada4:	4a05      	ldr	r2, [pc, #20]	@ (800adbc <prvInitialiseTaskLists+0x64>)
 800ada6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	@ (800add4 <prvInitialiseTaskLists+0x7c>)
 800adaa:	4a05      	ldr	r2, [pc, #20]	@ (800adc0 <prvInitialiseTaskLists+0x68>)
 800adac:	601a      	str	r2, [r3, #0]
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20000d9c 	.word	0x20000d9c
 800adbc:	20000e28 	.word	0x20000e28
 800adc0:	20000e3c 	.word	0x20000e3c
 800adc4:	20000e58 	.word	0x20000e58
 800adc8:	20000e6c 	.word	0x20000e6c
 800adcc:	20000e84 	.word	0x20000e84
 800add0:	20000e50 	.word	0x20000e50
 800add4:	20000e54 	.word	0x20000e54

0800add8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adde:	e019      	b.n	800ae14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ade0:	f000 faba 	bl	800b358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade4:	4b10      	ldr	r3, [pc, #64]	@ (800ae28 <prvCheckTasksWaitingTermination+0x50>)
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3304      	adds	r3, #4
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe ff09 	bl	8009c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800adf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ae2c <prvCheckTasksWaitingTermination+0x54>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	4a0b      	ldr	r2, [pc, #44]	@ (800ae2c <prvCheckTasksWaitingTermination+0x54>)
 800adfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae00:	4b0b      	ldr	r3, [pc, #44]	@ (800ae30 <prvCheckTasksWaitingTermination+0x58>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	4a0a      	ldr	r2, [pc, #40]	@ (800ae30 <prvCheckTasksWaitingTermination+0x58>)
 800ae08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae0a:	f000 fad7 	bl	800b3bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f810 	bl	800ae34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae14:	4b06      	ldr	r3, [pc, #24]	@ (800ae30 <prvCheckTasksWaitingTermination+0x58>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e1      	bne.n	800ade0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20000e6c 	.word	0x20000e6c
 800ae2c:	20000e98 	.word	0x20000e98
 800ae30:	20000e80 	.word	0x20000e80

0800ae34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	334c      	adds	r3, #76	@ 0x4c
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 fe7f 	bl	800cb44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d108      	bne.n	800ae62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fc6f 	bl	800b738 <vPortFree>
				vPortFree( pxTCB );
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fc6c 	bl	800b738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae60:	e019      	b.n	800ae96 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d103      	bne.n	800ae74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fc63 	bl	800b738 <vPortFree>
	}
 800ae72:	e010      	b.n	800ae96 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d00b      	beq.n	800ae96 <prvDeleteTCB+0x62>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	60fb      	str	r3, [r7, #12]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <prvDeleteTCB+0x5e>
	}
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aea6:	4b0c      	ldr	r3, [pc, #48]	@ (800aed8 <prvResetNextTaskUnblockTime+0x38>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <prvResetNextTaskUnblockTime+0x3c>)
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aeb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aeb8:	e008      	b.n	800aecc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeba:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <prvResetNextTaskUnblockTime+0x38>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4a04      	ldr	r2, [pc, #16]	@ (800aedc <prvResetNextTaskUnblockTime+0x3c>)
 800aeca:	6013      	str	r3, [r2, #0]
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000e50 	.word	0x20000e50
 800aedc:	20000eb8 	.word	0x20000eb8

0800aee0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aee6:	4b0b      	ldr	r3, [pc, #44]	@ (800af14 <xTaskGetSchedulerState+0x34>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aeee:	2301      	movs	r3, #1
 800aef0:	607b      	str	r3, [r7, #4]
 800aef2:	e008      	b.n	800af06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef4:	4b08      	ldr	r3, [pc, #32]	@ (800af18 <xTaskGetSchedulerState+0x38>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d102      	bne.n	800af02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aefc:	2302      	movs	r3, #2
 800aefe:	607b      	str	r3, [r7, #4]
 800af00:	e001      	b.n	800af06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af02:	2300      	movs	r3, #0
 800af04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af06:	687b      	ldr	r3, [r7, #4]
	}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20000ea4 	.word	0x20000ea4
 800af18:	20000ec0 	.word	0x20000ec0

0800af1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af28:	2300      	movs	r3, #0
 800af2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d070      	beq.n	800b014 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af32:	4b3b      	ldr	r3, [pc, #236]	@ (800b020 <xTaskPriorityDisinherit+0x104>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d00b      	beq.n	800af54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	60fb      	str	r3, [r7, #12]
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	e7fd      	b.n	800af50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10b      	bne.n	800af74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	60bb      	str	r3, [r7, #8]
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	e7fd      	b.n	800af70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af78:	1e5a      	subs	r2, r3, #1
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af86:	429a      	cmp	r2, r3
 800af88:	d044      	beq.n	800b014 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d140      	bne.n	800b014 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	3304      	adds	r3, #4
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fe36 	bl	8009c08 <uxListRemove>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d115      	bne.n	800afce <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa6:	491f      	ldr	r1, [pc, #124]	@ (800b024 <xTaskPriorityDisinherit+0x108>)
 800afa8:	4613      	mov	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	440b      	add	r3, r1
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10a      	bne.n	800afce <xTaskPriorityDisinherit+0xb2>
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	2201      	movs	r2, #1
 800afbe:	fa02 f303 	lsl.w	r3, r2, r3
 800afc2:	43da      	mvns	r2, r3
 800afc4:	4b18      	ldr	r3, [pc, #96]	@ (800b028 <xTaskPriorityDisinherit+0x10c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4013      	ands	r3, r2
 800afca:	4a17      	ldr	r2, [pc, #92]	@ (800b028 <xTaskPriorityDisinherit+0x10c>)
 800afcc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afda:	f1c3 0207 	rsb	r2, r3, #7
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe6:	2201      	movs	r2, #1
 800afe8:	409a      	lsls	r2, r3
 800afea:	4b0f      	ldr	r3, [pc, #60]	@ (800b028 <xTaskPriorityDisinherit+0x10c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4313      	orrs	r3, r2
 800aff0:	4a0d      	ldr	r2, [pc, #52]	@ (800b028 <xTaskPriorityDisinherit+0x10c>)
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff8:	4613      	mov	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4a08      	ldr	r2, [pc, #32]	@ (800b024 <xTaskPriorityDisinherit+0x108>)
 800b002:	441a      	add	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	3304      	adds	r3, #4
 800b008:	4619      	mov	r1, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	f7fe fd9f 	bl	8009b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b010:	2301      	movs	r3, #1
 800b012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b014:	697b      	ldr	r3, [r7, #20]
	}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20000d98 	.word	0x20000d98
 800b024:	20000d9c 	.word	0x20000d9c
 800b028:	20000ea0 	.word	0x20000ea0

0800b02c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b036:	4b29      	ldr	r3, [pc, #164]	@ (800b0dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b03c:	4b28      	ldr	r3, [pc, #160]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3304      	adds	r3, #4
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe fde0 	bl	8009c08 <uxListRemove>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10b      	bne.n	800b066 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b04e:	4b24      	ldr	r3, [pc, #144]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	2201      	movs	r2, #1
 800b056:	fa02 f303 	lsl.w	r3, r2, r3
 800b05a:	43da      	mvns	r2, r3
 800b05c:	4b21      	ldr	r3, [pc, #132]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4013      	ands	r3, r2
 800b062:	4a20      	ldr	r2, [pc, #128]	@ (800b0e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b064:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b06c:	d10a      	bne.n	800b084 <prvAddCurrentTaskToDelayedList+0x58>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d007      	beq.n	800b084 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b074:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3304      	adds	r3, #4
 800b07a:	4619      	mov	r1, r3
 800b07c:	481a      	ldr	r0, [pc, #104]	@ (800b0e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b07e:	f7fe fd66 	bl	8009b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b082:	e026      	b.n	800b0d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4413      	add	r3, r2
 800b08a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b08c:	4b14      	ldr	r3, [pc, #80]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d209      	bcs.n	800b0b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b09c:	4b13      	ldr	r3, [pc, #76]	@ (800b0ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7fe fd74 	bl	8009b96 <vListInsert>
}
 800b0ae:	e010      	b.n	800b0d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7fe fd6a 	bl	8009b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d202      	bcs.n	800b0d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b0cc:	4a09      	ldr	r2, [pc, #36]	@ (800b0f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6013      	str	r3, [r2, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000e9c 	.word	0x20000e9c
 800b0e0:	20000d98 	.word	0x20000d98
 800b0e4:	20000ea0 	.word	0x20000ea0
 800b0e8:	20000e84 	.word	0x20000e84
 800b0ec:	20000e54 	.word	0x20000e54
 800b0f0:	20000e50 	.word	0x20000e50
 800b0f4:	20000eb8 	.word	0x20000eb8

0800b0f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3b04      	subs	r3, #4
 800b108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3b04      	subs	r3, #4
 800b116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	f023 0201 	bic.w	r2, r3, #1
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3b04      	subs	r3, #4
 800b126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b128:	4a0c      	ldr	r2, [pc, #48]	@ (800b15c <pxPortInitialiseStack+0x64>)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3b14      	subs	r3, #20
 800b132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3b04      	subs	r3, #4
 800b13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f06f 0202 	mvn.w	r2, #2
 800b146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3b20      	subs	r3, #32
 800b14c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b14e:	68fb      	ldr	r3, [r7, #12]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3714      	adds	r7, #20
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	0800b161 	.word	0x0800b161

0800b160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b16a:	4b13      	ldr	r3, [pc, #76]	@ (800b1b8 <prvTaskExitError+0x58>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b172:	d00b      	beq.n	800b18c <prvTaskExitError+0x2c>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	60fb      	str	r3, [r7, #12]
}
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	e7fd      	b.n	800b188 <prvTaskExitError+0x28>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	60bb      	str	r3, [r7, #8]
}
 800b19e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1a0:	bf00      	nop
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0fc      	beq.n	800b1a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	20000018 	.word	0x20000018
 800b1bc:	00000000 	.word	0x00000000

0800b1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1c0:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <pxCurrentTCBConst2>)
 800b1c2:	6819      	ldr	r1, [r3, #0]
 800b1c4:	6808      	ldr	r0, [r1, #0]
 800b1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	f380 8809 	msr	PSP, r0
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f04f 0000 	mov.w	r0, #0
 800b1d6:	f380 8811 	msr	BASEPRI, r0
 800b1da:	4770      	bx	lr
 800b1dc:	f3af 8000 	nop.w

0800b1e0 <pxCurrentTCBConst2>:
 800b1e0:	20000d98 	.word	0x20000d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop

0800b1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1e8:	4808      	ldr	r0, [pc, #32]	@ (800b20c <prvPortStartFirstTask+0x24>)
 800b1ea:	6800      	ldr	r0, [r0, #0]
 800b1ec:	6800      	ldr	r0, [r0, #0]
 800b1ee:	f380 8808 	msr	MSP, r0
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f380 8814 	msr	CONTROL, r0
 800b1fa:	b662      	cpsie	i
 800b1fc:	b661      	cpsie	f
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	df00      	svc	0
 800b208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b20a:	bf00      	nop
 800b20c:	e000ed08 	.word	0xe000ed08

0800b210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b216:	4b47      	ldr	r3, [pc, #284]	@ (800b334 <xPortStartScheduler+0x124>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a47      	ldr	r2, [pc, #284]	@ (800b338 <xPortStartScheduler+0x128>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d10b      	bne.n	800b238 <xPortStartScheduler+0x28>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	613b      	str	r3, [r7, #16]
}
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	e7fd      	b.n	800b234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b238:	4b3e      	ldr	r3, [pc, #248]	@ (800b334 <xPortStartScheduler+0x124>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a3f      	ldr	r2, [pc, #252]	@ (800b33c <xPortStartScheduler+0x12c>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d10b      	bne.n	800b25a <xPortStartScheduler+0x4a>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	60fb      	str	r3, [r7, #12]
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	e7fd      	b.n	800b256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b25a:	4b39      	ldr	r3, [pc, #228]	@ (800b340 <xPortStartScheduler+0x130>)
 800b25c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	22ff      	movs	r2, #255	@ 0xff
 800b26a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b2db      	uxtb	r3, r3
 800b272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	4b31      	ldr	r3, [pc, #196]	@ (800b344 <xPortStartScheduler+0x134>)
 800b280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b282:	4b31      	ldr	r3, [pc, #196]	@ (800b348 <xPortStartScheduler+0x138>)
 800b284:	2207      	movs	r2, #7
 800b286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b288:	e009      	b.n	800b29e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b28a:	4b2f      	ldr	r3, [pc, #188]	@ (800b348 <xPortStartScheduler+0x138>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3b01      	subs	r3, #1
 800b290:	4a2d      	ldr	r2, [pc, #180]	@ (800b348 <xPortStartScheduler+0x138>)
 800b292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2a6:	2b80      	cmp	r3, #128	@ 0x80
 800b2a8:	d0ef      	beq.n	800b28a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2aa:	4b27      	ldr	r3, [pc, #156]	@ (800b348 <xPortStartScheduler+0x138>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f1c3 0307 	rsb	r3, r3, #7
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	d00b      	beq.n	800b2ce <xPortStartScheduler+0xbe>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	60bb      	str	r3, [r7, #8]
}
 800b2c8:	bf00      	nop
 800b2ca:	bf00      	nop
 800b2cc:	e7fd      	b.n	800b2ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b348 <xPortStartScheduler+0x138>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	021b      	lsls	r3, r3, #8
 800b2d4:	4a1c      	ldr	r2, [pc, #112]	@ (800b348 <xPortStartScheduler+0x138>)
 800b2d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b348 <xPortStartScheduler+0x138>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2e0:	4a19      	ldr	r2, [pc, #100]	@ (800b348 <xPortStartScheduler+0x138>)
 800b2e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2ec:	4b17      	ldr	r3, [pc, #92]	@ (800b34c <xPortStartScheduler+0x13c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a16      	ldr	r2, [pc, #88]	@ (800b34c <xPortStartScheduler+0x13c>)
 800b2f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b2f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2f8:	4b14      	ldr	r3, [pc, #80]	@ (800b34c <xPortStartScheduler+0x13c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a13      	ldr	r2, [pc, #76]	@ (800b34c <xPortStartScheduler+0x13c>)
 800b2fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b304:	f000 f8da 	bl	800b4bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b308:	4b11      	ldr	r3, [pc, #68]	@ (800b350 <xPortStartScheduler+0x140>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b30e:	f000 f8f9 	bl	800b504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b312:	4b10      	ldr	r3, [pc, #64]	@ (800b354 <xPortStartScheduler+0x144>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a0f      	ldr	r2, [pc, #60]	@ (800b354 <xPortStartScheduler+0x144>)
 800b318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b31c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b31e:	f7ff ff63 	bl	800b1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b322:	f7ff fb8d 	bl	800aa40 <vTaskSwitchContext>
	prvTaskExitError();
 800b326:	f7ff ff1b 	bl	800b160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	e000ed00 	.word	0xe000ed00
 800b338:	410fc271 	.word	0x410fc271
 800b33c:	410fc270 	.word	0x410fc270
 800b340:	e000e400 	.word	0xe000e400
 800b344:	20000ec4 	.word	0x20000ec4
 800b348:	20000ec8 	.word	0x20000ec8
 800b34c:	e000ed20 	.word	0xe000ed20
 800b350:	20000018 	.word	0x20000018
 800b354:	e000ef34 	.word	0xe000ef34

0800b358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	607b      	str	r3, [r7, #4]
}
 800b370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b372:	4b10      	ldr	r3, [pc, #64]	@ (800b3b4 <vPortEnterCritical+0x5c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3301      	adds	r3, #1
 800b378:	4a0e      	ldr	r2, [pc, #56]	@ (800b3b4 <vPortEnterCritical+0x5c>)
 800b37a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b37c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <vPortEnterCritical+0x5c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d110      	bne.n	800b3a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b384:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b8 <vPortEnterCritical+0x60>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00b      	beq.n	800b3a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	603b      	str	r3, [r7, #0]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <vPortEnterCritical+0x4a>
	}
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	20000018 	.word	0x20000018
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3c2:	4b12      	ldr	r3, [pc, #72]	@ (800b40c <vPortExitCritical+0x50>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10b      	bne.n	800b3e2 <vPortExitCritical+0x26>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	607b      	str	r3, [r7, #4]
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	e7fd      	b.n	800b3de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b40c <vPortExitCritical+0x50>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	4a08      	ldr	r2, [pc, #32]	@ (800b40c <vPortExitCritical+0x50>)
 800b3ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3ec:	4b07      	ldr	r3, [pc, #28]	@ (800b40c <vPortExitCritical+0x50>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d105      	bne.n	800b400 <vPortExitCritical+0x44>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	f383 8811 	msr	BASEPRI, r3
}
 800b3fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	20000018 	.word	0x20000018

0800b410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b410:	f3ef 8009 	mrs	r0, PSP
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	4b15      	ldr	r3, [pc, #84]	@ (800b470 <pxCurrentTCBConst>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	f01e 0f10 	tst.w	lr, #16
 800b420:	bf08      	it	eq
 800b422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42a:	6010      	str	r0, [r2, #0]
 800b42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b434:	f380 8811 	msr	BASEPRI, r0
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f7ff fafe 	bl	800aa40 <vTaskSwitchContext>
 800b444:	f04f 0000 	mov.w	r0, #0
 800b448:	f380 8811 	msr	BASEPRI, r0
 800b44c:	bc09      	pop	{r0, r3}
 800b44e:	6819      	ldr	r1, [r3, #0]
 800b450:	6808      	ldr	r0, [r1, #0]
 800b452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b456:	f01e 0f10 	tst.w	lr, #16
 800b45a:	bf08      	it	eq
 800b45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b460:	f380 8809 	msr	PSP, r0
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w

0800b470 <pxCurrentTCBConst>:
 800b470:	20000d98 	.word	0x20000d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop

0800b478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	607b      	str	r3, [r7, #4]
}
 800b490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b492:	f7ff fa1b 	bl	800a8cc <xTaskIncrementTick>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b49c:	4b06      	ldr	r3, [pc, #24]	@ (800b4b8 <SysTick_Handler+0x40>)
 800b49e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	f383 8811 	msr	BASEPRI, r3
}
 800b4ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	e000ed04 	.word	0xe000ed04

0800b4bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f0 <vPortSetupTimerInterrupt+0x34>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f4 <vPortSetupTimerInterrupt+0x38>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f8 <vPortSetupTimerInterrupt+0x3c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b4fc <vPortSetupTimerInterrupt+0x40>)
 800b4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d6:	099b      	lsrs	r3, r3, #6
 800b4d8:	4a09      	ldr	r2, [pc, #36]	@ (800b500 <vPortSetupTimerInterrupt+0x44>)
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4de:	4b04      	ldr	r3, [pc, #16]	@ (800b4f0 <vPortSetupTimerInterrupt+0x34>)
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	601a      	str	r2, [r3, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	e000e010 	.word	0xe000e010
 800b4f4:	e000e018 	.word	0xe000e018
 800b4f8:	20000000 	.word	0x20000000
 800b4fc:	10624dd3 	.word	0x10624dd3
 800b500:	e000e014 	.word	0xe000e014

0800b504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b514 <vPortEnableVFP+0x10>
 800b508:	6801      	ldr	r1, [r0, #0]
 800b50a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b50e:	6001      	str	r1, [r0, #0]
 800b510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b512:	bf00      	nop
 800b514:	e000ed88 	.word	0xe000ed88

0800b518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b51e:	f3ef 8305 	mrs	r3, IPSR
 800b522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b0f      	cmp	r3, #15
 800b528:	d915      	bls.n	800b556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b52a:	4a18      	ldr	r2, [pc, #96]	@ (800b58c <vPortValidateInterruptPriority+0x74>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	4413      	add	r3, r2
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b534:	4b16      	ldr	r3, [pc, #88]	@ (800b590 <vPortValidateInterruptPriority+0x78>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	7afa      	ldrb	r2, [r7, #11]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d20b      	bcs.n	800b556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	e7fd      	b.n	800b552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b556:	4b0f      	ldr	r3, [pc, #60]	@ (800b594 <vPortValidateInterruptPriority+0x7c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b55e:	4b0e      	ldr	r3, [pc, #56]	@ (800b598 <vPortValidateInterruptPriority+0x80>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d90b      	bls.n	800b57e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	603b      	str	r3, [r7, #0]
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	e7fd      	b.n	800b57a <vPortValidateInterruptPriority+0x62>
	}
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	e000e3f0 	.word	0xe000e3f0
 800b590:	20000ec4 	.word	0x20000ec4
 800b594:	e000ed0c 	.word	0xe000ed0c
 800b598:	20000ec8 	.word	0x20000ec8

0800b59c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	@ 0x28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5a8:	f7ff f8e4 	bl	800a774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b720 <pvPortMalloc+0x184>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5b4:	f000 f924 	bl	800b800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5b8:	4b5a      	ldr	r3, [pc, #360]	@ (800b724 <pvPortMalloc+0x188>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4013      	ands	r3, r2
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f040 8095 	bne.w	800b6f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01e      	beq.n	800b60a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b5cc:	2208      	movs	r2, #8
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d015      	beq.n	800b60a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f023 0307 	bic.w	r3, r3, #7
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f003 0307 	and.w	r3, r3, #7
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00b      	beq.n	800b60a <pvPortMalloc+0x6e>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	617b      	str	r3, [r7, #20]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d06f      	beq.n	800b6f0 <pvPortMalloc+0x154>
 800b610:	4b45      	ldr	r3, [pc, #276]	@ (800b728 <pvPortMalloc+0x18c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	429a      	cmp	r2, r3
 800b618:	d86a      	bhi.n	800b6f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b61a:	4b44      	ldr	r3, [pc, #272]	@ (800b72c <pvPortMalloc+0x190>)
 800b61c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b61e:	4b43      	ldr	r3, [pc, #268]	@ (800b72c <pvPortMalloc+0x190>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b624:	e004      	b.n	800b630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	429a      	cmp	r2, r3
 800b638:	d903      	bls.n	800b642 <pvPortMalloc+0xa6>
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1f1      	bne.n	800b626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b642:	4b37      	ldr	r3, [pc, #220]	@ (800b720 <pvPortMalloc+0x184>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b648:	429a      	cmp	r2, r3
 800b64a:	d051      	beq.n	800b6f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2208      	movs	r2, #8
 800b652:	4413      	add	r3, r2
 800b654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	1ad2      	subs	r2, r2, r3
 800b666:	2308      	movs	r3, #8
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d920      	bls.n	800b6b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	f003 0307 	and.w	r3, r3, #7
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00b      	beq.n	800b698 <pvPortMalloc+0xfc>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	613b      	str	r3, [r7, #16]
}
 800b692:	bf00      	nop
 800b694:	bf00      	nop
 800b696:	e7fd      	b.n	800b694 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6aa:	69b8      	ldr	r0, [r7, #24]
 800b6ac:	f000 f90a 	bl	800b8c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b728 <pvPortMalloc+0x18c>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b728 <pvPortMalloc+0x18c>)
 800b6bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6be:	4b1a      	ldr	r3, [pc, #104]	@ (800b728 <pvPortMalloc+0x18c>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b730 <pvPortMalloc+0x194>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d203      	bcs.n	800b6d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6ca:	4b17      	ldr	r3, [pc, #92]	@ (800b728 <pvPortMalloc+0x18c>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a18      	ldr	r2, [pc, #96]	@ (800b730 <pvPortMalloc+0x194>)
 800b6d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	4b13      	ldr	r3, [pc, #76]	@ (800b724 <pvPortMalloc+0x188>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6e6:	4b13      	ldr	r3, [pc, #76]	@ (800b734 <pvPortMalloc+0x198>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	4a11      	ldr	r2, [pc, #68]	@ (800b734 <pvPortMalloc+0x198>)
 800b6ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f0:	f7ff f84e 	bl	800a790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <pvPortMalloc+0x17a>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	60fb      	str	r3, [r7, #12]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <pvPortMalloc+0x176>
	return pvReturn;
 800b716:	69fb      	ldr	r3, [r7, #28]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3728      	adds	r7, #40	@ 0x28
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20001a8c 	.word	0x20001a8c
 800b724:	20001aa0 	.word	0x20001aa0
 800b728:	20001a90 	.word	0x20001a90
 800b72c:	20001a84 	.word	0x20001a84
 800b730:	20001a94 	.word	0x20001a94
 800b734:	20001a98 	.word	0x20001a98

0800b738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d04f      	beq.n	800b7ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b74a:	2308      	movs	r3, #8
 800b74c:	425b      	negs	r3, r3
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	4413      	add	r3, r2
 800b752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	4b25      	ldr	r3, [pc, #148]	@ (800b7f4 <vPortFree+0xbc>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4013      	ands	r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10b      	bne.n	800b77e <vPortFree+0x46>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	60fb      	str	r3, [r7, #12]
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	e7fd      	b.n	800b77a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00b      	beq.n	800b79e <vPortFree+0x66>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60bb      	str	r3, [r7, #8]
}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	e7fd      	b.n	800b79a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	4b14      	ldr	r3, [pc, #80]	@ (800b7f4 <vPortFree+0xbc>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01e      	beq.n	800b7ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d11a      	bne.n	800b7ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f4 <vPortFree+0xbc>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	43db      	mvns	r3, r3
 800b7be:	401a      	ands	r2, r3
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7c4:	f7fe ffd6 	bl	800a774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f8 <vPortFree+0xc0>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	4a09      	ldr	r2, [pc, #36]	@ (800b7f8 <vPortFree+0xc0>)
 800b7d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7d6:	6938      	ldr	r0, [r7, #16]
 800b7d8:	f000 f874 	bl	800b8c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7dc:	4b07      	ldr	r3, [pc, #28]	@ (800b7fc <vPortFree+0xc4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	4a06      	ldr	r2, [pc, #24]	@ (800b7fc <vPortFree+0xc4>)
 800b7e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7e6:	f7fe ffd3 	bl	800a790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ea:	bf00      	nop
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20001aa0 	.word	0x20001aa0
 800b7f8:	20001a90 	.word	0x20001a90
 800b7fc:	20001a9c 	.word	0x20001a9c

0800b800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b806:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b80a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b80c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ac <prvHeapInit+0xac>)
 800b80e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00c      	beq.n	800b834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3307      	adds	r3, #7
 800b81e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0307 	bic.w	r3, r3, #7
 800b826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	4a1f      	ldr	r2, [pc, #124]	@ (800b8ac <prvHeapInit+0xac>)
 800b830:	4413      	add	r3, r2
 800b832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b838:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b0 <prvHeapInit+0xb0>)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b83e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8b0 <prvHeapInit+0xb0>)
 800b840:	2200      	movs	r2, #0
 800b842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	4413      	add	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b84c:	2208      	movs	r2, #8
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	1a9b      	subs	r3, r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0307 	bic.w	r3, r3, #7
 800b85a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4a15      	ldr	r2, [pc, #84]	@ (800b8b4 <prvHeapInit+0xb4>)
 800b860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b862:	4b14      	ldr	r3, [pc, #80]	@ (800b8b4 <prvHeapInit+0xb4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2200      	movs	r2, #0
 800b868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b86a:	4b12      	ldr	r3, [pc, #72]	@ (800b8b4 <prvHeapInit+0xb4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	1ad2      	subs	r2, r2, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b880:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b4 <prvHeapInit+0xb4>)
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b8 <prvHeapInit+0xb8>)
 800b88e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	4a09      	ldr	r2, [pc, #36]	@ (800b8bc <prvHeapInit+0xbc>)
 800b896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b898:	4b09      	ldr	r3, [pc, #36]	@ (800b8c0 <prvHeapInit+0xc0>)
 800b89a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b89e:	601a      	str	r2, [r3, #0]
}
 800b8a0:	bf00      	nop
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	20000ecc 	.word	0x20000ecc
 800b8b0:	20001a84 	.word	0x20001a84
 800b8b4:	20001a8c 	.word	0x20001a8c
 800b8b8:	20001a94 	.word	0x20001a94
 800b8bc:	20001a90 	.word	0x20001a90
 800b8c0:	20001aa0 	.word	0x20001aa0

0800b8c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8cc:	4b28      	ldr	r3, [pc, #160]	@ (800b970 <prvInsertBlockIntoFreeList+0xac>)
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	e002      	b.n	800b8d8 <prvInsertBlockIntoFreeList+0x14>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	60fb      	str	r3, [r7, #12]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d8f7      	bhi.n	800b8d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d108      	bne.n	800b906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	441a      	add	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	429a      	cmp	r2, r3
 800b918:	d118      	bne.n	800b94c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	4b15      	ldr	r3, [pc, #84]	@ (800b974 <prvInsertBlockIntoFreeList+0xb0>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	429a      	cmp	r2, r3
 800b924:	d00d      	beq.n	800b942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	441a      	add	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	e008      	b.n	800b954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b942:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <prvInsertBlockIntoFreeList+0xb0>)
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	e003      	b.n	800b954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d002      	beq.n	800b962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b962:	bf00      	nop
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20001a84 	.word	0x20001a84
 800b974:	20001a8c 	.word	0x20001a8c

0800b978 <__cvt>:
 800b978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	ec57 6b10 	vmov	r6, r7, d0
 800b980:	2f00      	cmp	r7, #0
 800b982:	460c      	mov	r4, r1
 800b984:	4619      	mov	r1, r3
 800b986:	463b      	mov	r3, r7
 800b988:	bfbb      	ittet	lt
 800b98a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b98e:	461f      	movlt	r7, r3
 800b990:	2300      	movge	r3, #0
 800b992:	232d      	movlt	r3, #45	@ 0x2d
 800b994:	700b      	strb	r3, [r1, #0]
 800b996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b998:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b99c:	4691      	mov	r9, r2
 800b99e:	f023 0820 	bic.w	r8, r3, #32
 800b9a2:	bfbc      	itt	lt
 800b9a4:	4632      	movlt	r2, r6
 800b9a6:	4616      	movlt	r6, r2
 800b9a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9ac:	d005      	beq.n	800b9ba <__cvt+0x42>
 800b9ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b9b2:	d100      	bne.n	800b9b6 <__cvt+0x3e>
 800b9b4:	3401      	adds	r4, #1
 800b9b6:	2102      	movs	r1, #2
 800b9b8:	e000      	b.n	800b9bc <__cvt+0x44>
 800b9ba:	2103      	movs	r1, #3
 800b9bc:	ab03      	add	r3, sp, #12
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	ab02      	add	r3, sp, #8
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	ec47 6b10 	vmov	d0, r6, r7
 800b9c8:	4653      	mov	r3, sl
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	f001 fa10 	bl	800cdf0 <_dtoa_r>
 800b9d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	d119      	bne.n	800ba0c <__cvt+0x94>
 800b9d8:	f019 0f01 	tst.w	r9, #1
 800b9dc:	d00e      	beq.n	800b9fc <__cvt+0x84>
 800b9de:	eb00 0904 	add.w	r9, r0, r4
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f5 f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9ee:	b108      	cbz	r0, 800b9f4 <__cvt+0x7c>
 800b9f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9f4:	2230      	movs	r2, #48	@ 0x30
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	454b      	cmp	r3, r9
 800b9fa:	d31e      	bcc.n	800ba3a <__cvt+0xc2>
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba00:	1b5b      	subs	r3, r3, r5
 800ba02:	4628      	mov	r0, r5
 800ba04:	6013      	str	r3, [r2, #0]
 800ba06:	b004      	add	sp, #16
 800ba08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba10:	eb00 0904 	add.w	r9, r0, r4
 800ba14:	d1e5      	bne.n	800b9e2 <__cvt+0x6a>
 800ba16:	7803      	ldrb	r3, [r0, #0]
 800ba18:	2b30      	cmp	r3, #48	@ 0x30
 800ba1a:	d10a      	bne.n	800ba32 <__cvt+0xba>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	4630      	mov	r0, r6
 800ba22:	4639      	mov	r1, r7
 800ba24:	f7f5 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba28:	b918      	cbnz	r0, 800ba32 <__cvt+0xba>
 800ba2a:	f1c4 0401 	rsb	r4, r4, #1
 800ba2e:	f8ca 4000 	str.w	r4, [sl]
 800ba32:	f8da 3000 	ldr.w	r3, [sl]
 800ba36:	4499      	add	r9, r3
 800ba38:	e7d3      	b.n	800b9e2 <__cvt+0x6a>
 800ba3a:	1c59      	adds	r1, r3, #1
 800ba3c:	9103      	str	r1, [sp, #12]
 800ba3e:	701a      	strb	r2, [r3, #0]
 800ba40:	e7d9      	b.n	800b9f6 <__cvt+0x7e>

0800ba42 <__exponent>:
 800ba42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba44:	2900      	cmp	r1, #0
 800ba46:	bfba      	itte	lt
 800ba48:	4249      	neglt	r1, r1
 800ba4a:	232d      	movlt	r3, #45	@ 0x2d
 800ba4c:	232b      	movge	r3, #43	@ 0x2b
 800ba4e:	2909      	cmp	r1, #9
 800ba50:	7002      	strb	r2, [r0, #0]
 800ba52:	7043      	strb	r3, [r0, #1]
 800ba54:	dd29      	ble.n	800baaa <__exponent+0x68>
 800ba56:	f10d 0307 	add.w	r3, sp, #7
 800ba5a:	461d      	mov	r5, r3
 800ba5c:	270a      	movs	r7, #10
 800ba5e:	461a      	mov	r2, r3
 800ba60:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba64:	fb07 1416 	mls	r4, r7, r6, r1
 800ba68:	3430      	adds	r4, #48	@ 0x30
 800ba6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba6e:	460c      	mov	r4, r1
 800ba70:	2c63      	cmp	r4, #99	@ 0x63
 800ba72:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ba76:	4631      	mov	r1, r6
 800ba78:	dcf1      	bgt.n	800ba5e <__exponent+0x1c>
 800ba7a:	3130      	adds	r1, #48	@ 0x30
 800ba7c:	1e94      	subs	r4, r2, #2
 800ba7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba82:	1c41      	adds	r1, r0, #1
 800ba84:	4623      	mov	r3, r4
 800ba86:	42ab      	cmp	r3, r5
 800ba88:	d30a      	bcc.n	800baa0 <__exponent+0x5e>
 800ba8a:	f10d 0309 	add.w	r3, sp, #9
 800ba8e:	1a9b      	subs	r3, r3, r2
 800ba90:	42ac      	cmp	r4, r5
 800ba92:	bf88      	it	hi
 800ba94:	2300      	movhi	r3, #0
 800ba96:	3302      	adds	r3, #2
 800ba98:	4403      	add	r3, r0
 800ba9a:	1a18      	subs	r0, r3, r0
 800ba9c:	b003      	add	sp, #12
 800ba9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800baa4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800baa8:	e7ed      	b.n	800ba86 <__exponent+0x44>
 800baaa:	2330      	movs	r3, #48	@ 0x30
 800baac:	3130      	adds	r1, #48	@ 0x30
 800baae:	7083      	strb	r3, [r0, #2]
 800bab0:	70c1      	strb	r1, [r0, #3]
 800bab2:	1d03      	adds	r3, r0, #4
 800bab4:	e7f1      	b.n	800ba9a <__exponent+0x58>
	...

0800bab8 <_printf_float>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	b08d      	sub	sp, #52	@ 0x34
 800babe:	460c      	mov	r4, r1
 800bac0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bac4:	4616      	mov	r6, r2
 800bac6:	461f      	mov	r7, r3
 800bac8:	4605      	mov	r5, r0
 800baca:	f001 f827 	bl	800cb1c <_localeconv_r>
 800bace:	6803      	ldr	r3, [r0, #0]
 800bad0:	9304      	str	r3, [sp, #16]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f4 fbcc 	bl	8000270 <strlen>
 800bad8:	2300      	movs	r3, #0
 800bada:	930a      	str	r3, [sp, #40]	@ 0x28
 800badc:	f8d8 3000 	ldr.w	r3, [r8]
 800bae0:	9005      	str	r0, [sp, #20]
 800bae2:	3307      	adds	r3, #7
 800bae4:	f023 0307 	bic.w	r3, r3, #7
 800bae8:	f103 0208 	add.w	r2, r3, #8
 800baec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800baf0:	f8d4 b000 	ldr.w	fp, [r4]
 800baf4:	f8c8 2000 	str.w	r2, [r8]
 800baf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bafc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb00:	9307      	str	r3, [sp, #28]
 800bb02:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb0e:	4b9c      	ldr	r3, [pc, #624]	@ (800bd80 <_printf_float+0x2c8>)
 800bb10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb14:	f7f5 f80a 	bl	8000b2c <__aeabi_dcmpun>
 800bb18:	bb70      	cbnz	r0, 800bb78 <_printf_float+0xc0>
 800bb1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb1e:	4b98      	ldr	r3, [pc, #608]	@ (800bd80 <_printf_float+0x2c8>)
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb24:	f7f4 ffe4 	bl	8000af0 <__aeabi_dcmple>
 800bb28:	bb30      	cbnz	r0, 800bb78 <_printf_float+0xc0>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4640      	mov	r0, r8
 800bb30:	4649      	mov	r1, r9
 800bb32:	f7f4 ffd3 	bl	8000adc <__aeabi_dcmplt>
 800bb36:	b110      	cbz	r0, 800bb3e <_printf_float+0x86>
 800bb38:	232d      	movs	r3, #45	@ 0x2d
 800bb3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb3e:	4a91      	ldr	r2, [pc, #580]	@ (800bd84 <_printf_float+0x2cc>)
 800bb40:	4b91      	ldr	r3, [pc, #580]	@ (800bd88 <_printf_float+0x2d0>)
 800bb42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb46:	bf94      	ite	ls
 800bb48:	4690      	movls	r8, r2
 800bb4a:	4698      	movhi	r8, r3
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	f02b 0304 	bic.w	r3, fp, #4
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	f04f 0900 	mov.w	r9, #0
 800bb5a:	9700      	str	r7, [sp, #0]
 800bb5c:	4633      	mov	r3, r6
 800bb5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb60:	4621      	mov	r1, r4
 800bb62:	4628      	mov	r0, r5
 800bb64:	f000 f9d2 	bl	800bf0c <_printf_common>
 800bb68:	3001      	adds	r0, #1
 800bb6a:	f040 808d 	bne.w	800bc88 <_printf_float+0x1d0>
 800bb6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb72:	b00d      	add	sp, #52	@ 0x34
 800bb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb78:	4642      	mov	r2, r8
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	f7f4 ffd4 	bl	8000b2c <__aeabi_dcmpun>
 800bb84:	b140      	cbz	r0, 800bb98 <_printf_float+0xe0>
 800bb86:	464b      	mov	r3, r9
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bfbc      	itt	lt
 800bb8c:	232d      	movlt	r3, #45	@ 0x2d
 800bb8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb92:	4a7e      	ldr	r2, [pc, #504]	@ (800bd8c <_printf_float+0x2d4>)
 800bb94:	4b7e      	ldr	r3, [pc, #504]	@ (800bd90 <_printf_float+0x2d8>)
 800bb96:	e7d4      	b.n	800bb42 <_printf_float+0x8a>
 800bb98:	6863      	ldr	r3, [r4, #4]
 800bb9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb9e:	9206      	str	r2, [sp, #24]
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	d13b      	bne.n	800bc1c <_printf_float+0x164>
 800bba4:	2306      	movs	r3, #6
 800bba6:	6063      	str	r3, [r4, #4]
 800bba8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bbac:	2300      	movs	r3, #0
 800bbae:	6022      	str	r2, [r4, #0]
 800bbb0:	9303      	str	r3, [sp, #12]
 800bbb2:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbb8:	ab09      	add	r3, sp, #36	@ 0x24
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	6861      	ldr	r1, [r4, #4]
 800bbbe:	ec49 8b10 	vmov	d0, r8, r9
 800bbc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7ff fed6 	bl	800b978 <__cvt>
 800bbcc:	9b06      	ldr	r3, [sp, #24]
 800bbce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbd0:	2b47      	cmp	r3, #71	@ 0x47
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	d129      	bne.n	800bc2a <_printf_float+0x172>
 800bbd6:	1cc8      	adds	r0, r1, #3
 800bbd8:	db02      	blt.n	800bbe0 <_printf_float+0x128>
 800bbda:	6863      	ldr	r3, [r4, #4]
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	dd41      	ble.n	800bc64 <_printf_float+0x1ac>
 800bbe0:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbe4:	fa5f fa8a 	uxtb.w	sl, sl
 800bbe8:	3901      	subs	r1, #1
 800bbea:	4652      	mov	r2, sl
 800bbec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bbf0:	9109      	str	r1, [sp, #36]	@ 0x24
 800bbf2:	f7ff ff26 	bl	800ba42 <__exponent>
 800bbf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbf8:	1813      	adds	r3, r2, r0
 800bbfa:	2a01      	cmp	r2, #1
 800bbfc:	4681      	mov	r9, r0
 800bbfe:	6123      	str	r3, [r4, #16]
 800bc00:	dc02      	bgt.n	800bc08 <_printf_float+0x150>
 800bc02:	6822      	ldr	r2, [r4, #0]
 800bc04:	07d2      	lsls	r2, r2, #31
 800bc06:	d501      	bpl.n	800bc0c <_printf_float+0x154>
 800bc08:	3301      	adds	r3, #1
 800bc0a:	6123      	str	r3, [r4, #16]
 800bc0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0a2      	beq.n	800bb5a <_printf_float+0xa2>
 800bc14:	232d      	movs	r3, #45	@ 0x2d
 800bc16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc1a:	e79e      	b.n	800bb5a <_printf_float+0xa2>
 800bc1c:	9a06      	ldr	r2, [sp, #24]
 800bc1e:	2a47      	cmp	r2, #71	@ 0x47
 800bc20:	d1c2      	bne.n	800bba8 <_printf_float+0xf0>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1c0      	bne.n	800bba8 <_printf_float+0xf0>
 800bc26:	2301      	movs	r3, #1
 800bc28:	e7bd      	b.n	800bba6 <_printf_float+0xee>
 800bc2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc2e:	d9db      	bls.n	800bbe8 <_printf_float+0x130>
 800bc30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc34:	d118      	bne.n	800bc68 <_printf_float+0x1b0>
 800bc36:	2900      	cmp	r1, #0
 800bc38:	6863      	ldr	r3, [r4, #4]
 800bc3a:	dd0b      	ble.n	800bc54 <_printf_float+0x19c>
 800bc3c:	6121      	str	r1, [r4, #16]
 800bc3e:	b913      	cbnz	r3, 800bc46 <_printf_float+0x18e>
 800bc40:	6822      	ldr	r2, [r4, #0]
 800bc42:	07d0      	lsls	r0, r2, #31
 800bc44:	d502      	bpl.n	800bc4c <_printf_float+0x194>
 800bc46:	3301      	adds	r3, #1
 800bc48:	440b      	add	r3, r1
 800bc4a:	6123      	str	r3, [r4, #16]
 800bc4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc4e:	f04f 0900 	mov.w	r9, #0
 800bc52:	e7db      	b.n	800bc0c <_printf_float+0x154>
 800bc54:	b913      	cbnz	r3, 800bc5c <_printf_float+0x1a4>
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	07d2      	lsls	r2, r2, #31
 800bc5a:	d501      	bpl.n	800bc60 <_printf_float+0x1a8>
 800bc5c:	3302      	adds	r3, #2
 800bc5e:	e7f4      	b.n	800bc4a <_printf_float+0x192>
 800bc60:	2301      	movs	r3, #1
 800bc62:	e7f2      	b.n	800bc4a <_printf_float+0x192>
 800bc64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	db05      	blt.n	800bc7a <_printf_float+0x1c2>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	6121      	str	r1, [r4, #16]
 800bc72:	07d8      	lsls	r0, r3, #31
 800bc74:	d5ea      	bpl.n	800bc4c <_printf_float+0x194>
 800bc76:	1c4b      	adds	r3, r1, #1
 800bc78:	e7e7      	b.n	800bc4a <_printf_float+0x192>
 800bc7a:	2900      	cmp	r1, #0
 800bc7c:	bfd4      	ite	le
 800bc7e:	f1c1 0202 	rsble	r2, r1, #2
 800bc82:	2201      	movgt	r2, #1
 800bc84:	4413      	add	r3, r2
 800bc86:	e7e0      	b.n	800bc4a <_printf_float+0x192>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	055a      	lsls	r2, r3, #21
 800bc8c:	d407      	bmi.n	800bc9e <_printf_float+0x1e6>
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	4642      	mov	r2, r8
 800bc92:	4631      	mov	r1, r6
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b8      	blx	r7
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d12b      	bne.n	800bcf4 <_printf_float+0x23c>
 800bc9c:	e767      	b.n	800bb6e <_printf_float+0xb6>
 800bc9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bca2:	f240 80dd 	bls.w	800be60 <_printf_float+0x3a8>
 800bca6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2300      	movs	r3, #0
 800bcae:	f7f4 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d033      	beq.n	800bd1e <_printf_float+0x266>
 800bcb6:	4a37      	ldr	r2, [pc, #220]	@ (800bd94 <_printf_float+0x2dc>)
 800bcb8:	2301      	movs	r3, #1
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	f43f af54 	beq.w	800bb6e <_printf_float+0xb6>
 800bcc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcca:	4543      	cmp	r3, r8
 800bccc:	db02      	blt.n	800bcd4 <_printf_float+0x21c>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	07d8      	lsls	r0, r3, #31
 800bcd2:	d50f      	bpl.n	800bcf4 <_printf_float+0x23c>
 800bcd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b8      	blx	r7
 800bcde:	3001      	adds	r0, #1
 800bce0:	f43f af45 	beq.w	800bb6e <_printf_float+0xb6>
 800bce4:	f04f 0900 	mov.w	r9, #0
 800bce8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bcec:	f104 0a1a 	add.w	sl, r4, #26
 800bcf0:	45c8      	cmp	r8, r9
 800bcf2:	dc09      	bgt.n	800bd08 <_printf_float+0x250>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	079b      	lsls	r3, r3, #30
 800bcf8:	f100 8103 	bmi.w	800bf02 <_printf_float+0x44a>
 800bcfc:	68e0      	ldr	r0, [r4, #12]
 800bcfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd00:	4298      	cmp	r0, r3
 800bd02:	bfb8      	it	lt
 800bd04:	4618      	movlt	r0, r3
 800bd06:	e734      	b.n	800bb72 <_printf_float+0xba>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	47b8      	blx	r7
 800bd12:	3001      	adds	r0, #1
 800bd14:	f43f af2b 	beq.w	800bb6e <_printf_float+0xb6>
 800bd18:	f109 0901 	add.w	r9, r9, #1
 800bd1c:	e7e8      	b.n	800bcf0 <_printf_float+0x238>
 800bd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dc39      	bgt.n	800bd98 <_printf_float+0x2e0>
 800bd24:	4a1b      	ldr	r2, [pc, #108]	@ (800bd94 <_printf_float+0x2dc>)
 800bd26:	2301      	movs	r3, #1
 800bd28:	4631      	mov	r1, r6
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	47b8      	blx	r7
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f43f af1d 	beq.w	800bb6e <_printf_float+0xb6>
 800bd34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd38:	ea59 0303 	orrs.w	r3, r9, r3
 800bd3c:	d102      	bne.n	800bd44 <_printf_float+0x28c>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	07d9      	lsls	r1, r3, #31
 800bd42:	d5d7      	bpl.n	800bcf4 <_printf_float+0x23c>
 800bd44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b8      	blx	r7
 800bd4e:	3001      	adds	r0, #1
 800bd50:	f43f af0d 	beq.w	800bb6e <_printf_float+0xb6>
 800bd54:	f04f 0a00 	mov.w	sl, #0
 800bd58:	f104 0b1a 	add.w	fp, r4, #26
 800bd5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5e:	425b      	negs	r3, r3
 800bd60:	4553      	cmp	r3, sl
 800bd62:	dc01      	bgt.n	800bd68 <_printf_float+0x2b0>
 800bd64:	464b      	mov	r3, r9
 800bd66:	e793      	b.n	800bc90 <_printf_float+0x1d8>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	465a      	mov	r2, fp
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4628      	mov	r0, r5
 800bd70:	47b8      	blx	r7
 800bd72:	3001      	adds	r0, #1
 800bd74:	f43f aefb 	beq.w	800bb6e <_printf_float+0xb6>
 800bd78:	f10a 0a01 	add.w	sl, sl, #1
 800bd7c:	e7ee      	b.n	800bd5c <_printf_float+0x2a4>
 800bd7e:	bf00      	nop
 800bd80:	7fefffff 	.word	0x7fefffff
 800bd84:	080104ac 	.word	0x080104ac
 800bd88:	080104b0 	.word	0x080104b0
 800bd8c:	080104b4 	.word	0x080104b4
 800bd90:	080104b8 	.word	0x080104b8
 800bd94:	080104bc 	.word	0x080104bc
 800bd98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd9e:	4553      	cmp	r3, sl
 800bda0:	bfa8      	it	ge
 800bda2:	4653      	movge	r3, sl
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	4699      	mov	r9, r3
 800bda8:	dc36      	bgt.n	800be18 <_printf_float+0x360>
 800bdaa:	f04f 0b00 	mov.w	fp, #0
 800bdae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdb2:	f104 021a 	add.w	r2, r4, #26
 800bdb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdb8:	9306      	str	r3, [sp, #24]
 800bdba:	eba3 0309 	sub.w	r3, r3, r9
 800bdbe:	455b      	cmp	r3, fp
 800bdc0:	dc31      	bgt.n	800be26 <_printf_float+0x36e>
 800bdc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc4:	459a      	cmp	sl, r3
 800bdc6:	dc3a      	bgt.n	800be3e <_printf_float+0x386>
 800bdc8:	6823      	ldr	r3, [r4, #0]
 800bdca:	07da      	lsls	r2, r3, #31
 800bdcc:	d437      	bmi.n	800be3e <_printf_float+0x386>
 800bdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd0:	ebaa 0903 	sub.w	r9, sl, r3
 800bdd4:	9b06      	ldr	r3, [sp, #24]
 800bdd6:	ebaa 0303 	sub.w	r3, sl, r3
 800bdda:	4599      	cmp	r9, r3
 800bddc:	bfa8      	it	ge
 800bdde:	4699      	movge	r9, r3
 800bde0:	f1b9 0f00 	cmp.w	r9, #0
 800bde4:	dc33      	bgt.n	800be4e <_printf_float+0x396>
 800bde6:	f04f 0800 	mov.w	r8, #0
 800bdea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdee:	f104 0b1a 	add.w	fp, r4, #26
 800bdf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf4:	ebaa 0303 	sub.w	r3, sl, r3
 800bdf8:	eba3 0309 	sub.w	r3, r3, r9
 800bdfc:	4543      	cmp	r3, r8
 800bdfe:	f77f af79 	ble.w	800bcf4 <_printf_float+0x23c>
 800be02:	2301      	movs	r3, #1
 800be04:	465a      	mov	r2, fp
 800be06:	4631      	mov	r1, r6
 800be08:	4628      	mov	r0, r5
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	f43f aeae 	beq.w	800bb6e <_printf_float+0xb6>
 800be12:	f108 0801 	add.w	r8, r8, #1
 800be16:	e7ec      	b.n	800bdf2 <_printf_float+0x33a>
 800be18:	4642      	mov	r2, r8
 800be1a:	4631      	mov	r1, r6
 800be1c:	4628      	mov	r0, r5
 800be1e:	47b8      	blx	r7
 800be20:	3001      	adds	r0, #1
 800be22:	d1c2      	bne.n	800bdaa <_printf_float+0x2f2>
 800be24:	e6a3      	b.n	800bb6e <_printf_float+0xb6>
 800be26:	2301      	movs	r3, #1
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	9206      	str	r2, [sp, #24]
 800be2e:	47b8      	blx	r7
 800be30:	3001      	adds	r0, #1
 800be32:	f43f ae9c 	beq.w	800bb6e <_printf_float+0xb6>
 800be36:	9a06      	ldr	r2, [sp, #24]
 800be38:	f10b 0b01 	add.w	fp, fp, #1
 800be3c:	e7bb      	b.n	800bdb6 <_printf_float+0x2fe>
 800be3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be42:	4631      	mov	r1, r6
 800be44:	4628      	mov	r0, r5
 800be46:	47b8      	blx	r7
 800be48:	3001      	adds	r0, #1
 800be4a:	d1c0      	bne.n	800bdce <_printf_float+0x316>
 800be4c:	e68f      	b.n	800bb6e <_printf_float+0xb6>
 800be4e:	9a06      	ldr	r2, [sp, #24]
 800be50:	464b      	mov	r3, r9
 800be52:	4442      	add	r2, r8
 800be54:	4631      	mov	r1, r6
 800be56:	4628      	mov	r0, r5
 800be58:	47b8      	blx	r7
 800be5a:	3001      	adds	r0, #1
 800be5c:	d1c3      	bne.n	800bde6 <_printf_float+0x32e>
 800be5e:	e686      	b.n	800bb6e <_printf_float+0xb6>
 800be60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be64:	f1ba 0f01 	cmp.w	sl, #1
 800be68:	dc01      	bgt.n	800be6e <_printf_float+0x3b6>
 800be6a:	07db      	lsls	r3, r3, #31
 800be6c:	d536      	bpl.n	800bedc <_printf_float+0x424>
 800be6e:	2301      	movs	r3, #1
 800be70:	4642      	mov	r2, r8
 800be72:	4631      	mov	r1, r6
 800be74:	4628      	mov	r0, r5
 800be76:	47b8      	blx	r7
 800be78:	3001      	adds	r0, #1
 800be7a:	f43f ae78 	beq.w	800bb6e <_printf_float+0xb6>
 800be7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	f43f ae70 	beq.w	800bb6e <_printf_float+0xb6>
 800be8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be92:	2200      	movs	r2, #0
 800be94:	2300      	movs	r3, #0
 800be96:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800be9a:	f7f4 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 800be9e:	b9c0      	cbnz	r0, 800bed2 <_printf_float+0x41a>
 800bea0:	4653      	mov	r3, sl
 800bea2:	f108 0201 	add.w	r2, r8, #1
 800bea6:	4631      	mov	r1, r6
 800bea8:	4628      	mov	r0, r5
 800beaa:	47b8      	blx	r7
 800beac:	3001      	adds	r0, #1
 800beae:	d10c      	bne.n	800beca <_printf_float+0x412>
 800beb0:	e65d      	b.n	800bb6e <_printf_float+0xb6>
 800beb2:	2301      	movs	r3, #1
 800beb4:	465a      	mov	r2, fp
 800beb6:	4631      	mov	r1, r6
 800beb8:	4628      	mov	r0, r5
 800beba:	47b8      	blx	r7
 800bebc:	3001      	adds	r0, #1
 800bebe:	f43f ae56 	beq.w	800bb6e <_printf_float+0xb6>
 800bec2:	f108 0801 	add.w	r8, r8, #1
 800bec6:	45d0      	cmp	r8, sl
 800bec8:	dbf3      	blt.n	800beb2 <_printf_float+0x3fa>
 800beca:	464b      	mov	r3, r9
 800becc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bed0:	e6df      	b.n	800bc92 <_printf_float+0x1da>
 800bed2:	f04f 0800 	mov.w	r8, #0
 800bed6:	f104 0b1a 	add.w	fp, r4, #26
 800beda:	e7f4      	b.n	800bec6 <_printf_float+0x40e>
 800bedc:	2301      	movs	r3, #1
 800bede:	4642      	mov	r2, r8
 800bee0:	e7e1      	b.n	800bea6 <_printf_float+0x3ee>
 800bee2:	2301      	movs	r3, #1
 800bee4:	464a      	mov	r2, r9
 800bee6:	4631      	mov	r1, r6
 800bee8:	4628      	mov	r0, r5
 800beea:	47b8      	blx	r7
 800beec:	3001      	adds	r0, #1
 800beee:	f43f ae3e 	beq.w	800bb6e <_printf_float+0xb6>
 800bef2:	f108 0801 	add.w	r8, r8, #1
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800befa:	1a5b      	subs	r3, r3, r1
 800befc:	4543      	cmp	r3, r8
 800befe:	dcf0      	bgt.n	800bee2 <_printf_float+0x42a>
 800bf00:	e6fc      	b.n	800bcfc <_printf_float+0x244>
 800bf02:	f04f 0800 	mov.w	r8, #0
 800bf06:	f104 0919 	add.w	r9, r4, #25
 800bf0a:	e7f4      	b.n	800bef6 <_printf_float+0x43e>

0800bf0c <_printf_common>:
 800bf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	4616      	mov	r6, r2
 800bf12:	4698      	mov	r8, r3
 800bf14:	688a      	ldr	r2, [r1, #8]
 800bf16:	690b      	ldr	r3, [r1, #16]
 800bf18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bfb8      	it	lt
 800bf20:	4613      	movlt	r3, r2
 800bf22:	6033      	str	r3, [r6, #0]
 800bf24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf28:	4607      	mov	r7, r0
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	b10a      	cbz	r2, 800bf32 <_printf_common+0x26>
 800bf2e:	3301      	adds	r3, #1
 800bf30:	6033      	str	r3, [r6, #0]
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	0699      	lsls	r1, r3, #26
 800bf36:	bf42      	ittt	mi
 800bf38:	6833      	ldrmi	r3, [r6, #0]
 800bf3a:	3302      	addmi	r3, #2
 800bf3c:	6033      	strmi	r3, [r6, #0]
 800bf3e:	6825      	ldr	r5, [r4, #0]
 800bf40:	f015 0506 	ands.w	r5, r5, #6
 800bf44:	d106      	bne.n	800bf54 <_printf_common+0x48>
 800bf46:	f104 0a19 	add.w	sl, r4, #25
 800bf4a:	68e3      	ldr	r3, [r4, #12]
 800bf4c:	6832      	ldr	r2, [r6, #0]
 800bf4e:	1a9b      	subs	r3, r3, r2
 800bf50:	42ab      	cmp	r3, r5
 800bf52:	dc26      	bgt.n	800bfa2 <_printf_common+0x96>
 800bf54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	3b00      	subs	r3, #0
 800bf5c:	bf18      	it	ne
 800bf5e:	2301      	movne	r3, #1
 800bf60:	0692      	lsls	r2, r2, #26
 800bf62:	d42b      	bmi.n	800bfbc <_printf_common+0xb0>
 800bf64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf68:	4641      	mov	r1, r8
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	47c8      	blx	r9
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d01e      	beq.n	800bfb0 <_printf_common+0xa4>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	6922      	ldr	r2, [r4, #16]
 800bf76:	f003 0306 	and.w	r3, r3, #6
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	bf02      	ittt	eq
 800bf7e:	68e5      	ldreq	r5, [r4, #12]
 800bf80:	6833      	ldreq	r3, [r6, #0]
 800bf82:	1aed      	subeq	r5, r5, r3
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	bf0c      	ite	eq
 800bf88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf8c:	2500      	movne	r5, #0
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	bfc4      	itt	gt
 800bf92:	1a9b      	subgt	r3, r3, r2
 800bf94:	18ed      	addgt	r5, r5, r3
 800bf96:	2600      	movs	r6, #0
 800bf98:	341a      	adds	r4, #26
 800bf9a:	42b5      	cmp	r5, r6
 800bf9c:	d11a      	bne.n	800bfd4 <_printf_common+0xc8>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e008      	b.n	800bfb4 <_printf_common+0xa8>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	4652      	mov	r2, sl
 800bfa6:	4641      	mov	r1, r8
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	47c8      	blx	r9
 800bfac:	3001      	adds	r0, #1
 800bfae:	d103      	bne.n	800bfb8 <_printf_common+0xac>
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb8:	3501      	adds	r5, #1
 800bfba:	e7c6      	b.n	800bf4a <_printf_common+0x3e>
 800bfbc:	18e1      	adds	r1, r4, r3
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	2030      	movs	r0, #48	@ 0x30
 800bfc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfc6:	4422      	add	r2, r4
 800bfc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfd0:	3302      	adds	r3, #2
 800bfd2:	e7c7      	b.n	800bf64 <_printf_common+0x58>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	4641      	mov	r1, r8
 800bfda:	4638      	mov	r0, r7
 800bfdc:	47c8      	blx	r9
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d0e6      	beq.n	800bfb0 <_printf_common+0xa4>
 800bfe2:	3601      	adds	r6, #1
 800bfe4:	e7d9      	b.n	800bf9a <_printf_common+0x8e>
	...

0800bfe8 <_printf_i>:
 800bfe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfec:	7e0f      	ldrb	r7, [r1, #24]
 800bfee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bff0:	2f78      	cmp	r7, #120	@ 0x78
 800bff2:	4691      	mov	r9, r2
 800bff4:	4680      	mov	r8, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	469a      	mov	sl, r3
 800bffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bffe:	d807      	bhi.n	800c010 <_printf_i+0x28>
 800c000:	2f62      	cmp	r7, #98	@ 0x62
 800c002:	d80a      	bhi.n	800c01a <_printf_i+0x32>
 800c004:	2f00      	cmp	r7, #0
 800c006:	f000 80d2 	beq.w	800c1ae <_printf_i+0x1c6>
 800c00a:	2f58      	cmp	r7, #88	@ 0x58
 800c00c:	f000 80b9 	beq.w	800c182 <_printf_i+0x19a>
 800c010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c018:	e03a      	b.n	800c090 <_printf_i+0xa8>
 800c01a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c01e:	2b15      	cmp	r3, #21
 800c020:	d8f6      	bhi.n	800c010 <_printf_i+0x28>
 800c022:	a101      	add	r1, pc, #4	@ (adr r1, 800c028 <_printf_i+0x40>)
 800c024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c028:	0800c081 	.word	0x0800c081
 800c02c:	0800c095 	.word	0x0800c095
 800c030:	0800c011 	.word	0x0800c011
 800c034:	0800c011 	.word	0x0800c011
 800c038:	0800c011 	.word	0x0800c011
 800c03c:	0800c011 	.word	0x0800c011
 800c040:	0800c095 	.word	0x0800c095
 800c044:	0800c011 	.word	0x0800c011
 800c048:	0800c011 	.word	0x0800c011
 800c04c:	0800c011 	.word	0x0800c011
 800c050:	0800c011 	.word	0x0800c011
 800c054:	0800c195 	.word	0x0800c195
 800c058:	0800c0bf 	.word	0x0800c0bf
 800c05c:	0800c14f 	.word	0x0800c14f
 800c060:	0800c011 	.word	0x0800c011
 800c064:	0800c011 	.word	0x0800c011
 800c068:	0800c1b7 	.word	0x0800c1b7
 800c06c:	0800c011 	.word	0x0800c011
 800c070:	0800c0bf 	.word	0x0800c0bf
 800c074:	0800c011 	.word	0x0800c011
 800c078:	0800c011 	.word	0x0800c011
 800c07c:	0800c157 	.word	0x0800c157
 800c080:	6833      	ldr	r3, [r6, #0]
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6032      	str	r2, [r6, #0]
 800c088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c08c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c090:	2301      	movs	r3, #1
 800c092:	e09d      	b.n	800c1d0 <_printf_i+0x1e8>
 800c094:	6833      	ldr	r3, [r6, #0]
 800c096:	6820      	ldr	r0, [r4, #0]
 800c098:	1d19      	adds	r1, r3, #4
 800c09a:	6031      	str	r1, [r6, #0]
 800c09c:	0606      	lsls	r6, r0, #24
 800c09e:	d501      	bpl.n	800c0a4 <_printf_i+0xbc>
 800c0a0:	681d      	ldr	r5, [r3, #0]
 800c0a2:	e003      	b.n	800c0ac <_printf_i+0xc4>
 800c0a4:	0645      	lsls	r5, r0, #25
 800c0a6:	d5fb      	bpl.n	800c0a0 <_printf_i+0xb8>
 800c0a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0ac:	2d00      	cmp	r5, #0
 800c0ae:	da03      	bge.n	800c0b8 <_printf_i+0xd0>
 800c0b0:	232d      	movs	r3, #45	@ 0x2d
 800c0b2:	426d      	negs	r5, r5
 800c0b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0b8:	4859      	ldr	r0, [pc, #356]	@ (800c220 <_printf_i+0x238>)
 800c0ba:	230a      	movs	r3, #10
 800c0bc:	e011      	b.n	800c0e2 <_printf_i+0xfa>
 800c0be:	6821      	ldr	r1, [r4, #0]
 800c0c0:	6833      	ldr	r3, [r6, #0]
 800c0c2:	0608      	lsls	r0, r1, #24
 800c0c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0c8:	d402      	bmi.n	800c0d0 <_printf_i+0xe8>
 800c0ca:	0649      	lsls	r1, r1, #25
 800c0cc:	bf48      	it	mi
 800c0ce:	b2ad      	uxthmi	r5, r5
 800c0d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0d2:	4853      	ldr	r0, [pc, #332]	@ (800c220 <_printf_i+0x238>)
 800c0d4:	6033      	str	r3, [r6, #0]
 800c0d6:	bf14      	ite	ne
 800c0d8:	230a      	movne	r3, #10
 800c0da:	2308      	moveq	r3, #8
 800c0dc:	2100      	movs	r1, #0
 800c0de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0e2:	6866      	ldr	r6, [r4, #4]
 800c0e4:	60a6      	str	r6, [r4, #8]
 800c0e6:	2e00      	cmp	r6, #0
 800c0e8:	bfa2      	ittt	ge
 800c0ea:	6821      	ldrge	r1, [r4, #0]
 800c0ec:	f021 0104 	bicge.w	r1, r1, #4
 800c0f0:	6021      	strge	r1, [r4, #0]
 800c0f2:	b90d      	cbnz	r5, 800c0f8 <_printf_i+0x110>
 800c0f4:	2e00      	cmp	r6, #0
 800c0f6:	d04b      	beq.n	800c190 <_printf_i+0x1a8>
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0fe:	fb03 5711 	mls	r7, r3, r1, r5
 800c102:	5dc7      	ldrb	r7, [r0, r7]
 800c104:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c108:	462f      	mov	r7, r5
 800c10a:	42bb      	cmp	r3, r7
 800c10c:	460d      	mov	r5, r1
 800c10e:	d9f4      	bls.n	800c0fa <_printf_i+0x112>
 800c110:	2b08      	cmp	r3, #8
 800c112:	d10b      	bne.n	800c12c <_printf_i+0x144>
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	07df      	lsls	r7, r3, #31
 800c118:	d508      	bpl.n	800c12c <_printf_i+0x144>
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	6861      	ldr	r1, [r4, #4]
 800c11e:	4299      	cmp	r1, r3
 800c120:	bfde      	ittt	le
 800c122:	2330      	movle	r3, #48	@ 0x30
 800c124:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c128:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c12c:	1b92      	subs	r2, r2, r6
 800c12e:	6122      	str	r2, [r4, #16]
 800c130:	f8cd a000 	str.w	sl, [sp]
 800c134:	464b      	mov	r3, r9
 800c136:	aa03      	add	r2, sp, #12
 800c138:	4621      	mov	r1, r4
 800c13a:	4640      	mov	r0, r8
 800c13c:	f7ff fee6 	bl	800bf0c <_printf_common>
 800c140:	3001      	adds	r0, #1
 800c142:	d14a      	bne.n	800c1da <_printf_i+0x1f2>
 800c144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c148:	b004      	add	sp, #16
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	f043 0320 	orr.w	r3, r3, #32
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	4833      	ldr	r0, [pc, #204]	@ (800c224 <_printf_i+0x23c>)
 800c158:	2778      	movs	r7, #120	@ 0x78
 800c15a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	6831      	ldr	r1, [r6, #0]
 800c162:	061f      	lsls	r7, r3, #24
 800c164:	f851 5b04 	ldr.w	r5, [r1], #4
 800c168:	d402      	bmi.n	800c170 <_printf_i+0x188>
 800c16a:	065f      	lsls	r7, r3, #25
 800c16c:	bf48      	it	mi
 800c16e:	b2ad      	uxthmi	r5, r5
 800c170:	6031      	str	r1, [r6, #0]
 800c172:	07d9      	lsls	r1, r3, #31
 800c174:	bf44      	itt	mi
 800c176:	f043 0320 	orrmi.w	r3, r3, #32
 800c17a:	6023      	strmi	r3, [r4, #0]
 800c17c:	b11d      	cbz	r5, 800c186 <_printf_i+0x19e>
 800c17e:	2310      	movs	r3, #16
 800c180:	e7ac      	b.n	800c0dc <_printf_i+0xf4>
 800c182:	4827      	ldr	r0, [pc, #156]	@ (800c220 <_printf_i+0x238>)
 800c184:	e7e9      	b.n	800c15a <_printf_i+0x172>
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	f023 0320 	bic.w	r3, r3, #32
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	e7f6      	b.n	800c17e <_printf_i+0x196>
 800c190:	4616      	mov	r6, r2
 800c192:	e7bd      	b.n	800c110 <_printf_i+0x128>
 800c194:	6833      	ldr	r3, [r6, #0]
 800c196:	6825      	ldr	r5, [r4, #0]
 800c198:	6961      	ldr	r1, [r4, #20]
 800c19a:	1d18      	adds	r0, r3, #4
 800c19c:	6030      	str	r0, [r6, #0]
 800c19e:	062e      	lsls	r6, r5, #24
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	d501      	bpl.n	800c1a8 <_printf_i+0x1c0>
 800c1a4:	6019      	str	r1, [r3, #0]
 800c1a6:	e002      	b.n	800c1ae <_printf_i+0x1c6>
 800c1a8:	0668      	lsls	r0, r5, #25
 800c1aa:	d5fb      	bpl.n	800c1a4 <_printf_i+0x1bc>
 800c1ac:	8019      	strh	r1, [r3, #0]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	6123      	str	r3, [r4, #16]
 800c1b2:	4616      	mov	r6, r2
 800c1b4:	e7bc      	b.n	800c130 <_printf_i+0x148>
 800c1b6:	6833      	ldr	r3, [r6, #0]
 800c1b8:	1d1a      	adds	r2, r3, #4
 800c1ba:	6032      	str	r2, [r6, #0]
 800c1bc:	681e      	ldr	r6, [r3, #0]
 800c1be:	6862      	ldr	r2, [r4, #4]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7f4 f804 	bl	80001d0 <memchr>
 800c1c8:	b108      	cbz	r0, 800c1ce <_printf_i+0x1e6>
 800c1ca:	1b80      	subs	r0, r0, r6
 800c1cc:	6060      	str	r0, [r4, #4]
 800c1ce:	6863      	ldr	r3, [r4, #4]
 800c1d0:	6123      	str	r3, [r4, #16]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d8:	e7aa      	b.n	800c130 <_printf_i+0x148>
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	4632      	mov	r2, r6
 800c1de:	4649      	mov	r1, r9
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	47d0      	blx	sl
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d0ad      	beq.n	800c144 <_printf_i+0x15c>
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	079b      	lsls	r3, r3, #30
 800c1ec:	d413      	bmi.n	800c216 <_printf_i+0x22e>
 800c1ee:	68e0      	ldr	r0, [r4, #12]
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	4298      	cmp	r0, r3
 800c1f4:	bfb8      	it	lt
 800c1f6:	4618      	movlt	r0, r3
 800c1f8:	e7a6      	b.n	800c148 <_printf_i+0x160>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	4649      	mov	r1, r9
 800c200:	4640      	mov	r0, r8
 800c202:	47d0      	blx	sl
 800c204:	3001      	adds	r0, #1
 800c206:	d09d      	beq.n	800c144 <_printf_i+0x15c>
 800c208:	3501      	adds	r5, #1
 800c20a:	68e3      	ldr	r3, [r4, #12]
 800c20c:	9903      	ldr	r1, [sp, #12]
 800c20e:	1a5b      	subs	r3, r3, r1
 800c210:	42ab      	cmp	r3, r5
 800c212:	dcf2      	bgt.n	800c1fa <_printf_i+0x212>
 800c214:	e7eb      	b.n	800c1ee <_printf_i+0x206>
 800c216:	2500      	movs	r5, #0
 800c218:	f104 0619 	add.w	r6, r4, #25
 800c21c:	e7f5      	b.n	800c20a <_printf_i+0x222>
 800c21e:	bf00      	nop
 800c220:	080104be 	.word	0x080104be
 800c224:	080104cf 	.word	0x080104cf

0800c228 <_scanf_float>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	b087      	sub	sp, #28
 800c22e:	4617      	mov	r7, r2
 800c230:	9303      	str	r3, [sp, #12]
 800c232:	688b      	ldr	r3, [r1, #8]
 800c234:	1e5a      	subs	r2, r3, #1
 800c236:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c23a:	bf81      	itttt	hi
 800c23c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c240:	eb03 0b05 	addhi.w	fp, r3, r5
 800c244:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c248:	608b      	strhi	r3, [r1, #8]
 800c24a:	680b      	ldr	r3, [r1, #0]
 800c24c:	460a      	mov	r2, r1
 800c24e:	f04f 0500 	mov.w	r5, #0
 800c252:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c256:	f842 3b1c 	str.w	r3, [r2], #28
 800c25a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c25e:	4680      	mov	r8, r0
 800c260:	460c      	mov	r4, r1
 800c262:	bf98      	it	ls
 800c264:	f04f 0b00 	movls.w	fp, #0
 800c268:	9201      	str	r2, [sp, #4]
 800c26a:	4616      	mov	r6, r2
 800c26c:	46aa      	mov	sl, r5
 800c26e:	46a9      	mov	r9, r5
 800c270:	9502      	str	r5, [sp, #8]
 800c272:	68a2      	ldr	r2, [r4, #8]
 800c274:	b152      	cbz	r2, 800c28c <_scanf_float+0x64>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c27c:	d864      	bhi.n	800c348 <_scanf_float+0x120>
 800c27e:	2b40      	cmp	r3, #64	@ 0x40
 800c280:	d83c      	bhi.n	800c2fc <_scanf_float+0xd4>
 800c282:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c286:	b2c8      	uxtb	r0, r1
 800c288:	280e      	cmp	r0, #14
 800c28a:	d93a      	bls.n	800c302 <_scanf_float+0xda>
 800c28c:	f1b9 0f00 	cmp.w	r9, #0
 800c290:	d003      	beq.n	800c29a <_scanf_float+0x72>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c29e:	f1ba 0f01 	cmp.w	sl, #1
 800c2a2:	f200 8117 	bhi.w	800c4d4 <_scanf_float+0x2ac>
 800c2a6:	9b01      	ldr	r3, [sp, #4]
 800c2a8:	429e      	cmp	r6, r3
 800c2aa:	f200 8108 	bhi.w	800c4be <_scanf_float+0x296>
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	b007      	add	sp, #28
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c2ba:	2a0d      	cmp	r2, #13
 800c2bc:	d8e6      	bhi.n	800c28c <_scanf_float+0x64>
 800c2be:	a101      	add	r1, pc, #4	@ (adr r1, 800c2c4 <_scanf_float+0x9c>)
 800c2c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2c4:	0800c40b 	.word	0x0800c40b
 800c2c8:	0800c28d 	.word	0x0800c28d
 800c2cc:	0800c28d 	.word	0x0800c28d
 800c2d0:	0800c28d 	.word	0x0800c28d
 800c2d4:	0800c46b 	.word	0x0800c46b
 800c2d8:	0800c443 	.word	0x0800c443
 800c2dc:	0800c28d 	.word	0x0800c28d
 800c2e0:	0800c28d 	.word	0x0800c28d
 800c2e4:	0800c419 	.word	0x0800c419
 800c2e8:	0800c28d 	.word	0x0800c28d
 800c2ec:	0800c28d 	.word	0x0800c28d
 800c2f0:	0800c28d 	.word	0x0800c28d
 800c2f4:	0800c28d 	.word	0x0800c28d
 800c2f8:	0800c3d1 	.word	0x0800c3d1
 800c2fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c300:	e7db      	b.n	800c2ba <_scanf_float+0x92>
 800c302:	290e      	cmp	r1, #14
 800c304:	d8c2      	bhi.n	800c28c <_scanf_float+0x64>
 800c306:	a001      	add	r0, pc, #4	@ (adr r0, 800c30c <_scanf_float+0xe4>)
 800c308:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c30c:	0800c3c1 	.word	0x0800c3c1
 800c310:	0800c28d 	.word	0x0800c28d
 800c314:	0800c3c1 	.word	0x0800c3c1
 800c318:	0800c457 	.word	0x0800c457
 800c31c:	0800c28d 	.word	0x0800c28d
 800c320:	0800c369 	.word	0x0800c369
 800c324:	0800c3a7 	.word	0x0800c3a7
 800c328:	0800c3a7 	.word	0x0800c3a7
 800c32c:	0800c3a7 	.word	0x0800c3a7
 800c330:	0800c3a7 	.word	0x0800c3a7
 800c334:	0800c3a7 	.word	0x0800c3a7
 800c338:	0800c3a7 	.word	0x0800c3a7
 800c33c:	0800c3a7 	.word	0x0800c3a7
 800c340:	0800c3a7 	.word	0x0800c3a7
 800c344:	0800c3a7 	.word	0x0800c3a7
 800c348:	2b6e      	cmp	r3, #110	@ 0x6e
 800c34a:	d809      	bhi.n	800c360 <_scanf_float+0x138>
 800c34c:	2b60      	cmp	r3, #96	@ 0x60
 800c34e:	d8b2      	bhi.n	800c2b6 <_scanf_float+0x8e>
 800c350:	2b54      	cmp	r3, #84	@ 0x54
 800c352:	d07b      	beq.n	800c44c <_scanf_float+0x224>
 800c354:	2b59      	cmp	r3, #89	@ 0x59
 800c356:	d199      	bne.n	800c28c <_scanf_float+0x64>
 800c358:	2d07      	cmp	r5, #7
 800c35a:	d197      	bne.n	800c28c <_scanf_float+0x64>
 800c35c:	2508      	movs	r5, #8
 800c35e:	e02c      	b.n	800c3ba <_scanf_float+0x192>
 800c360:	2b74      	cmp	r3, #116	@ 0x74
 800c362:	d073      	beq.n	800c44c <_scanf_float+0x224>
 800c364:	2b79      	cmp	r3, #121	@ 0x79
 800c366:	e7f6      	b.n	800c356 <_scanf_float+0x12e>
 800c368:	6821      	ldr	r1, [r4, #0]
 800c36a:	05c8      	lsls	r0, r1, #23
 800c36c:	d51b      	bpl.n	800c3a6 <_scanf_float+0x17e>
 800c36e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c372:	6021      	str	r1, [r4, #0]
 800c374:	f109 0901 	add.w	r9, r9, #1
 800c378:	f1bb 0f00 	cmp.w	fp, #0
 800c37c:	d003      	beq.n	800c386 <_scanf_float+0x15e>
 800c37e:	3201      	adds	r2, #1
 800c380:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800c384:	60a2      	str	r2, [r4, #8]
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	3b01      	subs	r3, #1
 800c38a:	60a3      	str	r3, [r4, #8]
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	3301      	adds	r3, #1
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	3b01      	subs	r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	607b      	str	r3, [r7, #4]
 800c39a:	f340 8087 	ble.w	800c4ac <_scanf_float+0x284>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	e765      	b.n	800c272 <_scanf_float+0x4a>
 800c3a6:	eb1a 0105 	adds.w	r1, sl, r5
 800c3aa:	f47f af6f 	bne.w	800c28c <_scanf_float+0x64>
 800c3ae:	6822      	ldr	r2, [r4, #0]
 800c3b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c3b4:	6022      	str	r2, [r4, #0]
 800c3b6:	460d      	mov	r5, r1
 800c3b8:	468a      	mov	sl, r1
 800c3ba:	f806 3b01 	strb.w	r3, [r6], #1
 800c3be:	e7e2      	b.n	800c386 <_scanf_float+0x15e>
 800c3c0:	6822      	ldr	r2, [r4, #0]
 800c3c2:	0610      	lsls	r0, r2, #24
 800c3c4:	f57f af62 	bpl.w	800c28c <_scanf_float+0x64>
 800c3c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3cc:	6022      	str	r2, [r4, #0]
 800c3ce:	e7f4      	b.n	800c3ba <_scanf_float+0x192>
 800c3d0:	f1ba 0f00 	cmp.w	sl, #0
 800c3d4:	d10e      	bne.n	800c3f4 <_scanf_float+0x1cc>
 800c3d6:	f1b9 0f00 	cmp.w	r9, #0
 800c3da:	d10e      	bne.n	800c3fa <_scanf_float+0x1d2>
 800c3dc:	6822      	ldr	r2, [r4, #0]
 800c3de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c3e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c3e6:	d108      	bne.n	800c3fa <_scanf_float+0x1d2>
 800c3e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	f04f 0a01 	mov.w	sl, #1
 800c3f2:	e7e2      	b.n	800c3ba <_scanf_float+0x192>
 800c3f4:	f1ba 0f02 	cmp.w	sl, #2
 800c3f8:	d055      	beq.n	800c4a6 <_scanf_float+0x27e>
 800c3fa:	2d01      	cmp	r5, #1
 800c3fc:	d002      	beq.n	800c404 <_scanf_float+0x1dc>
 800c3fe:	2d04      	cmp	r5, #4
 800c400:	f47f af44 	bne.w	800c28c <_scanf_float+0x64>
 800c404:	3501      	adds	r5, #1
 800c406:	b2ed      	uxtb	r5, r5
 800c408:	e7d7      	b.n	800c3ba <_scanf_float+0x192>
 800c40a:	f1ba 0f01 	cmp.w	sl, #1
 800c40e:	f47f af3d 	bne.w	800c28c <_scanf_float+0x64>
 800c412:	f04f 0a02 	mov.w	sl, #2
 800c416:	e7d0      	b.n	800c3ba <_scanf_float+0x192>
 800c418:	b97d      	cbnz	r5, 800c43a <_scanf_float+0x212>
 800c41a:	f1b9 0f00 	cmp.w	r9, #0
 800c41e:	f47f af38 	bne.w	800c292 <_scanf_float+0x6a>
 800c422:	6822      	ldr	r2, [r4, #0]
 800c424:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c428:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c42c:	f040 8108 	bne.w	800c640 <_scanf_float+0x418>
 800c430:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	2501      	movs	r5, #1
 800c438:	e7bf      	b.n	800c3ba <_scanf_float+0x192>
 800c43a:	2d03      	cmp	r5, #3
 800c43c:	d0e2      	beq.n	800c404 <_scanf_float+0x1dc>
 800c43e:	2d05      	cmp	r5, #5
 800c440:	e7de      	b.n	800c400 <_scanf_float+0x1d8>
 800c442:	2d02      	cmp	r5, #2
 800c444:	f47f af22 	bne.w	800c28c <_scanf_float+0x64>
 800c448:	2503      	movs	r5, #3
 800c44a:	e7b6      	b.n	800c3ba <_scanf_float+0x192>
 800c44c:	2d06      	cmp	r5, #6
 800c44e:	f47f af1d 	bne.w	800c28c <_scanf_float+0x64>
 800c452:	2507      	movs	r5, #7
 800c454:	e7b1      	b.n	800c3ba <_scanf_float+0x192>
 800c456:	6822      	ldr	r2, [r4, #0]
 800c458:	0591      	lsls	r1, r2, #22
 800c45a:	f57f af17 	bpl.w	800c28c <_scanf_float+0x64>
 800c45e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c462:	6022      	str	r2, [r4, #0]
 800c464:	f8cd 9008 	str.w	r9, [sp, #8]
 800c468:	e7a7      	b.n	800c3ba <_scanf_float+0x192>
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c470:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c474:	d006      	beq.n	800c484 <_scanf_float+0x25c>
 800c476:	0550      	lsls	r0, r2, #21
 800c478:	f57f af08 	bpl.w	800c28c <_scanf_float+0x64>
 800c47c:	f1b9 0f00 	cmp.w	r9, #0
 800c480:	f000 80de 	beq.w	800c640 <_scanf_float+0x418>
 800c484:	0591      	lsls	r1, r2, #22
 800c486:	bf58      	it	pl
 800c488:	9902      	ldrpl	r1, [sp, #8]
 800c48a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c48e:	bf58      	it	pl
 800c490:	eba9 0101 	subpl.w	r1, r9, r1
 800c494:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c498:	bf58      	it	pl
 800c49a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c49e:	6022      	str	r2, [r4, #0]
 800c4a0:	f04f 0900 	mov.w	r9, #0
 800c4a4:	e789      	b.n	800c3ba <_scanf_float+0x192>
 800c4a6:	f04f 0a03 	mov.w	sl, #3
 800c4aa:	e786      	b.n	800c3ba <_scanf_float+0x192>
 800c4ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4b0:	4639      	mov	r1, r7
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	4798      	blx	r3
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f43f aedb 	beq.w	800c272 <_scanf_float+0x4a>
 800c4bc:	e6e6      	b.n	800c28c <_scanf_float+0x64>
 800c4be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4c6:	463a      	mov	r2, r7
 800c4c8:	4640      	mov	r0, r8
 800c4ca:	4798      	blx	r3
 800c4cc:	6923      	ldr	r3, [r4, #16]
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	6123      	str	r3, [r4, #16]
 800c4d2:	e6e8      	b.n	800c2a6 <_scanf_float+0x7e>
 800c4d4:	1e6b      	subs	r3, r5, #1
 800c4d6:	2b06      	cmp	r3, #6
 800c4d8:	d824      	bhi.n	800c524 <_scanf_float+0x2fc>
 800c4da:	2d02      	cmp	r5, #2
 800c4dc:	d836      	bhi.n	800c54c <_scanf_float+0x324>
 800c4de:	9b01      	ldr	r3, [sp, #4]
 800c4e0:	429e      	cmp	r6, r3
 800c4e2:	f67f aee4 	bls.w	800c2ae <_scanf_float+0x86>
 800c4e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4ee:	463a      	mov	r2, r7
 800c4f0:	4640      	mov	r0, r8
 800c4f2:	4798      	blx	r3
 800c4f4:	6923      	ldr	r3, [r4, #16]
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	6123      	str	r3, [r4, #16]
 800c4fa:	e7f0      	b.n	800c4de <_scanf_float+0x2b6>
 800c4fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c500:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c504:	463a      	mov	r2, r7
 800c506:	4640      	mov	r0, r8
 800c508:	4798      	blx	r3
 800c50a:	6923      	ldr	r3, [r4, #16]
 800c50c:	3b01      	subs	r3, #1
 800c50e:	6123      	str	r3, [r4, #16]
 800c510:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c514:	fa5f fa8a 	uxtb.w	sl, sl
 800c518:	f1ba 0f02 	cmp.w	sl, #2
 800c51c:	d1ee      	bne.n	800c4fc <_scanf_float+0x2d4>
 800c51e:	3d03      	subs	r5, #3
 800c520:	b2ed      	uxtb	r5, r5
 800c522:	1b76      	subs	r6, r6, r5
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	05da      	lsls	r2, r3, #23
 800c528:	d530      	bpl.n	800c58c <_scanf_float+0x364>
 800c52a:	055b      	lsls	r3, r3, #21
 800c52c:	d511      	bpl.n	800c552 <_scanf_float+0x32a>
 800c52e:	9b01      	ldr	r3, [sp, #4]
 800c530:	429e      	cmp	r6, r3
 800c532:	f67f aebc 	bls.w	800c2ae <_scanf_float+0x86>
 800c536:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c53a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c53e:	463a      	mov	r2, r7
 800c540:	4640      	mov	r0, r8
 800c542:	4798      	blx	r3
 800c544:	6923      	ldr	r3, [r4, #16]
 800c546:	3b01      	subs	r3, #1
 800c548:	6123      	str	r3, [r4, #16]
 800c54a:	e7f0      	b.n	800c52e <_scanf_float+0x306>
 800c54c:	46aa      	mov	sl, r5
 800c54e:	46b3      	mov	fp, r6
 800c550:	e7de      	b.n	800c510 <_scanf_float+0x2e8>
 800c552:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	2965      	cmp	r1, #101	@ 0x65
 800c55a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c55e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800c562:	6123      	str	r3, [r4, #16]
 800c564:	d00c      	beq.n	800c580 <_scanf_float+0x358>
 800c566:	2945      	cmp	r1, #69	@ 0x45
 800c568:	d00a      	beq.n	800c580 <_scanf_float+0x358>
 800c56a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c56e:	463a      	mov	r2, r7
 800c570:	4640      	mov	r0, r8
 800c572:	4798      	blx	r3
 800c574:	6923      	ldr	r3, [r4, #16]
 800c576:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	1eb5      	subs	r5, r6, #2
 800c57e:	6123      	str	r3, [r4, #16]
 800c580:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c584:	463a      	mov	r2, r7
 800c586:	4640      	mov	r0, r8
 800c588:	4798      	blx	r3
 800c58a:	462e      	mov	r6, r5
 800c58c:	6822      	ldr	r2, [r4, #0]
 800c58e:	f012 0210 	ands.w	r2, r2, #16
 800c592:	d001      	beq.n	800c598 <_scanf_float+0x370>
 800c594:	2000      	movs	r0, #0
 800c596:	e68b      	b.n	800c2b0 <_scanf_float+0x88>
 800c598:	7032      	strb	r2, [r6, #0]
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c5a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5a4:	d11c      	bne.n	800c5e0 <_scanf_float+0x3b8>
 800c5a6:	9b02      	ldr	r3, [sp, #8]
 800c5a8:	454b      	cmp	r3, r9
 800c5aa:	eba3 0209 	sub.w	r2, r3, r9
 800c5ae:	d123      	bne.n	800c5f8 <_scanf_float+0x3d0>
 800c5b0:	9901      	ldr	r1, [sp, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	f002 fd93 	bl	800f0e0 <_strtod_r>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	6821      	ldr	r1, [r4, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f011 0f02 	tst.w	r1, #2
 800c5c4:	ec57 6b10 	vmov	r6, r7, d0
 800c5c8:	f103 0204 	add.w	r2, r3, #4
 800c5cc:	d01f      	beq.n	800c60e <_scanf_float+0x3e6>
 800c5ce:	9903      	ldr	r1, [sp, #12]
 800c5d0:	600a      	str	r2, [r1, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	e9c3 6700 	strd	r6, r7, [r3]
 800c5d8:	68e3      	ldr	r3, [r4, #12]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	60e3      	str	r3, [r4, #12]
 800c5de:	e7d9      	b.n	800c594 <_scanf_float+0x36c>
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0e4      	beq.n	800c5b0 <_scanf_float+0x388>
 800c5e6:	9905      	ldr	r1, [sp, #20]
 800c5e8:	230a      	movs	r3, #10
 800c5ea:	3101      	adds	r1, #1
 800c5ec:	4640      	mov	r0, r8
 800c5ee:	f002 fdf7 	bl	800f1e0 <_strtol_r>
 800c5f2:	9b04      	ldr	r3, [sp, #16]
 800c5f4:	9e05      	ldr	r6, [sp, #20]
 800c5f6:	1ac2      	subs	r2, r0, r3
 800c5f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c5fc:	429e      	cmp	r6, r3
 800c5fe:	bf28      	it	cs
 800c600:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c604:	4910      	ldr	r1, [pc, #64]	@ (800c648 <_scanf_float+0x420>)
 800c606:	4630      	mov	r0, r6
 800c608:	f000 f988 	bl	800c91c <siprintf>
 800c60c:	e7d0      	b.n	800c5b0 <_scanf_float+0x388>
 800c60e:	f011 0f04 	tst.w	r1, #4
 800c612:	9903      	ldr	r1, [sp, #12]
 800c614:	600a      	str	r2, [r1, #0]
 800c616:	d1dc      	bne.n	800c5d2 <_scanf_float+0x3aa>
 800c618:	681d      	ldr	r5, [r3, #0]
 800c61a:	4632      	mov	r2, r6
 800c61c:	463b      	mov	r3, r7
 800c61e:	4630      	mov	r0, r6
 800c620:	4639      	mov	r1, r7
 800c622:	f7f4 fa83 	bl	8000b2c <__aeabi_dcmpun>
 800c626:	b128      	cbz	r0, 800c634 <_scanf_float+0x40c>
 800c628:	4808      	ldr	r0, [pc, #32]	@ (800c64c <_scanf_float+0x424>)
 800c62a:	f000 fb53 	bl	800ccd4 <nanf>
 800c62e:	ed85 0a00 	vstr	s0, [r5]
 800c632:	e7d1      	b.n	800c5d8 <_scanf_float+0x3b0>
 800c634:	4630      	mov	r0, r6
 800c636:	4639      	mov	r1, r7
 800c638:	f7f4 fad6 	bl	8000be8 <__aeabi_d2f>
 800c63c:	6028      	str	r0, [r5, #0]
 800c63e:	e7cb      	b.n	800c5d8 <_scanf_float+0x3b0>
 800c640:	f04f 0900 	mov.w	r9, #0
 800c644:	e629      	b.n	800c29a <_scanf_float+0x72>
 800c646:	bf00      	nop
 800c648:	080104e0 	.word	0x080104e0
 800c64c:	08010875 	.word	0x08010875

0800c650 <std>:
 800c650:	2300      	movs	r3, #0
 800c652:	b510      	push	{r4, lr}
 800c654:	4604      	mov	r4, r0
 800c656:	e9c0 3300 	strd	r3, r3, [r0]
 800c65a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c65e:	6083      	str	r3, [r0, #8]
 800c660:	8181      	strh	r1, [r0, #12]
 800c662:	6643      	str	r3, [r0, #100]	@ 0x64
 800c664:	81c2      	strh	r2, [r0, #14]
 800c666:	6183      	str	r3, [r0, #24]
 800c668:	4619      	mov	r1, r3
 800c66a:	2208      	movs	r2, #8
 800c66c:	305c      	adds	r0, #92	@ 0x5c
 800c66e:	f000 fa4d 	bl	800cb0c <memset>
 800c672:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a8 <std+0x58>)
 800c674:	6263      	str	r3, [r4, #36]	@ 0x24
 800c676:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ac <std+0x5c>)
 800c678:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c67a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b0 <std+0x60>)
 800c67c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c67e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b4 <std+0x64>)
 800c680:	6323      	str	r3, [r4, #48]	@ 0x30
 800c682:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b8 <std+0x68>)
 800c684:	6224      	str	r4, [r4, #32]
 800c686:	429c      	cmp	r4, r3
 800c688:	d006      	beq.n	800c698 <std+0x48>
 800c68a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c68e:	4294      	cmp	r4, r2
 800c690:	d002      	beq.n	800c698 <std+0x48>
 800c692:	33d0      	adds	r3, #208	@ 0xd0
 800c694:	429c      	cmp	r4, r3
 800c696:	d105      	bne.n	800c6a4 <std+0x54>
 800c698:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a0:	f000 bb06 	b.w	800ccb0 <__retarget_lock_init_recursive>
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	bf00      	nop
 800c6a8:	0800c95d 	.word	0x0800c95d
 800c6ac:	0800c97f 	.word	0x0800c97f
 800c6b0:	0800c9b7 	.word	0x0800c9b7
 800c6b4:	0800c9db 	.word	0x0800c9db
 800c6b8:	20001aa4 	.word	0x20001aa4

0800c6bc <stdio_exit_handler>:
 800c6bc:	4a02      	ldr	r2, [pc, #8]	@ (800c6c8 <stdio_exit_handler+0xc>)
 800c6be:	4903      	ldr	r1, [pc, #12]	@ (800c6cc <stdio_exit_handler+0x10>)
 800c6c0:	4803      	ldr	r0, [pc, #12]	@ (800c6d0 <stdio_exit_handler+0x14>)
 800c6c2:	f000 b869 	b.w	800c798 <_fwalk_sglue>
 800c6c6:	bf00      	nop
 800c6c8:	2000001c 	.word	0x2000001c
 800c6cc:	0800f821 	.word	0x0800f821
 800c6d0:	2000002c 	.word	0x2000002c

0800c6d4 <cleanup_stdio>:
 800c6d4:	6841      	ldr	r1, [r0, #4]
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c708 <cleanup_stdio+0x34>)
 800c6d8:	4299      	cmp	r1, r3
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	4604      	mov	r4, r0
 800c6de:	d001      	beq.n	800c6e4 <cleanup_stdio+0x10>
 800c6e0:	f003 f89e 	bl	800f820 <_fflush_r>
 800c6e4:	68a1      	ldr	r1, [r4, #8]
 800c6e6:	4b09      	ldr	r3, [pc, #36]	@ (800c70c <cleanup_stdio+0x38>)
 800c6e8:	4299      	cmp	r1, r3
 800c6ea:	d002      	beq.n	800c6f2 <cleanup_stdio+0x1e>
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f003 f897 	bl	800f820 <_fflush_r>
 800c6f2:	68e1      	ldr	r1, [r4, #12]
 800c6f4:	4b06      	ldr	r3, [pc, #24]	@ (800c710 <cleanup_stdio+0x3c>)
 800c6f6:	4299      	cmp	r1, r3
 800c6f8:	d004      	beq.n	800c704 <cleanup_stdio+0x30>
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c700:	f003 b88e 	b.w	800f820 <_fflush_r>
 800c704:	bd10      	pop	{r4, pc}
 800c706:	bf00      	nop
 800c708:	20001aa4 	.word	0x20001aa4
 800c70c:	20001b0c 	.word	0x20001b0c
 800c710:	20001b74 	.word	0x20001b74

0800c714 <global_stdio_init.part.0>:
 800c714:	b510      	push	{r4, lr}
 800c716:	4b0b      	ldr	r3, [pc, #44]	@ (800c744 <global_stdio_init.part.0+0x30>)
 800c718:	4c0b      	ldr	r4, [pc, #44]	@ (800c748 <global_stdio_init.part.0+0x34>)
 800c71a:	4a0c      	ldr	r2, [pc, #48]	@ (800c74c <global_stdio_init.part.0+0x38>)
 800c71c:	601a      	str	r2, [r3, #0]
 800c71e:	4620      	mov	r0, r4
 800c720:	2200      	movs	r2, #0
 800c722:	2104      	movs	r1, #4
 800c724:	f7ff ff94 	bl	800c650 <std>
 800c728:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c72c:	2201      	movs	r2, #1
 800c72e:	2109      	movs	r1, #9
 800c730:	f7ff ff8e 	bl	800c650 <std>
 800c734:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c738:	2202      	movs	r2, #2
 800c73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73e:	2112      	movs	r1, #18
 800c740:	f7ff bf86 	b.w	800c650 <std>
 800c744:	20001bdc 	.word	0x20001bdc
 800c748:	20001aa4 	.word	0x20001aa4
 800c74c:	0800c6bd 	.word	0x0800c6bd

0800c750 <__sfp_lock_acquire>:
 800c750:	4801      	ldr	r0, [pc, #4]	@ (800c758 <__sfp_lock_acquire+0x8>)
 800c752:	f000 baae 	b.w	800ccb2 <__retarget_lock_acquire_recursive>
 800c756:	bf00      	nop
 800c758:	20001be5 	.word	0x20001be5

0800c75c <__sfp_lock_release>:
 800c75c:	4801      	ldr	r0, [pc, #4]	@ (800c764 <__sfp_lock_release+0x8>)
 800c75e:	f000 baa9 	b.w	800ccb4 <__retarget_lock_release_recursive>
 800c762:	bf00      	nop
 800c764:	20001be5 	.word	0x20001be5

0800c768 <__sinit>:
 800c768:	b510      	push	{r4, lr}
 800c76a:	4604      	mov	r4, r0
 800c76c:	f7ff fff0 	bl	800c750 <__sfp_lock_acquire>
 800c770:	6a23      	ldr	r3, [r4, #32]
 800c772:	b11b      	cbz	r3, 800c77c <__sinit+0x14>
 800c774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c778:	f7ff bff0 	b.w	800c75c <__sfp_lock_release>
 800c77c:	4b04      	ldr	r3, [pc, #16]	@ (800c790 <__sinit+0x28>)
 800c77e:	6223      	str	r3, [r4, #32]
 800c780:	4b04      	ldr	r3, [pc, #16]	@ (800c794 <__sinit+0x2c>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f5      	bne.n	800c774 <__sinit+0xc>
 800c788:	f7ff ffc4 	bl	800c714 <global_stdio_init.part.0>
 800c78c:	e7f2      	b.n	800c774 <__sinit+0xc>
 800c78e:	bf00      	nop
 800c790:	0800c6d5 	.word	0x0800c6d5
 800c794:	20001bdc 	.word	0x20001bdc

0800c798 <_fwalk_sglue>:
 800c798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c79c:	4607      	mov	r7, r0
 800c79e:	4688      	mov	r8, r1
 800c7a0:	4614      	mov	r4, r2
 800c7a2:	2600      	movs	r6, #0
 800c7a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c7ac:	d505      	bpl.n	800c7ba <_fwalk_sglue+0x22>
 800c7ae:	6824      	ldr	r4, [r4, #0]
 800c7b0:	2c00      	cmp	r4, #0
 800c7b2:	d1f7      	bne.n	800c7a4 <_fwalk_sglue+0xc>
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d907      	bls.n	800c7d0 <_fwalk_sglue+0x38>
 800c7c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	d003      	beq.n	800c7d0 <_fwalk_sglue+0x38>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	47c0      	blx	r8
 800c7ce:	4306      	orrs	r6, r0
 800c7d0:	3568      	adds	r5, #104	@ 0x68
 800c7d2:	e7e9      	b.n	800c7a8 <_fwalk_sglue+0x10>

0800c7d4 <iprintf>:
 800c7d4:	b40f      	push	{r0, r1, r2, r3}
 800c7d6:	b507      	push	{r0, r1, r2, lr}
 800c7d8:	4906      	ldr	r1, [pc, #24]	@ (800c7f4 <iprintf+0x20>)
 800c7da:	ab04      	add	r3, sp, #16
 800c7dc:	6808      	ldr	r0, [r1, #0]
 800c7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7e2:	6881      	ldr	r1, [r0, #8]
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	f002 fe7f 	bl	800f4e8 <_vfiprintf_r>
 800c7ea:	b003      	add	sp, #12
 800c7ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7f0:	b004      	add	sp, #16
 800c7f2:	4770      	bx	lr
 800c7f4:	20000028 	.word	0x20000028

0800c7f8 <_puts_r>:
 800c7f8:	6a03      	ldr	r3, [r0, #32]
 800c7fa:	b570      	push	{r4, r5, r6, lr}
 800c7fc:	6884      	ldr	r4, [r0, #8]
 800c7fe:	4605      	mov	r5, r0
 800c800:	460e      	mov	r6, r1
 800c802:	b90b      	cbnz	r3, 800c808 <_puts_r+0x10>
 800c804:	f7ff ffb0 	bl	800c768 <__sinit>
 800c808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c80a:	07db      	lsls	r3, r3, #31
 800c80c:	d405      	bmi.n	800c81a <_puts_r+0x22>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	0598      	lsls	r0, r3, #22
 800c812:	d402      	bmi.n	800c81a <_puts_r+0x22>
 800c814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c816:	f000 fa4c 	bl	800ccb2 <__retarget_lock_acquire_recursive>
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	0719      	lsls	r1, r3, #28
 800c81e:	d502      	bpl.n	800c826 <_puts_r+0x2e>
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d135      	bne.n	800c892 <_puts_r+0x9a>
 800c826:	4621      	mov	r1, r4
 800c828:	4628      	mov	r0, r5
 800c82a:	f000 f919 	bl	800ca60 <__swsetup_r>
 800c82e:	b380      	cbz	r0, 800c892 <_puts_r+0x9a>
 800c830:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c836:	07da      	lsls	r2, r3, #31
 800c838:	d405      	bmi.n	800c846 <_puts_r+0x4e>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	059b      	lsls	r3, r3, #22
 800c83e:	d402      	bmi.n	800c846 <_puts_r+0x4e>
 800c840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c842:	f000 fa37 	bl	800ccb4 <__retarget_lock_release_recursive>
 800c846:	4628      	mov	r0, r5
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	da04      	bge.n	800c858 <_puts_r+0x60>
 800c84e:	69a2      	ldr	r2, [r4, #24]
 800c850:	429a      	cmp	r2, r3
 800c852:	dc17      	bgt.n	800c884 <_puts_r+0x8c>
 800c854:	290a      	cmp	r1, #10
 800c856:	d015      	beq.n	800c884 <_puts_r+0x8c>
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	6022      	str	r2, [r4, #0]
 800c85e:	7019      	strb	r1, [r3, #0]
 800c860:	68a3      	ldr	r3, [r4, #8]
 800c862:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c866:	3b01      	subs	r3, #1
 800c868:	60a3      	str	r3, [r4, #8]
 800c86a:	2900      	cmp	r1, #0
 800c86c:	d1ed      	bne.n	800c84a <_puts_r+0x52>
 800c86e:	2b00      	cmp	r3, #0
 800c870:	da11      	bge.n	800c896 <_puts_r+0x9e>
 800c872:	4622      	mov	r2, r4
 800c874:	210a      	movs	r1, #10
 800c876:	4628      	mov	r0, r5
 800c878:	f000 f8b3 	bl	800c9e2 <__swbuf_r>
 800c87c:	3001      	adds	r0, #1
 800c87e:	d0d7      	beq.n	800c830 <_puts_r+0x38>
 800c880:	250a      	movs	r5, #10
 800c882:	e7d7      	b.n	800c834 <_puts_r+0x3c>
 800c884:	4622      	mov	r2, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f000 f8ab 	bl	800c9e2 <__swbuf_r>
 800c88c:	3001      	adds	r0, #1
 800c88e:	d1e7      	bne.n	800c860 <_puts_r+0x68>
 800c890:	e7ce      	b.n	800c830 <_puts_r+0x38>
 800c892:	3e01      	subs	r6, #1
 800c894:	e7e4      	b.n	800c860 <_puts_r+0x68>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	6022      	str	r2, [r4, #0]
 800c89c:	220a      	movs	r2, #10
 800c89e:	701a      	strb	r2, [r3, #0]
 800c8a0:	e7ee      	b.n	800c880 <_puts_r+0x88>
	...

0800c8a4 <puts>:
 800c8a4:	4b02      	ldr	r3, [pc, #8]	@ (800c8b0 <puts+0xc>)
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	6818      	ldr	r0, [r3, #0]
 800c8aa:	f7ff bfa5 	b.w	800c7f8 <_puts_r>
 800c8ae:	bf00      	nop
 800c8b0:	20000028 	.word	0x20000028

0800c8b4 <sniprintf>:
 800c8b4:	b40c      	push	{r2, r3}
 800c8b6:	b530      	push	{r4, r5, lr}
 800c8b8:	4b17      	ldr	r3, [pc, #92]	@ (800c918 <sniprintf+0x64>)
 800c8ba:	1e0c      	subs	r4, r1, #0
 800c8bc:	681d      	ldr	r5, [r3, #0]
 800c8be:	b09d      	sub	sp, #116	@ 0x74
 800c8c0:	da08      	bge.n	800c8d4 <sniprintf+0x20>
 800c8c2:	238b      	movs	r3, #139	@ 0x8b
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ca:	b01d      	add	sp, #116	@ 0x74
 800c8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8d0:	b002      	add	sp, #8
 800c8d2:	4770      	bx	lr
 800c8d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c8d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c8dc:	bf14      	ite	ne
 800c8de:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c8e2:	4623      	moveq	r3, r4
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	9307      	str	r3, [sp, #28]
 800c8e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c8ec:	9002      	str	r0, [sp, #8]
 800c8ee:	9006      	str	r0, [sp, #24]
 800c8f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c8f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c8f6:	ab21      	add	r3, sp, #132	@ 0x84
 800c8f8:	a902      	add	r1, sp, #8
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	f002 fccd 	bl	800f29c <_svfiprintf_r>
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	bfbc      	itt	lt
 800c906:	238b      	movlt	r3, #139	@ 0x8b
 800c908:	602b      	strlt	r3, [r5, #0]
 800c90a:	2c00      	cmp	r4, #0
 800c90c:	d0dd      	beq.n	800c8ca <sniprintf+0x16>
 800c90e:	9b02      	ldr	r3, [sp, #8]
 800c910:	2200      	movs	r2, #0
 800c912:	701a      	strb	r2, [r3, #0]
 800c914:	e7d9      	b.n	800c8ca <sniprintf+0x16>
 800c916:	bf00      	nop
 800c918:	20000028 	.word	0x20000028

0800c91c <siprintf>:
 800c91c:	b40e      	push	{r1, r2, r3}
 800c91e:	b500      	push	{lr}
 800c920:	b09c      	sub	sp, #112	@ 0x70
 800c922:	ab1d      	add	r3, sp, #116	@ 0x74
 800c924:	9002      	str	r0, [sp, #8]
 800c926:	9006      	str	r0, [sp, #24]
 800c928:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c92c:	4809      	ldr	r0, [pc, #36]	@ (800c954 <siprintf+0x38>)
 800c92e:	9107      	str	r1, [sp, #28]
 800c930:	9104      	str	r1, [sp, #16]
 800c932:	4909      	ldr	r1, [pc, #36]	@ (800c958 <siprintf+0x3c>)
 800c934:	f853 2b04 	ldr.w	r2, [r3], #4
 800c938:	9105      	str	r1, [sp, #20]
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	a902      	add	r1, sp, #8
 800c940:	f002 fcac 	bl	800f29c <_svfiprintf_r>
 800c944:	9b02      	ldr	r3, [sp, #8]
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	b01c      	add	sp, #112	@ 0x70
 800c94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c950:	b003      	add	sp, #12
 800c952:	4770      	bx	lr
 800c954:	20000028 	.word	0x20000028
 800c958:	ffff0208 	.word	0xffff0208

0800c95c <__sread>:
 800c95c:	b510      	push	{r4, lr}
 800c95e:	460c      	mov	r4, r1
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	f000 f956 	bl	800cc14 <_read_r>
 800c968:	2800      	cmp	r0, #0
 800c96a:	bfab      	itete	ge
 800c96c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c96e:	89a3      	ldrhlt	r3, [r4, #12]
 800c970:	181b      	addge	r3, r3, r0
 800c972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c976:	bfac      	ite	ge
 800c978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c97a:	81a3      	strhlt	r3, [r4, #12]
 800c97c:	bd10      	pop	{r4, pc}

0800c97e <__swrite>:
 800c97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c982:	461f      	mov	r7, r3
 800c984:	898b      	ldrh	r3, [r1, #12]
 800c986:	05db      	lsls	r3, r3, #23
 800c988:	4605      	mov	r5, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	4616      	mov	r6, r2
 800c98e:	d505      	bpl.n	800c99c <__swrite+0x1e>
 800c990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c994:	2302      	movs	r3, #2
 800c996:	2200      	movs	r2, #0
 800c998:	f000 f92a 	bl	800cbf0 <_lseek_r>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9a6:	81a3      	strh	r3, [r4, #12]
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	463b      	mov	r3, r7
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b2:	f000 b941 	b.w	800cc38 <_write_r>

0800c9b6 <__sseek>:
 800c9b6:	b510      	push	{r4, lr}
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9be:	f000 f917 	bl	800cbf0 <_lseek_r>
 800c9c2:	1c43      	adds	r3, r0, #1
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	bf15      	itete	ne
 800c9c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c9ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c9ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9d2:	81a3      	strheq	r3, [r4, #12]
 800c9d4:	bf18      	it	ne
 800c9d6:	81a3      	strhne	r3, [r4, #12]
 800c9d8:	bd10      	pop	{r4, pc}

0800c9da <__sclose>:
 800c9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9de:	f000 b8a1 	b.w	800cb24 <_close_r>

0800c9e2 <__swbuf_r>:
 800c9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e4:	460e      	mov	r6, r1
 800c9e6:	4614      	mov	r4, r2
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	b118      	cbz	r0, 800c9f4 <__swbuf_r+0x12>
 800c9ec:	6a03      	ldr	r3, [r0, #32]
 800c9ee:	b90b      	cbnz	r3, 800c9f4 <__swbuf_r+0x12>
 800c9f0:	f7ff feba 	bl	800c768 <__sinit>
 800c9f4:	69a3      	ldr	r3, [r4, #24]
 800c9f6:	60a3      	str	r3, [r4, #8]
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	071a      	lsls	r2, r3, #28
 800c9fc:	d501      	bpl.n	800ca02 <__swbuf_r+0x20>
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	b943      	cbnz	r3, 800ca14 <__swbuf_r+0x32>
 800ca02:	4621      	mov	r1, r4
 800ca04:	4628      	mov	r0, r5
 800ca06:	f000 f82b 	bl	800ca60 <__swsetup_r>
 800ca0a:	b118      	cbz	r0, 800ca14 <__swbuf_r+0x32>
 800ca0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ca10:	4638      	mov	r0, r7
 800ca12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	6922      	ldr	r2, [r4, #16]
 800ca18:	1a98      	subs	r0, r3, r2
 800ca1a:	6963      	ldr	r3, [r4, #20]
 800ca1c:	b2f6      	uxtb	r6, r6
 800ca1e:	4283      	cmp	r3, r0
 800ca20:	4637      	mov	r7, r6
 800ca22:	dc05      	bgt.n	800ca30 <__swbuf_r+0x4e>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4628      	mov	r0, r5
 800ca28:	f002 fefa 	bl	800f820 <_fflush_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d1ed      	bne.n	800ca0c <__swbuf_r+0x2a>
 800ca30:	68a3      	ldr	r3, [r4, #8]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	60a3      	str	r3, [r4, #8]
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	6022      	str	r2, [r4, #0]
 800ca3c:	701e      	strb	r6, [r3, #0]
 800ca3e:	6962      	ldr	r2, [r4, #20]
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d004      	beq.n	800ca50 <__swbuf_r+0x6e>
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	07db      	lsls	r3, r3, #31
 800ca4a:	d5e1      	bpl.n	800ca10 <__swbuf_r+0x2e>
 800ca4c:	2e0a      	cmp	r6, #10
 800ca4e:	d1df      	bne.n	800ca10 <__swbuf_r+0x2e>
 800ca50:	4621      	mov	r1, r4
 800ca52:	4628      	mov	r0, r5
 800ca54:	f002 fee4 	bl	800f820 <_fflush_r>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d0d9      	beq.n	800ca10 <__swbuf_r+0x2e>
 800ca5c:	e7d6      	b.n	800ca0c <__swbuf_r+0x2a>
	...

0800ca60 <__swsetup_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4b29      	ldr	r3, [pc, #164]	@ (800cb08 <__swsetup_r+0xa8>)
 800ca64:	4605      	mov	r5, r0
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	460c      	mov	r4, r1
 800ca6a:	b118      	cbz	r0, 800ca74 <__swsetup_r+0x14>
 800ca6c:	6a03      	ldr	r3, [r0, #32]
 800ca6e:	b90b      	cbnz	r3, 800ca74 <__swsetup_r+0x14>
 800ca70:	f7ff fe7a 	bl	800c768 <__sinit>
 800ca74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca78:	0719      	lsls	r1, r3, #28
 800ca7a:	d422      	bmi.n	800cac2 <__swsetup_r+0x62>
 800ca7c:	06da      	lsls	r2, r3, #27
 800ca7e:	d407      	bmi.n	800ca90 <__swsetup_r+0x30>
 800ca80:	2209      	movs	r2, #9
 800ca82:	602a      	str	r2, [r5, #0]
 800ca84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca8e:	e033      	b.n	800caf8 <__swsetup_r+0x98>
 800ca90:	0758      	lsls	r0, r3, #29
 800ca92:	d512      	bpl.n	800caba <__swsetup_r+0x5a>
 800ca94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca96:	b141      	cbz	r1, 800caaa <__swsetup_r+0x4a>
 800ca98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca9c:	4299      	cmp	r1, r3
 800ca9e:	d002      	beq.n	800caa6 <__swsetup_r+0x46>
 800caa0:	4628      	mov	r0, r5
 800caa2:	f000 ff69 	bl	800d978 <_free_r>
 800caa6:	2300      	movs	r3, #0
 800caa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cab0:	81a3      	strh	r3, [r4, #12]
 800cab2:	2300      	movs	r3, #0
 800cab4:	6063      	str	r3, [r4, #4]
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f043 0308 	orr.w	r3, r3, #8
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	b94b      	cbnz	r3, 800cada <__swsetup_r+0x7a>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cacc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cad0:	d003      	beq.n	800cada <__swsetup_r+0x7a>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4628      	mov	r0, r5
 800cad6:	f002 fef1 	bl	800f8bc <__smakebuf_r>
 800cada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cade:	f013 0201 	ands.w	r2, r3, #1
 800cae2:	d00a      	beq.n	800cafa <__swsetup_r+0x9a>
 800cae4:	2200      	movs	r2, #0
 800cae6:	60a2      	str	r2, [r4, #8]
 800cae8:	6962      	ldr	r2, [r4, #20]
 800caea:	4252      	negs	r2, r2
 800caec:	61a2      	str	r2, [r4, #24]
 800caee:	6922      	ldr	r2, [r4, #16]
 800caf0:	b942      	cbnz	r2, 800cb04 <__swsetup_r+0xa4>
 800caf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caf6:	d1c5      	bne.n	800ca84 <__swsetup_r+0x24>
 800caf8:	bd38      	pop	{r3, r4, r5, pc}
 800cafa:	0799      	lsls	r1, r3, #30
 800cafc:	bf58      	it	pl
 800cafe:	6962      	ldrpl	r2, [r4, #20]
 800cb00:	60a2      	str	r2, [r4, #8]
 800cb02:	e7f4      	b.n	800caee <__swsetup_r+0x8e>
 800cb04:	2000      	movs	r0, #0
 800cb06:	e7f7      	b.n	800caf8 <__swsetup_r+0x98>
 800cb08:	20000028 	.word	0x20000028

0800cb0c <memset>:
 800cb0c:	4402      	add	r2, r0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d100      	bne.n	800cb16 <memset+0xa>
 800cb14:	4770      	bx	lr
 800cb16:	f803 1b01 	strb.w	r1, [r3], #1
 800cb1a:	e7f9      	b.n	800cb10 <memset+0x4>

0800cb1c <_localeconv_r>:
 800cb1c:	4800      	ldr	r0, [pc, #0]	@ (800cb20 <_localeconv_r+0x4>)
 800cb1e:	4770      	bx	lr
 800cb20:	20000168 	.word	0x20000168

0800cb24 <_close_r>:
 800cb24:	b538      	push	{r3, r4, r5, lr}
 800cb26:	4d06      	ldr	r5, [pc, #24]	@ (800cb40 <_close_r+0x1c>)
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	4608      	mov	r0, r1
 800cb2e:	602b      	str	r3, [r5, #0]
 800cb30:	f7f5 fea2 	bl	8002878 <_close>
 800cb34:	1c43      	adds	r3, r0, #1
 800cb36:	d102      	bne.n	800cb3e <_close_r+0x1a>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	b103      	cbz	r3, 800cb3e <_close_r+0x1a>
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	20001be0 	.word	0x20001be0

0800cb44 <_reclaim_reent>:
 800cb44:	4b29      	ldr	r3, [pc, #164]	@ (800cbec <_reclaim_reent+0xa8>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4283      	cmp	r3, r0
 800cb4a:	b570      	push	{r4, r5, r6, lr}
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	d04b      	beq.n	800cbe8 <_reclaim_reent+0xa4>
 800cb50:	69c3      	ldr	r3, [r0, #28]
 800cb52:	b1ab      	cbz	r3, 800cb80 <_reclaim_reent+0x3c>
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	b16b      	cbz	r3, 800cb74 <_reclaim_reent+0x30>
 800cb58:	2500      	movs	r5, #0
 800cb5a:	69e3      	ldr	r3, [r4, #28]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	5959      	ldr	r1, [r3, r5]
 800cb60:	2900      	cmp	r1, #0
 800cb62:	d13b      	bne.n	800cbdc <_reclaim_reent+0x98>
 800cb64:	3504      	adds	r5, #4
 800cb66:	2d80      	cmp	r5, #128	@ 0x80
 800cb68:	d1f7      	bne.n	800cb5a <_reclaim_reent+0x16>
 800cb6a:	69e3      	ldr	r3, [r4, #28]
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	68d9      	ldr	r1, [r3, #12]
 800cb70:	f000 ff02 	bl	800d978 <_free_r>
 800cb74:	69e3      	ldr	r3, [r4, #28]
 800cb76:	6819      	ldr	r1, [r3, #0]
 800cb78:	b111      	cbz	r1, 800cb80 <_reclaim_reent+0x3c>
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 fefc 	bl	800d978 <_free_r>
 800cb80:	6961      	ldr	r1, [r4, #20]
 800cb82:	b111      	cbz	r1, 800cb8a <_reclaim_reent+0x46>
 800cb84:	4620      	mov	r0, r4
 800cb86:	f000 fef7 	bl	800d978 <_free_r>
 800cb8a:	69e1      	ldr	r1, [r4, #28]
 800cb8c:	b111      	cbz	r1, 800cb94 <_reclaim_reent+0x50>
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 fef2 	bl	800d978 <_free_r>
 800cb94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cb96:	b111      	cbz	r1, 800cb9e <_reclaim_reent+0x5a>
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 feed 	bl	800d978 <_free_r>
 800cb9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cba0:	b111      	cbz	r1, 800cba8 <_reclaim_reent+0x64>
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 fee8 	bl	800d978 <_free_r>
 800cba8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cbaa:	b111      	cbz	r1, 800cbb2 <_reclaim_reent+0x6e>
 800cbac:	4620      	mov	r0, r4
 800cbae:	f000 fee3 	bl	800d978 <_free_r>
 800cbb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cbb4:	b111      	cbz	r1, 800cbbc <_reclaim_reent+0x78>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f000 fede 	bl	800d978 <_free_r>
 800cbbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cbbe:	b111      	cbz	r1, 800cbc6 <_reclaim_reent+0x82>
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 fed9 	bl	800d978 <_free_r>
 800cbc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cbc8:	b111      	cbz	r1, 800cbd0 <_reclaim_reent+0x8c>
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 fed4 	bl	800d978 <_free_r>
 800cbd0:	6a23      	ldr	r3, [r4, #32]
 800cbd2:	b14b      	cbz	r3, 800cbe8 <_reclaim_reent+0xa4>
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbda:	4718      	bx	r3
 800cbdc:	680e      	ldr	r6, [r1, #0]
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 feca 	bl	800d978 <_free_r>
 800cbe4:	4631      	mov	r1, r6
 800cbe6:	e7bb      	b.n	800cb60 <_reclaim_reent+0x1c>
 800cbe8:	bd70      	pop	{r4, r5, r6, pc}
 800cbea:	bf00      	nop
 800cbec:	20000028 	.word	0x20000028

0800cbf0 <_lseek_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4d07      	ldr	r5, [pc, #28]	@ (800cc10 <_lseek_r+0x20>)
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	602a      	str	r2, [r5, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	f7f5 fe61 	bl	80028c6 <_lseek>
 800cc04:	1c43      	adds	r3, r0, #1
 800cc06:	d102      	bne.n	800cc0e <_lseek_r+0x1e>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	b103      	cbz	r3, 800cc0e <_lseek_r+0x1e>
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	20001be0 	.word	0x20001be0

0800cc14 <_read_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4d07      	ldr	r5, [pc, #28]	@ (800cc34 <_read_r+0x20>)
 800cc18:	4604      	mov	r4, r0
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	2200      	movs	r2, #0
 800cc20:	602a      	str	r2, [r5, #0]
 800cc22:	461a      	mov	r2, r3
 800cc24:	f7f5 fdef 	bl	8002806 <_read>
 800cc28:	1c43      	adds	r3, r0, #1
 800cc2a:	d102      	bne.n	800cc32 <_read_r+0x1e>
 800cc2c:	682b      	ldr	r3, [r5, #0]
 800cc2e:	b103      	cbz	r3, 800cc32 <_read_r+0x1e>
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	20001be0 	.word	0x20001be0

0800cc38 <_write_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4d07      	ldr	r5, [pc, #28]	@ (800cc58 <_write_r+0x20>)
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	4608      	mov	r0, r1
 800cc40:	4611      	mov	r1, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	602a      	str	r2, [r5, #0]
 800cc46:	461a      	mov	r2, r3
 800cc48:	f7f5 fdfa 	bl	8002840 <_write>
 800cc4c:	1c43      	adds	r3, r0, #1
 800cc4e:	d102      	bne.n	800cc56 <_write_r+0x1e>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	b103      	cbz	r3, 800cc56 <_write_r+0x1e>
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	20001be0 	.word	0x20001be0

0800cc5c <__errno>:
 800cc5c:	4b01      	ldr	r3, [pc, #4]	@ (800cc64 <__errno+0x8>)
 800cc5e:	6818      	ldr	r0, [r3, #0]
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20000028 	.word	0x20000028

0800cc68 <__libc_init_array>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	4d0d      	ldr	r5, [pc, #52]	@ (800cca0 <__libc_init_array+0x38>)
 800cc6c:	4c0d      	ldr	r4, [pc, #52]	@ (800cca4 <__libc_init_array+0x3c>)
 800cc6e:	1b64      	subs	r4, r4, r5
 800cc70:	10a4      	asrs	r4, r4, #2
 800cc72:	2600      	movs	r6, #0
 800cc74:	42a6      	cmp	r6, r4
 800cc76:	d109      	bne.n	800cc8c <__libc_init_array+0x24>
 800cc78:	4d0b      	ldr	r5, [pc, #44]	@ (800cca8 <__libc_init_array+0x40>)
 800cc7a:	4c0c      	ldr	r4, [pc, #48]	@ (800ccac <__libc_init_array+0x44>)
 800cc7c:	f003 fade 	bl	801023c <_init>
 800cc80:	1b64      	subs	r4, r4, r5
 800cc82:	10a4      	asrs	r4, r4, #2
 800cc84:	2600      	movs	r6, #0
 800cc86:	42a6      	cmp	r6, r4
 800cc88:	d105      	bne.n	800cc96 <__libc_init_array+0x2e>
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
 800cc8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc90:	4798      	blx	r3
 800cc92:	3601      	adds	r6, #1
 800cc94:	e7ee      	b.n	800cc74 <__libc_init_array+0xc>
 800cc96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc9a:	4798      	blx	r3
 800cc9c:	3601      	adds	r6, #1
 800cc9e:	e7f2      	b.n	800cc86 <__libc_init_array+0x1e>
 800cca0:	080108e0 	.word	0x080108e0
 800cca4:	080108e0 	.word	0x080108e0
 800cca8:	080108e0 	.word	0x080108e0
 800ccac:	080108e4 	.word	0x080108e4

0800ccb0 <__retarget_lock_init_recursive>:
 800ccb0:	4770      	bx	lr

0800ccb2 <__retarget_lock_acquire_recursive>:
 800ccb2:	4770      	bx	lr

0800ccb4 <__retarget_lock_release_recursive>:
 800ccb4:	4770      	bx	lr

0800ccb6 <memcpy>:
 800ccb6:	440a      	add	r2, r1
 800ccb8:	4291      	cmp	r1, r2
 800ccba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ccbe:	d100      	bne.n	800ccc2 <memcpy+0xc>
 800ccc0:	4770      	bx	lr
 800ccc2:	b510      	push	{r4, lr}
 800ccc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cccc:	4291      	cmp	r1, r2
 800ccce:	d1f9      	bne.n	800ccc4 <memcpy+0xe>
 800ccd0:	bd10      	pop	{r4, pc}
	...

0800ccd4 <nanf>:
 800ccd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ccdc <nanf+0x8>
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	7fc00000 	.word	0x7fc00000

0800cce0 <quorem>:
 800cce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	6903      	ldr	r3, [r0, #16]
 800cce6:	690c      	ldr	r4, [r1, #16]
 800cce8:	42a3      	cmp	r3, r4
 800ccea:	4607      	mov	r7, r0
 800ccec:	db7e      	blt.n	800cdec <quorem+0x10c>
 800ccee:	3c01      	subs	r4, #1
 800ccf0:	f101 0814 	add.w	r8, r1, #20
 800ccf4:	00a3      	lsls	r3, r4, #2
 800ccf6:	f100 0514 	add.w	r5, r0, #20
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd12:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd16:	d32e      	bcc.n	800cd76 <quorem+0x96>
 800cd18:	f04f 0a00 	mov.w	sl, #0
 800cd1c:	46c4      	mov	ip, r8
 800cd1e:	46ae      	mov	lr, r5
 800cd20:	46d3      	mov	fp, sl
 800cd22:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd26:	b298      	uxth	r0, r3
 800cd28:	fb06 a000 	mla	r0, r6, r0, sl
 800cd2c:	0c02      	lsrs	r2, r0, #16
 800cd2e:	0c1b      	lsrs	r3, r3, #16
 800cd30:	fb06 2303 	mla	r3, r6, r3, r2
 800cd34:	f8de 2000 	ldr.w	r2, [lr]
 800cd38:	b280      	uxth	r0, r0
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	1a12      	subs	r2, r2, r0
 800cd3e:	445a      	add	r2, fp
 800cd40:	f8de 0000 	ldr.w	r0, [lr]
 800cd44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cd4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cd52:	b292      	uxth	r2, r2
 800cd54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cd58:	45e1      	cmp	r9, ip
 800cd5a:	f84e 2b04 	str.w	r2, [lr], #4
 800cd5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cd62:	d2de      	bcs.n	800cd22 <quorem+0x42>
 800cd64:	9b00      	ldr	r3, [sp, #0]
 800cd66:	58eb      	ldr	r3, [r5, r3]
 800cd68:	b92b      	cbnz	r3, 800cd76 <quorem+0x96>
 800cd6a:	9b01      	ldr	r3, [sp, #4]
 800cd6c:	3b04      	subs	r3, #4
 800cd6e:	429d      	cmp	r5, r3
 800cd70:	461a      	mov	r2, r3
 800cd72:	d32f      	bcc.n	800cdd4 <quorem+0xf4>
 800cd74:	613c      	str	r4, [r7, #16]
 800cd76:	4638      	mov	r0, r7
 800cd78:	f001 f9c2 	bl	800e100 <__mcmp>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	db25      	blt.n	800cdcc <quorem+0xec>
 800cd80:	4629      	mov	r1, r5
 800cd82:	2000      	movs	r0, #0
 800cd84:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd88:	f8d1 c000 	ldr.w	ip, [r1]
 800cd8c:	fa1f fe82 	uxth.w	lr, r2
 800cd90:	fa1f f38c 	uxth.w	r3, ip
 800cd94:	eba3 030e 	sub.w	r3, r3, lr
 800cd98:	4403      	add	r3, r0
 800cd9a:	0c12      	lsrs	r2, r2, #16
 800cd9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cda0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdaa:	45c1      	cmp	r9, r8
 800cdac:	f841 3b04 	str.w	r3, [r1], #4
 800cdb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cdb4:	d2e6      	bcs.n	800cd84 <quorem+0xa4>
 800cdb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdbe:	b922      	cbnz	r2, 800cdca <quorem+0xea>
 800cdc0:	3b04      	subs	r3, #4
 800cdc2:	429d      	cmp	r5, r3
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	d30b      	bcc.n	800cde0 <quorem+0x100>
 800cdc8:	613c      	str	r4, [r7, #16]
 800cdca:	3601      	adds	r6, #1
 800cdcc:	4630      	mov	r0, r6
 800cdce:	b003      	add	sp, #12
 800cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd4:	6812      	ldr	r2, [r2, #0]
 800cdd6:	3b04      	subs	r3, #4
 800cdd8:	2a00      	cmp	r2, #0
 800cdda:	d1cb      	bne.n	800cd74 <quorem+0x94>
 800cddc:	3c01      	subs	r4, #1
 800cdde:	e7c6      	b.n	800cd6e <quorem+0x8e>
 800cde0:	6812      	ldr	r2, [r2, #0]
 800cde2:	3b04      	subs	r3, #4
 800cde4:	2a00      	cmp	r2, #0
 800cde6:	d1ef      	bne.n	800cdc8 <quorem+0xe8>
 800cde8:	3c01      	subs	r4, #1
 800cdea:	e7ea      	b.n	800cdc2 <quorem+0xe2>
 800cdec:	2000      	movs	r0, #0
 800cdee:	e7ee      	b.n	800cdce <quorem+0xee>

0800cdf0 <_dtoa_r>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	69c7      	ldr	r7, [r0, #28]
 800cdf6:	b099      	sub	sp, #100	@ 0x64
 800cdf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cdfc:	ec55 4b10 	vmov	r4, r5, d0
 800ce00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ce02:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce04:	4683      	mov	fp, r0
 800ce06:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce0a:	b97f      	cbnz	r7, 800ce2c <_dtoa_r+0x3c>
 800ce0c:	2010      	movs	r0, #16
 800ce0e:	f000 fdfd 	bl	800da0c <malloc>
 800ce12:	4602      	mov	r2, r0
 800ce14:	f8cb 001c 	str.w	r0, [fp, #28]
 800ce18:	b920      	cbnz	r0, 800ce24 <_dtoa_r+0x34>
 800ce1a:	4ba7      	ldr	r3, [pc, #668]	@ (800d0b8 <_dtoa_r+0x2c8>)
 800ce1c:	21ef      	movs	r1, #239	@ 0xef
 800ce1e:	48a7      	ldr	r0, [pc, #668]	@ (800d0bc <_dtoa_r+0x2cc>)
 800ce20:	f002 fdee 	bl	800fa00 <__assert_func>
 800ce24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ce28:	6007      	str	r7, [r0, #0]
 800ce2a:	60c7      	str	r7, [r0, #12]
 800ce2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce30:	6819      	ldr	r1, [r3, #0]
 800ce32:	b159      	cbz	r1, 800ce4c <_dtoa_r+0x5c>
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	604a      	str	r2, [r1, #4]
 800ce38:	2301      	movs	r3, #1
 800ce3a:	4093      	lsls	r3, r2
 800ce3c:	608b      	str	r3, [r1, #8]
 800ce3e:	4658      	mov	r0, fp
 800ce40:	f000 feda 	bl	800dbf8 <_Bfree>
 800ce44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	1e2b      	subs	r3, r5, #0
 800ce4e:	bfb9      	ittee	lt
 800ce50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ce54:	9303      	strlt	r3, [sp, #12]
 800ce56:	2300      	movge	r3, #0
 800ce58:	6033      	strge	r3, [r6, #0]
 800ce5a:	9f03      	ldr	r7, [sp, #12]
 800ce5c:	4b98      	ldr	r3, [pc, #608]	@ (800d0c0 <_dtoa_r+0x2d0>)
 800ce5e:	bfbc      	itt	lt
 800ce60:	2201      	movlt	r2, #1
 800ce62:	6032      	strlt	r2, [r6, #0]
 800ce64:	43bb      	bics	r3, r7
 800ce66:	d112      	bne.n	800ce8e <_dtoa_r+0x9e>
 800ce68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce74:	4323      	orrs	r3, r4
 800ce76:	f000 854d 	beq.w	800d914 <_dtoa_r+0xb24>
 800ce7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d0d4 <_dtoa_r+0x2e4>
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 854f 	beq.w	800d924 <_dtoa_r+0xb34>
 800ce86:	f10a 0303 	add.w	r3, sl, #3
 800ce8a:	f000 bd49 	b.w	800d920 <_dtoa_r+0xb30>
 800ce8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce92:	2200      	movs	r2, #0
 800ce94:	ec51 0b17 	vmov	r0, r1, d7
 800ce98:	2300      	movs	r3, #0
 800ce9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ce9e:	f7f3 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 800cea2:	4680      	mov	r8, r0
 800cea4:	b158      	cbz	r0, 800cebe <_dtoa_r+0xce>
 800cea6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cea8:	2301      	movs	r3, #1
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ceae:	b113      	cbz	r3, 800ceb6 <_dtoa_r+0xc6>
 800ceb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ceb2:	4b84      	ldr	r3, [pc, #528]	@ (800d0c4 <_dtoa_r+0x2d4>)
 800ceb4:	6013      	str	r3, [r2, #0]
 800ceb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d0d8 <_dtoa_r+0x2e8>
 800ceba:	f000 bd33 	b.w	800d924 <_dtoa_r+0xb34>
 800cebe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cec2:	aa16      	add	r2, sp, #88	@ 0x58
 800cec4:	a917      	add	r1, sp, #92	@ 0x5c
 800cec6:	4658      	mov	r0, fp
 800cec8:	f001 fa3a 	bl	800e340 <__d2b>
 800cecc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ced0:	4681      	mov	r9, r0
 800ced2:	2e00      	cmp	r6, #0
 800ced4:	d077      	beq.n	800cfc6 <_dtoa_r+0x1d6>
 800ced6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ced8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cedc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cee4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cee8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ceec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cef0:	4619      	mov	r1, r3
 800cef2:	2200      	movs	r2, #0
 800cef4:	4b74      	ldr	r3, [pc, #464]	@ (800d0c8 <_dtoa_r+0x2d8>)
 800cef6:	f7f3 f9c7 	bl	8000288 <__aeabi_dsub>
 800cefa:	a369      	add	r3, pc, #420	@ (adr r3, 800d0a0 <_dtoa_r+0x2b0>)
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf00:	f7f3 fb7a 	bl	80005f8 <__aeabi_dmul>
 800cf04:	a368      	add	r3, pc, #416	@ (adr r3, 800d0a8 <_dtoa_r+0x2b8>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	f7f3 f9bf 	bl	800028c <__adddf3>
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4630      	mov	r0, r6
 800cf12:	460d      	mov	r5, r1
 800cf14:	f7f3 fb06 	bl	8000524 <__aeabi_i2d>
 800cf18:	a365      	add	r3, pc, #404	@ (adr r3, 800d0b0 <_dtoa_r+0x2c0>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 fb6b 	bl	80005f8 <__aeabi_dmul>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4620      	mov	r0, r4
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7f3 f9af 	bl	800028c <__adddf3>
 800cf2e:	4604      	mov	r4, r0
 800cf30:	460d      	mov	r5, r1
 800cf32:	f7f3 fe11 	bl	8000b58 <__aeabi_d2iz>
 800cf36:	2200      	movs	r2, #0
 800cf38:	4607      	mov	r7, r0
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f7f3 fdcc 	bl	8000adc <__aeabi_dcmplt>
 800cf44:	b140      	cbz	r0, 800cf58 <_dtoa_r+0x168>
 800cf46:	4638      	mov	r0, r7
 800cf48:	f7f3 faec 	bl	8000524 <__aeabi_i2d>
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	462b      	mov	r3, r5
 800cf50:	f7f3 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf54:	b900      	cbnz	r0, 800cf58 <_dtoa_r+0x168>
 800cf56:	3f01      	subs	r7, #1
 800cf58:	2f16      	cmp	r7, #22
 800cf5a:	d851      	bhi.n	800d000 <_dtoa_r+0x210>
 800cf5c:	4b5b      	ldr	r3, [pc, #364]	@ (800d0cc <_dtoa_r+0x2dc>)
 800cf5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf6a:	f7f3 fdb7 	bl	8000adc <__aeabi_dcmplt>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d048      	beq.n	800d004 <_dtoa_r+0x214>
 800cf72:	3f01      	subs	r7, #1
 800cf74:	2300      	movs	r3, #0
 800cf76:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf7a:	1b9b      	subs	r3, r3, r6
 800cf7c:	1e5a      	subs	r2, r3, #1
 800cf7e:	bf44      	itt	mi
 800cf80:	f1c3 0801 	rsbmi	r8, r3, #1
 800cf84:	2300      	movmi	r3, #0
 800cf86:	9208      	str	r2, [sp, #32]
 800cf88:	bf54      	ite	pl
 800cf8a:	f04f 0800 	movpl.w	r8, #0
 800cf8e:	9308      	strmi	r3, [sp, #32]
 800cf90:	2f00      	cmp	r7, #0
 800cf92:	db39      	blt.n	800d008 <_dtoa_r+0x218>
 800cf94:	9b08      	ldr	r3, [sp, #32]
 800cf96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cf98:	443b      	add	r3, r7
 800cf9a:	9308      	str	r3, [sp, #32]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa2:	2b09      	cmp	r3, #9
 800cfa4:	d864      	bhi.n	800d070 <_dtoa_r+0x280>
 800cfa6:	2b05      	cmp	r3, #5
 800cfa8:	bfc4      	itt	gt
 800cfaa:	3b04      	subgt	r3, #4
 800cfac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb0:	f1a3 0302 	sub.w	r3, r3, #2
 800cfb4:	bfcc      	ite	gt
 800cfb6:	2400      	movgt	r4, #0
 800cfb8:	2401      	movle	r4, #1
 800cfba:	2b03      	cmp	r3, #3
 800cfbc:	d863      	bhi.n	800d086 <_dtoa_r+0x296>
 800cfbe:	e8df f003 	tbb	[pc, r3]
 800cfc2:	372a      	.short	0x372a
 800cfc4:	5535      	.short	0x5535
 800cfc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cfca:	441e      	add	r6, r3
 800cfcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cfd0:	2b20      	cmp	r3, #32
 800cfd2:	bfc1      	itttt	gt
 800cfd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cfd8:	409f      	lslgt	r7, r3
 800cfda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cfde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cfe2:	bfd6      	itet	le
 800cfe4:	f1c3 0320 	rsble	r3, r3, #32
 800cfe8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cfec:	fa04 f003 	lslle.w	r0, r4, r3
 800cff0:	f7f3 fa88 	bl	8000504 <__aeabi_ui2d>
 800cff4:	2201      	movs	r2, #1
 800cff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cffa:	3e01      	subs	r6, #1
 800cffc:	9214      	str	r2, [sp, #80]	@ 0x50
 800cffe:	e777      	b.n	800cef0 <_dtoa_r+0x100>
 800d000:	2301      	movs	r3, #1
 800d002:	e7b8      	b.n	800cf76 <_dtoa_r+0x186>
 800d004:	9012      	str	r0, [sp, #72]	@ 0x48
 800d006:	e7b7      	b.n	800cf78 <_dtoa_r+0x188>
 800d008:	427b      	negs	r3, r7
 800d00a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d00c:	2300      	movs	r3, #0
 800d00e:	eba8 0807 	sub.w	r8, r8, r7
 800d012:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d014:	e7c4      	b.n	800cfa0 <_dtoa_r+0x1b0>
 800d016:	2300      	movs	r3, #0
 800d018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d01a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dc35      	bgt.n	800d08c <_dtoa_r+0x29c>
 800d020:	2301      	movs	r3, #1
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	9307      	str	r3, [sp, #28]
 800d026:	461a      	mov	r2, r3
 800d028:	920e      	str	r2, [sp, #56]	@ 0x38
 800d02a:	e00b      	b.n	800d044 <_dtoa_r+0x254>
 800d02c:	2301      	movs	r3, #1
 800d02e:	e7f3      	b.n	800d018 <_dtoa_r+0x228>
 800d030:	2300      	movs	r3, #0
 800d032:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d036:	18fb      	adds	r3, r7, r3
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	3301      	adds	r3, #1
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	9307      	str	r3, [sp, #28]
 800d040:	bfb8      	it	lt
 800d042:	2301      	movlt	r3, #1
 800d044:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d048:	2100      	movs	r1, #0
 800d04a:	2204      	movs	r2, #4
 800d04c:	f102 0514 	add.w	r5, r2, #20
 800d050:	429d      	cmp	r5, r3
 800d052:	d91f      	bls.n	800d094 <_dtoa_r+0x2a4>
 800d054:	6041      	str	r1, [r0, #4]
 800d056:	4658      	mov	r0, fp
 800d058:	f000 fd8e 	bl	800db78 <_Balloc>
 800d05c:	4682      	mov	sl, r0
 800d05e:	2800      	cmp	r0, #0
 800d060:	d13c      	bne.n	800d0dc <_dtoa_r+0x2ec>
 800d062:	4b1b      	ldr	r3, [pc, #108]	@ (800d0d0 <_dtoa_r+0x2e0>)
 800d064:	4602      	mov	r2, r0
 800d066:	f240 11af 	movw	r1, #431	@ 0x1af
 800d06a:	e6d8      	b.n	800ce1e <_dtoa_r+0x2e>
 800d06c:	2301      	movs	r3, #1
 800d06e:	e7e0      	b.n	800d032 <_dtoa_r+0x242>
 800d070:	2401      	movs	r4, #1
 800d072:	2300      	movs	r3, #0
 800d074:	9309      	str	r3, [sp, #36]	@ 0x24
 800d076:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	9307      	str	r3, [sp, #28]
 800d080:	2200      	movs	r2, #0
 800d082:	2312      	movs	r3, #18
 800d084:	e7d0      	b.n	800d028 <_dtoa_r+0x238>
 800d086:	2301      	movs	r3, #1
 800d088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d08a:	e7f5      	b.n	800d078 <_dtoa_r+0x288>
 800d08c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	9307      	str	r3, [sp, #28]
 800d092:	e7d7      	b.n	800d044 <_dtoa_r+0x254>
 800d094:	3101      	adds	r1, #1
 800d096:	0052      	lsls	r2, r2, #1
 800d098:	e7d8      	b.n	800d04c <_dtoa_r+0x25c>
 800d09a:	bf00      	nop
 800d09c:	f3af 8000 	nop.w
 800d0a0:	636f4361 	.word	0x636f4361
 800d0a4:	3fd287a7 	.word	0x3fd287a7
 800d0a8:	8b60c8b3 	.word	0x8b60c8b3
 800d0ac:	3fc68a28 	.word	0x3fc68a28
 800d0b0:	509f79fb 	.word	0x509f79fb
 800d0b4:	3fd34413 	.word	0x3fd34413
 800d0b8:	080104f2 	.word	0x080104f2
 800d0bc:	08010509 	.word	0x08010509
 800d0c0:	7ff00000 	.word	0x7ff00000
 800d0c4:	080104bd 	.word	0x080104bd
 800d0c8:	3ff80000 	.word	0x3ff80000
 800d0cc:	08010600 	.word	0x08010600
 800d0d0:	08010561 	.word	0x08010561
 800d0d4:	080104ee 	.word	0x080104ee
 800d0d8:	080104bc 	.word	0x080104bc
 800d0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0e0:	6018      	str	r0, [r3, #0]
 800d0e2:	9b07      	ldr	r3, [sp, #28]
 800d0e4:	2b0e      	cmp	r3, #14
 800d0e6:	f200 80a4 	bhi.w	800d232 <_dtoa_r+0x442>
 800d0ea:	2c00      	cmp	r4, #0
 800d0ec:	f000 80a1 	beq.w	800d232 <_dtoa_r+0x442>
 800d0f0:	2f00      	cmp	r7, #0
 800d0f2:	dd33      	ble.n	800d15c <_dtoa_r+0x36c>
 800d0f4:	4bad      	ldr	r3, [pc, #692]	@ (800d3ac <_dtoa_r+0x5bc>)
 800d0f6:	f007 020f 	and.w	r2, r7, #15
 800d0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0fe:	ed93 7b00 	vldr	d7, [r3]
 800d102:	05f8      	lsls	r0, r7, #23
 800d104:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d108:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d10c:	d516      	bpl.n	800d13c <_dtoa_r+0x34c>
 800d10e:	4ba8      	ldr	r3, [pc, #672]	@ (800d3b0 <_dtoa_r+0x5c0>)
 800d110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d118:	f7f3 fb98 	bl	800084c <__aeabi_ddiv>
 800d11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d120:	f004 040f 	and.w	r4, r4, #15
 800d124:	2603      	movs	r6, #3
 800d126:	4da2      	ldr	r5, [pc, #648]	@ (800d3b0 <_dtoa_r+0x5c0>)
 800d128:	b954      	cbnz	r4, 800d140 <_dtoa_r+0x350>
 800d12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d132:	f7f3 fb8b 	bl	800084c <__aeabi_ddiv>
 800d136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d13a:	e028      	b.n	800d18e <_dtoa_r+0x39e>
 800d13c:	2602      	movs	r6, #2
 800d13e:	e7f2      	b.n	800d126 <_dtoa_r+0x336>
 800d140:	07e1      	lsls	r1, r4, #31
 800d142:	d508      	bpl.n	800d156 <_dtoa_r+0x366>
 800d144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d14c:	f7f3 fa54 	bl	80005f8 <__aeabi_dmul>
 800d150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d154:	3601      	adds	r6, #1
 800d156:	1064      	asrs	r4, r4, #1
 800d158:	3508      	adds	r5, #8
 800d15a:	e7e5      	b.n	800d128 <_dtoa_r+0x338>
 800d15c:	f000 80d2 	beq.w	800d304 <_dtoa_r+0x514>
 800d160:	427c      	negs	r4, r7
 800d162:	4b92      	ldr	r3, [pc, #584]	@ (800d3ac <_dtoa_r+0x5bc>)
 800d164:	4d92      	ldr	r5, [pc, #584]	@ (800d3b0 <_dtoa_r+0x5c0>)
 800d166:	f004 020f 	and.w	r2, r4, #15
 800d16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d176:	f7f3 fa3f 	bl	80005f8 <__aeabi_dmul>
 800d17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d17e:	1124      	asrs	r4, r4, #4
 800d180:	2300      	movs	r3, #0
 800d182:	2602      	movs	r6, #2
 800d184:	2c00      	cmp	r4, #0
 800d186:	f040 80b2 	bne.w	800d2ee <_dtoa_r+0x4fe>
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1d3      	bne.n	800d136 <_dtoa_r+0x346>
 800d18e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d190:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80b7 	beq.w	800d308 <_dtoa_r+0x518>
 800d19a:	4b86      	ldr	r3, [pc, #536]	@ (800d3b4 <_dtoa_r+0x5c4>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	4620      	mov	r0, r4
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	f7f3 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f000 80ae 	beq.w	800d308 <_dtoa_r+0x518>
 800d1ac:	9b07      	ldr	r3, [sp, #28]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 80aa 	beq.w	800d308 <_dtoa_r+0x518>
 800d1b4:	9b00      	ldr	r3, [sp, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	dd37      	ble.n	800d22a <_dtoa_r+0x43a>
 800d1ba:	1e7b      	subs	r3, r7, #1
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4b7d      	ldr	r3, [pc, #500]	@ (800d3b8 <_dtoa_r+0x5c8>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	f7f3 fa17 	bl	80005f8 <__aeabi_dmul>
 800d1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1ce:	9c00      	ldr	r4, [sp, #0]
 800d1d0:	3601      	adds	r6, #1
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7f3 f9a6 	bl	8000524 <__aeabi_i2d>
 800d1d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1dc:	f7f3 fa0c 	bl	80005f8 <__aeabi_dmul>
 800d1e0:	4b76      	ldr	r3, [pc, #472]	@ (800d3bc <_dtoa_r+0x5cc>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f7f3 f852 	bl	800028c <__adddf3>
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d1ee:	2c00      	cmp	r4, #0
 800d1f0:	f040 808d 	bne.w	800d30e <_dtoa_r+0x51e>
 800d1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f8:	4b71      	ldr	r3, [pc, #452]	@ (800d3c0 <_dtoa_r+0x5d0>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f7f3 f844 	bl	8000288 <__aeabi_dsub>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d208:	462a      	mov	r2, r5
 800d20a:	4633      	mov	r3, r6
 800d20c:	f7f3 fc84 	bl	8000b18 <__aeabi_dcmpgt>
 800d210:	2800      	cmp	r0, #0
 800d212:	f040 828b 	bne.w	800d72c <_dtoa_r+0x93c>
 800d216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d21a:	462a      	mov	r2, r5
 800d21c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d220:	f7f3 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800d224:	2800      	cmp	r0, #0
 800d226:	f040 8128 	bne.w	800d47a <_dtoa_r+0x68a>
 800d22a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d22e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d234:	2b00      	cmp	r3, #0
 800d236:	f2c0 815a 	blt.w	800d4ee <_dtoa_r+0x6fe>
 800d23a:	2f0e      	cmp	r7, #14
 800d23c:	f300 8157 	bgt.w	800d4ee <_dtoa_r+0x6fe>
 800d240:	4b5a      	ldr	r3, [pc, #360]	@ (800d3ac <_dtoa_r+0x5bc>)
 800d242:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d246:	ed93 7b00 	vldr	d7, [r3]
 800d24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	ed8d 7b00 	vstr	d7, [sp]
 800d252:	da03      	bge.n	800d25c <_dtoa_r+0x46c>
 800d254:	9b07      	ldr	r3, [sp, #28]
 800d256:	2b00      	cmp	r3, #0
 800d258:	f340 8101 	ble.w	800d45e <_dtoa_r+0x66e>
 800d25c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d260:	4656      	mov	r6, sl
 800d262:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 faef 	bl	800084c <__aeabi_ddiv>
 800d26e:	f7f3 fc73 	bl	8000b58 <__aeabi_d2iz>
 800d272:	4680      	mov	r8, r0
 800d274:	f7f3 f956 	bl	8000524 <__aeabi_i2d>
 800d278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d27c:	f7f3 f9bc 	bl	80005f8 <__aeabi_dmul>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d28c:	f7f2 fffc 	bl	8000288 <__aeabi_dsub>
 800d290:	f806 4b01 	strb.w	r4, [r6], #1
 800d294:	9d07      	ldr	r5, [sp, #28]
 800d296:	eba6 040a 	sub.w	r4, r6, sl
 800d29a:	42a5      	cmp	r5, r4
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	f040 8117 	bne.w	800d4d2 <_dtoa_r+0x6e2>
 800d2a4:	f7f2 fff2 	bl	800028c <__adddf3>
 800d2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	f7f3 fc32 	bl	8000b18 <__aeabi_dcmpgt>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	f040 80f9 	bne.w	800d4ac <_dtoa_r+0x6bc>
 800d2ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	f7f3 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2c6:	b118      	cbz	r0, 800d2d0 <_dtoa_r+0x4e0>
 800d2c8:	f018 0f01 	tst.w	r8, #1
 800d2cc:	f040 80ee 	bne.w	800d4ac <_dtoa_r+0x6bc>
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	4658      	mov	r0, fp
 800d2d4:	f000 fc90 	bl	800dbf8 <_Bfree>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	7033      	strb	r3, [r6, #0]
 800d2dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2de:	3701      	adds	r7, #1
 800d2e0:	601f      	str	r7, [r3, #0]
 800d2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 831d 	beq.w	800d924 <_dtoa_r+0xb34>
 800d2ea:	601e      	str	r6, [r3, #0]
 800d2ec:	e31a      	b.n	800d924 <_dtoa_r+0xb34>
 800d2ee:	07e2      	lsls	r2, r4, #31
 800d2f0:	d505      	bpl.n	800d2fe <_dtoa_r+0x50e>
 800d2f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2f6:	f7f3 f97f 	bl	80005f8 <__aeabi_dmul>
 800d2fa:	3601      	adds	r6, #1
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	1064      	asrs	r4, r4, #1
 800d300:	3508      	adds	r5, #8
 800d302:	e73f      	b.n	800d184 <_dtoa_r+0x394>
 800d304:	2602      	movs	r6, #2
 800d306:	e742      	b.n	800d18e <_dtoa_r+0x39e>
 800d308:	9c07      	ldr	r4, [sp, #28]
 800d30a:	9704      	str	r7, [sp, #16]
 800d30c:	e761      	b.n	800d1d2 <_dtoa_r+0x3e2>
 800d30e:	4b27      	ldr	r3, [pc, #156]	@ (800d3ac <_dtoa_r+0x5bc>)
 800d310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d316:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d31a:	4454      	add	r4, sl
 800d31c:	2900      	cmp	r1, #0
 800d31e:	d053      	beq.n	800d3c8 <_dtoa_r+0x5d8>
 800d320:	4928      	ldr	r1, [pc, #160]	@ (800d3c4 <_dtoa_r+0x5d4>)
 800d322:	2000      	movs	r0, #0
 800d324:	f7f3 fa92 	bl	800084c <__aeabi_ddiv>
 800d328:	4633      	mov	r3, r6
 800d32a:	462a      	mov	r2, r5
 800d32c:	f7f2 ffac 	bl	8000288 <__aeabi_dsub>
 800d330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d334:	4656      	mov	r6, sl
 800d336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d33a:	f7f3 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800d33e:	4605      	mov	r5, r0
 800d340:	f7f3 f8f0 	bl	8000524 <__aeabi_i2d>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d34c:	f7f2 ff9c 	bl	8000288 <__aeabi_dsub>
 800d350:	3530      	adds	r5, #48	@ 0x30
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d35a:	f806 5b01 	strb.w	r5, [r6], #1
 800d35e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d362:	f7f3 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800d366:	2800      	cmp	r0, #0
 800d368:	d171      	bne.n	800d44e <_dtoa_r+0x65e>
 800d36a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d36e:	4911      	ldr	r1, [pc, #68]	@ (800d3b4 <_dtoa_r+0x5c4>)
 800d370:	2000      	movs	r0, #0
 800d372:	f7f2 ff89 	bl	8000288 <__aeabi_dsub>
 800d376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d37a:	f7f3 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800d37e:	2800      	cmp	r0, #0
 800d380:	f040 8095 	bne.w	800d4ae <_dtoa_r+0x6be>
 800d384:	42a6      	cmp	r6, r4
 800d386:	f43f af50 	beq.w	800d22a <_dtoa_r+0x43a>
 800d38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d38e:	4b0a      	ldr	r3, [pc, #40]	@ (800d3b8 <_dtoa_r+0x5c8>)
 800d390:	2200      	movs	r2, #0
 800d392:	f7f3 f931 	bl	80005f8 <__aeabi_dmul>
 800d396:	4b08      	ldr	r3, [pc, #32]	@ (800d3b8 <_dtoa_r+0x5c8>)
 800d398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d39c:	2200      	movs	r2, #0
 800d39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3a2:	f7f3 f929 	bl	80005f8 <__aeabi_dmul>
 800d3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3aa:	e7c4      	b.n	800d336 <_dtoa_r+0x546>
 800d3ac:	08010600 	.word	0x08010600
 800d3b0:	080105d8 	.word	0x080105d8
 800d3b4:	3ff00000 	.word	0x3ff00000
 800d3b8:	40240000 	.word	0x40240000
 800d3bc:	401c0000 	.word	0x401c0000
 800d3c0:	40140000 	.word	0x40140000
 800d3c4:	3fe00000 	.word	0x3fe00000
 800d3c8:	4631      	mov	r1, r6
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f7f3 f914 	bl	80005f8 <__aeabi_dmul>
 800d3d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d3d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d3d6:	4656      	mov	r6, sl
 800d3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3dc:	f7f3 fbbc 	bl	8000b58 <__aeabi_d2iz>
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	f7f3 f89f 	bl	8000524 <__aeabi_i2d>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ee:	f7f2 ff4b 	bl	8000288 <__aeabi_dsub>
 800d3f2:	3530      	adds	r5, #48	@ 0x30
 800d3f4:	f806 5b01 	strb.w	r5, [r6], #1
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	42a6      	cmp	r6, r4
 800d3fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d402:	f04f 0200 	mov.w	r2, #0
 800d406:	d124      	bne.n	800d452 <_dtoa_r+0x662>
 800d408:	4bac      	ldr	r3, [pc, #688]	@ (800d6bc <_dtoa_r+0x8cc>)
 800d40a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d40e:	f7f2 ff3d 	bl	800028c <__adddf3>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d41a:	f7f3 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d145      	bne.n	800d4ae <_dtoa_r+0x6be>
 800d422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d426:	49a5      	ldr	r1, [pc, #660]	@ (800d6bc <_dtoa_r+0x8cc>)
 800d428:	2000      	movs	r0, #0
 800d42a:	f7f2 ff2d 	bl	8000288 <__aeabi_dsub>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d436:	f7f3 fb51 	bl	8000adc <__aeabi_dcmplt>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	f43f aef5 	beq.w	800d22a <_dtoa_r+0x43a>
 800d440:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d442:	1e73      	subs	r3, r6, #1
 800d444:	9315      	str	r3, [sp, #84]	@ 0x54
 800d446:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d44a:	2b30      	cmp	r3, #48	@ 0x30
 800d44c:	d0f8      	beq.n	800d440 <_dtoa_r+0x650>
 800d44e:	9f04      	ldr	r7, [sp, #16]
 800d450:	e73e      	b.n	800d2d0 <_dtoa_r+0x4e0>
 800d452:	4b9b      	ldr	r3, [pc, #620]	@ (800d6c0 <_dtoa_r+0x8d0>)
 800d454:	f7f3 f8d0 	bl	80005f8 <__aeabi_dmul>
 800d458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d45c:	e7bc      	b.n	800d3d8 <_dtoa_r+0x5e8>
 800d45e:	d10c      	bne.n	800d47a <_dtoa_r+0x68a>
 800d460:	4b98      	ldr	r3, [pc, #608]	@ (800d6c4 <_dtoa_r+0x8d4>)
 800d462:	2200      	movs	r2, #0
 800d464:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d468:	f7f3 f8c6 	bl	80005f8 <__aeabi_dmul>
 800d46c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d470:	f7f3 fb48 	bl	8000b04 <__aeabi_dcmpge>
 800d474:	2800      	cmp	r0, #0
 800d476:	f000 8157 	beq.w	800d728 <_dtoa_r+0x938>
 800d47a:	2400      	movs	r4, #0
 800d47c:	4625      	mov	r5, r4
 800d47e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d480:	43db      	mvns	r3, r3
 800d482:	9304      	str	r3, [sp, #16]
 800d484:	4656      	mov	r6, sl
 800d486:	2700      	movs	r7, #0
 800d488:	4621      	mov	r1, r4
 800d48a:	4658      	mov	r0, fp
 800d48c:	f000 fbb4 	bl	800dbf8 <_Bfree>
 800d490:	2d00      	cmp	r5, #0
 800d492:	d0dc      	beq.n	800d44e <_dtoa_r+0x65e>
 800d494:	b12f      	cbz	r7, 800d4a2 <_dtoa_r+0x6b2>
 800d496:	42af      	cmp	r7, r5
 800d498:	d003      	beq.n	800d4a2 <_dtoa_r+0x6b2>
 800d49a:	4639      	mov	r1, r7
 800d49c:	4658      	mov	r0, fp
 800d49e:	f000 fbab 	bl	800dbf8 <_Bfree>
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	4658      	mov	r0, fp
 800d4a6:	f000 fba7 	bl	800dbf8 <_Bfree>
 800d4aa:	e7d0      	b.n	800d44e <_dtoa_r+0x65e>
 800d4ac:	9704      	str	r7, [sp, #16]
 800d4ae:	4633      	mov	r3, r6
 800d4b0:	461e      	mov	r6, r3
 800d4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4b6:	2a39      	cmp	r2, #57	@ 0x39
 800d4b8:	d107      	bne.n	800d4ca <_dtoa_r+0x6da>
 800d4ba:	459a      	cmp	sl, r3
 800d4bc:	d1f8      	bne.n	800d4b0 <_dtoa_r+0x6c0>
 800d4be:	9a04      	ldr	r2, [sp, #16]
 800d4c0:	3201      	adds	r2, #1
 800d4c2:	9204      	str	r2, [sp, #16]
 800d4c4:	2230      	movs	r2, #48	@ 0x30
 800d4c6:	f88a 2000 	strb.w	r2, [sl]
 800d4ca:	781a      	ldrb	r2, [r3, #0]
 800d4cc:	3201      	adds	r2, #1
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e7bd      	b.n	800d44e <_dtoa_r+0x65e>
 800d4d2:	4b7b      	ldr	r3, [pc, #492]	@ (800d6c0 <_dtoa_r+0x8d0>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f7f3 f88f 	bl	80005f8 <__aeabi_dmul>
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4604      	mov	r4, r0
 800d4e0:	460d      	mov	r5, r1
 800d4e2:	f7f3 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f43f aebb 	beq.w	800d262 <_dtoa_r+0x472>
 800d4ec:	e6f0      	b.n	800d2d0 <_dtoa_r+0x4e0>
 800d4ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4f0:	2a00      	cmp	r2, #0
 800d4f2:	f000 80db 	beq.w	800d6ac <_dtoa_r+0x8bc>
 800d4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4f8:	2a01      	cmp	r2, #1
 800d4fa:	f300 80bf 	bgt.w	800d67c <_dtoa_r+0x88c>
 800d4fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d500:	2a00      	cmp	r2, #0
 800d502:	f000 80b7 	beq.w	800d674 <_dtoa_r+0x884>
 800d506:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d50a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d50c:	4646      	mov	r6, r8
 800d50e:	9a08      	ldr	r2, [sp, #32]
 800d510:	2101      	movs	r1, #1
 800d512:	441a      	add	r2, r3
 800d514:	4658      	mov	r0, fp
 800d516:	4498      	add	r8, r3
 800d518:	9208      	str	r2, [sp, #32]
 800d51a:	f000 fc6b 	bl	800ddf4 <__i2b>
 800d51e:	4605      	mov	r5, r0
 800d520:	b15e      	cbz	r6, 800d53a <_dtoa_r+0x74a>
 800d522:	9b08      	ldr	r3, [sp, #32]
 800d524:	2b00      	cmp	r3, #0
 800d526:	dd08      	ble.n	800d53a <_dtoa_r+0x74a>
 800d528:	42b3      	cmp	r3, r6
 800d52a:	9a08      	ldr	r2, [sp, #32]
 800d52c:	bfa8      	it	ge
 800d52e:	4633      	movge	r3, r6
 800d530:	eba8 0803 	sub.w	r8, r8, r3
 800d534:	1af6      	subs	r6, r6, r3
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	9308      	str	r3, [sp, #32]
 800d53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d53c:	b1f3      	cbz	r3, 800d57c <_dtoa_r+0x78c>
 800d53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 80b7 	beq.w	800d6b4 <_dtoa_r+0x8c4>
 800d546:	b18c      	cbz	r4, 800d56c <_dtoa_r+0x77c>
 800d548:	4629      	mov	r1, r5
 800d54a:	4622      	mov	r2, r4
 800d54c:	4658      	mov	r0, fp
 800d54e:	f000 fd11 	bl	800df74 <__pow5mult>
 800d552:	464a      	mov	r2, r9
 800d554:	4601      	mov	r1, r0
 800d556:	4605      	mov	r5, r0
 800d558:	4658      	mov	r0, fp
 800d55a:	f000 fc61 	bl	800de20 <__multiply>
 800d55e:	4649      	mov	r1, r9
 800d560:	9004      	str	r0, [sp, #16]
 800d562:	4658      	mov	r0, fp
 800d564:	f000 fb48 	bl	800dbf8 <_Bfree>
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	4699      	mov	r9, r3
 800d56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d56e:	1b1a      	subs	r2, r3, r4
 800d570:	d004      	beq.n	800d57c <_dtoa_r+0x78c>
 800d572:	4649      	mov	r1, r9
 800d574:	4658      	mov	r0, fp
 800d576:	f000 fcfd 	bl	800df74 <__pow5mult>
 800d57a:	4681      	mov	r9, r0
 800d57c:	2101      	movs	r1, #1
 800d57e:	4658      	mov	r0, fp
 800d580:	f000 fc38 	bl	800ddf4 <__i2b>
 800d584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d586:	4604      	mov	r4, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 81cf 	beq.w	800d92c <_dtoa_r+0xb3c>
 800d58e:	461a      	mov	r2, r3
 800d590:	4601      	mov	r1, r0
 800d592:	4658      	mov	r0, fp
 800d594:	f000 fcee 	bl	800df74 <__pow5mult>
 800d598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	4604      	mov	r4, r0
 800d59e:	f300 8095 	bgt.w	800d6cc <_dtoa_r+0x8dc>
 800d5a2:	9b02      	ldr	r3, [sp, #8]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f040 8087 	bne.w	800d6b8 <_dtoa_r+0x8c8>
 800d5aa:	9b03      	ldr	r3, [sp, #12]
 800d5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f040 8089 	bne.w	800d6c8 <_dtoa_r+0x8d8>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d5bc:	0d1b      	lsrs	r3, r3, #20
 800d5be:	051b      	lsls	r3, r3, #20
 800d5c0:	b12b      	cbz	r3, 800d5ce <_dtoa_r+0x7de>
 800d5c2:	9b08      	ldr	r3, [sp, #32]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	9308      	str	r3, [sp, #32]
 800d5c8:	f108 0801 	add.w	r8, r8, #1
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f000 81b0 	beq.w	800d938 <_dtoa_r+0xb48>
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d5de:	6918      	ldr	r0, [r3, #16]
 800d5e0:	f000 fbbc 	bl	800dd5c <__hi0bits>
 800d5e4:	f1c0 0020 	rsb	r0, r0, #32
 800d5e8:	9b08      	ldr	r3, [sp, #32]
 800d5ea:	4418      	add	r0, r3
 800d5ec:	f010 001f 	ands.w	r0, r0, #31
 800d5f0:	d077      	beq.n	800d6e2 <_dtoa_r+0x8f2>
 800d5f2:	f1c0 0320 	rsb	r3, r0, #32
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	dd6b      	ble.n	800d6d2 <_dtoa_r+0x8e2>
 800d5fa:	9b08      	ldr	r3, [sp, #32]
 800d5fc:	f1c0 001c 	rsb	r0, r0, #28
 800d600:	4403      	add	r3, r0
 800d602:	4480      	add	r8, r0
 800d604:	4406      	add	r6, r0
 800d606:	9308      	str	r3, [sp, #32]
 800d608:	f1b8 0f00 	cmp.w	r8, #0
 800d60c:	dd05      	ble.n	800d61a <_dtoa_r+0x82a>
 800d60e:	4649      	mov	r1, r9
 800d610:	4642      	mov	r2, r8
 800d612:	4658      	mov	r0, fp
 800d614:	f000 fd08 	bl	800e028 <__lshift>
 800d618:	4681      	mov	r9, r0
 800d61a:	9b08      	ldr	r3, [sp, #32]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	dd05      	ble.n	800d62c <_dtoa_r+0x83c>
 800d620:	4621      	mov	r1, r4
 800d622:	461a      	mov	r2, r3
 800d624:	4658      	mov	r0, fp
 800d626:	f000 fcff 	bl	800e028 <__lshift>
 800d62a:	4604      	mov	r4, r0
 800d62c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d059      	beq.n	800d6e6 <_dtoa_r+0x8f6>
 800d632:	4621      	mov	r1, r4
 800d634:	4648      	mov	r0, r9
 800d636:	f000 fd63 	bl	800e100 <__mcmp>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	da53      	bge.n	800d6e6 <_dtoa_r+0x8f6>
 800d63e:	1e7b      	subs	r3, r7, #1
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	4649      	mov	r1, r9
 800d644:	2300      	movs	r3, #0
 800d646:	220a      	movs	r2, #10
 800d648:	4658      	mov	r0, fp
 800d64a:	f000 faf7 	bl	800dc3c <__multadd>
 800d64e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d650:	4681      	mov	r9, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	f000 8172 	beq.w	800d93c <_dtoa_r+0xb4c>
 800d658:	2300      	movs	r3, #0
 800d65a:	4629      	mov	r1, r5
 800d65c:	220a      	movs	r2, #10
 800d65e:	4658      	mov	r0, fp
 800d660:	f000 faec 	bl	800dc3c <__multadd>
 800d664:	9b00      	ldr	r3, [sp, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	4605      	mov	r5, r0
 800d66a:	dc67      	bgt.n	800d73c <_dtoa_r+0x94c>
 800d66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66e:	2b02      	cmp	r3, #2
 800d670:	dc41      	bgt.n	800d6f6 <_dtoa_r+0x906>
 800d672:	e063      	b.n	800d73c <_dtoa_r+0x94c>
 800d674:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d676:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d67a:	e746      	b.n	800d50a <_dtoa_r+0x71a>
 800d67c:	9b07      	ldr	r3, [sp, #28]
 800d67e:	1e5c      	subs	r4, r3, #1
 800d680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d682:	42a3      	cmp	r3, r4
 800d684:	bfbf      	itttt	lt
 800d686:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d688:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d68a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d68c:	1ae3      	sublt	r3, r4, r3
 800d68e:	bfb4      	ite	lt
 800d690:	18d2      	addlt	r2, r2, r3
 800d692:	1b1c      	subge	r4, r3, r4
 800d694:	9b07      	ldr	r3, [sp, #28]
 800d696:	bfbc      	itt	lt
 800d698:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d69a:	2400      	movlt	r4, #0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bfb5      	itete	lt
 800d6a0:	eba8 0603 	sublt.w	r6, r8, r3
 800d6a4:	9b07      	ldrge	r3, [sp, #28]
 800d6a6:	2300      	movlt	r3, #0
 800d6a8:	4646      	movge	r6, r8
 800d6aa:	e730      	b.n	800d50e <_dtoa_r+0x71e>
 800d6ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d6ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d6b0:	4646      	mov	r6, r8
 800d6b2:	e735      	b.n	800d520 <_dtoa_r+0x730>
 800d6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6b6:	e75c      	b.n	800d572 <_dtoa_r+0x782>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e788      	b.n	800d5ce <_dtoa_r+0x7de>
 800d6bc:	3fe00000 	.word	0x3fe00000
 800d6c0:	40240000 	.word	0x40240000
 800d6c4:	40140000 	.word	0x40140000
 800d6c8:	9b02      	ldr	r3, [sp, #8]
 800d6ca:	e780      	b.n	800d5ce <_dtoa_r+0x7de>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6d0:	e782      	b.n	800d5d8 <_dtoa_r+0x7e8>
 800d6d2:	d099      	beq.n	800d608 <_dtoa_r+0x818>
 800d6d4:	9a08      	ldr	r2, [sp, #32]
 800d6d6:	331c      	adds	r3, #28
 800d6d8:	441a      	add	r2, r3
 800d6da:	4498      	add	r8, r3
 800d6dc:	441e      	add	r6, r3
 800d6de:	9208      	str	r2, [sp, #32]
 800d6e0:	e792      	b.n	800d608 <_dtoa_r+0x818>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	e7f6      	b.n	800d6d4 <_dtoa_r+0x8e4>
 800d6e6:	9b07      	ldr	r3, [sp, #28]
 800d6e8:	9704      	str	r7, [sp, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dc20      	bgt.n	800d730 <_dtoa_r+0x940>
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	dd1e      	ble.n	800d734 <_dtoa_r+0x944>
 800d6f6:	9b00      	ldr	r3, [sp, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f47f aec0 	bne.w	800d47e <_dtoa_r+0x68e>
 800d6fe:	4621      	mov	r1, r4
 800d700:	2205      	movs	r2, #5
 800d702:	4658      	mov	r0, fp
 800d704:	f000 fa9a 	bl	800dc3c <__multadd>
 800d708:	4601      	mov	r1, r0
 800d70a:	4604      	mov	r4, r0
 800d70c:	4648      	mov	r0, r9
 800d70e:	f000 fcf7 	bl	800e100 <__mcmp>
 800d712:	2800      	cmp	r0, #0
 800d714:	f77f aeb3 	ble.w	800d47e <_dtoa_r+0x68e>
 800d718:	4656      	mov	r6, sl
 800d71a:	2331      	movs	r3, #49	@ 0x31
 800d71c:	f806 3b01 	strb.w	r3, [r6], #1
 800d720:	9b04      	ldr	r3, [sp, #16]
 800d722:	3301      	adds	r3, #1
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	e6ae      	b.n	800d486 <_dtoa_r+0x696>
 800d728:	9c07      	ldr	r4, [sp, #28]
 800d72a:	9704      	str	r7, [sp, #16]
 800d72c:	4625      	mov	r5, r4
 800d72e:	e7f3      	b.n	800d718 <_dtoa_r+0x928>
 800d730:	9b07      	ldr	r3, [sp, #28]
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 8104 	beq.w	800d944 <_dtoa_r+0xb54>
 800d73c:	2e00      	cmp	r6, #0
 800d73e:	dd05      	ble.n	800d74c <_dtoa_r+0x95c>
 800d740:	4629      	mov	r1, r5
 800d742:	4632      	mov	r2, r6
 800d744:	4658      	mov	r0, fp
 800d746:	f000 fc6f 	bl	800e028 <__lshift>
 800d74a:	4605      	mov	r5, r0
 800d74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d05a      	beq.n	800d808 <_dtoa_r+0xa18>
 800d752:	6869      	ldr	r1, [r5, #4]
 800d754:	4658      	mov	r0, fp
 800d756:	f000 fa0f 	bl	800db78 <_Balloc>
 800d75a:	4606      	mov	r6, r0
 800d75c:	b928      	cbnz	r0, 800d76a <_dtoa_r+0x97a>
 800d75e:	4b84      	ldr	r3, [pc, #528]	@ (800d970 <_dtoa_r+0xb80>)
 800d760:	4602      	mov	r2, r0
 800d762:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d766:	f7ff bb5a 	b.w	800ce1e <_dtoa_r+0x2e>
 800d76a:	692a      	ldr	r2, [r5, #16]
 800d76c:	3202      	adds	r2, #2
 800d76e:	0092      	lsls	r2, r2, #2
 800d770:	f105 010c 	add.w	r1, r5, #12
 800d774:	300c      	adds	r0, #12
 800d776:	f7ff fa9e 	bl	800ccb6 <memcpy>
 800d77a:	2201      	movs	r2, #1
 800d77c:	4631      	mov	r1, r6
 800d77e:	4658      	mov	r0, fp
 800d780:	f000 fc52 	bl	800e028 <__lshift>
 800d784:	f10a 0301 	add.w	r3, sl, #1
 800d788:	9307      	str	r3, [sp, #28]
 800d78a:	9b00      	ldr	r3, [sp, #0]
 800d78c:	4453      	add	r3, sl
 800d78e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d790:	9b02      	ldr	r3, [sp, #8]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	462f      	mov	r7, r5
 800d798:	930a      	str	r3, [sp, #40]	@ 0x28
 800d79a:	4605      	mov	r5, r0
 800d79c:	9b07      	ldr	r3, [sp, #28]
 800d79e:	4621      	mov	r1, r4
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	4648      	mov	r0, r9
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	f7ff fa9b 	bl	800cce0 <quorem>
 800d7aa:	4639      	mov	r1, r7
 800d7ac:	9002      	str	r0, [sp, #8]
 800d7ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	f000 fca4 	bl	800e100 <__mcmp>
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	9008      	str	r0, [sp, #32]
 800d7bc:	4621      	mov	r1, r4
 800d7be:	4658      	mov	r0, fp
 800d7c0:	f000 fcba 	bl	800e138 <__mdiff>
 800d7c4:	68c2      	ldr	r2, [r0, #12]
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	bb02      	cbnz	r2, 800d80c <_dtoa_r+0xa1c>
 800d7ca:	4601      	mov	r1, r0
 800d7cc:	4648      	mov	r0, r9
 800d7ce:	f000 fc97 	bl	800e100 <__mcmp>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	4631      	mov	r1, r6
 800d7d6:	4658      	mov	r0, fp
 800d7d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7da:	f000 fa0d 	bl	800dbf8 <_Bfree>
 800d7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7e2:	9e07      	ldr	r6, [sp, #28]
 800d7e4:	ea43 0102 	orr.w	r1, r3, r2
 800d7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ea:	4319      	orrs	r1, r3
 800d7ec:	d110      	bne.n	800d810 <_dtoa_r+0xa20>
 800d7ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d7f2:	d029      	beq.n	800d848 <_dtoa_r+0xa58>
 800d7f4:	9b08      	ldr	r3, [sp, #32]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd02      	ble.n	800d800 <_dtoa_r+0xa10>
 800d7fa:	9b02      	ldr	r3, [sp, #8]
 800d7fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	f883 8000 	strb.w	r8, [r3]
 800d806:	e63f      	b.n	800d488 <_dtoa_r+0x698>
 800d808:	4628      	mov	r0, r5
 800d80a:	e7bb      	b.n	800d784 <_dtoa_r+0x994>
 800d80c:	2201      	movs	r2, #1
 800d80e:	e7e1      	b.n	800d7d4 <_dtoa_r+0x9e4>
 800d810:	9b08      	ldr	r3, [sp, #32]
 800d812:	2b00      	cmp	r3, #0
 800d814:	db04      	blt.n	800d820 <_dtoa_r+0xa30>
 800d816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d818:	430b      	orrs	r3, r1
 800d81a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d81c:	430b      	orrs	r3, r1
 800d81e:	d120      	bne.n	800d862 <_dtoa_r+0xa72>
 800d820:	2a00      	cmp	r2, #0
 800d822:	dded      	ble.n	800d800 <_dtoa_r+0xa10>
 800d824:	4649      	mov	r1, r9
 800d826:	2201      	movs	r2, #1
 800d828:	4658      	mov	r0, fp
 800d82a:	f000 fbfd 	bl	800e028 <__lshift>
 800d82e:	4621      	mov	r1, r4
 800d830:	4681      	mov	r9, r0
 800d832:	f000 fc65 	bl	800e100 <__mcmp>
 800d836:	2800      	cmp	r0, #0
 800d838:	dc03      	bgt.n	800d842 <_dtoa_r+0xa52>
 800d83a:	d1e1      	bne.n	800d800 <_dtoa_r+0xa10>
 800d83c:	f018 0f01 	tst.w	r8, #1
 800d840:	d0de      	beq.n	800d800 <_dtoa_r+0xa10>
 800d842:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d846:	d1d8      	bne.n	800d7fa <_dtoa_r+0xa0a>
 800d848:	9a00      	ldr	r2, [sp, #0]
 800d84a:	2339      	movs	r3, #57	@ 0x39
 800d84c:	7013      	strb	r3, [r2, #0]
 800d84e:	4633      	mov	r3, r6
 800d850:	461e      	mov	r6, r3
 800d852:	3b01      	subs	r3, #1
 800d854:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d858:	2a39      	cmp	r2, #57	@ 0x39
 800d85a:	d052      	beq.n	800d902 <_dtoa_r+0xb12>
 800d85c:	3201      	adds	r2, #1
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	e612      	b.n	800d488 <_dtoa_r+0x698>
 800d862:	2a00      	cmp	r2, #0
 800d864:	dd07      	ble.n	800d876 <_dtoa_r+0xa86>
 800d866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d86a:	d0ed      	beq.n	800d848 <_dtoa_r+0xa58>
 800d86c:	9a00      	ldr	r2, [sp, #0]
 800d86e:	f108 0301 	add.w	r3, r8, #1
 800d872:	7013      	strb	r3, [r2, #0]
 800d874:	e608      	b.n	800d488 <_dtoa_r+0x698>
 800d876:	9b07      	ldr	r3, [sp, #28]
 800d878:	9a07      	ldr	r2, [sp, #28]
 800d87a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d880:	4293      	cmp	r3, r2
 800d882:	d028      	beq.n	800d8d6 <_dtoa_r+0xae6>
 800d884:	4649      	mov	r1, r9
 800d886:	2300      	movs	r3, #0
 800d888:	220a      	movs	r2, #10
 800d88a:	4658      	mov	r0, fp
 800d88c:	f000 f9d6 	bl	800dc3c <__multadd>
 800d890:	42af      	cmp	r7, r5
 800d892:	4681      	mov	r9, r0
 800d894:	f04f 0300 	mov.w	r3, #0
 800d898:	f04f 020a 	mov.w	r2, #10
 800d89c:	4639      	mov	r1, r7
 800d89e:	4658      	mov	r0, fp
 800d8a0:	d107      	bne.n	800d8b2 <_dtoa_r+0xac2>
 800d8a2:	f000 f9cb 	bl	800dc3c <__multadd>
 800d8a6:	4607      	mov	r7, r0
 800d8a8:	4605      	mov	r5, r0
 800d8aa:	9b07      	ldr	r3, [sp, #28]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	9307      	str	r3, [sp, #28]
 800d8b0:	e774      	b.n	800d79c <_dtoa_r+0x9ac>
 800d8b2:	f000 f9c3 	bl	800dc3c <__multadd>
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	220a      	movs	r2, #10
 800d8be:	4658      	mov	r0, fp
 800d8c0:	f000 f9bc 	bl	800dc3c <__multadd>
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	e7f0      	b.n	800d8aa <_dtoa_r+0xaba>
 800d8c8:	9b00      	ldr	r3, [sp, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	bfcc      	ite	gt
 800d8ce:	461e      	movgt	r6, r3
 800d8d0:	2601      	movle	r6, #1
 800d8d2:	4456      	add	r6, sl
 800d8d4:	2700      	movs	r7, #0
 800d8d6:	4649      	mov	r1, r9
 800d8d8:	2201      	movs	r2, #1
 800d8da:	4658      	mov	r0, fp
 800d8dc:	f000 fba4 	bl	800e028 <__lshift>
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4681      	mov	r9, r0
 800d8e4:	f000 fc0c 	bl	800e100 <__mcmp>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	dcb0      	bgt.n	800d84e <_dtoa_r+0xa5e>
 800d8ec:	d102      	bne.n	800d8f4 <_dtoa_r+0xb04>
 800d8ee:	f018 0f01 	tst.w	r8, #1
 800d8f2:	d1ac      	bne.n	800d84e <_dtoa_r+0xa5e>
 800d8f4:	4633      	mov	r3, r6
 800d8f6:	461e      	mov	r6, r3
 800d8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8fc:	2a30      	cmp	r2, #48	@ 0x30
 800d8fe:	d0fa      	beq.n	800d8f6 <_dtoa_r+0xb06>
 800d900:	e5c2      	b.n	800d488 <_dtoa_r+0x698>
 800d902:	459a      	cmp	sl, r3
 800d904:	d1a4      	bne.n	800d850 <_dtoa_r+0xa60>
 800d906:	9b04      	ldr	r3, [sp, #16]
 800d908:	3301      	adds	r3, #1
 800d90a:	9304      	str	r3, [sp, #16]
 800d90c:	2331      	movs	r3, #49	@ 0x31
 800d90e:	f88a 3000 	strb.w	r3, [sl]
 800d912:	e5b9      	b.n	800d488 <_dtoa_r+0x698>
 800d914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d916:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d974 <_dtoa_r+0xb84>
 800d91a:	b11b      	cbz	r3, 800d924 <_dtoa_r+0xb34>
 800d91c:	f10a 0308 	add.w	r3, sl, #8
 800d920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	4650      	mov	r0, sl
 800d926:	b019      	add	sp, #100	@ 0x64
 800d928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d92e:	2b01      	cmp	r3, #1
 800d930:	f77f ae37 	ble.w	800d5a2 <_dtoa_r+0x7b2>
 800d934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d936:	930a      	str	r3, [sp, #40]	@ 0x28
 800d938:	2001      	movs	r0, #1
 800d93a:	e655      	b.n	800d5e8 <_dtoa_r+0x7f8>
 800d93c:	9b00      	ldr	r3, [sp, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f77f aed6 	ble.w	800d6f0 <_dtoa_r+0x900>
 800d944:	4656      	mov	r6, sl
 800d946:	4621      	mov	r1, r4
 800d948:	4648      	mov	r0, r9
 800d94a:	f7ff f9c9 	bl	800cce0 <quorem>
 800d94e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d952:	f806 8b01 	strb.w	r8, [r6], #1
 800d956:	9b00      	ldr	r3, [sp, #0]
 800d958:	eba6 020a 	sub.w	r2, r6, sl
 800d95c:	4293      	cmp	r3, r2
 800d95e:	ddb3      	ble.n	800d8c8 <_dtoa_r+0xad8>
 800d960:	4649      	mov	r1, r9
 800d962:	2300      	movs	r3, #0
 800d964:	220a      	movs	r2, #10
 800d966:	4658      	mov	r0, fp
 800d968:	f000 f968 	bl	800dc3c <__multadd>
 800d96c:	4681      	mov	r9, r0
 800d96e:	e7ea      	b.n	800d946 <_dtoa_r+0xb56>
 800d970:	08010561 	.word	0x08010561
 800d974:	080104e5 	.word	0x080104e5

0800d978 <_free_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4605      	mov	r5, r0
 800d97c:	2900      	cmp	r1, #0
 800d97e:	d041      	beq.n	800da04 <_free_r+0x8c>
 800d980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d984:	1f0c      	subs	r4, r1, #4
 800d986:	2b00      	cmp	r3, #0
 800d988:	bfb8      	it	lt
 800d98a:	18e4      	addlt	r4, r4, r3
 800d98c:	f000 f8e8 	bl	800db60 <__malloc_lock>
 800d990:	4a1d      	ldr	r2, [pc, #116]	@ (800da08 <_free_r+0x90>)
 800d992:	6813      	ldr	r3, [r2, #0]
 800d994:	b933      	cbnz	r3, 800d9a4 <_free_r+0x2c>
 800d996:	6063      	str	r3, [r4, #4]
 800d998:	6014      	str	r4, [r2, #0]
 800d99a:	4628      	mov	r0, r5
 800d99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9a0:	f000 b8e4 	b.w	800db6c <__malloc_unlock>
 800d9a4:	42a3      	cmp	r3, r4
 800d9a6:	d908      	bls.n	800d9ba <_free_r+0x42>
 800d9a8:	6820      	ldr	r0, [r4, #0]
 800d9aa:	1821      	adds	r1, r4, r0
 800d9ac:	428b      	cmp	r3, r1
 800d9ae:	bf01      	itttt	eq
 800d9b0:	6819      	ldreq	r1, [r3, #0]
 800d9b2:	685b      	ldreq	r3, [r3, #4]
 800d9b4:	1809      	addeq	r1, r1, r0
 800d9b6:	6021      	streq	r1, [r4, #0]
 800d9b8:	e7ed      	b.n	800d996 <_free_r+0x1e>
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	b10b      	cbz	r3, 800d9c4 <_free_r+0x4c>
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	d9fa      	bls.n	800d9ba <_free_r+0x42>
 800d9c4:	6811      	ldr	r1, [r2, #0]
 800d9c6:	1850      	adds	r0, r2, r1
 800d9c8:	42a0      	cmp	r0, r4
 800d9ca:	d10b      	bne.n	800d9e4 <_free_r+0x6c>
 800d9cc:	6820      	ldr	r0, [r4, #0]
 800d9ce:	4401      	add	r1, r0
 800d9d0:	1850      	adds	r0, r2, r1
 800d9d2:	4283      	cmp	r3, r0
 800d9d4:	6011      	str	r1, [r2, #0]
 800d9d6:	d1e0      	bne.n	800d99a <_free_r+0x22>
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	6053      	str	r3, [r2, #4]
 800d9de:	4408      	add	r0, r1
 800d9e0:	6010      	str	r0, [r2, #0]
 800d9e2:	e7da      	b.n	800d99a <_free_r+0x22>
 800d9e4:	d902      	bls.n	800d9ec <_free_r+0x74>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	602b      	str	r3, [r5, #0]
 800d9ea:	e7d6      	b.n	800d99a <_free_r+0x22>
 800d9ec:	6820      	ldr	r0, [r4, #0]
 800d9ee:	1821      	adds	r1, r4, r0
 800d9f0:	428b      	cmp	r3, r1
 800d9f2:	bf04      	itt	eq
 800d9f4:	6819      	ldreq	r1, [r3, #0]
 800d9f6:	685b      	ldreq	r3, [r3, #4]
 800d9f8:	6063      	str	r3, [r4, #4]
 800d9fa:	bf04      	itt	eq
 800d9fc:	1809      	addeq	r1, r1, r0
 800d9fe:	6021      	streq	r1, [r4, #0]
 800da00:	6054      	str	r4, [r2, #4]
 800da02:	e7ca      	b.n	800d99a <_free_r+0x22>
 800da04:	bd38      	pop	{r3, r4, r5, pc}
 800da06:	bf00      	nop
 800da08:	20001bec 	.word	0x20001bec

0800da0c <malloc>:
 800da0c:	4b02      	ldr	r3, [pc, #8]	@ (800da18 <malloc+0xc>)
 800da0e:	4601      	mov	r1, r0
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	f000 b825 	b.w	800da60 <_malloc_r>
 800da16:	bf00      	nop
 800da18:	20000028 	.word	0x20000028

0800da1c <sbrk_aligned>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	4e0f      	ldr	r6, [pc, #60]	@ (800da5c <sbrk_aligned+0x40>)
 800da20:	460c      	mov	r4, r1
 800da22:	6831      	ldr	r1, [r6, #0]
 800da24:	4605      	mov	r5, r0
 800da26:	b911      	cbnz	r1, 800da2e <sbrk_aligned+0x12>
 800da28:	f001 ffd2 	bl	800f9d0 <_sbrk_r>
 800da2c:	6030      	str	r0, [r6, #0]
 800da2e:	4621      	mov	r1, r4
 800da30:	4628      	mov	r0, r5
 800da32:	f001 ffcd 	bl	800f9d0 <_sbrk_r>
 800da36:	1c43      	adds	r3, r0, #1
 800da38:	d103      	bne.n	800da42 <sbrk_aligned+0x26>
 800da3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da3e:	4620      	mov	r0, r4
 800da40:	bd70      	pop	{r4, r5, r6, pc}
 800da42:	1cc4      	adds	r4, r0, #3
 800da44:	f024 0403 	bic.w	r4, r4, #3
 800da48:	42a0      	cmp	r0, r4
 800da4a:	d0f8      	beq.n	800da3e <sbrk_aligned+0x22>
 800da4c:	1a21      	subs	r1, r4, r0
 800da4e:	4628      	mov	r0, r5
 800da50:	f001 ffbe 	bl	800f9d0 <_sbrk_r>
 800da54:	3001      	adds	r0, #1
 800da56:	d1f2      	bne.n	800da3e <sbrk_aligned+0x22>
 800da58:	e7ef      	b.n	800da3a <sbrk_aligned+0x1e>
 800da5a:	bf00      	nop
 800da5c:	20001be8 	.word	0x20001be8

0800da60 <_malloc_r>:
 800da60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da64:	1ccd      	adds	r5, r1, #3
 800da66:	f025 0503 	bic.w	r5, r5, #3
 800da6a:	3508      	adds	r5, #8
 800da6c:	2d0c      	cmp	r5, #12
 800da6e:	bf38      	it	cc
 800da70:	250c      	movcc	r5, #12
 800da72:	2d00      	cmp	r5, #0
 800da74:	4606      	mov	r6, r0
 800da76:	db01      	blt.n	800da7c <_malloc_r+0x1c>
 800da78:	42a9      	cmp	r1, r5
 800da7a:	d904      	bls.n	800da86 <_malloc_r+0x26>
 800da7c:	230c      	movs	r3, #12
 800da7e:	6033      	str	r3, [r6, #0]
 800da80:	2000      	movs	r0, #0
 800da82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800db5c <_malloc_r+0xfc>
 800da8a:	f000 f869 	bl	800db60 <__malloc_lock>
 800da8e:	f8d8 3000 	ldr.w	r3, [r8]
 800da92:	461c      	mov	r4, r3
 800da94:	bb44      	cbnz	r4, 800dae8 <_malloc_r+0x88>
 800da96:	4629      	mov	r1, r5
 800da98:	4630      	mov	r0, r6
 800da9a:	f7ff ffbf 	bl	800da1c <sbrk_aligned>
 800da9e:	1c43      	adds	r3, r0, #1
 800daa0:	4604      	mov	r4, r0
 800daa2:	d158      	bne.n	800db56 <_malloc_r+0xf6>
 800daa4:	f8d8 4000 	ldr.w	r4, [r8]
 800daa8:	4627      	mov	r7, r4
 800daaa:	2f00      	cmp	r7, #0
 800daac:	d143      	bne.n	800db36 <_malloc_r+0xd6>
 800daae:	2c00      	cmp	r4, #0
 800dab0:	d04b      	beq.n	800db4a <_malloc_r+0xea>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	4639      	mov	r1, r7
 800dab6:	4630      	mov	r0, r6
 800dab8:	eb04 0903 	add.w	r9, r4, r3
 800dabc:	f001 ff88 	bl	800f9d0 <_sbrk_r>
 800dac0:	4581      	cmp	r9, r0
 800dac2:	d142      	bne.n	800db4a <_malloc_r+0xea>
 800dac4:	6821      	ldr	r1, [r4, #0]
 800dac6:	1a6d      	subs	r5, r5, r1
 800dac8:	4629      	mov	r1, r5
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff ffa6 	bl	800da1c <sbrk_aligned>
 800dad0:	3001      	adds	r0, #1
 800dad2:	d03a      	beq.n	800db4a <_malloc_r+0xea>
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	442b      	add	r3, r5
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	f8d8 3000 	ldr.w	r3, [r8]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	bb62      	cbnz	r2, 800db3c <_malloc_r+0xdc>
 800dae2:	f8c8 7000 	str.w	r7, [r8]
 800dae6:	e00f      	b.n	800db08 <_malloc_r+0xa8>
 800dae8:	6822      	ldr	r2, [r4, #0]
 800daea:	1b52      	subs	r2, r2, r5
 800daec:	d420      	bmi.n	800db30 <_malloc_r+0xd0>
 800daee:	2a0b      	cmp	r2, #11
 800daf0:	d917      	bls.n	800db22 <_malloc_r+0xc2>
 800daf2:	1961      	adds	r1, r4, r5
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	6025      	str	r5, [r4, #0]
 800daf8:	bf18      	it	ne
 800dafa:	6059      	strne	r1, [r3, #4]
 800dafc:	6863      	ldr	r3, [r4, #4]
 800dafe:	bf08      	it	eq
 800db00:	f8c8 1000 	streq.w	r1, [r8]
 800db04:	5162      	str	r2, [r4, r5]
 800db06:	604b      	str	r3, [r1, #4]
 800db08:	4630      	mov	r0, r6
 800db0a:	f000 f82f 	bl	800db6c <__malloc_unlock>
 800db0e:	f104 000b 	add.w	r0, r4, #11
 800db12:	1d23      	adds	r3, r4, #4
 800db14:	f020 0007 	bic.w	r0, r0, #7
 800db18:	1ac2      	subs	r2, r0, r3
 800db1a:	bf1c      	itt	ne
 800db1c:	1a1b      	subne	r3, r3, r0
 800db1e:	50a3      	strne	r3, [r4, r2]
 800db20:	e7af      	b.n	800da82 <_malloc_r+0x22>
 800db22:	6862      	ldr	r2, [r4, #4]
 800db24:	42a3      	cmp	r3, r4
 800db26:	bf0c      	ite	eq
 800db28:	f8c8 2000 	streq.w	r2, [r8]
 800db2c:	605a      	strne	r2, [r3, #4]
 800db2e:	e7eb      	b.n	800db08 <_malloc_r+0xa8>
 800db30:	4623      	mov	r3, r4
 800db32:	6864      	ldr	r4, [r4, #4]
 800db34:	e7ae      	b.n	800da94 <_malloc_r+0x34>
 800db36:	463c      	mov	r4, r7
 800db38:	687f      	ldr	r7, [r7, #4]
 800db3a:	e7b6      	b.n	800daaa <_malloc_r+0x4a>
 800db3c:	461a      	mov	r2, r3
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	42a3      	cmp	r3, r4
 800db42:	d1fb      	bne.n	800db3c <_malloc_r+0xdc>
 800db44:	2300      	movs	r3, #0
 800db46:	6053      	str	r3, [r2, #4]
 800db48:	e7de      	b.n	800db08 <_malloc_r+0xa8>
 800db4a:	230c      	movs	r3, #12
 800db4c:	6033      	str	r3, [r6, #0]
 800db4e:	4630      	mov	r0, r6
 800db50:	f000 f80c 	bl	800db6c <__malloc_unlock>
 800db54:	e794      	b.n	800da80 <_malloc_r+0x20>
 800db56:	6005      	str	r5, [r0, #0]
 800db58:	e7d6      	b.n	800db08 <_malloc_r+0xa8>
 800db5a:	bf00      	nop
 800db5c:	20001bec 	.word	0x20001bec

0800db60 <__malloc_lock>:
 800db60:	4801      	ldr	r0, [pc, #4]	@ (800db68 <__malloc_lock+0x8>)
 800db62:	f7ff b8a6 	b.w	800ccb2 <__retarget_lock_acquire_recursive>
 800db66:	bf00      	nop
 800db68:	20001be4 	.word	0x20001be4

0800db6c <__malloc_unlock>:
 800db6c:	4801      	ldr	r0, [pc, #4]	@ (800db74 <__malloc_unlock+0x8>)
 800db6e:	f7ff b8a1 	b.w	800ccb4 <__retarget_lock_release_recursive>
 800db72:	bf00      	nop
 800db74:	20001be4 	.word	0x20001be4

0800db78 <_Balloc>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	69c6      	ldr	r6, [r0, #28]
 800db7c:	4604      	mov	r4, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	b976      	cbnz	r6, 800dba0 <_Balloc+0x28>
 800db82:	2010      	movs	r0, #16
 800db84:	f7ff ff42 	bl	800da0c <malloc>
 800db88:	4602      	mov	r2, r0
 800db8a:	61e0      	str	r0, [r4, #28]
 800db8c:	b920      	cbnz	r0, 800db98 <_Balloc+0x20>
 800db8e:	4b18      	ldr	r3, [pc, #96]	@ (800dbf0 <_Balloc+0x78>)
 800db90:	4818      	ldr	r0, [pc, #96]	@ (800dbf4 <_Balloc+0x7c>)
 800db92:	216b      	movs	r1, #107	@ 0x6b
 800db94:	f001 ff34 	bl	800fa00 <__assert_func>
 800db98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db9c:	6006      	str	r6, [r0, #0]
 800db9e:	60c6      	str	r6, [r0, #12]
 800dba0:	69e6      	ldr	r6, [r4, #28]
 800dba2:	68f3      	ldr	r3, [r6, #12]
 800dba4:	b183      	cbz	r3, 800dbc8 <_Balloc+0x50>
 800dba6:	69e3      	ldr	r3, [r4, #28]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbae:	b9b8      	cbnz	r0, 800dbe0 <_Balloc+0x68>
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	fa01 f605 	lsl.w	r6, r1, r5
 800dbb6:	1d72      	adds	r2, r6, #5
 800dbb8:	0092      	lsls	r2, r2, #2
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f001 ff3e 	bl	800fa3c <_calloc_r>
 800dbc0:	b160      	cbz	r0, 800dbdc <_Balloc+0x64>
 800dbc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbc6:	e00e      	b.n	800dbe6 <_Balloc+0x6e>
 800dbc8:	2221      	movs	r2, #33	@ 0x21
 800dbca:	2104      	movs	r1, #4
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f001 ff35 	bl	800fa3c <_calloc_r>
 800dbd2:	69e3      	ldr	r3, [r4, #28]
 800dbd4:	60f0      	str	r0, [r6, #12]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1e4      	bne.n	800dba6 <_Balloc+0x2e>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	6802      	ldr	r2, [r0, #0]
 800dbe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbec:	e7f7      	b.n	800dbde <_Balloc+0x66>
 800dbee:	bf00      	nop
 800dbf0:	080104f2 	.word	0x080104f2
 800dbf4:	08010572 	.word	0x08010572

0800dbf8 <_Bfree>:
 800dbf8:	b570      	push	{r4, r5, r6, lr}
 800dbfa:	69c6      	ldr	r6, [r0, #28]
 800dbfc:	4605      	mov	r5, r0
 800dbfe:	460c      	mov	r4, r1
 800dc00:	b976      	cbnz	r6, 800dc20 <_Bfree+0x28>
 800dc02:	2010      	movs	r0, #16
 800dc04:	f7ff ff02 	bl	800da0c <malloc>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	61e8      	str	r0, [r5, #28]
 800dc0c:	b920      	cbnz	r0, 800dc18 <_Bfree+0x20>
 800dc0e:	4b09      	ldr	r3, [pc, #36]	@ (800dc34 <_Bfree+0x3c>)
 800dc10:	4809      	ldr	r0, [pc, #36]	@ (800dc38 <_Bfree+0x40>)
 800dc12:	218f      	movs	r1, #143	@ 0x8f
 800dc14:	f001 fef4 	bl	800fa00 <__assert_func>
 800dc18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc1c:	6006      	str	r6, [r0, #0]
 800dc1e:	60c6      	str	r6, [r0, #12]
 800dc20:	b13c      	cbz	r4, 800dc32 <_Bfree+0x3a>
 800dc22:	69eb      	ldr	r3, [r5, #28]
 800dc24:	6862      	ldr	r2, [r4, #4]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc2c:	6021      	str	r1, [r4, #0]
 800dc2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc32:	bd70      	pop	{r4, r5, r6, pc}
 800dc34:	080104f2 	.word	0x080104f2
 800dc38:	08010572 	.word	0x08010572

0800dc3c <__multadd>:
 800dc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc40:	690d      	ldr	r5, [r1, #16]
 800dc42:	4607      	mov	r7, r0
 800dc44:	460c      	mov	r4, r1
 800dc46:	461e      	mov	r6, r3
 800dc48:	f101 0c14 	add.w	ip, r1, #20
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f8dc 3000 	ldr.w	r3, [ip]
 800dc52:	b299      	uxth	r1, r3
 800dc54:	fb02 6101 	mla	r1, r2, r1, r6
 800dc58:	0c1e      	lsrs	r6, r3, #16
 800dc5a:	0c0b      	lsrs	r3, r1, #16
 800dc5c:	fb02 3306 	mla	r3, r2, r6, r3
 800dc60:	b289      	uxth	r1, r1
 800dc62:	3001      	adds	r0, #1
 800dc64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc68:	4285      	cmp	r5, r0
 800dc6a:	f84c 1b04 	str.w	r1, [ip], #4
 800dc6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc72:	dcec      	bgt.n	800dc4e <__multadd+0x12>
 800dc74:	b30e      	cbz	r6, 800dcba <__multadd+0x7e>
 800dc76:	68a3      	ldr	r3, [r4, #8]
 800dc78:	42ab      	cmp	r3, r5
 800dc7a:	dc19      	bgt.n	800dcb0 <__multadd+0x74>
 800dc7c:	6861      	ldr	r1, [r4, #4]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	3101      	adds	r1, #1
 800dc82:	f7ff ff79 	bl	800db78 <_Balloc>
 800dc86:	4680      	mov	r8, r0
 800dc88:	b928      	cbnz	r0, 800dc96 <__multadd+0x5a>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4b0c      	ldr	r3, [pc, #48]	@ (800dcc0 <__multadd+0x84>)
 800dc8e:	480d      	ldr	r0, [pc, #52]	@ (800dcc4 <__multadd+0x88>)
 800dc90:	21ba      	movs	r1, #186	@ 0xba
 800dc92:	f001 feb5 	bl	800fa00 <__assert_func>
 800dc96:	6922      	ldr	r2, [r4, #16]
 800dc98:	3202      	adds	r2, #2
 800dc9a:	f104 010c 	add.w	r1, r4, #12
 800dc9e:	0092      	lsls	r2, r2, #2
 800dca0:	300c      	adds	r0, #12
 800dca2:	f7ff f808 	bl	800ccb6 <memcpy>
 800dca6:	4621      	mov	r1, r4
 800dca8:	4638      	mov	r0, r7
 800dcaa:	f7ff ffa5 	bl	800dbf8 <_Bfree>
 800dcae:	4644      	mov	r4, r8
 800dcb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcb4:	3501      	adds	r5, #1
 800dcb6:	615e      	str	r6, [r3, #20]
 800dcb8:	6125      	str	r5, [r4, #16]
 800dcba:	4620      	mov	r0, r4
 800dcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc0:	08010561 	.word	0x08010561
 800dcc4:	08010572 	.word	0x08010572

0800dcc8 <__s2b>:
 800dcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dccc:	460c      	mov	r4, r1
 800dcce:	4615      	mov	r5, r2
 800dcd0:	461f      	mov	r7, r3
 800dcd2:	2209      	movs	r2, #9
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcdc:	2100      	movs	r1, #0
 800dcde:	2201      	movs	r2, #1
 800dce0:	429a      	cmp	r2, r3
 800dce2:	db09      	blt.n	800dcf8 <__s2b+0x30>
 800dce4:	4630      	mov	r0, r6
 800dce6:	f7ff ff47 	bl	800db78 <_Balloc>
 800dcea:	b940      	cbnz	r0, 800dcfe <__s2b+0x36>
 800dcec:	4602      	mov	r2, r0
 800dcee:	4b19      	ldr	r3, [pc, #100]	@ (800dd54 <__s2b+0x8c>)
 800dcf0:	4819      	ldr	r0, [pc, #100]	@ (800dd58 <__s2b+0x90>)
 800dcf2:	21d3      	movs	r1, #211	@ 0xd3
 800dcf4:	f001 fe84 	bl	800fa00 <__assert_func>
 800dcf8:	0052      	lsls	r2, r2, #1
 800dcfa:	3101      	adds	r1, #1
 800dcfc:	e7f0      	b.n	800dce0 <__s2b+0x18>
 800dcfe:	9b08      	ldr	r3, [sp, #32]
 800dd00:	6143      	str	r3, [r0, #20]
 800dd02:	2d09      	cmp	r5, #9
 800dd04:	f04f 0301 	mov.w	r3, #1
 800dd08:	6103      	str	r3, [r0, #16]
 800dd0a:	dd16      	ble.n	800dd3a <__s2b+0x72>
 800dd0c:	f104 0909 	add.w	r9, r4, #9
 800dd10:	46c8      	mov	r8, r9
 800dd12:	442c      	add	r4, r5
 800dd14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd18:	4601      	mov	r1, r0
 800dd1a:	3b30      	subs	r3, #48	@ 0x30
 800dd1c:	220a      	movs	r2, #10
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f7ff ff8c 	bl	800dc3c <__multadd>
 800dd24:	45a0      	cmp	r8, r4
 800dd26:	d1f5      	bne.n	800dd14 <__s2b+0x4c>
 800dd28:	f1a5 0408 	sub.w	r4, r5, #8
 800dd2c:	444c      	add	r4, r9
 800dd2e:	1b2d      	subs	r5, r5, r4
 800dd30:	1963      	adds	r3, r4, r5
 800dd32:	42bb      	cmp	r3, r7
 800dd34:	db04      	blt.n	800dd40 <__s2b+0x78>
 800dd36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd3a:	340a      	adds	r4, #10
 800dd3c:	2509      	movs	r5, #9
 800dd3e:	e7f6      	b.n	800dd2e <__s2b+0x66>
 800dd40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd44:	4601      	mov	r1, r0
 800dd46:	3b30      	subs	r3, #48	@ 0x30
 800dd48:	220a      	movs	r2, #10
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7ff ff76 	bl	800dc3c <__multadd>
 800dd50:	e7ee      	b.n	800dd30 <__s2b+0x68>
 800dd52:	bf00      	nop
 800dd54:	08010561 	.word	0x08010561
 800dd58:	08010572 	.word	0x08010572

0800dd5c <__hi0bits>:
 800dd5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dd60:	4603      	mov	r3, r0
 800dd62:	bf36      	itet	cc
 800dd64:	0403      	lslcc	r3, r0, #16
 800dd66:	2000      	movcs	r0, #0
 800dd68:	2010      	movcc	r0, #16
 800dd6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd6e:	bf3c      	itt	cc
 800dd70:	021b      	lslcc	r3, r3, #8
 800dd72:	3008      	addcc	r0, #8
 800dd74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd78:	bf3c      	itt	cc
 800dd7a:	011b      	lslcc	r3, r3, #4
 800dd7c:	3004      	addcc	r0, #4
 800dd7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd82:	bf3c      	itt	cc
 800dd84:	009b      	lslcc	r3, r3, #2
 800dd86:	3002      	addcc	r0, #2
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	db05      	blt.n	800dd98 <__hi0bits+0x3c>
 800dd8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd90:	f100 0001 	add.w	r0, r0, #1
 800dd94:	bf08      	it	eq
 800dd96:	2020      	moveq	r0, #32
 800dd98:	4770      	bx	lr

0800dd9a <__lo0bits>:
 800dd9a:	6803      	ldr	r3, [r0, #0]
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	f013 0007 	ands.w	r0, r3, #7
 800dda2:	d00b      	beq.n	800ddbc <__lo0bits+0x22>
 800dda4:	07d9      	lsls	r1, r3, #31
 800dda6:	d421      	bmi.n	800ddec <__lo0bits+0x52>
 800dda8:	0798      	lsls	r0, r3, #30
 800ddaa:	bf49      	itett	mi
 800ddac:	085b      	lsrmi	r3, r3, #1
 800ddae:	089b      	lsrpl	r3, r3, #2
 800ddb0:	2001      	movmi	r0, #1
 800ddb2:	6013      	strmi	r3, [r2, #0]
 800ddb4:	bf5c      	itt	pl
 800ddb6:	6013      	strpl	r3, [r2, #0]
 800ddb8:	2002      	movpl	r0, #2
 800ddba:	4770      	bx	lr
 800ddbc:	b299      	uxth	r1, r3
 800ddbe:	b909      	cbnz	r1, 800ddc4 <__lo0bits+0x2a>
 800ddc0:	0c1b      	lsrs	r3, r3, #16
 800ddc2:	2010      	movs	r0, #16
 800ddc4:	b2d9      	uxtb	r1, r3
 800ddc6:	b909      	cbnz	r1, 800ddcc <__lo0bits+0x32>
 800ddc8:	3008      	adds	r0, #8
 800ddca:	0a1b      	lsrs	r3, r3, #8
 800ddcc:	0719      	lsls	r1, r3, #28
 800ddce:	bf04      	itt	eq
 800ddd0:	091b      	lsreq	r3, r3, #4
 800ddd2:	3004      	addeq	r0, #4
 800ddd4:	0799      	lsls	r1, r3, #30
 800ddd6:	bf04      	itt	eq
 800ddd8:	089b      	lsreq	r3, r3, #2
 800ddda:	3002      	addeq	r0, #2
 800dddc:	07d9      	lsls	r1, r3, #31
 800ddde:	d403      	bmi.n	800dde8 <__lo0bits+0x4e>
 800dde0:	085b      	lsrs	r3, r3, #1
 800dde2:	f100 0001 	add.w	r0, r0, #1
 800dde6:	d003      	beq.n	800ddf0 <__lo0bits+0x56>
 800dde8:	6013      	str	r3, [r2, #0]
 800ddea:	4770      	bx	lr
 800ddec:	2000      	movs	r0, #0
 800ddee:	4770      	bx	lr
 800ddf0:	2020      	movs	r0, #32
 800ddf2:	4770      	bx	lr

0800ddf4 <__i2b>:
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	f7ff febd 	bl	800db78 <_Balloc>
 800ddfe:	4602      	mov	r2, r0
 800de00:	b928      	cbnz	r0, 800de0e <__i2b+0x1a>
 800de02:	4b05      	ldr	r3, [pc, #20]	@ (800de18 <__i2b+0x24>)
 800de04:	4805      	ldr	r0, [pc, #20]	@ (800de1c <__i2b+0x28>)
 800de06:	f240 1145 	movw	r1, #325	@ 0x145
 800de0a:	f001 fdf9 	bl	800fa00 <__assert_func>
 800de0e:	2301      	movs	r3, #1
 800de10:	6144      	str	r4, [r0, #20]
 800de12:	6103      	str	r3, [r0, #16]
 800de14:	bd10      	pop	{r4, pc}
 800de16:	bf00      	nop
 800de18:	08010561 	.word	0x08010561
 800de1c:	08010572 	.word	0x08010572

0800de20 <__multiply>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	4614      	mov	r4, r2
 800de26:	690a      	ldr	r2, [r1, #16]
 800de28:	6923      	ldr	r3, [r4, #16]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	bfa8      	it	ge
 800de2e:	4623      	movge	r3, r4
 800de30:	460f      	mov	r7, r1
 800de32:	bfa4      	itt	ge
 800de34:	460c      	movge	r4, r1
 800de36:	461f      	movge	r7, r3
 800de38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800de3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800de40:	68a3      	ldr	r3, [r4, #8]
 800de42:	6861      	ldr	r1, [r4, #4]
 800de44:	eb0a 0609 	add.w	r6, sl, r9
 800de48:	42b3      	cmp	r3, r6
 800de4a:	b085      	sub	sp, #20
 800de4c:	bfb8      	it	lt
 800de4e:	3101      	addlt	r1, #1
 800de50:	f7ff fe92 	bl	800db78 <_Balloc>
 800de54:	b930      	cbnz	r0, 800de64 <__multiply+0x44>
 800de56:	4602      	mov	r2, r0
 800de58:	4b44      	ldr	r3, [pc, #272]	@ (800df6c <__multiply+0x14c>)
 800de5a:	4845      	ldr	r0, [pc, #276]	@ (800df70 <__multiply+0x150>)
 800de5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800de60:	f001 fdce 	bl	800fa00 <__assert_func>
 800de64:	f100 0514 	add.w	r5, r0, #20
 800de68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de6c:	462b      	mov	r3, r5
 800de6e:	2200      	movs	r2, #0
 800de70:	4543      	cmp	r3, r8
 800de72:	d321      	bcc.n	800deb8 <__multiply+0x98>
 800de74:	f107 0114 	add.w	r1, r7, #20
 800de78:	f104 0214 	add.w	r2, r4, #20
 800de7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de84:	9302      	str	r3, [sp, #8]
 800de86:	1b13      	subs	r3, r2, r4
 800de88:	3b15      	subs	r3, #21
 800de8a:	f023 0303 	bic.w	r3, r3, #3
 800de8e:	3304      	adds	r3, #4
 800de90:	f104 0715 	add.w	r7, r4, #21
 800de94:	42ba      	cmp	r2, r7
 800de96:	bf38      	it	cc
 800de98:	2304      	movcc	r3, #4
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	9b02      	ldr	r3, [sp, #8]
 800de9e:	9103      	str	r1, [sp, #12]
 800dea0:	428b      	cmp	r3, r1
 800dea2:	d80c      	bhi.n	800debe <__multiply+0x9e>
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	dd03      	ble.n	800deb0 <__multiply+0x90>
 800dea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800deac:	2b00      	cmp	r3, #0
 800deae:	d05b      	beq.n	800df68 <__multiply+0x148>
 800deb0:	6106      	str	r6, [r0, #16]
 800deb2:	b005      	add	sp, #20
 800deb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb8:	f843 2b04 	str.w	r2, [r3], #4
 800debc:	e7d8      	b.n	800de70 <__multiply+0x50>
 800debe:	f8b1 a000 	ldrh.w	sl, [r1]
 800dec2:	f1ba 0f00 	cmp.w	sl, #0
 800dec6:	d024      	beq.n	800df12 <__multiply+0xf2>
 800dec8:	f104 0e14 	add.w	lr, r4, #20
 800decc:	46a9      	mov	r9, r5
 800dece:	f04f 0c00 	mov.w	ip, #0
 800ded2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ded6:	f8d9 3000 	ldr.w	r3, [r9]
 800deda:	fa1f fb87 	uxth.w	fp, r7
 800dede:	b29b      	uxth	r3, r3
 800dee0:	fb0a 330b 	mla	r3, sl, fp, r3
 800dee4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dee8:	f8d9 7000 	ldr.w	r7, [r9]
 800deec:	4463      	add	r3, ip
 800deee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800def2:	fb0a c70b 	mla	r7, sl, fp, ip
 800def6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800defa:	b29b      	uxth	r3, r3
 800defc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df00:	4572      	cmp	r2, lr
 800df02:	f849 3b04 	str.w	r3, [r9], #4
 800df06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800df0a:	d8e2      	bhi.n	800ded2 <__multiply+0xb2>
 800df0c:	9b01      	ldr	r3, [sp, #4]
 800df0e:	f845 c003 	str.w	ip, [r5, r3]
 800df12:	9b03      	ldr	r3, [sp, #12]
 800df14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800df18:	3104      	adds	r1, #4
 800df1a:	f1b9 0f00 	cmp.w	r9, #0
 800df1e:	d021      	beq.n	800df64 <__multiply+0x144>
 800df20:	682b      	ldr	r3, [r5, #0]
 800df22:	f104 0c14 	add.w	ip, r4, #20
 800df26:	46ae      	mov	lr, r5
 800df28:	f04f 0a00 	mov.w	sl, #0
 800df2c:	f8bc b000 	ldrh.w	fp, [ip]
 800df30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800df34:	fb09 770b 	mla	r7, r9, fp, r7
 800df38:	4457      	add	r7, sl
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df40:	f84e 3b04 	str.w	r3, [lr], #4
 800df44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df4c:	f8be 3000 	ldrh.w	r3, [lr]
 800df50:	fb09 330a 	mla	r3, r9, sl, r3
 800df54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800df58:	4562      	cmp	r2, ip
 800df5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df5e:	d8e5      	bhi.n	800df2c <__multiply+0x10c>
 800df60:	9f01      	ldr	r7, [sp, #4]
 800df62:	51eb      	str	r3, [r5, r7]
 800df64:	3504      	adds	r5, #4
 800df66:	e799      	b.n	800de9c <__multiply+0x7c>
 800df68:	3e01      	subs	r6, #1
 800df6a:	e79b      	b.n	800dea4 <__multiply+0x84>
 800df6c:	08010561 	.word	0x08010561
 800df70:	08010572 	.word	0x08010572

0800df74 <__pow5mult>:
 800df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	4615      	mov	r5, r2
 800df7a:	f012 0203 	ands.w	r2, r2, #3
 800df7e:	4607      	mov	r7, r0
 800df80:	460e      	mov	r6, r1
 800df82:	d007      	beq.n	800df94 <__pow5mult+0x20>
 800df84:	4c25      	ldr	r4, [pc, #148]	@ (800e01c <__pow5mult+0xa8>)
 800df86:	3a01      	subs	r2, #1
 800df88:	2300      	movs	r3, #0
 800df8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df8e:	f7ff fe55 	bl	800dc3c <__multadd>
 800df92:	4606      	mov	r6, r0
 800df94:	10ad      	asrs	r5, r5, #2
 800df96:	d03d      	beq.n	800e014 <__pow5mult+0xa0>
 800df98:	69fc      	ldr	r4, [r7, #28]
 800df9a:	b97c      	cbnz	r4, 800dfbc <__pow5mult+0x48>
 800df9c:	2010      	movs	r0, #16
 800df9e:	f7ff fd35 	bl	800da0c <malloc>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	61f8      	str	r0, [r7, #28]
 800dfa6:	b928      	cbnz	r0, 800dfb4 <__pow5mult+0x40>
 800dfa8:	4b1d      	ldr	r3, [pc, #116]	@ (800e020 <__pow5mult+0xac>)
 800dfaa:	481e      	ldr	r0, [pc, #120]	@ (800e024 <__pow5mult+0xb0>)
 800dfac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dfb0:	f001 fd26 	bl	800fa00 <__assert_func>
 800dfb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfb8:	6004      	str	r4, [r0, #0]
 800dfba:	60c4      	str	r4, [r0, #12]
 800dfbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dfc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfc4:	b94c      	cbnz	r4, 800dfda <__pow5mult+0x66>
 800dfc6:	f240 2171 	movw	r1, #625	@ 0x271
 800dfca:	4638      	mov	r0, r7
 800dfcc:	f7ff ff12 	bl	800ddf4 <__i2b>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	6003      	str	r3, [r0, #0]
 800dfda:	f04f 0900 	mov.w	r9, #0
 800dfde:	07eb      	lsls	r3, r5, #31
 800dfe0:	d50a      	bpl.n	800dff8 <__pow5mult+0x84>
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	4622      	mov	r2, r4
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	f7ff ff1a 	bl	800de20 <__multiply>
 800dfec:	4631      	mov	r1, r6
 800dfee:	4680      	mov	r8, r0
 800dff0:	4638      	mov	r0, r7
 800dff2:	f7ff fe01 	bl	800dbf8 <_Bfree>
 800dff6:	4646      	mov	r6, r8
 800dff8:	106d      	asrs	r5, r5, #1
 800dffa:	d00b      	beq.n	800e014 <__pow5mult+0xa0>
 800dffc:	6820      	ldr	r0, [r4, #0]
 800dffe:	b938      	cbnz	r0, 800e010 <__pow5mult+0x9c>
 800e000:	4622      	mov	r2, r4
 800e002:	4621      	mov	r1, r4
 800e004:	4638      	mov	r0, r7
 800e006:	f7ff ff0b 	bl	800de20 <__multiply>
 800e00a:	6020      	str	r0, [r4, #0]
 800e00c:	f8c0 9000 	str.w	r9, [r0]
 800e010:	4604      	mov	r4, r0
 800e012:	e7e4      	b.n	800dfde <__pow5mult+0x6a>
 800e014:	4630      	mov	r0, r6
 800e016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e01a:	bf00      	nop
 800e01c:	080105cc 	.word	0x080105cc
 800e020:	080104f2 	.word	0x080104f2
 800e024:	08010572 	.word	0x08010572

0800e028 <__lshift>:
 800e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	460c      	mov	r4, r1
 800e02e:	6849      	ldr	r1, [r1, #4]
 800e030:	6923      	ldr	r3, [r4, #16]
 800e032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e036:	68a3      	ldr	r3, [r4, #8]
 800e038:	4607      	mov	r7, r0
 800e03a:	4691      	mov	r9, r2
 800e03c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e040:	f108 0601 	add.w	r6, r8, #1
 800e044:	42b3      	cmp	r3, r6
 800e046:	db0b      	blt.n	800e060 <__lshift+0x38>
 800e048:	4638      	mov	r0, r7
 800e04a:	f7ff fd95 	bl	800db78 <_Balloc>
 800e04e:	4605      	mov	r5, r0
 800e050:	b948      	cbnz	r0, 800e066 <__lshift+0x3e>
 800e052:	4602      	mov	r2, r0
 800e054:	4b28      	ldr	r3, [pc, #160]	@ (800e0f8 <__lshift+0xd0>)
 800e056:	4829      	ldr	r0, [pc, #164]	@ (800e0fc <__lshift+0xd4>)
 800e058:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e05c:	f001 fcd0 	bl	800fa00 <__assert_func>
 800e060:	3101      	adds	r1, #1
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	e7ee      	b.n	800e044 <__lshift+0x1c>
 800e066:	2300      	movs	r3, #0
 800e068:	f100 0114 	add.w	r1, r0, #20
 800e06c:	f100 0210 	add.w	r2, r0, #16
 800e070:	4618      	mov	r0, r3
 800e072:	4553      	cmp	r3, sl
 800e074:	db33      	blt.n	800e0de <__lshift+0xb6>
 800e076:	6920      	ldr	r0, [r4, #16]
 800e078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e07c:	f104 0314 	add.w	r3, r4, #20
 800e080:	f019 091f 	ands.w	r9, r9, #31
 800e084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e08c:	d02b      	beq.n	800e0e6 <__lshift+0xbe>
 800e08e:	f1c9 0e20 	rsb	lr, r9, #32
 800e092:	468a      	mov	sl, r1
 800e094:	2200      	movs	r2, #0
 800e096:	6818      	ldr	r0, [r3, #0]
 800e098:	fa00 f009 	lsl.w	r0, r0, r9
 800e09c:	4310      	orrs	r0, r2
 800e09e:	f84a 0b04 	str.w	r0, [sl], #4
 800e0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0a6:	459c      	cmp	ip, r3
 800e0a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0ac:	d8f3      	bhi.n	800e096 <__lshift+0x6e>
 800e0ae:	ebac 0304 	sub.w	r3, ip, r4
 800e0b2:	3b15      	subs	r3, #21
 800e0b4:	f023 0303 	bic.w	r3, r3, #3
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	f104 0015 	add.w	r0, r4, #21
 800e0be:	4584      	cmp	ip, r0
 800e0c0:	bf38      	it	cc
 800e0c2:	2304      	movcc	r3, #4
 800e0c4:	50ca      	str	r2, [r1, r3]
 800e0c6:	b10a      	cbz	r2, 800e0cc <__lshift+0xa4>
 800e0c8:	f108 0602 	add.w	r6, r8, #2
 800e0cc:	3e01      	subs	r6, #1
 800e0ce:	4638      	mov	r0, r7
 800e0d0:	612e      	str	r6, [r5, #16]
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	f7ff fd90 	bl	800dbf8 <_Bfree>
 800e0d8:	4628      	mov	r0, r5
 800e0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	e7c5      	b.n	800e072 <__lshift+0x4a>
 800e0e6:	3904      	subs	r1, #4
 800e0e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0f0:	459c      	cmp	ip, r3
 800e0f2:	d8f9      	bhi.n	800e0e8 <__lshift+0xc0>
 800e0f4:	e7ea      	b.n	800e0cc <__lshift+0xa4>
 800e0f6:	bf00      	nop
 800e0f8:	08010561 	.word	0x08010561
 800e0fc:	08010572 	.word	0x08010572

0800e100 <__mcmp>:
 800e100:	690a      	ldr	r2, [r1, #16]
 800e102:	4603      	mov	r3, r0
 800e104:	6900      	ldr	r0, [r0, #16]
 800e106:	1a80      	subs	r0, r0, r2
 800e108:	b530      	push	{r4, r5, lr}
 800e10a:	d10e      	bne.n	800e12a <__mcmp+0x2a>
 800e10c:	3314      	adds	r3, #20
 800e10e:	3114      	adds	r1, #20
 800e110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e11c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e120:	4295      	cmp	r5, r2
 800e122:	d003      	beq.n	800e12c <__mcmp+0x2c>
 800e124:	d205      	bcs.n	800e132 <__mcmp+0x32>
 800e126:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e12a:	bd30      	pop	{r4, r5, pc}
 800e12c:	42a3      	cmp	r3, r4
 800e12e:	d3f3      	bcc.n	800e118 <__mcmp+0x18>
 800e130:	e7fb      	b.n	800e12a <__mcmp+0x2a>
 800e132:	2001      	movs	r0, #1
 800e134:	e7f9      	b.n	800e12a <__mcmp+0x2a>
	...

0800e138 <__mdiff>:
 800e138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	4689      	mov	r9, r1
 800e13e:	4606      	mov	r6, r0
 800e140:	4611      	mov	r1, r2
 800e142:	4648      	mov	r0, r9
 800e144:	4614      	mov	r4, r2
 800e146:	f7ff ffdb 	bl	800e100 <__mcmp>
 800e14a:	1e05      	subs	r5, r0, #0
 800e14c:	d112      	bne.n	800e174 <__mdiff+0x3c>
 800e14e:	4629      	mov	r1, r5
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff fd11 	bl	800db78 <_Balloc>
 800e156:	4602      	mov	r2, r0
 800e158:	b928      	cbnz	r0, 800e166 <__mdiff+0x2e>
 800e15a:	4b3f      	ldr	r3, [pc, #252]	@ (800e258 <__mdiff+0x120>)
 800e15c:	f240 2137 	movw	r1, #567	@ 0x237
 800e160:	483e      	ldr	r0, [pc, #248]	@ (800e25c <__mdiff+0x124>)
 800e162:	f001 fc4d 	bl	800fa00 <__assert_func>
 800e166:	2301      	movs	r3, #1
 800e168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e16c:	4610      	mov	r0, r2
 800e16e:	b003      	add	sp, #12
 800e170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e174:	bfbc      	itt	lt
 800e176:	464b      	movlt	r3, r9
 800e178:	46a1      	movlt	r9, r4
 800e17a:	4630      	mov	r0, r6
 800e17c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e180:	bfba      	itte	lt
 800e182:	461c      	movlt	r4, r3
 800e184:	2501      	movlt	r5, #1
 800e186:	2500      	movge	r5, #0
 800e188:	f7ff fcf6 	bl	800db78 <_Balloc>
 800e18c:	4602      	mov	r2, r0
 800e18e:	b918      	cbnz	r0, 800e198 <__mdiff+0x60>
 800e190:	4b31      	ldr	r3, [pc, #196]	@ (800e258 <__mdiff+0x120>)
 800e192:	f240 2145 	movw	r1, #581	@ 0x245
 800e196:	e7e3      	b.n	800e160 <__mdiff+0x28>
 800e198:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e19c:	6926      	ldr	r6, [r4, #16]
 800e19e:	60c5      	str	r5, [r0, #12]
 800e1a0:	f109 0310 	add.w	r3, r9, #16
 800e1a4:	f109 0514 	add.w	r5, r9, #20
 800e1a8:	f104 0e14 	add.w	lr, r4, #20
 800e1ac:	f100 0b14 	add.w	fp, r0, #20
 800e1b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e1b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	46d9      	mov	r9, fp
 800e1bc:	f04f 0c00 	mov.w	ip, #0
 800e1c0:	9b01      	ldr	r3, [sp, #4]
 800e1c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e1c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e1ca:	9301      	str	r3, [sp, #4]
 800e1cc:	fa1f f38a 	uxth.w	r3, sl
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	b283      	uxth	r3, r0
 800e1d4:	1acb      	subs	r3, r1, r3
 800e1d6:	0c00      	lsrs	r0, r0, #16
 800e1d8:	4463      	add	r3, ip
 800e1da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e1de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e1e8:	4576      	cmp	r6, lr
 800e1ea:	f849 3b04 	str.w	r3, [r9], #4
 800e1ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1f2:	d8e5      	bhi.n	800e1c0 <__mdiff+0x88>
 800e1f4:	1b33      	subs	r3, r6, r4
 800e1f6:	3b15      	subs	r3, #21
 800e1f8:	f023 0303 	bic.w	r3, r3, #3
 800e1fc:	3415      	adds	r4, #21
 800e1fe:	3304      	adds	r3, #4
 800e200:	42a6      	cmp	r6, r4
 800e202:	bf38      	it	cc
 800e204:	2304      	movcc	r3, #4
 800e206:	441d      	add	r5, r3
 800e208:	445b      	add	r3, fp
 800e20a:	461e      	mov	r6, r3
 800e20c:	462c      	mov	r4, r5
 800e20e:	4544      	cmp	r4, r8
 800e210:	d30e      	bcc.n	800e230 <__mdiff+0xf8>
 800e212:	f108 0103 	add.w	r1, r8, #3
 800e216:	1b49      	subs	r1, r1, r5
 800e218:	f021 0103 	bic.w	r1, r1, #3
 800e21c:	3d03      	subs	r5, #3
 800e21e:	45a8      	cmp	r8, r5
 800e220:	bf38      	it	cc
 800e222:	2100      	movcc	r1, #0
 800e224:	440b      	add	r3, r1
 800e226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e22a:	b191      	cbz	r1, 800e252 <__mdiff+0x11a>
 800e22c:	6117      	str	r7, [r2, #16]
 800e22e:	e79d      	b.n	800e16c <__mdiff+0x34>
 800e230:	f854 1b04 	ldr.w	r1, [r4], #4
 800e234:	46e6      	mov	lr, ip
 800e236:	0c08      	lsrs	r0, r1, #16
 800e238:	fa1c fc81 	uxtah	ip, ip, r1
 800e23c:	4471      	add	r1, lr
 800e23e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e242:	b289      	uxth	r1, r1
 800e244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e248:	f846 1b04 	str.w	r1, [r6], #4
 800e24c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e250:	e7dd      	b.n	800e20e <__mdiff+0xd6>
 800e252:	3f01      	subs	r7, #1
 800e254:	e7e7      	b.n	800e226 <__mdiff+0xee>
 800e256:	bf00      	nop
 800e258:	08010561 	.word	0x08010561
 800e25c:	08010572 	.word	0x08010572

0800e260 <__ulp>:
 800e260:	b082      	sub	sp, #8
 800e262:	ed8d 0b00 	vstr	d0, [sp]
 800e266:	9a01      	ldr	r2, [sp, #4]
 800e268:	4b0f      	ldr	r3, [pc, #60]	@ (800e2a8 <__ulp+0x48>)
 800e26a:	4013      	ands	r3, r2
 800e26c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e270:	2b00      	cmp	r3, #0
 800e272:	dc08      	bgt.n	800e286 <__ulp+0x26>
 800e274:	425b      	negs	r3, r3
 800e276:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e27a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e27e:	da04      	bge.n	800e28a <__ulp+0x2a>
 800e280:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e284:	4113      	asrs	r3, r2
 800e286:	2200      	movs	r2, #0
 800e288:	e008      	b.n	800e29c <__ulp+0x3c>
 800e28a:	f1a2 0314 	sub.w	r3, r2, #20
 800e28e:	2b1e      	cmp	r3, #30
 800e290:	bfda      	itte	le
 800e292:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e296:	40da      	lsrle	r2, r3
 800e298:	2201      	movgt	r2, #1
 800e29a:	2300      	movs	r3, #0
 800e29c:	4619      	mov	r1, r3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	ec41 0b10 	vmov	d0, r0, r1
 800e2a4:	b002      	add	sp, #8
 800e2a6:	4770      	bx	lr
 800e2a8:	7ff00000 	.word	0x7ff00000

0800e2ac <__b2d>:
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	6906      	ldr	r6, [r0, #16]
 800e2b2:	f100 0814 	add.w	r8, r0, #20
 800e2b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e2ba:	1f37      	subs	r7, r6, #4
 800e2bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7ff fd4b 	bl	800dd5c <__hi0bits>
 800e2c6:	f1c0 0320 	rsb	r3, r0, #32
 800e2ca:	280a      	cmp	r0, #10
 800e2cc:	600b      	str	r3, [r1, #0]
 800e2ce:	491b      	ldr	r1, [pc, #108]	@ (800e33c <__b2d+0x90>)
 800e2d0:	dc15      	bgt.n	800e2fe <__b2d+0x52>
 800e2d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e2d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e2da:	45b8      	cmp	r8, r7
 800e2dc:	ea43 0501 	orr.w	r5, r3, r1
 800e2e0:	bf34      	ite	cc
 800e2e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2e6:	2300      	movcs	r3, #0
 800e2e8:	3015      	adds	r0, #21
 800e2ea:	fa02 f000 	lsl.w	r0, r2, r0
 800e2ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800e2f2:	4303      	orrs	r3, r0
 800e2f4:	461c      	mov	r4, r3
 800e2f6:	ec45 4b10 	vmov	d0, r4, r5
 800e2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fe:	45b8      	cmp	r8, r7
 800e300:	bf3a      	itte	cc
 800e302:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e306:	f1a6 0708 	subcc.w	r7, r6, #8
 800e30a:	2300      	movcs	r3, #0
 800e30c:	380b      	subs	r0, #11
 800e30e:	d012      	beq.n	800e336 <__b2d+0x8a>
 800e310:	f1c0 0120 	rsb	r1, r0, #32
 800e314:	fa23 f401 	lsr.w	r4, r3, r1
 800e318:	4082      	lsls	r2, r0
 800e31a:	4322      	orrs	r2, r4
 800e31c:	4547      	cmp	r7, r8
 800e31e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e322:	bf8c      	ite	hi
 800e324:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e328:	2200      	movls	r2, #0
 800e32a:	4083      	lsls	r3, r0
 800e32c:	40ca      	lsrs	r2, r1
 800e32e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e332:	4313      	orrs	r3, r2
 800e334:	e7de      	b.n	800e2f4 <__b2d+0x48>
 800e336:	ea42 0501 	orr.w	r5, r2, r1
 800e33a:	e7db      	b.n	800e2f4 <__b2d+0x48>
 800e33c:	3ff00000 	.word	0x3ff00000

0800e340 <__d2b>:
 800e340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e344:	460f      	mov	r7, r1
 800e346:	2101      	movs	r1, #1
 800e348:	ec59 8b10 	vmov	r8, r9, d0
 800e34c:	4616      	mov	r6, r2
 800e34e:	f7ff fc13 	bl	800db78 <_Balloc>
 800e352:	4604      	mov	r4, r0
 800e354:	b930      	cbnz	r0, 800e364 <__d2b+0x24>
 800e356:	4602      	mov	r2, r0
 800e358:	4b23      	ldr	r3, [pc, #140]	@ (800e3e8 <__d2b+0xa8>)
 800e35a:	4824      	ldr	r0, [pc, #144]	@ (800e3ec <__d2b+0xac>)
 800e35c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e360:	f001 fb4e 	bl	800fa00 <__assert_func>
 800e364:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e36c:	b10d      	cbz	r5, 800e372 <__d2b+0x32>
 800e36e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	f1b8 0300 	subs.w	r3, r8, #0
 800e378:	d023      	beq.n	800e3c2 <__d2b+0x82>
 800e37a:	4668      	mov	r0, sp
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	f7ff fd0c 	bl	800dd9a <__lo0bits>
 800e382:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e386:	b1d0      	cbz	r0, 800e3be <__d2b+0x7e>
 800e388:	f1c0 0320 	rsb	r3, r0, #32
 800e38c:	fa02 f303 	lsl.w	r3, r2, r3
 800e390:	430b      	orrs	r3, r1
 800e392:	40c2      	lsrs	r2, r0
 800e394:	6163      	str	r3, [r4, #20]
 800e396:	9201      	str	r2, [sp, #4]
 800e398:	9b01      	ldr	r3, [sp, #4]
 800e39a:	61a3      	str	r3, [r4, #24]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bf0c      	ite	eq
 800e3a0:	2201      	moveq	r2, #1
 800e3a2:	2202      	movne	r2, #2
 800e3a4:	6122      	str	r2, [r4, #16]
 800e3a6:	b1a5      	cbz	r5, 800e3d2 <__d2b+0x92>
 800e3a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e3ac:	4405      	add	r5, r0
 800e3ae:	603d      	str	r5, [r7, #0]
 800e3b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e3b4:	6030      	str	r0, [r6, #0]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	b003      	add	sp, #12
 800e3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3be:	6161      	str	r1, [r4, #20]
 800e3c0:	e7ea      	b.n	800e398 <__d2b+0x58>
 800e3c2:	a801      	add	r0, sp, #4
 800e3c4:	f7ff fce9 	bl	800dd9a <__lo0bits>
 800e3c8:	9b01      	ldr	r3, [sp, #4]
 800e3ca:	6163      	str	r3, [r4, #20]
 800e3cc:	3020      	adds	r0, #32
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	e7e8      	b.n	800e3a4 <__d2b+0x64>
 800e3d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e3da:	6038      	str	r0, [r7, #0]
 800e3dc:	6918      	ldr	r0, [r3, #16]
 800e3de:	f7ff fcbd 	bl	800dd5c <__hi0bits>
 800e3e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3e6:	e7e5      	b.n	800e3b4 <__d2b+0x74>
 800e3e8:	08010561 	.word	0x08010561
 800e3ec:	08010572 	.word	0x08010572

0800e3f0 <__ratio>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	b085      	sub	sp, #20
 800e3f6:	e9cd 1000 	strd	r1, r0, [sp]
 800e3fa:	a902      	add	r1, sp, #8
 800e3fc:	f7ff ff56 	bl	800e2ac <__b2d>
 800e400:	9800      	ldr	r0, [sp, #0]
 800e402:	a903      	add	r1, sp, #12
 800e404:	ec55 4b10 	vmov	r4, r5, d0
 800e408:	f7ff ff50 	bl	800e2ac <__b2d>
 800e40c:	9b01      	ldr	r3, [sp, #4]
 800e40e:	6919      	ldr	r1, [r3, #16]
 800e410:	9b00      	ldr	r3, [sp, #0]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	1ac9      	subs	r1, r1, r3
 800e416:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e41a:	1a9b      	subs	r3, r3, r2
 800e41c:	ec5b ab10 	vmov	sl, fp, d0
 800e420:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e424:	2b00      	cmp	r3, #0
 800e426:	bfce      	itee	gt
 800e428:	462a      	movgt	r2, r5
 800e42a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e42e:	465a      	movle	r2, fp
 800e430:	462f      	mov	r7, r5
 800e432:	46d9      	mov	r9, fp
 800e434:	bfcc      	ite	gt
 800e436:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e43a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e43e:	464b      	mov	r3, r9
 800e440:	4652      	mov	r2, sl
 800e442:	4620      	mov	r0, r4
 800e444:	4639      	mov	r1, r7
 800e446:	f7f2 fa01 	bl	800084c <__aeabi_ddiv>
 800e44a:	ec41 0b10 	vmov	d0, r0, r1
 800e44e:	b005      	add	sp, #20
 800e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e454 <__copybits>:
 800e454:	3901      	subs	r1, #1
 800e456:	b570      	push	{r4, r5, r6, lr}
 800e458:	1149      	asrs	r1, r1, #5
 800e45a:	6914      	ldr	r4, [r2, #16]
 800e45c:	3101      	adds	r1, #1
 800e45e:	f102 0314 	add.w	r3, r2, #20
 800e462:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e466:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e46a:	1f05      	subs	r5, r0, #4
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	d30c      	bcc.n	800e48a <__copybits+0x36>
 800e470:	1aa3      	subs	r3, r4, r2
 800e472:	3b11      	subs	r3, #17
 800e474:	f023 0303 	bic.w	r3, r3, #3
 800e478:	3211      	adds	r2, #17
 800e47a:	42a2      	cmp	r2, r4
 800e47c:	bf88      	it	hi
 800e47e:	2300      	movhi	r3, #0
 800e480:	4418      	add	r0, r3
 800e482:	2300      	movs	r3, #0
 800e484:	4288      	cmp	r0, r1
 800e486:	d305      	bcc.n	800e494 <__copybits+0x40>
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e48e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e492:	e7eb      	b.n	800e46c <__copybits+0x18>
 800e494:	f840 3b04 	str.w	r3, [r0], #4
 800e498:	e7f4      	b.n	800e484 <__copybits+0x30>

0800e49a <__any_on>:
 800e49a:	f100 0214 	add.w	r2, r0, #20
 800e49e:	6900      	ldr	r0, [r0, #16]
 800e4a0:	114b      	asrs	r3, r1, #5
 800e4a2:	4298      	cmp	r0, r3
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	db11      	blt.n	800e4cc <__any_on+0x32>
 800e4a8:	dd0a      	ble.n	800e4c0 <__any_on+0x26>
 800e4aa:	f011 011f 	ands.w	r1, r1, #31
 800e4ae:	d007      	beq.n	800e4c0 <__any_on+0x26>
 800e4b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4b4:	fa24 f001 	lsr.w	r0, r4, r1
 800e4b8:	fa00 f101 	lsl.w	r1, r0, r1
 800e4bc:	428c      	cmp	r4, r1
 800e4be:	d10b      	bne.n	800e4d8 <__any_on+0x3e>
 800e4c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d803      	bhi.n	800e4d0 <__any_on+0x36>
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	bd10      	pop	{r4, pc}
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	e7f7      	b.n	800e4c0 <__any_on+0x26>
 800e4d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4d4:	2900      	cmp	r1, #0
 800e4d6:	d0f5      	beq.n	800e4c4 <__any_on+0x2a>
 800e4d8:	2001      	movs	r0, #1
 800e4da:	e7f6      	b.n	800e4ca <__any_on+0x30>

0800e4dc <sulp>:
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	4604      	mov	r4, r0
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	ec45 4b10 	vmov	d0, r4, r5
 800e4e6:	4616      	mov	r6, r2
 800e4e8:	f7ff feba 	bl	800e260 <__ulp>
 800e4ec:	ec51 0b10 	vmov	r0, r1, d0
 800e4f0:	b17e      	cbz	r6, 800e512 <sulp+0x36>
 800e4f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e4f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	dd09      	ble.n	800e512 <sulp+0x36>
 800e4fe:	051b      	lsls	r3, r3, #20
 800e500:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e504:	2400      	movs	r4, #0
 800e506:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e50a:	4622      	mov	r2, r4
 800e50c:	462b      	mov	r3, r5
 800e50e:	f7f2 f873 	bl	80005f8 <__aeabi_dmul>
 800e512:	ec41 0b10 	vmov	d0, r0, r1
 800e516:	bd70      	pop	{r4, r5, r6, pc}

0800e518 <_strtod_l>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	b09f      	sub	sp, #124	@ 0x7c
 800e51e:	460c      	mov	r4, r1
 800e520:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e522:	2200      	movs	r2, #0
 800e524:	921a      	str	r2, [sp, #104]	@ 0x68
 800e526:	9005      	str	r0, [sp, #20]
 800e528:	f04f 0a00 	mov.w	sl, #0
 800e52c:	f04f 0b00 	mov.w	fp, #0
 800e530:	460a      	mov	r2, r1
 800e532:	9219      	str	r2, [sp, #100]	@ 0x64
 800e534:	7811      	ldrb	r1, [r2, #0]
 800e536:	292b      	cmp	r1, #43	@ 0x2b
 800e538:	d04a      	beq.n	800e5d0 <_strtod_l+0xb8>
 800e53a:	d838      	bhi.n	800e5ae <_strtod_l+0x96>
 800e53c:	290d      	cmp	r1, #13
 800e53e:	d832      	bhi.n	800e5a6 <_strtod_l+0x8e>
 800e540:	2908      	cmp	r1, #8
 800e542:	d832      	bhi.n	800e5aa <_strtod_l+0x92>
 800e544:	2900      	cmp	r1, #0
 800e546:	d03b      	beq.n	800e5c0 <_strtod_l+0xa8>
 800e548:	2200      	movs	r2, #0
 800e54a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e54c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e54e:	782a      	ldrb	r2, [r5, #0]
 800e550:	2a30      	cmp	r2, #48	@ 0x30
 800e552:	f040 80b3 	bne.w	800e6bc <_strtod_l+0x1a4>
 800e556:	786a      	ldrb	r2, [r5, #1]
 800e558:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e55c:	2a58      	cmp	r2, #88	@ 0x58
 800e55e:	d16e      	bne.n	800e63e <_strtod_l+0x126>
 800e560:	9302      	str	r3, [sp, #8]
 800e562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	ab1a      	add	r3, sp, #104	@ 0x68
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	4a8e      	ldr	r2, [pc, #568]	@ (800e7a4 <_strtod_l+0x28c>)
 800e56c:	9805      	ldr	r0, [sp, #20]
 800e56e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e570:	a919      	add	r1, sp, #100	@ 0x64
 800e572:	f001 fadf 	bl	800fb34 <__gethex>
 800e576:	f010 060f 	ands.w	r6, r0, #15
 800e57a:	4604      	mov	r4, r0
 800e57c:	d005      	beq.n	800e58a <_strtod_l+0x72>
 800e57e:	2e06      	cmp	r6, #6
 800e580:	d128      	bne.n	800e5d4 <_strtod_l+0xbc>
 800e582:	3501      	adds	r5, #1
 800e584:	2300      	movs	r3, #0
 800e586:	9519      	str	r5, [sp, #100]	@ 0x64
 800e588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e58a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f040 858e 	bne.w	800f0ae <_strtod_l+0xb96>
 800e592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e594:	b1cb      	cbz	r3, 800e5ca <_strtod_l+0xb2>
 800e596:	4652      	mov	r2, sl
 800e598:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e59c:	ec43 2b10 	vmov	d0, r2, r3
 800e5a0:	b01f      	add	sp, #124	@ 0x7c
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	2920      	cmp	r1, #32
 800e5a8:	d1ce      	bne.n	800e548 <_strtod_l+0x30>
 800e5aa:	3201      	adds	r2, #1
 800e5ac:	e7c1      	b.n	800e532 <_strtod_l+0x1a>
 800e5ae:	292d      	cmp	r1, #45	@ 0x2d
 800e5b0:	d1ca      	bne.n	800e548 <_strtod_l+0x30>
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e5b6:	1c51      	adds	r1, r2, #1
 800e5b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e5ba:	7852      	ldrb	r2, [r2, #1]
 800e5bc:	2a00      	cmp	r2, #0
 800e5be:	d1c5      	bne.n	800e54c <_strtod_l+0x34>
 800e5c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e5c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f040 8570 	bne.w	800f0aa <_strtod_l+0xb92>
 800e5ca:	4652      	mov	r2, sl
 800e5cc:	465b      	mov	r3, fp
 800e5ce:	e7e5      	b.n	800e59c <_strtod_l+0x84>
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	e7ef      	b.n	800e5b4 <_strtod_l+0x9c>
 800e5d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e5d6:	b13a      	cbz	r2, 800e5e8 <_strtod_l+0xd0>
 800e5d8:	2135      	movs	r1, #53	@ 0x35
 800e5da:	a81c      	add	r0, sp, #112	@ 0x70
 800e5dc:	f7ff ff3a 	bl	800e454 <__copybits>
 800e5e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5e2:	9805      	ldr	r0, [sp, #20]
 800e5e4:	f7ff fb08 	bl	800dbf8 <_Bfree>
 800e5e8:	3e01      	subs	r6, #1
 800e5ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e5ec:	2e04      	cmp	r6, #4
 800e5ee:	d806      	bhi.n	800e5fe <_strtod_l+0xe6>
 800e5f0:	e8df f006 	tbb	[pc, r6]
 800e5f4:	201d0314 	.word	0x201d0314
 800e5f8:	14          	.byte	0x14
 800e5f9:	00          	.byte	0x00
 800e5fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e5fe:	05e1      	lsls	r1, r4, #23
 800e600:	bf48      	it	mi
 800e602:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e60a:	0d1b      	lsrs	r3, r3, #20
 800e60c:	051b      	lsls	r3, r3, #20
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1bb      	bne.n	800e58a <_strtod_l+0x72>
 800e612:	f7fe fb23 	bl	800cc5c <__errno>
 800e616:	2322      	movs	r3, #34	@ 0x22
 800e618:	6003      	str	r3, [r0, #0]
 800e61a:	e7b6      	b.n	800e58a <_strtod_l+0x72>
 800e61c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e620:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e628:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e62c:	e7e7      	b.n	800e5fe <_strtod_l+0xe6>
 800e62e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e7ac <_strtod_l+0x294>
 800e632:	e7e4      	b.n	800e5fe <_strtod_l+0xe6>
 800e634:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e638:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e63c:	e7df      	b.n	800e5fe <_strtod_l+0xe6>
 800e63e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	9219      	str	r2, [sp, #100]	@ 0x64
 800e644:	785b      	ldrb	r3, [r3, #1]
 800e646:	2b30      	cmp	r3, #48	@ 0x30
 800e648:	d0f9      	beq.n	800e63e <_strtod_l+0x126>
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d09d      	beq.n	800e58a <_strtod_l+0x72>
 800e64e:	2301      	movs	r3, #1
 800e650:	9309      	str	r3, [sp, #36]	@ 0x24
 800e652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e654:	930c      	str	r3, [sp, #48]	@ 0x30
 800e656:	2300      	movs	r3, #0
 800e658:	9308      	str	r3, [sp, #32]
 800e65a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e65c:	461f      	mov	r7, r3
 800e65e:	220a      	movs	r2, #10
 800e660:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e662:	7805      	ldrb	r5, [r0, #0]
 800e664:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e668:	b2d9      	uxtb	r1, r3
 800e66a:	2909      	cmp	r1, #9
 800e66c:	d928      	bls.n	800e6c0 <_strtod_l+0x1a8>
 800e66e:	494e      	ldr	r1, [pc, #312]	@ (800e7a8 <_strtod_l+0x290>)
 800e670:	2201      	movs	r2, #1
 800e672:	f001 f979 	bl	800f968 <strncmp>
 800e676:	2800      	cmp	r0, #0
 800e678:	d032      	beq.n	800e6e0 <_strtod_l+0x1c8>
 800e67a:	2000      	movs	r0, #0
 800e67c:	462a      	mov	r2, r5
 800e67e:	4681      	mov	r9, r0
 800e680:	463d      	mov	r5, r7
 800e682:	4603      	mov	r3, r0
 800e684:	2a65      	cmp	r2, #101	@ 0x65
 800e686:	d001      	beq.n	800e68c <_strtod_l+0x174>
 800e688:	2a45      	cmp	r2, #69	@ 0x45
 800e68a:	d114      	bne.n	800e6b6 <_strtod_l+0x19e>
 800e68c:	b91d      	cbnz	r5, 800e696 <_strtod_l+0x17e>
 800e68e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e690:	4302      	orrs	r2, r0
 800e692:	d095      	beq.n	800e5c0 <_strtod_l+0xa8>
 800e694:	2500      	movs	r5, #0
 800e696:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e698:	1c62      	adds	r2, r4, #1
 800e69a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e69c:	7862      	ldrb	r2, [r4, #1]
 800e69e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e6a0:	d077      	beq.n	800e792 <_strtod_l+0x27a>
 800e6a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800e6a4:	d07b      	beq.n	800e79e <_strtod_l+0x286>
 800e6a6:	f04f 0c00 	mov.w	ip, #0
 800e6aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e6ae:	2909      	cmp	r1, #9
 800e6b0:	f240 8082 	bls.w	800e7b8 <_strtod_l+0x2a0>
 800e6b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e6b6:	f04f 0800 	mov.w	r8, #0
 800e6ba:	e0a2      	b.n	800e802 <_strtod_l+0x2ea>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	e7c7      	b.n	800e650 <_strtod_l+0x138>
 800e6c0:	2f08      	cmp	r7, #8
 800e6c2:	bfd5      	itete	le
 800e6c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e6c6:	9908      	ldrgt	r1, [sp, #32]
 800e6c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e6cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e6d0:	f100 0001 	add.w	r0, r0, #1
 800e6d4:	bfd4      	ite	le
 800e6d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e6d8:	9308      	strgt	r3, [sp, #32]
 800e6da:	3701      	adds	r7, #1
 800e6dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800e6de:	e7bf      	b.n	800e660 <_strtod_l+0x148>
 800e6e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6e6:	785a      	ldrb	r2, [r3, #1]
 800e6e8:	b37f      	cbz	r7, 800e74a <_strtod_l+0x232>
 800e6ea:	4681      	mov	r9, r0
 800e6ec:	463d      	mov	r5, r7
 800e6ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e6f2:	2b09      	cmp	r3, #9
 800e6f4:	d912      	bls.n	800e71c <_strtod_l+0x204>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e7c4      	b.n	800e684 <_strtod_l+0x16c>
 800e6fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800e700:	785a      	ldrb	r2, [r3, #1]
 800e702:	3001      	adds	r0, #1
 800e704:	2a30      	cmp	r2, #48	@ 0x30
 800e706:	d0f8      	beq.n	800e6fa <_strtod_l+0x1e2>
 800e708:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e70c:	2b08      	cmp	r3, #8
 800e70e:	f200 84d3 	bhi.w	800f0b8 <_strtod_l+0xba0>
 800e712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e714:	930c      	str	r3, [sp, #48]	@ 0x30
 800e716:	4681      	mov	r9, r0
 800e718:	2000      	movs	r0, #0
 800e71a:	4605      	mov	r5, r0
 800e71c:	3a30      	subs	r2, #48	@ 0x30
 800e71e:	f100 0301 	add.w	r3, r0, #1
 800e722:	d02a      	beq.n	800e77a <_strtod_l+0x262>
 800e724:	4499      	add	r9, r3
 800e726:	eb00 0c05 	add.w	ip, r0, r5
 800e72a:	462b      	mov	r3, r5
 800e72c:	210a      	movs	r1, #10
 800e72e:	4563      	cmp	r3, ip
 800e730:	d10d      	bne.n	800e74e <_strtod_l+0x236>
 800e732:	1c69      	adds	r1, r5, #1
 800e734:	4401      	add	r1, r0
 800e736:	4428      	add	r0, r5
 800e738:	2808      	cmp	r0, #8
 800e73a:	dc16      	bgt.n	800e76a <_strtod_l+0x252>
 800e73c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e73e:	230a      	movs	r3, #10
 800e740:	fb03 2300 	mla	r3, r3, r0, r2
 800e744:	930a      	str	r3, [sp, #40]	@ 0x28
 800e746:	2300      	movs	r3, #0
 800e748:	e018      	b.n	800e77c <_strtod_l+0x264>
 800e74a:	4638      	mov	r0, r7
 800e74c:	e7da      	b.n	800e704 <_strtod_l+0x1ec>
 800e74e:	2b08      	cmp	r3, #8
 800e750:	f103 0301 	add.w	r3, r3, #1
 800e754:	dc03      	bgt.n	800e75e <_strtod_l+0x246>
 800e756:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e758:	434e      	muls	r6, r1
 800e75a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e75c:	e7e7      	b.n	800e72e <_strtod_l+0x216>
 800e75e:	2b10      	cmp	r3, #16
 800e760:	bfde      	ittt	le
 800e762:	9e08      	ldrle	r6, [sp, #32]
 800e764:	434e      	mulle	r6, r1
 800e766:	9608      	strle	r6, [sp, #32]
 800e768:	e7e1      	b.n	800e72e <_strtod_l+0x216>
 800e76a:	280f      	cmp	r0, #15
 800e76c:	dceb      	bgt.n	800e746 <_strtod_l+0x22e>
 800e76e:	9808      	ldr	r0, [sp, #32]
 800e770:	230a      	movs	r3, #10
 800e772:	fb03 2300 	mla	r3, r3, r0, r2
 800e776:	9308      	str	r3, [sp, #32]
 800e778:	e7e5      	b.n	800e746 <_strtod_l+0x22e>
 800e77a:	4629      	mov	r1, r5
 800e77c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e77e:	1c50      	adds	r0, r2, #1
 800e780:	9019      	str	r0, [sp, #100]	@ 0x64
 800e782:	7852      	ldrb	r2, [r2, #1]
 800e784:	4618      	mov	r0, r3
 800e786:	460d      	mov	r5, r1
 800e788:	e7b1      	b.n	800e6ee <_strtod_l+0x1d6>
 800e78a:	f04f 0900 	mov.w	r9, #0
 800e78e:	2301      	movs	r3, #1
 800e790:	e77d      	b.n	800e68e <_strtod_l+0x176>
 800e792:	f04f 0c00 	mov.w	ip, #0
 800e796:	1ca2      	adds	r2, r4, #2
 800e798:	9219      	str	r2, [sp, #100]	@ 0x64
 800e79a:	78a2      	ldrb	r2, [r4, #2]
 800e79c:	e785      	b.n	800e6aa <_strtod_l+0x192>
 800e79e:	f04f 0c01 	mov.w	ip, #1
 800e7a2:	e7f8      	b.n	800e796 <_strtod_l+0x27e>
 800e7a4:	080106e0 	.word	0x080106e0
 800e7a8:	080106c8 	.word	0x080106c8
 800e7ac:	7ff00000 	.word	0x7ff00000
 800e7b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7b2:	1c51      	adds	r1, r2, #1
 800e7b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e7b6:	7852      	ldrb	r2, [r2, #1]
 800e7b8:	2a30      	cmp	r2, #48	@ 0x30
 800e7ba:	d0f9      	beq.n	800e7b0 <_strtod_l+0x298>
 800e7bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e7c0:	2908      	cmp	r1, #8
 800e7c2:	f63f af78 	bhi.w	800e6b6 <_strtod_l+0x19e>
 800e7c6:	3a30      	subs	r2, #48	@ 0x30
 800e7c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e7ce:	f04f 080a 	mov.w	r8, #10
 800e7d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e7d4:	1c56      	adds	r6, r2, #1
 800e7d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800e7d8:	7852      	ldrb	r2, [r2, #1]
 800e7da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e7de:	f1be 0f09 	cmp.w	lr, #9
 800e7e2:	d939      	bls.n	800e858 <_strtod_l+0x340>
 800e7e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e7e6:	1a76      	subs	r6, r6, r1
 800e7e8:	2e08      	cmp	r6, #8
 800e7ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e7ee:	dc03      	bgt.n	800e7f8 <_strtod_l+0x2e0>
 800e7f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e7f2:	4588      	cmp	r8, r1
 800e7f4:	bfa8      	it	ge
 800e7f6:	4688      	movge	r8, r1
 800e7f8:	f1bc 0f00 	cmp.w	ip, #0
 800e7fc:	d001      	beq.n	800e802 <_strtod_l+0x2ea>
 800e7fe:	f1c8 0800 	rsb	r8, r8, #0
 800e802:	2d00      	cmp	r5, #0
 800e804:	d14e      	bne.n	800e8a4 <_strtod_l+0x38c>
 800e806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e808:	4308      	orrs	r0, r1
 800e80a:	f47f aebe 	bne.w	800e58a <_strtod_l+0x72>
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f47f aed6 	bne.w	800e5c0 <_strtod_l+0xa8>
 800e814:	2a69      	cmp	r2, #105	@ 0x69
 800e816:	d028      	beq.n	800e86a <_strtod_l+0x352>
 800e818:	dc25      	bgt.n	800e866 <_strtod_l+0x34e>
 800e81a:	2a49      	cmp	r2, #73	@ 0x49
 800e81c:	d025      	beq.n	800e86a <_strtod_l+0x352>
 800e81e:	2a4e      	cmp	r2, #78	@ 0x4e
 800e820:	f47f aece 	bne.w	800e5c0 <_strtod_l+0xa8>
 800e824:	499b      	ldr	r1, [pc, #620]	@ (800ea94 <_strtod_l+0x57c>)
 800e826:	a819      	add	r0, sp, #100	@ 0x64
 800e828:	f001 fba6 	bl	800ff78 <__match>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	f43f aec7 	beq.w	800e5c0 <_strtod_l+0xa8>
 800e832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	2b28      	cmp	r3, #40	@ 0x28
 800e838:	d12e      	bne.n	800e898 <_strtod_l+0x380>
 800e83a:	4997      	ldr	r1, [pc, #604]	@ (800ea98 <_strtod_l+0x580>)
 800e83c:	aa1c      	add	r2, sp, #112	@ 0x70
 800e83e:	a819      	add	r0, sp, #100	@ 0x64
 800e840:	f001 fbae 	bl	800ffa0 <__hexnan>
 800e844:	2805      	cmp	r0, #5
 800e846:	d127      	bne.n	800e898 <_strtod_l+0x380>
 800e848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e84a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e84e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e852:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e856:	e698      	b.n	800e58a <_strtod_l+0x72>
 800e858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e85a:	fb08 2101 	mla	r1, r8, r1, r2
 800e85e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e862:	920e      	str	r2, [sp, #56]	@ 0x38
 800e864:	e7b5      	b.n	800e7d2 <_strtod_l+0x2ba>
 800e866:	2a6e      	cmp	r2, #110	@ 0x6e
 800e868:	e7da      	b.n	800e820 <_strtod_l+0x308>
 800e86a:	498c      	ldr	r1, [pc, #560]	@ (800ea9c <_strtod_l+0x584>)
 800e86c:	a819      	add	r0, sp, #100	@ 0x64
 800e86e:	f001 fb83 	bl	800ff78 <__match>
 800e872:	2800      	cmp	r0, #0
 800e874:	f43f aea4 	beq.w	800e5c0 <_strtod_l+0xa8>
 800e878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e87a:	4989      	ldr	r1, [pc, #548]	@ (800eaa0 <_strtod_l+0x588>)
 800e87c:	3b01      	subs	r3, #1
 800e87e:	a819      	add	r0, sp, #100	@ 0x64
 800e880:	9319      	str	r3, [sp, #100]	@ 0x64
 800e882:	f001 fb79 	bl	800ff78 <__match>
 800e886:	b910      	cbnz	r0, 800e88e <_strtod_l+0x376>
 800e888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e88a:	3301      	adds	r3, #1
 800e88c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e88e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800eab0 <_strtod_l+0x598>
 800e892:	f04f 0a00 	mov.w	sl, #0
 800e896:	e678      	b.n	800e58a <_strtod_l+0x72>
 800e898:	4882      	ldr	r0, [pc, #520]	@ (800eaa4 <_strtod_l+0x58c>)
 800e89a:	f001 f8a9 	bl	800f9f0 <nan>
 800e89e:	ec5b ab10 	vmov	sl, fp, d0
 800e8a2:	e672      	b.n	800e58a <_strtod_l+0x72>
 800e8a4:	eba8 0309 	sub.w	r3, r8, r9
 800e8a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8ac:	2f00      	cmp	r7, #0
 800e8ae:	bf08      	it	eq
 800e8b0:	462f      	moveq	r7, r5
 800e8b2:	2d10      	cmp	r5, #16
 800e8b4:	462c      	mov	r4, r5
 800e8b6:	bfa8      	it	ge
 800e8b8:	2410      	movge	r4, #16
 800e8ba:	f7f1 fe23 	bl	8000504 <__aeabi_ui2d>
 800e8be:	2d09      	cmp	r5, #9
 800e8c0:	4682      	mov	sl, r0
 800e8c2:	468b      	mov	fp, r1
 800e8c4:	dc13      	bgt.n	800e8ee <_strtod_l+0x3d6>
 800e8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f43f ae5e 	beq.w	800e58a <_strtod_l+0x72>
 800e8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d0:	dd78      	ble.n	800e9c4 <_strtod_l+0x4ac>
 800e8d2:	2b16      	cmp	r3, #22
 800e8d4:	dc5f      	bgt.n	800e996 <_strtod_l+0x47e>
 800e8d6:	4974      	ldr	r1, [pc, #464]	@ (800eaa8 <_strtod_l+0x590>)
 800e8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8e0:	4652      	mov	r2, sl
 800e8e2:	465b      	mov	r3, fp
 800e8e4:	f7f1 fe88 	bl	80005f8 <__aeabi_dmul>
 800e8e8:	4682      	mov	sl, r0
 800e8ea:	468b      	mov	fp, r1
 800e8ec:	e64d      	b.n	800e58a <_strtod_l+0x72>
 800e8ee:	4b6e      	ldr	r3, [pc, #440]	@ (800eaa8 <_strtod_l+0x590>)
 800e8f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	4682      	mov	sl, r0
 800e8fe:	9808      	ldr	r0, [sp, #32]
 800e900:	468b      	mov	fp, r1
 800e902:	f7f1 fdff 	bl	8000504 <__aeabi_ui2d>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	4650      	mov	r0, sl
 800e90c:	4659      	mov	r1, fp
 800e90e:	f7f1 fcbd 	bl	800028c <__adddf3>
 800e912:	2d0f      	cmp	r5, #15
 800e914:	4682      	mov	sl, r0
 800e916:	468b      	mov	fp, r1
 800e918:	ddd5      	ble.n	800e8c6 <_strtod_l+0x3ae>
 800e91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e91c:	1b2c      	subs	r4, r5, r4
 800e91e:	441c      	add	r4, r3
 800e920:	2c00      	cmp	r4, #0
 800e922:	f340 8096 	ble.w	800ea52 <_strtod_l+0x53a>
 800e926:	f014 030f 	ands.w	r3, r4, #15
 800e92a:	d00a      	beq.n	800e942 <_strtod_l+0x42a>
 800e92c:	495e      	ldr	r1, [pc, #376]	@ (800eaa8 <_strtod_l+0x590>)
 800e92e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e932:	4652      	mov	r2, sl
 800e934:	465b      	mov	r3, fp
 800e936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e93a:	f7f1 fe5d 	bl	80005f8 <__aeabi_dmul>
 800e93e:	4682      	mov	sl, r0
 800e940:	468b      	mov	fp, r1
 800e942:	f034 040f 	bics.w	r4, r4, #15
 800e946:	d073      	beq.n	800ea30 <_strtod_l+0x518>
 800e948:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e94c:	dd48      	ble.n	800e9e0 <_strtod_l+0x4c8>
 800e94e:	2400      	movs	r4, #0
 800e950:	46a0      	mov	r8, r4
 800e952:	940a      	str	r4, [sp, #40]	@ 0x28
 800e954:	46a1      	mov	r9, r4
 800e956:	9a05      	ldr	r2, [sp, #20]
 800e958:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eab0 <_strtod_l+0x598>
 800e95c:	2322      	movs	r3, #34	@ 0x22
 800e95e:	6013      	str	r3, [r2, #0]
 800e960:	f04f 0a00 	mov.w	sl, #0
 800e964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e966:	2b00      	cmp	r3, #0
 800e968:	f43f ae0f 	beq.w	800e58a <_strtod_l+0x72>
 800e96c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e96e:	9805      	ldr	r0, [sp, #20]
 800e970:	f7ff f942 	bl	800dbf8 <_Bfree>
 800e974:	9805      	ldr	r0, [sp, #20]
 800e976:	4649      	mov	r1, r9
 800e978:	f7ff f93e 	bl	800dbf8 <_Bfree>
 800e97c:	9805      	ldr	r0, [sp, #20]
 800e97e:	4641      	mov	r1, r8
 800e980:	f7ff f93a 	bl	800dbf8 <_Bfree>
 800e984:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e986:	9805      	ldr	r0, [sp, #20]
 800e988:	f7ff f936 	bl	800dbf8 <_Bfree>
 800e98c:	9805      	ldr	r0, [sp, #20]
 800e98e:	4621      	mov	r1, r4
 800e990:	f7ff f932 	bl	800dbf8 <_Bfree>
 800e994:	e5f9      	b.n	800e58a <_strtod_l+0x72>
 800e996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e998:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e99c:	4293      	cmp	r3, r2
 800e99e:	dbbc      	blt.n	800e91a <_strtod_l+0x402>
 800e9a0:	4c41      	ldr	r4, [pc, #260]	@ (800eaa8 <_strtod_l+0x590>)
 800e9a2:	f1c5 050f 	rsb	r5, r5, #15
 800e9a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e9aa:	4652      	mov	r2, sl
 800e9ac:	465b      	mov	r3, fp
 800e9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9b2:	f7f1 fe21 	bl	80005f8 <__aeabi_dmul>
 800e9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b8:	1b5d      	subs	r5, r3, r5
 800e9ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e9be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e9c2:	e78f      	b.n	800e8e4 <_strtod_l+0x3cc>
 800e9c4:	3316      	adds	r3, #22
 800e9c6:	dba8      	blt.n	800e91a <_strtod_l+0x402>
 800e9c8:	4b37      	ldr	r3, [pc, #220]	@ (800eaa8 <_strtod_l+0x590>)
 800e9ca:	eba9 0808 	sub.w	r8, r9, r8
 800e9ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e9d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e9d6:	4650      	mov	r0, sl
 800e9d8:	4659      	mov	r1, fp
 800e9da:	f7f1 ff37 	bl	800084c <__aeabi_ddiv>
 800e9de:	e783      	b.n	800e8e8 <_strtod_l+0x3d0>
 800e9e0:	4b32      	ldr	r3, [pc, #200]	@ (800eaac <_strtod_l+0x594>)
 800e9e2:	9308      	str	r3, [sp, #32]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	1124      	asrs	r4, r4, #4
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	461e      	mov	r6, r3
 800e9ee:	2c01      	cmp	r4, #1
 800e9f0:	dc21      	bgt.n	800ea36 <_strtod_l+0x51e>
 800e9f2:	b10b      	cbz	r3, 800e9f8 <_strtod_l+0x4e0>
 800e9f4:	4682      	mov	sl, r0
 800e9f6:	468b      	mov	fp, r1
 800e9f8:	492c      	ldr	r1, [pc, #176]	@ (800eaac <_strtod_l+0x594>)
 800e9fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e9fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ea02:	4652      	mov	r2, sl
 800ea04:	465b      	mov	r3, fp
 800ea06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea0a:	f7f1 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ea0e:	4b28      	ldr	r3, [pc, #160]	@ (800eab0 <_strtod_l+0x598>)
 800ea10:	460a      	mov	r2, r1
 800ea12:	400b      	ands	r3, r1
 800ea14:	4927      	ldr	r1, [pc, #156]	@ (800eab4 <_strtod_l+0x59c>)
 800ea16:	428b      	cmp	r3, r1
 800ea18:	4682      	mov	sl, r0
 800ea1a:	d898      	bhi.n	800e94e <_strtod_l+0x436>
 800ea1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ea20:	428b      	cmp	r3, r1
 800ea22:	bf86      	itte	hi
 800ea24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800eab8 <_strtod_l+0x5a0>
 800ea28:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ea2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ea30:	2300      	movs	r3, #0
 800ea32:	9308      	str	r3, [sp, #32]
 800ea34:	e07a      	b.n	800eb2c <_strtod_l+0x614>
 800ea36:	07e2      	lsls	r2, r4, #31
 800ea38:	d505      	bpl.n	800ea46 <_strtod_l+0x52e>
 800ea3a:	9b08      	ldr	r3, [sp, #32]
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	f7f1 fdda 	bl	80005f8 <__aeabi_dmul>
 800ea44:	2301      	movs	r3, #1
 800ea46:	9a08      	ldr	r2, [sp, #32]
 800ea48:	3208      	adds	r2, #8
 800ea4a:	3601      	adds	r6, #1
 800ea4c:	1064      	asrs	r4, r4, #1
 800ea4e:	9208      	str	r2, [sp, #32]
 800ea50:	e7cd      	b.n	800e9ee <_strtod_l+0x4d6>
 800ea52:	d0ed      	beq.n	800ea30 <_strtod_l+0x518>
 800ea54:	4264      	negs	r4, r4
 800ea56:	f014 020f 	ands.w	r2, r4, #15
 800ea5a:	d00a      	beq.n	800ea72 <_strtod_l+0x55a>
 800ea5c:	4b12      	ldr	r3, [pc, #72]	@ (800eaa8 <_strtod_l+0x590>)
 800ea5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea62:	4650      	mov	r0, sl
 800ea64:	4659      	mov	r1, fp
 800ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6a:	f7f1 feef 	bl	800084c <__aeabi_ddiv>
 800ea6e:	4682      	mov	sl, r0
 800ea70:	468b      	mov	fp, r1
 800ea72:	1124      	asrs	r4, r4, #4
 800ea74:	d0dc      	beq.n	800ea30 <_strtod_l+0x518>
 800ea76:	2c1f      	cmp	r4, #31
 800ea78:	dd20      	ble.n	800eabc <_strtod_l+0x5a4>
 800ea7a:	2400      	movs	r4, #0
 800ea7c:	46a0      	mov	r8, r4
 800ea7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ea80:	46a1      	mov	r9, r4
 800ea82:	9a05      	ldr	r2, [sp, #20]
 800ea84:	2322      	movs	r3, #34	@ 0x22
 800ea86:	f04f 0a00 	mov.w	sl, #0
 800ea8a:	f04f 0b00 	mov.w	fp, #0
 800ea8e:	6013      	str	r3, [r2, #0]
 800ea90:	e768      	b.n	800e964 <_strtod_l+0x44c>
 800ea92:	bf00      	nop
 800ea94:	080104b9 	.word	0x080104b9
 800ea98:	080106cc 	.word	0x080106cc
 800ea9c:	080104b1 	.word	0x080104b1
 800eaa0:	080104e8 	.word	0x080104e8
 800eaa4:	08010875 	.word	0x08010875
 800eaa8:	08010600 	.word	0x08010600
 800eaac:	080105d8 	.word	0x080105d8
 800eab0:	7ff00000 	.word	0x7ff00000
 800eab4:	7ca00000 	.word	0x7ca00000
 800eab8:	7fefffff 	.word	0x7fefffff
 800eabc:	f014 0310 	ands.w	r3, r4, #16
 800eac0:	bf18      	it	ne
 800eac2:	236a      	movne	r3, #106	@ 0x6a
 800eac4:	4ea9      	ldr	r6, [pc, #676]	@ (800ed6c <_strtod_l+0x854>)
 800eac6:	9308      	str	r3, [sp, #32]
 800eac8:	4650      	mov	r0, sl
 800eaca:	4659      	mov	r1, fp
 800eacc:	2300      	movs	r3, #0
 800eace:	07e2      	lsls	r2, r4, #31
 800ead0:	d504      	bpl.n	800eadc <_strtod_l+0x5c4>
 800ead2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ead6:	f7f1 fd8f 	bl	80005f8 <__aeabi_dmul>
 800eada:	2301      	movs	r3, #1
 800eadc:	1064      	asrs	r4, r4, #1
 800eade:	f106 0608 	add.w	r6, r6, #8
 800eae2:	d1f4      	bne.n	800eace <_strtod_l+0x5b6>
 800eae4:	b10b      	cbz	r3, 800eaea <_strtod_l+0x5d2>
 800eae6:	4682      	mov	sl, r0
 800eae8:	468b      	mov	fp, r1
 800eaea:	9b08      	ldr	r3, [sp, #32]
 800eaec:	b1b3      	cbz	r3, 800eb1c <_strtod_l+0x604>
 800eaee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800eaf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	4659      	mov	r1, fp
 800eafa:	dd0f      	ble.n	800eb1c <_strtod_l+0x604>
 800eafc:	2b1f      	cmp	r3, #31
 800eafe:	dd55      	ble.n	800ebac <_strtod_l+0x694>
 800eb00:	2b34      	cmp	r3, #52	@ 0x34
 800eb02:	bfde      	ittt	le
 800eb04:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800eb08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eb0c:	4093      	lslle	r3, r2
 800eb0e:	f04f 0a00 	mov.w	sl, #0
 800eb12:	bfcc      	ite	gt
 800eb14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eb18:	ea03 0b01 	andle.w	fp, r3, r1
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	2300      	movs	r3, #0
 800eb20:	4650      	mov	r0, sl
 800eb22:	4659      	mov	r1, fp
 800eb24:	f7f1 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d1a6      	bne.n	800ea7a <_strtod_l+0x562>
 800eb2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eb32:	9805      	ldr	r0, [sp, #20]
 800eb34:	462b      	mov	r3, r5
 800eb36:	463a      	mov	r2, r7
 800eb38:	f7ff f8c6 	bl	800dcc8 <__s2b>
 800eb3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	f43f af05 	beq.w	800e94e <_strtod_l+0x436>
 800eb44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb46:	2a00      	cmp	r2, #0
 800eb48:	eba9 0308 	sub.w	r3, r9, r8
 800eb4c:	bfa8      	it	ge
 800eb4e:	2300      	movge	r3, #0
 800eb50:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb52:	2400      	movs	r4, #0
 800eb54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eb58:	9316      	str	r3, [sp, #88]	@ 0x58
 800eb5a:	46a0      	mov	r8, r4
 800eb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb5e:	9805      	ldr	r0, [sp, #20]
 800eb60:	6859      	ldr	r1, [r3, #4]
 800eb62:	f7ff f809 	bl	800db78 <_Balloc>
 800eb66:	4681      	mov	r9, r0
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	f43f aef4 	beq.w	800e956 <_strtod_l+0x43e>
 800eb6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb70:	691a      	ldr	r2, [r3, #16]
 800eb72:	3202      	adds	r2, #2
 800eb74:	f103 010c 	add.w	r1, r3, #12
 800eb78:	0092      	lsls	r2, r2, #2
 800eb7a:	300c      	adds	r0, #12
 800eb7c:	f7fe f89b 	bl	800ccb6 <memcpy>
 800eb80:	ec4b ab10 	vmov	d0, sl, fp
 800eb84:	9805      	ldr	r0, [sp, #20]
 800eb86:	aa1c      	add	r2, sp, #112	@ 0x70
 800eb88:	a91b      	add	r1, sp, #108	@ 0x6c
 800eb8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800eb8e:	f7ff fbd7 	bl	800e340 <__d2b>
 800eb92:	901a      	str	r0, [sp, #104]	@ 0x68
 800eb94:	2800      	cmp	r0, #0
 800eb96:	f43f aede 	beq.w	800e956 <_strtod_l+0x43e>
 800eb9a:	9805      	ldr	r0, [sp, #20]
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	f7ff f929 	bl	800ddf4 <__i2b>
 800eba2:	4680      	mov	r8, r0
 800eba4:	b948      	cbnz	r0, 800ebba <_strtod_l+0x6a2>
 800eba6:	f04f 0800 	mov.w	r8, #0
 800ebaa:	e6d4      	b.n	800e956 <_strtod_l+0x43e>
 800ebac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ebb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebb4:	ea03 0a0a 	and.w	sl, r3, sl
 800ebb8:	e7b0      	b.n	800eb1c <_strtod_l+0x604>
 800ebba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ebbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ebbe:	2d00      	cmp	r5, #0
 800ebc0:	bfab      	itete	ge
 800ebc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ebc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ebc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ebc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ebca:	bfac      	ite	ge
 800ebcc:	18ef      	addge	r7, r5, r3
 800ebce:	1b5e      	sublt	r6, r3, r5
 800ebd0:	9b08      	ldr	r3, [sp, #32]
 800ebd2:	1aed      	subs	r5, r5, r3
 800ebd4:	4415      	add	r5, r2
 800ebd6:	4b66      	ldr	r3, [pc, #408]	@ (800ed70 <_strtod_l+0x858>)
 800ebd8:	3d01      	subs	r5, #1
 800ebda:	429d      	cmp	r5, r3
 800ebdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ebe0:	da50      	bge.n	800ec84 <_strtod_l+0x76c>
 800ebe2:	1b5b      	subs	r3, r3, r5
 800ebe4:	2b1f      	cmp	r3, #31
 800ebe6:	eba2 0203 	sub.w	r2, r2, r3
 800ebea:	f04f 0101 	mov.w	r1, #1
 800ebee:	dc3d      	bgt.n	800ec6c <_strtod_l+0x754>
 800ebf0:	fa01 f303 	lsl.w	r3, r1, r3
 800ebf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ebfa:	18bd      	adds	r5, r7, r2
 800ebfc:	9b08      	ldr	r3, [sp, #32]
 800ebfe:	42af      	cmp	r7, r5
 800ec00:	4416      	add	r6, r2
 800ec02:	441e      	add	r6, r3
 800ec04:	463b      	mov	r3, r7
 800ec06:	bfa8      	it	ge
 800ec08:	462b      	movge	r3, r5
 800ec0a:	42b3      	cmp	r3, r6
 800ec0c:	bfa8      	it	ge
 800ec0e:	4633      	movge	r3, r6
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	bfc2      	ittt	gt
 800ec14:	1aed      	subgt	r5, r5, r3
 800ec16:	1af6      	subgt	r6, r6, r3
 800ec18:	1aff      	subgt	r7, r7, r3
 800ec1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	dd16      	ble.n	800ec4e <_strtod_l+0x736>
 800ec20:	4641      	mov	r1, r8
 800ec22:	9805      	ldr	r0, [sp, #20]
 800ec24:	461a      	mov	r2, r3
 800ec26:	f7ff f9a5 	bl	800df74 <__pow5mult>
 800ec2a:	4680      	mov	r8, r0
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d0ba      	beq.n	800eba6 <_strtod_l+0x68e>
 800ec30:	4601      	mov	r1, r0
 800ec32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ec34:	9805      	ldr	r0, [sp, #20]
 800ec36:	f7ff f8f3 	bl	800de20 <__multiply>
 800ec3a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f43f ae8a 	beq.w	800e956 <_strtod_l+0x43e>
 800ec42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec44:	9805      	ldr	r0, [sp, #20]
 800ec46:	f7fe ffd7 	bl	800dbf8 <_Bfree>
 800ec4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec4e:	2d00      	cmp	r5, #0
 800ec50:	dc1d      	bgt.n	800ec8e <_strtod_l+0x776>
 800ec52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	dd23      	ble.n	800eca0 <_strtod_l+0x788>
 800ec58:	4649      	mov	r1, r9
 800ec5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ec5c:	9805      	ldr	r0, [sp, #20]
 800ec5e:	f7ff f989 	bl	800df74 <__pow5mult>
 800ec62:	4681      	mov	r9, r0
 800ec64:	b9e0      	cbnz	r0, 800eca0 <_strtod_l+0x788>
 800ec66:	f04f 0900 	mov.w	r9, #0
 800ec6a:	e674      	b.n	800e956 <_strtod_l+0x43e>
 800ec6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ec70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ec74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ec78:	35e2      	adds	r5, #226	@ 0xe2
 800ec7a:	fa01 f305 	lsl.w	r3, r1, r5
 800ec7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec80:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ec82:	e7ba      	b.n	800ebfa <_strtod_l+0x6e2>
 800ec84:	2300      	movs	r3, #0
 800ec86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec88:	2301      	movs	r3, #1
 800ec8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec8c:	e7b5      	b.n	800ebfa <_strtod_l+0x6e2>
 800ec8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec90:	9805      	ldr	r0, [sp, #20]
 800ec92:	462a      	mov	r2, r5
 800ec94:	f7ff f9c8 	bl	800e028 <__lshift>
 800ec98:	901a      	str	r0, [sp, #104]	@ 0x68
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d1d9      	bne.n	800ec52 <_strtod_l+0x73a>
 800ec9e:	e65a      	b.n	800e956 <_strtod_l+0x43e>
 800eca0:	2e00      	cmp	r6, #0
 800eca2:	dd07      	ble.n	800ecb4 <_strtod_l+0x79c>
 800eca4:	4649      	mov	r1, r9
 800eca6:	9805      	ldr	r0, [sp, #20]
 800eca8:	4632      	mov	r2, r6
 800ecaa:	f7ff f9bd 	bl	800e028 <__lshift>
 800ecae:	4681      	mov	r9, r0
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d0d8      	beq.n	800ec66 <_strtod_l+0x74e>
 800ecb4:	2f00      	cmp	r7, #0
 800ecb6:	dd08      	ble.n	800ecca <_strtod_l+0x7b2>
 800ecb8:	4641      	mov	r1, r8
 800ecba:	9805      	ldr	r0, [sp, #20]
 800ecbc:	463a      	mov	r2, r7
 800ecbe:	f7ff f9b3 	bl	800e028 <__lshift>
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f43f ae46 	beq.w	800e956 <_strtod_l+0x43e>
 800ecca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eccc:	9805      	ldr	r0, [sp, #20]
 800ecce:	464a      	mov	r2, r9
 800ecd0:	f7ff fa32 	bl	800e138 <__mdiff>
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f43f ae3d 	beq.w	800e956 <_strtod_l+0x43e>
 800ecdc:	68c3      	ldr	r3, [r0, #12]
 800ecde:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ece0:	2300      	movs	r3, #0
 800ece2:	60c3      	str	r3, [r0, #12]
 800ece4:	4641      	mov	r1, r8
 800ece6:	f7ff fa0b 	bl	800e100 <__mcmp>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	da46      	bge.n	800ed7c <_strtod_l+0x864>
 800ecee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecf0:	ea53 030a 	orrs.w	r3, r3, sl
 800ecf4:	d16c      	bne.n	800edd0 <_strtod_l+0x8b8>
 800ecf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d168      	bne.n	800edd0 <_strtod_l+0x8b8>
 800ecfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed02:	0d1b      	lsrs	r3, r3, #20
 800ed04:	051b      	lsls	r3, r3, #20
 800ed06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed0a:	d961      	bls.n	800edd0 <_strtod_l+0x8b8>
 800ed0c:	6963      	ldr	r3, [r4, #20]
 800ed0e:	b913      	cbnz	r3, 800ed16 <_strtod_l+0x7fe>
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	dd5c      	ble.n	800edd0 <_strtod_l+0x8b8>
 800ed16:	4621      	mov	r1, r4
 800ed18:	2201      	movs	r2, #1
 800ed1a:	9805      	ldr	r0, [sp, #20]
 800ed1c:	f7ff f984 	bl	800e028 <__lshift>
 800ed20:	4641      	mov	r1, r8
 800ed22:	4604      	mov	r4, r0
 800ed24:	f7ff f9ec 	bl	800e100 <__mcmp>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	dd51      	ble.n	800edd0 <_strtod_l+0x8b8>
 800ed2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed30:	9a08      	ldr	r2, [sp, #32]
 800ed32:	0d1b      	lsrs	r3, r3, #20
 800ed34:	051b      	lsls	r3, r3, #20
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	d06b      	beq.n	800ee12 <_strtod_l+0x8fa>
 800ed3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed3e:	d868      	bhi.n	800ee12 <_strtod_l+0x8fa>
 800ed40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ed44:	f67f ae9d 	bls.w	800ea82 <_strtod_l+0x56a>
 800ed48:	4b0a      	ldr	r3, [pc, #40]	@ (800ed74 <_strtod_l+0x85c>)
 800ed4a:	4650      	mov	r0, sl
 800ed4c:	4659      	mov	r1, fp
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f7f1 fc52 	bl	80005f8 <__aeabi_dmul>
 800ed54:	4b08      	ldr	r3, [pc, #32]	@ (800ed78 <_strtod_l+0x860>)
 800ed56:	400b      	ands	r3, r1
 800ed58:	4682      	mov	sl, r0
 800ed5a:	468b      	mov	fp, r1
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f47f ae05 	bne.w	800e96c <_strtod_l+0x454>
 800ed62:	9a05      	ldr	r2, [sp, #20]
 800ed64:	2322      	movs	r3, #34	@ 0x22
 800ed66:	6013      	str	r3, [r2, #0]
 800ed68:	e600      	b.n	800e96c <_strtod_l+0x454>
 800ed6a:	bf00      	nop
 800ed6c:	080106f8 	.word	0x080106f8
 800ed70:	fffffc02 	.word	0xfffffc02
 800ed74:	39500000 	.word	0x39500000
 800ed78:	7ff00000 	.word	0x7ff00000
 800ed7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ed80:	d165      	bne.n	800ee4e <_strtod_l+0x936>
 800ed82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ed84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed88:	b35a      	cbz	r2, 800ede2 <_strtod_l+0x8ca>
 800ed8a:	4a9f      	ldr	r2, [pc, #636]	@ (800f008 <_strtod_l+0xaf0>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d12b      	bne.n	800ede8 <_strtod_l+0x8d0>
 800ed90:	9b08      	ldr	r3, [sp, #32]
 800ed92:	4651      	mov	r1, sl
 800ed94:	b303      	cbz	r3, 800edd8 <_strtod_l+0x8c0>
 800ed96:	4b9d      	ldr	r3, [pc, #628]	@ (800f00c <_strtod_l+0xaf4>)
 800ed98:	465a      	mov	r2, fp
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eda0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eda4:	d81b      	bhi.n	800edde <_strtod_l+0x8c6>
 800eda6:	0d1b      	lsrs	r3, r3, #20
 800eda8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800edac:	fa02 f303 	lsl.w	r3, r2, r3
 800edb0:	4299      	cmp	r1, r3
 800edb2:	d119      	bne.n	800ede8 <_strtod_l+0x8d0>
 800edb4:	4b96      	ldr	r3, [pc, #600]	@ (800f010 <_strtod_l+0xaf8>)
 800edb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edb8:	429a      	cmp	r2, r3
 800edba:	d102      	bne.n	800edc2 <_strtod_l+0x8aa>
 800edbc:	3101      	adds	r1, #1
 800edbe:	f43f adca 	beq.w	800e956 <_strtod_l+0x43e>
 800edc2:	4b92      	ldr	r3, [pc, #584]	@ (800f00c <_strtod_l+0xaf4>)
 800edc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edc6:	401a      	ands	r2, r3
 800edc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800edcc:	f04f 0a00 	mov.w	sl, #0
 800edd0:	9b08      	ldr	r3, [sp, #32]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1b8      	bne.n	800ed48 <_strtod_l+0x830>
 800edd6:	e5c9      	b.n	800e96c <_strtod_l+0x454>
 800edd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eddc:	e7e8      	b.n	800edb0 <_strtod_l+0x898>
 800edde:	4613      	mov	r3, r2
 800ede0:	e7e6      	b.n	800edb0 <_strtod_l+0x898>
 800ede2:	ea53 030a 	orrs.w	r3, r3, sl
 800ede6:	d0a1      	beq.n	800ed2c <_strtod_l+0x814>
 800ede8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800edea:	b1db      	cbz	r3, 800ee24 <_strtod_l+0x90c>
 800edec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edee:	4213      	tst	r3, r2
 800edf0:	d0ee      	beq.n	800edd0 <_strtod_l+0x8b8>
 800edf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edf4:	9a08      	ldr	r2, [sp, #32]
 800edf6:	4650      	mov	r0, sl
 800edf8:	4659      	mov	r1, fp
 800edfa:	b1bb      	cbz	r3, 800ee2c <_strtod_l+0x914>
 800edfc:	f7ff fb6e 	bl	800e4dc <sulp>
 800ee00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee04:	ec53 2b10 	vmov	r2, r3, d0
 800ee08:	f7f1 fa40 	bl	800028c <__adddf3>
 800ee0c:	4682      	mov	sl, r0
 800ee0e:	468b      	mov	fp, r1
 800ee10:	e7de      	b.n	800edd0 <_strtod_l+0x8b8>
 800ee12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ee16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ee1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ee1e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ee22:	e7d5      	b.n	800edd0 <_strtod_l+0x8b8>
 800ee24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee26:	ea13 0f0a 	tst.w	r3, sl
 800ee2a:	e7e1      	b.n	800edf0 <_strtod_l+0x8d8>
 800ee2c:	f7ff fb56 	bl	800e4dc <sulp>
 800ee30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee34:	ec53 2b10 	vmov	r2, r3, d0
 800ee38:	f7f1 fa26 	bl	8000288 <__aeabi_dsub>
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2300      	movs	r3, #0
 800ee40:	4682      	mov	sl, r0
 800ee42:	468b      	mov	fp, r1
 800ee44:	f7f1 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d0c1      	beq.n	800edd0 <_strtod_l+0x8b8>
 800ee4c:	e619      	b.n	800ea82 <_strtod_l+0x56a>
 800ee4e:	4641      	mov	r1, r8
 800ee50:	4620      	mov	r0, r4
 800ee52:	f7ff facd 	bl	800e3f0 <__ratio>
 800ee56:	ec57 6b10 	vmov	r6, r7, d0
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ee60:	4630      	mov	r0, r6
 800ee62:	4639      	mov	r1, r7
 800ee64:	f7f1 fe44 	bl	8000af0 <__aeabi_dcmple>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d06f      	beq.n	800ef4c <_strtod_l+0xa34>
 800ee6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d17a      	bne.n	800ef68 <_strtod_l+0xa50>
 800ee72:	f1ba 0f00 	cmp.w	sl, #0
 800ee76:	d158      	bne.n	800ef2a <_strtod_l+0xa12>
 800ee78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d15a      	bne.n	800ef38 <_strtod_l+0xa20>
 800ee82:	4b64      	ldr	r3, [pc, #400]	@ (800f014 <_strtod_l+0xafc>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	4630      	mov	r0, r6
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f7f1 fe27 	bl	8000adc <__aeabi_dcmplt>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d159      	bne.n	800ef46 <_strtod_l+0xa2e>
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	4b60      	ldr	r3, [pc, #384]	@ (800f018 <_strtod_l+0xb00>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	f7f1 fbad 	bl	80005f8 <__aeabi_dmul>
 800ee9e:	4606      	mov	r6, r0
 800eea0:	460f      	mov	r7, r1
 800eea2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eea6:	9606      	str	r6, [sp, #24]
 800eea8:	9307      	str	r3, [sp, #28]
 800eeaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eeae:	4d57      	ldr	r5, [pc, #348]	@ (800f00c <_strtod_l+0xaf4>)
 800eeb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eeb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeb6:	401d      	ands	r5, r3
 800eeb8:	4b58      	ldr	r3, [pc, #352]	@ (800f01c <_strtod_l+0xb04>)
 800eeba:	429d      	cmp	r5, r3
 800eebc:	f040 80b2 	bne.w	800f024 <_strtod_l+0xb0c>
 800eec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eec2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eec6:	ec4b ab10 	vmov	d0, sl, fp
 800eeca:	f7ff f9c9 	bl	800e260 <__ulp>
 800eece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eed2:	ec51 0b10 	vmov	r0, r1, d0
 800eed6:	f7f1 fb8f 	bl	80005f8 <__aeabi_dmul>
 800eeda:	4652      	mov	r2, sl
 800eedc:	465b      	mov	r3, fp
 800eede:	f7f1 f9d5 	bl	800028c <__adddf3>
 800eee2:	460b      	mov	r3, r1
 800eee4:	4949      	ldr	r1, [pc, #292]	@ (800f00c <_strtod_l+0xaf4>)
 800eee6:	4a4e      	ldr	r2, [pc, #312]	@ (800f020 <_strtod_l+0xb08>)
 800eee8:	4019      	ands	r1, r3
 800eeea:	4291      	cmp	r1, r2
 800eeec:	4682      	mov	sl, r0
 800eeee:	d942      	bls.n	800ef76 <_strtod_l+0xa5e>
 800eef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eef2:	4b47      	ldr	r3, [pc, #284]	@ (800f010 <_strtod_l+0xaf8>)
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d103      	bne.n	800ef00 <_strtod_l+0x9e8>
 800eef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eefa:	3301      	adds	r3, #1
 800eefc:	f43f ad2b 	beq.w	800e956 <_strtod_l+0x43e>
 800ef00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f010 <_strtod_l+0xaf8>
 800ef04:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ef08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef0a:	9805      	ldr	r0, [sp, #20]
 800ef0c:	f7fe fe74 	bl	800dbf8 <_Bfree>
 800ef10:	9805      	ldr	r0, [sp, #20]
 800ef12:	4649      	mov	r1, r9
 800ef14:	f7fe fe70 	bl	800dbf8 <_Bfree>
 800ef18:	9805      	ldr	r0, [sp, #20]
 800ef1a:	4641      	mov	r1, r8
 800ef1c:	f7fe fe6c 	bl	800dbf8 <_Bfree>
 800ef20:	9805      	ldr	r0, [sp, #20]
 800ef22:	4621      	mov	r1, r4
 800ef24:	f7fe fe68 	bl	800dbf8 <_Bfree>
 800ef28:	e618      	b.n	800eb5c <_strtod_l+0x644>
 800ef2a:	f1ba 0f01 	cmp.w	sl, #1
 800ef2e:	d103      	bne.n	800ef38 <_strtod_l+0xa20>
 800ef30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f43f ada5 	beq.w	800ea82 <_strtod_l+0x56a>
 800ef38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800efe8 <_strtod_l+0xad0>
 800ef3c:	4f35      	ldr	r7, [pc, #212]	@ (800f014 <_strtod_l+0xafc>)
 800ef3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef42:	2600      	movs	r6, #0
 800ef44:	e7b1      	b.n	800eeaa <_strtod_l+0x992>
 800ef46:	4f34      	ldr	r7, [pc, #208]	@ (800f018 <_strtod_l+0xb00>)
 800ef48:	2600      	movs	r6, #0
 800ef4a:	e7aa      	b.n	800eea2 <_strtod_l+0x98a>
 800ef4c:	4b32      	ldr	r3, [pc, #200]	@ (800f018 <_strtod_l+0xb00>)
 800ef4e:	4630      	mov	r0, r6
 800ef50:	4639      	mov	r1, r7
 800ef52:	2200      	movs	r2, #0
 800ef54:	f7f1 fb50 	bl	80005f8 <__aeabi_dmul>
 800ef58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	460f      	mov	r7, r1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d09f      	beq.n	800eea2 <_strtod_l+0x98a>
 800ef62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ef66:	e7a0      	b.n	800eeaa <_strtod_l+0x992>
 800ef68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eff0 <_strtod_l+0xad8>
 800ef6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef70:	ec57 6b17 	vmov	r6, r7, d7
 800ef74:	e799      	b.n	800eeaa <_strtod_l+0x992>
 800ef76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ef7a:	9b08      	ldr	r3, [sp, #32]
 800ef7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1c1      	bne.n	800ef08 <_strtod_l+0x9f0>
 800ef84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef88:	0d1b      	lsrs	r3, r3, #20
 800ef8a:	051b      	lsls	r3, r3, #20
 800ef8c:	429d      	cmp	r5, r3
 800ef8e:	d1bb      	bne.n	800ef08 <_strtod_l+0x9f0>
 800ef90:	4630      	mov	r0, r6
 800ef92:	4639      	mov	r1, r7
 800ef94:	f7f1 fe90 	bl	8000cb8 <__aeabi_d2lz>
 800ef98:	f7f1 fb00 	bl	800059c <__aeabi_l2d>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	4630      	mov	r0, r6
 800efa2:	4639      	mov	r1, r7
 800efa4:	f7f1 f970 	bl	8000288 <__aeabi_dsub>
 800efa8:	460b      	mov	r3, r1
 800efaa:	4602      	mov	r2, r0
 800efac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800efb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800efb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efb6:	ea46 060a 	orr.w	r6, r6, sl
 800efba:	431e      	orrs	r6, r3
 800efbc:	d06f      	beq.n	800f09e <_strtod_l+0xb86>
 800efbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800eff8 <_strtod_l+0xae0>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 fd8a 	bl	8000adc <__aeabi_dcmplt>
 800efc8:	2800      	cmp	r0, #0
 800efca:	f47f accf 	bne.w	800e96c <_strtod_l+0x454>
 800efce:	a30c      	add	r3, pc, #48	@ (adr r3, 800f000 <_strtod_l+0xae8>)
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efd8:	f7f1 fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d093      	beq.n	800ef08 <_strtod_l+0x9f0>
 800efe0:	e4c4      	b.n	800e96c <_strtod_l+0x454>
 800efe2:	bf00      	nop
 800efe4:	f3af 8000 	nop.w
 800efe8:	00000000 	.word	0x00000000
 800efec:	bff00000 	.word	0xbff00000
 800eff0:	00000000 	.word	0x00000000
 800eff4:	3ff00000 	.word	0x3ff00000
 800eff8:	94a03595 	.word	0x94a03595
 800effc:	3fdfffff 	.word	0x3fdfffff
 800f000:	35afe535 	.word	0x35afe535
 800f004:	3fe00000 	.word	0x3fe00000
 800f008:	000fffff 	.word	0x000fffff
 800f00c:	7ff00000 	.word	0x7ff00000
 800f010:	7fefffff 	.word	0x7fefffff
 800f014:	3ff00000 	.word	0x3ff00000
 800f018:	3fe00000 	.word	0x3fe00000
 800f01c:	7fe00000 	.word	0x7fe00000
 800f020:	7c9fffff 	.word	0x7c9fffff
 800f024:	9b08      	ldr	r3, [sp, #32]
 800f026:	b323      	cbz	r3, 800f072 <_strtod_l+0xb5a>
 800f028:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f02c:	d821      	bhi.n	800f072 <_strtod_l+0xb5a>
 800f02e:	a328      	add	r3, pc, #160	@ (adr r3, 800f0d0 <_strtod_l+0xbb8>)
 800f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f034:	4630      	mov	r0, r6
 800f036:	4639      	mov	r1, r7
 800f038:	f7f1 fd5a 	bl	8000af0 <__aeabi_dcmple>
 800f03c:	b1a0      	cbz	r0, 800f068 <_strtod_l+0xb50>
 800f03e:	4639      	mov	r1, r7
 800f040:	4630      	mov	r0, r6
 800f042:	f7f1 fdb1 	bl	8000ba8 <__aeabi_d2uiz>
 800f046:	2801      	cmp	r0, #1
 800f048:	bf38      	it	cc
 800f04a:	2001      	movcc	r0, #1
 800f04c:	f7f1 fa5a 	bl	8000504 <__aeabi_ui2d>
 800f050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f052:	4606      	mov	r6, r0
 800f054:	460f      	mov	r7, r1
 800f056:	b9fb      	cbnz	r3, 800f098 <_strtod_l+0xb80>
 800f058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f05c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f05e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f060:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f064:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f06a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f06e:	1b5b      	subs	r3, r3, r5
 800f070:	9311      	str	r3, [sp, #68]	@ 0x44
 800f072:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f076:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f07a:	f7ff f8f1 	bl	800e260 <__ulp>
 800f07e:	4650      	mov	r0, sl
 800f080:	ec53 2b10 	vmov	r2, r3, d0
 800f084:	4659      	mov	r1, fp
 800f086:	f7f1 fab7 	bl	80005f8 <__aeabi_dmul>
 800f08a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f08e:	f7f1 f8fd 	bl	800028c <__adddf3>
 800f092:	4682      	mov	sl, r0
 800f094:	468b      	mov	fp, r1
 800f096:	e770      	b.n	800ef7a <_strtod_l+0xa62>
 800f098:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f09c:	e7e0      	b.n	800f060 <_strtod_l+0xb48>
 800f09e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f0d8 <_strtod_l+0xbc0>)
 800f0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a4:	f7f1 fd1a 	bl	8000adc <__aeabi_dcmplt>
 800f0a8:	e798      	b.n	800efdc <_strtod_l+0xac4>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f0b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0b2:	6013      	str	r3, [r2, #0]
 800f0b4:	f7ff ba6d 	b.w	800e592 <_strtod_l+0x7a>
 800f0b8:	2a65      	cmp	r2, #101	@ 0x65
 800f0ba:	f43f ab66 	beq.w	800e78a <_strtod_l+0x272>
 800f0be:	2a45      	cmp	r2, #69	@ 0x45
 800f0c0:	f43f ab63 	beq.w	800e78a <_strtod_l+0x272>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	f7ff bb9e 	b.w	800e806 <_strtod_l+0x2ee>
 800f0ca:	bf00      	nop
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	ffc00000 	.word	0xffc00000
 800f0d4:	41dfffff 	.word	0x41dfffff
 800f0d8:	94a03595 	.word	0x94a03595
 800f0dc:	3fcfffff 	.word	0x3fcfffff

0800f0e0 <_strtod_r>:
 800f0e0:	4b01      	ldr	r3, [pc, #4]	@ (800f0e8 <_strtod_r+0x8>)
 800f0e2:	f7ff ba19 	b.w	800e518 <_strtod_l>
 800f0e6:	bf00      	nop
 800f0e8:	20000078 	.word	0x20000078

0800f0ec <_strtol_l.constprop.0>:
 800f0ec:	2b24      	cmp	r3, #36	@ 0x24
 800f0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f2:	4686      	mov	lr, r0
 800f0f4:	4690      	mov	r8, r2
 800f0f6:	d801      	bhi.n	800f0fc <_strtol_l.constprop.0+0x10>
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d106      	bne.n	800f10a <_strtol_l.constprop.0+0x1e>
 800f0fc:	f7fd fdae 	bl	800cc5c <__errno>
 800f100:	2316      	movs	r3, #22
 800f102:	6003      	str	r3, [r0, #0]
 800f104:	2000      	movs	r0, #0
 800f106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10a:	4834      	ldr	r0, [pc, #208]	@ (800f1dc <_strtol_l.constprop.0+0xf0>)
 800f10c:	460d      	mov	r5, r1
 800f10e:	462a      	mov	r2, r5
 800f110:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f114:	5d06      	ldrb	r6, [r0, r4]
 800f116:	f016 0608 	ands.w	r6, r6, #8
 800f11a:	d1f8      	bne.n	800f10e <_strtol_l.constprop.0+0x22>
 800f11c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f11e:	d12d      	bne.n	800f17c <_strtol_l.constprop.0+0x90>
 800f120:	782c      	ldrb	r4, [r5, #0]
 800f122:	2601      	movs	r6, #1
 800f124:	1c95      	adds	r5, r2, #2
 800f126:	f033 0210 	bics.w	r2, r3, #16
 800f12a:	d109      	bne.n	800f140 <_strtol_l.constprop.0+0x54>
 800f12c:	2c30      	cmp	r4, #48	@ 0x30
 800f12e:	d12a      	bne.n	800f186 <_strtol_l.constprop.0+0x9a>
 800f130:	782a      	ldrb	r2, [r5, #0]
 800f132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f136:	2a58      	cmp	r2, #88	@ 0x58
 800f138:	d125      	bne.n	800f186 <_strtol_l.constprop.0+0x9a>
 800f13a:	786c      	ldrb	r4, [r5, #1]
 800f13c:	2310      	movs	r3, #16
 800f13e:	3502      	adds	r5, #2
 800f140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f144:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f148:	2200      	movs	r2, #0
 800f14a:	fbbc f9f3 	udiv	r9, ip, r3
 800f14e:	4610      	mov	r0, r2
 800f150:	fb03 ca19 	mls	sl, r3, r9, ip
 800f154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f158:	2f09      	cmp	r7, #9
 800f15a:	d81b      	bhi.n	800f194 <_strtol_l.constprop.0+0xa8>
 800f15c:	463c      	mov	r4, r7
 800f15e:	42a3      	cmp	r3, r4
 800f160:	dd27      	ble.n	800f1b2 <_strtol_l.constprop.0+0xc6>
 800f162:	1c57      	adds	r7, r2, #1
 800f164:	d007      	beq.n	800f176 <_strtol_l.constprop.0+0x8a>
 800f166:	4581      	cmp	r9, r0
 800f168:	d320      	bcc.n	800f1ac <_strtol_l.constprop.0+0xc0>
 800f16a:	d101      	bne.n	800f170 <_strtol_l.constprop.0+0x84>
 800f16c:	45a2      	cmp	sl, r4
 800f16e:	db1d      	blt.n	800f1ac <_strtol_l.constprop.0+0xc0>
 800f170:	fb00 4003 	mla	r0, r0, r3, r4
 800f174:	2201      	movs	r2, #1
 800f176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f17a:	e7eb      	b.n	800f154 <_strtol_l.constprop.0+0x68>
 800f17c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f17e:	bf04      	itt	eq
 800f180:	782c      	ldrbeq	r4, [r5, #0]
 800f182:	1c95      	addeq	r5, r2, #2
 800f184:	e7cf      	b.n	800f126 <_strtol_l.constprop.0+0x3a>
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1da      	bne.n	800f140 <_strtol_l.constprop.0+0x54>
 800f18a:	2c30      	cmp	r4, #48	@ 0x30
 800f18c:	bf0c      	ite	eq
 800f18e:	2308      	moveq	r3, #8
 800f190:	230a      	movne	r3, #10
 800f192:	e7d5      	b.n	800f140 <_strtol_l.constprop.0+0x54>
 800f194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f198:	2f19      	cmp	r7, #25
 800f19a:	d801      	bhi.n	800f1a0 <_strtol_l.constprop.0+0xb4>
 800f19c:	3c37      	subs	r4, #55	@ 0x37
 800f19e:	e7de      	b.n	800f15e <_strtol_l.constprop.0+0x72>
 800f1a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1a4:	2f19      	cmp	r7, #25
 800f1a6:	d804      	bhi.n	800f1b2 <_strtol_l.constprop.0+0xc6>
 800f1a8:	3c57      	subs	r4, #87	@ 0x57
 800f1aa:	e7d8      	b.n	800f15e <_strtol_l.constprop.0+0x72>
 800f1ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1b0:	e7e1      	b.n	800f176 <_strtol_l.constprop.0+0x8a>
 800f1b2:	1c53      	adds	r3, r2, #1
 800f1b4:	d108      	bne.n	800f1c8 <_strtol_l.constprop.0+0xdc>
 800f1b6:	2322      	movs	r3, #34	@ 0x22
 800f1b8:	f8ce 3000 	str.w	r3, [lr]
 800f1bc:	4660      	mov	r0, ip
 800f1be:	f1b8 0f00 	cmp.w	r8, #0
 800f1c2:	d0a0      	beq.n	800f106 <_strtol_l.constprop.0+0x1a>
 800f1c4:	1e69      	subs	r1, r5, #1
 800f1c6:	e006      	b.n	800f1d6 <_strtol_l.constprop.0+0xea>
 800f1c8:	b106      	cbz	r6, 800f1cc <_strtol_l.constprop.0+0xe0>
 800f1ca:	4240      	negs	r0, r0
 800f1cc:	f1b8 0f00 	cmp.w	r8, #0
 800f1d0:	d099      	beq.n	800f106 <_strtol_l.constprop.0+0x1a>
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d1f6      	bne.n	800f1c4 <_strtol_l.constprop.0+0xd8>
 800f1d6:	f8c8 1000 	str.w	r1, [r8]
 800f1da:	e794      	b.n	800f106 <_strtol_l.constprop.0+0x1a>
 800f1dc:	08010721 	.word	0x08010721

0800f1e0 <_strtol_r>:
 800f1e0:	f7ff bf84 	b.w	800f0ec <_strtol_l.constprop.0>

0800f1e4 <__ssputs_r>:
 800f1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e8:	688e      	ldr	r6, [r1, #8]
 800f1ea:	461f      	mov	r7, r3
 800f1ec:	42be      	cmp	r6, r7
 800f1ee:	680b      	ldr	r3, [r1, #0]
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	4690      	mov	r8, r2
 800f1f6:	d82d      	bhi.n	800f254 <__ssputs_r+0x70>
 800f1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f200:	d026      	beq.n	800f250 <__ssputs_r+0x6c>
 800f202:	6965      	ldr	r5, [r4, #20]
 800f204:	6909      	ldr	r1, [r1, #16]
 800f206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f20a:	eba3 0901 	sub.w	r9, r3, r1
 800f20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f212:	1c7b      	adds	r3, r7, #1
 800f214:	444b      	add	r3, r9
 800f216:	106d      	asrs	r5, r5, #1
 800f218:	429d      	cmp	r5, r3
 800f21a:	bf38      	it	cc
 800f21c:	461d      	movcc	r5, r3
 800f21e:	0553      	lsls	r3, r2, #21
 800f220:	d527      	bpl.n	800f272 <__ssputs_r+0x8e>
 800f222:	4629      	mov	r1, r5
 800f224:	f7fe fc1c 	bl	800da60 <_malloc_r>
 800f228:	4606      	mov	r6, r0
 800f22a:	b360      	cbz	r0, 800f286 <__ssputs_r+0xa2>
 800f22c:	6921      	ldr	r1, [r4, #16]
 800f22e:	464a      	mov	r2, r9
 800f230:	f7fd fd41 	bl	800ccb6 <memcpy>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f23e:	81a3      	strh	r3, [r4, #12]
 800f240:	6126      	str	r6, [r4, #16]
 800f242:	6165      	str	r5, [r4, #20]
 800f244:	444e      	add	r6, r9
 800f246:	eba5 0509 	sub.w	r5, r5, r9
 800f24a:	6026      	str	r6, [r4, #0]
 800f24c:	60a5      	str	r5, [r4, #8]
 800f24e:	463e      	mov	r6, r7
 800f250:	42be      	cmp	r6, r7
 800f252:	d900      	bls.n	800f256 <__ssputs_r+0x72>
 800f254:	463e      	mov	r6, r7
 800f256:	6820      	ldr	r0, [r4, #0]
 800f258:	4632      	mov	r2, r6
 800f25a:	4641      	mov	r1, r8
 800f25c:	f000 fb6a 	bl	800f934 <memmove>
 800f260:	68a3      	ldr	r3, [r4, #8]
 800f262:	1b9b      	subs	r3, r3, r6
 800f264:	60a3      	str	r3, [r4, #8]
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	4433      	add	r3, r6
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	2000      	movs	r0, #0
 800f26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f272:	462a      	mov	r2, r5
 800f274:	f000 ff41 	bl	80100fa <_realloc_r>
 800f278:	4606      	mov	r6, r0
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d1e0      	bne.n	800f240 <__ssputs_r+0x5c>
 800f27e:	6921      	ldr	r1, [r4, #16]
 800f280:	4650      	mov	r0, sl
 800f282:	f7fe fb79 	bl	800d978 <_free_r>
 800f286:	230c      	movs	r3, #12
 800f288:	f8ca 3000 	str.w	r3, [sl]
 800f28c:	89a3      	ldrh	r3, [r4, #12]
 800f28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f298:	e7e9      	b.n	800f26e <__ssputs_r+0x8a>
	...

0800f29c <_svfiprintf_r>:
 800f29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a0:	4698      	mov	r8, r3
 800f2a2:	898b      	ldrh	r3, [r1, #12]
 800f2a4:	061b      	lsls	r3, r3, #24
 800f2a6:	b09d      	sub	sp, #116	@ 0x74
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	460d      	mov	r5, r1
 800f2ac:	4614      	mov	r4, r2
 800f2ae:	d510      	bpl.n	800f2d2 <_svfiprintf_r+0x36>
 800f2b0:	690b      	ldr	r3, [r1, #16]
 800f2b2:	b973      	cbnz	r3, 800f2d2 <_svfiprintf_r+0x36>
 800f2b4:	2140      	movs	r1, #64	@ 0x40
 800f2b6:	f7fe fbd3 	bl	800da60 <_malloc_r>
 800f2ba:	6028      	str	r0, [r5, #0]
 800f2bc:	6128      	str	r0, [r5, #16]
 800f2be:	b930      	cbnz	r0, 800f2ce <_svfiprintf_r+0x32>
 800f2c0:	230c      	movs	r3, #12
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2c8:	b01d      	add	sp, #116	@ 0x74
 800f2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ce:	2340      	movs	r3, #64	@ 0x40
 800f2d0:	616b      	str	r3, [r5, #20]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2d6:	2320      	movs	r3, #32
 800f2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e0:	2330      	movs	r3, #48	@ 0x30
 800f2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f480 <_svfiprintf_r+0x1e4>
 800f2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2ea:	f04f 0901 	mov.w	r9, #1
 800f2ee:	4623      	mov	r3, r4
 800f2f0:	469a      	mov	sl, r3
 800f2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2f6:	b10a      	cbz	r2, 800f2fc <_svfiprintf_r+0x60>
 800f2f8:	2a25      	cmp	r2, #37	@ 0x25
 800f2fa:	d1f9      	bne.n	800f2f0 <_svfiprintf_r+0x54>
 800f2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800f300:	d00b      	beq.n	800f31a <_svfiprintf_r+0x7e>
 800f302:	465b      	mov	r3, fp
 800f304:	4622      	mov	r2, r4
 800f306:	4629      	mov	r1, r5
 800f308:	4638      	mov	r0, r7
 800f30a:	f7ff ff6b 	bl	800f1e4 <__ssputs_r>
 800f30e:	3001      	adds	r0, #1
 800f310:	f000 80a7 	beq.w	800f462 <_svfiprintf_r+0x1c6>
 800f314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f316:	445a      	add	r2, fp
 800f318:	9209      	str	r2, [sp, #36]	@ 0x24
 800f31a:	f89a 3000 	ldrb.w	r3, [sl]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f000 809f 	beq.w	800f462 <_svfiprintf_r+0x1c6>
 800f324:	2300      	movs	r3, #0
 800f326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f32e:	f10a 0a01 	add.w	sl, sl, #1
 800f332:	9304      	str	r3, [sp, #16]
 800f334:	9307      	str	r3, [sp, #28]
 800f336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f33c:	4654      	mov	r4, sl
 800f33e:	2205      	movs	r2, #5
 800f340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f344:	484e      	ldr	r0, [pc, #312]	@ (800f480 <_svfiprintf_r+0x1e4>)
 800f346:	f7f0 ff43 	bl	80001d0 <memchr>
 800f34a:	9a04      	ldr	r2, [sp, #16]
 800f34c:	b9d8      	cbnz	r0, 800f386 <_svfiprintf_r+0xea>
 800f34e:	06d0      	lsls	r0, r2, #27
 800f350:	bf44      	itt	mi
 800f352:	2320      	movmi	r3, #32
 800f354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f358:	0711      	lsls	r1, r2, #28
 800f35a:	bf44      	itt	mi
 800f35c:	232b      	movmi	r3, #43	@ 0x2b
 800f35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f362:	f89a 3000 	ldrb.w	r3, [sl]
 800f366:	2b2a      	cmp	r3, #42	@ 0x2a
 800f368:	d015      	beq.n	800f396 <_svfiprintf_r+0xfa>
 800f36a:	9a07      	ldr	r2, [sp, #28]
 800f36c:	4654      	mov	r4, sl
 800f36e:	2000      	movs	r0, #0
 800f370:	f04f 0c0a 	mov.w	ip, #10
 800f374:	4621      	mov	r1, r4
 800f376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f37a:	3b30      	subs	r3, #48	@ 0x30
 800f37c:	2b09      	cmp	r3, #9
 800f37e:	d94b      	bls.n	800f418 <_svfiprintf_r+0x17c>
 800f380:	b1b0      	cbz	r0, 800f3b0 <_svfiprintf_r+0x114>
 800f382:	9207      	str	r2, [sp, #28]
 800f384:	e014      	b.n	800f3b0 <_svfiprintf_r+0x114>
 800f386:	eba0 0308 	sub.w	r3, r0, r8
 800f38a:	fa09 f303 	lsl.w	r3, r9, r3
 800f38e:	4313      	orrs	r3, r2
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	46a2      	mov	sl, r4
 800f394:	e7d2      	b.n	800f33c <_svfiprintf_r+0xa0>
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	1d19      	adds	r1, r3, #4
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	9103      	str	r1, [sp, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	bfbb      	ittet	lt
 800f3a2:	425b      	neglt	r3, r3
 800f3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3a8:	9307      	strge	r3, [sp, #28]
 800f3aa:	9307      	strlt	r3, [sp, #28]
 800f3ac:	bfb8      	it	lt
 800f3ae:	9204      	strlt	r2, [sp, #16]
 800f3b0:	7823      	ldrb	r3, [r4, #0]
 800f3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3b4:	d10a      	bne.n	800f3cc <_svfiprintf_r+0x130>
 800f3b6:	7863      	ldrb	r3, [r4, #1]
 800f3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3ba:	d132      	bne.n	800f422 <_svfiprintf_r+0x186>
 800f3bc:	9b03      	ldr	r3, [sp, #12]
 800f3be:	1d1a      	adds	r2, r3, #4
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	9203      	str	r2, [sp, #12]
 800f3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3c8:	3402      	adds	r4, #2
 800f3ca:	9305      	str	r3, [sp, #20]
 800f3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f490 <_svfiprintf_r+0x1f4>
 800f3d0:	7821      	ldrb	r1, [r4, #0]
 800f3d2:	2203      	movs	r2, #3
 800f3d4:	4650      	mov	r0, sl
 800f3d6:	f7f0 fefb 	bl	80001d0 <memchr>
 800f3da:	b138      	cbz	r0, 800f3ec <_svfiprintf_r+0x150>
 800f3dc:	9b04      	ldr	r3, [sp, #16]
 800f3de:	eba0 000a 	sub.w	r0, r0, sl
 800f3e2:	2240      	movs	r2, #64	@ 0x40
 800f3e4:	4082      	lsls	r2, r0
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	3401      	adds	r4, #1
 800f3ea:	9304      	str	r3, [sp, #16]
 800f3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f0:	4824      	ldr	r0, [pc, #144]	@ (800f484 <_svfiprintf_r+0x1e8>)
 800f3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3f6:	2206      	movs	r2, #6
 800f3f8:	f7f0 feea 	bl	80001d0 <memchr>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d036      	beq.n	800f46e <_svfiprintf_r+0x1d2>
 800f400:	4b21      	ldr	r3, [pc, #132]	@ (800f488 <_svfiprintf_r+0x1ec>)
 800f402:	bb1b      	cbnz	r3, 800f44c <_svfiprintf_r+0x1b0>
 800f404:	9b03      	ldr	r3, [sp, #12]
 800f406:	3307      	adds	r3, #7
 800f408:	f023 0307 	bic.w	r3, r3, #7
 800f40c:	3308      	adds	r3, #8
 800f40e:	9303      	str	r3, [sp, #12]
 800f410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f412:	4433      	add	r3, r6
 800f414:	9309      	str	r3, [sp, #36]	@ 0x24
 800f416:	e76a      	b.n	800f2ee <_svfiprintf_r+0x52>
 800f418:	fb0c 3202 	mla	r2, ip, r2, r3
 800f41c:	460c      	mov	r4, r1
 800f41e:	2001      	movs	r0, #1
 800f420:	e7a8      	b.n	800f374 <_svfiprintf_r+0xd8>
 800f422:	2300      	movs	r3, #0
 800f424:	3401      	adds	r4, #1
 800f426:	9305      	str	r3, [sp, #20]
 800f428:	4619      	mov	r1, r3
 800f42a:	f04f 0c0a 	mov.w	ip, #10
 800f42e:	4620      	mov	r0, r4
 800f430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f434:	3a30      	subs	r2, #48	@ 0x30
 800f436:	2a09      	cmp	r2, #9
 800f438:	d903      	bls.n	800f442 <_svfiprintf_r+0x1a6>
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d0c6      	beq.n	800f3cc <_svfiprintf_r+0x130>
 800f43e:	9105      	str	r1, [sp, #20]
 800f440:	e7c4      	b.n	800f3cc <_svfiprintf_r+0x130>
 800f442:	fb0c 2101 	mla	r1, ip, r1, r2
 800f446:	4604      	mov	r4, r0
 800f448:	2301      	movs	r3, #1
 800f44a:	e7f0      	b.n	800f42e <_svfiprintf_r+0x192>
 800f44c:	ab03      	add	r3, sp, #12
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	462a      	mov	r2, r5
 800f452:	4b0e      	ldr	r3, [pc, #56]	@ (800f48c <_svfiprintf_r+0x1f0>)
 800f454:	a904      	add	r1, sp, #16
 800f456:	4638      	mov	r0, r7
 800f458:	f7fc fb2e 	bl	800bab8 <_printf_float>
 800f45c:	1c42      	adds	r2, r0, #1
 800f45e:	4606      	mov	r6, r0
 800f460:	d1d6      	bne.n	800f410 <_svfiprintf_r+0x174>
 800f462:	89ab      	ldrh	r3, [r5, #12]
 800f464:	065b      	lsls	r3, r3, #25
 800f466:	f53f af2d 	bmi.w	800f2c4 <_svfiprintf_r+0x28>
 800f46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f46c:	e72c      	b.n	800f2c8 <_svfiprintf_r+0x2c>
 800f46e:	ab03      	add	r3, sp, #12
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	462a      	mov	r2, r5
 800f474:	4b05      	ldr	r3, [pc, #20]	@ (800f48c <_svfiprintf_r+0x1f0>)
 800f476:	a904      	add	r1, sp, #16
 800f478:	4638      	mov	r0, r7
 800f47a:	f7fc fdb5 	bl	800bfe8 <_printf_i>
 800f47e:	e7ed      	b.n	800f45c <_svfiprintf_r+0x1c0>
 800f480:	08010821 	.word	0x08010821
 800f484:	0801082b 	.word	0x0801082b
 800f488:	0800bab9 	.word	0x0800bab9
 800f48c:	0800f1e5 	.word	0x0800f1e5
 800f490:	08010827 	.word	0x08010827

0800f494 <__sfputc_r>:
 800f494:	6893      	ldr	r3, [r2, #8]
 800f496:	3b01      	subs	r3, #1
 800f498:	2b00      	cmp	r3, #0
 800f49a:	b410      	push	{r4}
 800f49c:	6093      	str	r3, [r2, #8]
 800f49e:	da08      	bge.n	800f4b2 <__sfputc_r+0x1e>
 800f4a0:	6994      	ldr	r4, [r2, #24]
 800f4a2:	42a3      	cmp	r3, r4
 800f4a4:	db01      	blt.n	800f4aa <__sfputc_r+0x16>
 800f4a6:	290a      	cmp	r1, #10
 800f4a8:	d103      	bne.n	800f4b2 <__sfputc_r+0x1e>
 800f4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ae:	f7fd ba98 	b.w	800c9e2 <__swbuf_r>
 800f4b2:	6813      	ldr	r3, [r2, #0]
 800f4b4:	1c58      	adds	r0, r3, #1
 800f4b6:	6010      	str	r0, [r2, #0]
 800f4b8:	7019      	strb	r1, [r3, #0]
 800f4ba:	4608      	mov	r0, r1
 800f4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <__sfputs_r>:
 800f4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c4:	4606      	mov	r6, r0
 800f4c6:	460f      	mov	r7, r1
 800f4c8:	4614      	mov	r4, r2
 800f4ca:	18d5      	adds	r5, r2, r3
 800f4cc:	42ac      	cmp	r4, r5
 800f4ce:	d101      	bne.n	800f4d4 <__sfputs_r+0x12>
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	e007      	b.n	800f4e4 <__sfputs_r+0x22>
 800f4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d8:	463a      	mov	r2, r7
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f7ff ffda 	bl	800f494 <__sfputc_r>
 800f4e0:	1c43      	adds	r3, r0, #1
 800f4e2:	d1f3      	bne.n	800f4cc <__sfputs_r+0xa>
 800f4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4e8 <_vfiprintf_r>:
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	460d      	mov	r5, r1
 800f4ee:	b09d      	sub	sp, #116	@ 0x74
 800f4f0:	4614      	mov	r4, r2
 800f4f2:	4698      	mov	r8, r3
 800f4f4:	4606      	mov	r6, r0
 800f4f6:	b118      	cbz	r0, 800f500 <_vfiprintf_r+0x18>
 800f4f8:	6a03      	ldr	r3, [r0, #32]
 800f4fa:	b90b      	cbnz	r3, 800f500 <_vfiprintf_r+0x18>
 800f4fc:	f7fd f934 	bl	800c768 <__sinit>
 800f500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f502:	07d9      	lsls	r1, r3, #31
 800f504:	d405      	bmi.n	800f512 <_vfiprintf_r+0x2a>
 800f506:	89ab      	ldrh	r3, [r5, #12]
 800f508:	059a      	lsls	r2, r3, #22
 800f50a:	d402      	bmi.n	800f512 <_vfiprintf_r+0x2a>
 800f50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f50e:	f7fd fbd0 	bl	800ccb2 <__retarget_lock_acquire_recursive>
 800f512:	89ab      	ldrh	r3, [r5, #12]
 800f514:	071b      	lsls	r3, r3, #28
 800f516:	d501      	bpl.n	800f51c <_vfiprintf_r+0x34>
 800f518:	692b      	ldr	r3, [r5, #16]
 800f51a:	b99b      	cbnz	r3, 800f544 <_vfiprintf_r+0x5c>
 800f51c:	4629      	mov	r1, r5
 800f51e:	4630      	mov	r0, r6
 800f520:	f7fd fa9e 	bl	800ca60 <__swsetup_r>
 800f524:	b170      	cbz	r0, 800f544 <_vfiprintf_r+0x5c>
 800f526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f528:	07dc      	lsls	r4, r3, #31
 800f52a:	d504      	bpl.n	800f536 <_vfiprintf_r+0x4e>
 800f52c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f530:	b01d      	add	sp, #116	@ 0x74
 800f532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f536:	89ab      	ldrh	r3, [r5, #12]
 800f538:	0598      	lsls	r0, r3, #22
 800f53a:	d4f7      	bmi.n	800f52c <_vfiprintf_r+0x44>
 800f53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f53e:	f7fd fbb9 	bl	800ccb4 <__retarget_lock_release_recursive>
 800f542:	e7f3      	b.n	800f52c <_vfiprintf_r+0x44>
 800f544:	2300      	movs	r3, #0
 800f546:	9309      	str	r3, [sp, #36]	@ 0x24
 800f548:	2320      	movs	r3, #32
 800f54a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f552:	2330      	movs	r3, #48	@ 0x30
 800f554:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f704 <_vfiprintf_r+0x21c>
 800f558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f55c:	f04f 0901 	mov.w	r9, #1
 800f560:	4623      	mov	r3, r4
 800f562:	469a      	mov	sl, r3
 800f564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f568:	b10a      	cbz	r2, 800f56e <_vfiprintf_r+0x86>
 800f56a:	2a25      	cmp	r2, #37	@ 0x25
 800f56c:	d1f9      	bne.n	800f562 <_vfiprintf_r+0x7a>
 800f56e:	ebba 0b04 	subs.w	fp, sl, r4
 800f572:	d00b      	beq.n	800f58c <_vfiprintf_r+0xa4>
 800f574:	465b      	mov	r3, fp
 800f576:	4622      	mov	r2, r4
 800f578:	4629      	mov	r1, r5
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7ff ffa1 	bl	800f4c2 <__sfputs_r>
 800f580:	3001      	adds	r0, #1
 800f582:	f000 80a7 	beq.w	800f6d4 <_vfiprintf_r+0x1ec>
 800f586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f588:	445a      	add	r2, fp
 800f58a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f58c:	f89a 3000 	ldrb.w	r3, [sl]
 800f590:	2b00      	cmp	r3, #0
 800f592:	f000 809f 	beq.w	800f6d4 <_vfiprintf_r+0x1ec>
 800f596:	2300      	movs	r3, #0
 800f598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5a0:	f10a 0a01 	add.w	sl, sl, #1
 800f5a4:	9304      	str	r3, [sp, #16]
 800f5a6:	9307      	str	r3, [sp, #28]
 800f5a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5ae:	4654      	mov	r4, sl
 800f5b0:	2205      	movs	r2, #5
 800f5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b6:	4853      	ldr	r0, [pc, #332]	@ (800f704 <_vfiprintf_r+0x21c>)
 800f5b8:	f7f0 fe0a 	bl	80001d0 <memchr>
 800f5bc:	9a04      	ldr	r2, [sp, #16]
 800f5be:	b9d8      	cbnz	r0, 800f5f8 <_vfiprintf_r+0x110>
 800f5c0:	06d1      	lsls	r1, r2, #27
 800f5c2:	bf44      	itt	mi
 800f5c4:	2320      	movmi	r3, #32
 800f5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5ca:	0713      	lsls	r3, r2, #28
 800f5cc:	bf44      	itt	mi
 800f5ce:	232b      	movmi	r3, #43	@ 0x2b
 800f5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5da:	d015      	beq.n	800f608 <_vfiprintf_r+0x120>
 800f5dc:	9a07      	ldr	r2, [sp, #28]
 800f5de:	4654      	mov	r4, sl
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	f04f 0c0a 	mov.w	ip, #10
 800f5e6:	4621      	mov	r1, r4
 800f5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5ec:	3b30      	subs	r3, #48	@ 0x30
 800f5ee:	2b09      	cmp	r3, #9
 800f5f0:	d94b      	bls.n	800f68a <_vfiprintf_r+0x1a2>
 800f5f2:	b1b0      	cbz	r0, 800f622 <_vfiprintf_r+0x13a>
 800f5f4:	9207      	str	r2, [sp, #28]
 800f5f6:	e014      	b.n	800f622 <_vfiprintf_r+0x13a>
 800f5f8:	eba0 0308 	sub.w	r3, r0, r8
 800f5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800f600:	4313      	orrs	r3, r2
 800f602:	9304      	str	r3, [sp, #16]
 800f604:	46a2      	mov	sl, r4
 800f606:	e7d2      	b.n	800f5ae <_vfiprintf_r+0xc6>
 800f608:	9b03      	ldr	r3, [sp, #12]
 800f60a:	1d19      	adds	r1, r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	9103      	str	r1, [sp, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	bfbb      	ittet	lt
 800f614:	425b      	neglt	r3, r3
 800f616:	f042 0202 	orrlt.w	r2, r2, #2
 800f61a:	9307      	strge	r3, [sp, #28]
 800f61c:	9307      	strlt	r3, [sp, #28]
 800f61e:	bfb8      	it	lt
 800f620:	9204      	strlt	r2, [sp, #16]
 800f622:	7823      	ldrb	r3, [r4, #0]
 800f624:	2b2e      	cmp	r3, #46	@ 0x2e
 800f626:	d10a      	bne.n	800f63e <_vfiprintf_r+0x156>
 800f628:	7863      	ldrb	r3, [r4, #1]
 800f62a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f62c:	d132      	bne.n	800f694 <_vfiprintf_r+0x1ac>
 800f62e:	9b03      	ldr	r3, [sp, #12]
 800f630:	1d1a      	adds	r2, r3, #4
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	9203      	str	r2, [sp, #12]
 800f636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f63a:	3402      	adds	r4, #2
 800f63c:	9305      	str	r3, [sp, #20]
 800f63e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f714 <_vfiprintf_r+0x22c>
 800f642:	7821      	ldrb	r1, [r4, #0]
 800f644:	2203      	movs	r2, #3
 800f646:	4650      	mov	r0, sl
 800f648:	f7f0 fdc2 	bl	80001d0 <memchr>
 800f64c:	b138      	cbz	r0, 800f65e <_vfiprintf_r+0x176>
 800f64e:	9b04      	ldr	r3, [sp, #16]
 800f650:	eba0 000a 	sub.w	r0, r0, sl
 800f654:	2240      	movs	r2, #64	@ 0x40
 800f656:	4082      	lsls	r2, r0
 800f658:	4313      	orrs	r3, r2
 800f65a:	3401      	adds	r4, #1
 800f65c:	9304      	str	r3, [sp, #16]
 800f65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f662:	4829      	ldr	r0, [pc, #164]	@ (800f708 <_vfiprintf_r+0x220>)
 800f664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f668:	2206      	movs	r2, #6
 800f66a:	f7f0 fdb1 	bl	80001d0 <memchr>
 800f66e:	2800      	cmp	r0, #0
 800f670:	d03f      	beq.n	800f6f2 <_vfiprintf_r+0x20a>
 800f672:	4b26      	ldr	r3, [pc, #152]	@ (800f70c <_vfiprintf_r+0x224>)
 800f674:	bb1b      	cbnz	r3, 800f6be <_vfiprintf_r+0x1d6>
 800f676:	9b03      	ldr	r3, [sp, #12]
 800f678:	3307      	adds	r3, #7
 800f67a:	f023 0307 	bic.w	r3, r3, #7
 800f67e:	3308      	adds	r3, #8
 800f680:	9303      	str	r3, [sp, #12]
 800f682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f684:	443b      	add	r3, r7
 800f686:	9309      	str	r3, [sp, #36]	@ 0x24
 800f688:	e76a      	b.n	800f560 <_vfiprintf_r+0x78>
 800f68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f68e:	460c      	mov	r4, r1
 800f690:	2001      	movs	r0, #1
 800f692:	e7a8      	b.n	800f5e6 <_vfiprintf_r+0xfe>
 800f694:	2300      	movs	r3, #0
 800f696:	3401      	adds	r4, #1
 800f698:	9305      	str	r3, [sp, #20]
 800f69a:	4619      	mov	r1, r3
 800f69c:	f04f 0c0a 	mov.w	ip, #10
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6a6:	3a30      	subs	r2, #48	@ 0x30
 800f6a8:	2a09      	cmp	r2, #9
 800f6aa:	d903      	bls.n	800f6b4 <_vfiprintf_r+0x1cc>
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d0c6      	beq.n	800f63e <_vfiprintf_r+0x156>
 800f6b0:	9105      	str	r1, [sp, #20]
 800f6b2:	e7c4      	b.n	800f63e <_vfiprintf_r+0x156>
 800f6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e7f0      	b.n	800f6a0 <_vfiprintf_r+0x1b8>
 800f6be:	ab03      	add	r3, sp, #12
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	462a      	mov	r2, r5
 800f6c4:	4b12      	ldr	r3, [pc, #72]	@ (800f710 <_vfiprintf_r+0x228>)
 800f6c6:	a904      	add	r1, sp, #16
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7fc f9f5 	bl	800bab8 <_printf_float>
 800f6ce:	4607      	mov	r7, r0
 800f6d0:	1c78      	adds	r0, r7, #1
 800f6d2:	d1d6      	bne.n	800f682 <_vfiprintf_r+0x19a>
 800f6d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6d6:	07d9      	lsls	r1, r3, #31
 800f6d8:	d405      	bmi.n	800f6e6 <_vfiprintf_r+0x1fe>
 800f6da:	89ab      	ldrh	r3, [r5, #12]
 800f6dc:	059a      	lsls	r2, r3, #22
 800f6de:	d402      	bmi.n	800f6e6 <_vfiprintf_r+0x1fe>
 800f6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6e2:	f7fd fae7 	bl	800ccb4 <__retarget_lock_release_recursive>
 800f6e6:	89ab      	ldrh	r3, [r5, #12]
 800f6e8:	065b      	lsls	r3, r3, #25
 800f6ea:	f53f af1f 	bmi.w	800f52c <_vfiprintf_r+0x44>
 800f6ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6f0:	e71e      	b.n	800f530 <_vfiprintf_r+0x48>
 800f6f2:	ab03      	add	r3, sp, #12
 800f6f4:	9300      	str	r3, [sp, #0]
 800f6f6:	462a      	mov	r2, r5
 800f6f8:	4b05      	ldr	r3, [pc, #20]	@ (800f710 <_vfiprintf_r+0x228>)
 800f6fa:	a904      	add	r1, sp, #16
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f7fc fc73 	bl	800bfe8 <_printf_i>
 800f702:	e7e4      	b.n	800f6ce <_vfiprintf_r+0x1e6>
 800f704:	08010821 	.word	0x08010821
 800f708:	0801082b 	.word	0x0801082b
 800f70c:	0800bab9 	.word	0x0800bab9
 800f710:	0800f4c3 	.word	0x0800f4c3
 800f714:	08010827 	.word	0x08010827

0800f718 <__sflush_r>:
 800f718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f720:	0716      	lsls	r6, r2, #28
 800f722:	4605      	mov	r5, r0
 800f724:	460c      	mov	r4, r1
 800f726:	d454      	bmi.n	800f7d2 <__sflush_r+0xba>
 800f728:	684b      	ldr	r3, [r1, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	dc02      	bgt.n	800f734 <__sflush_r+0x1c>
 800f72e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f730:	2b00      	cmp	r3, #0
 800f732:	dd48      	ble.n	800f7c6 <__sflush_r+0xae>
 800f734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f736:	2e00      	cmp	r6, #0
 800f738:	d045      	beq.n	800f7c6 <__sflush_r+0xae>
 800f73a:	2300      	movs	r3, #0
 800f73c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f740:	682f      	ldr	r7, [r5, #0]
 800f742:	6a21      	ldr	r1, [r4, #32]
 800f744:	602b      	str	r3, [r5, #0]
 800f746:	d030      	beq.n	800f7aa <__sflush_r+0x92>
 800f748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f74a:	89a3      	ldrh	r3, [r4, #12]
 800f74c:	0759      	lsls	r1, r3, #29
 800f74e:	d505      	bpl.n	800f75c <__sflush_r+0x44>
 800f750:	6863      	ldr	r3, [r4, #4]
 800f752:	1ad2      	subs	r2, r2, r3
 800f754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f756:	b10b      	cbz	r3, 800f75c <__sflush_r+0x44>
 800f758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	2300      	movs	r3, #0
 800f75e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f760:	6a21      	ldr	r1, [r4, #32]
 800f762:	4628      	mov	r0, r5
 800f764:	47b0      	blx	r6
 800f766:	1c43      	adds	r3, r0, #1
 800f768:	89a3      	ldrh	r3, [r4, #12]
 800f76a:	d106      	bne.n	800f77a <__sflush_r+0x62>
 800f76c:	6829      	ldr	r1, [r5, #0]
 800f76e:	291d      	cmp	r1, #29
 800f770:	d82b      	bhi.n	800f7ca <__sflush_r+0xb2>
 800f772:	4a2a      	ldr	r2, [pc, #168]	@ (800f81c <__sflush_r+0x104>)
 800f774:	410a      	asrs	r2, r1
 800f776:	07d6      	lsls	r6, r2, #31
 800f778:	d427      	bmi.n	800f7ca <__sflush_r+0xb2>
 800f77a:	2200      	movs	r2, #0
 800f77c:	6062      	str	r2, [r4, #4]
 800f77e:	04d9      	lsls	r1, r3, #19
 800f780:	6922      	ldr	r2, [r4, #16]
 800f782:	6022      	str	r2, [r4, #0]
 800f784:	d504      	bpl.n	800f790 <__sflush_r+0x78>
 800f786:	1c42      	adds	r2, r0, #1
 800f788:	d101      	bne.n	800f78e <__sflush_r+0x76>
 800f78a:	682b      	ldr	r3, [r5, #0]
 800f78c:	b903      	cbnz	r3, 800f790 <__sflush_r+0x78>
 800f78e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f792:	602f      	str	r7, [r5, #0]
 800f794:	b1b9      	cbz	r1, 800f7c6 <__sflush_r+0xae>
 800f796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f79a:	4299      	cmp	r1, r3
 800f79c:	d002      	beq.n	800f7a4 <__sflush_r+0x8c>
 800f79e:	4628      	mov	r0, r5
 800f7a0:	f7fe f8ea 	bl	800d978 <_free_r>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7a8:	e00d      	b.n	800f7c6 <__sflush_r+0xae>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	47b0      	blx	r6
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	1c50      	adds	r0, r2, #1
 800f7b4:	d1c9      	bne.n	800f74a <__sflush_r+0x32>
 800f7b6:	682b      	ldr	r3, [r5, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0c6      	beq.n	800f74a <__sflush_r+0x32>
 800f7bc:	2b1d      	cmp	r3, #29
 800f7be:	d001      	beq.n	800f7c4 <__sflush_r+0xac>
 800f7c0:	2b16      	cmp	r3, #22
 800f7c2:	d11e      	bne.n	800f802 <__sflush_r+0xea>
 800f7c4:	602f      	str	r7, [r5, #0]
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	e022      	b.n	800f810 <__sflush_r+0xf8>
 800f7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7ce:	b21b      	sxth	r3, r3
 800f7d0:	e01b      	b.n	800f80a <__sflush_r+0xf2>
 800f7d2:	690f      	ldr	r7, [r1, #16]
 800f7d4:	2f00      	cmp	r7, #0
 800f7d6:	d0f6      	beq.n	800f7c6 <__sflush_r+0xae>
 800f7d8:	0793      	lsls	r3, r2, #30
 800f7da:	680e      	ldr	r6, [r1, #0]
 800f7dc:	bf08      	it	eq
 800f7de:	694b      	ldreq	r3, [r1, #20]
 800f7e0:	600f      	str	r7, [r1, #0]
 800f7e2:	bf18      	it	ne
 800f7e4:	2300      	movne	r3, #0
 800f7e6:	eba6 0807 	sub.w	r8, r6, r7
 800f7ea:	608b      	str	r3, [r1, #8]
 800f7ec:	f1b8 0f00 	cmp.w	r8, #0
 800f7f0:	dde9      	ble.n	800f7c6 <__sflush_r+0xae>
 800f7f2:	6a21      	ldr	r1, [r4, #32]
 800f7f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7f6:	4643      	mov	r3, r8
 800f7f8:	463a      	mov	r2, r7
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	47b0      	blx	r6
 800f7fe:	2800      	cmp	r0, #0
 800f800:	dc08      	bgt.n	800f814 <__sflush_r+0xfc>
 800f802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f80a:	81a3      	strh	r3, [r4, #12]
 800f80c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f814:	4407      	add	r7, r0
 800f816:	eba8 0800 	sub.w	r8, r8, r0
 800f81a:	e7e7      	b.n	800f7ec <__sflush_r+0xd4>
 800f81c:	dfbffffe 	.word	0xdfbffffe

0800f820 <_fflush_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	690b      	ldr	r3, [r1, #16]
 800f824:	4605      	mov	r5, r0
 800f826:	460c      	mov	r4, r1
 800f828:	b913      	cbnz	r3, 800f830 <_fflush_r+0x10>
 800f82a:	2500      	movs	r5, #0
 800f82c:	4628      	mov	r0, r5
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	b118      	cbz	r0, 800f83a <_fflush_r+0x1a>
 800f832:	6a03      	ldr	r3, [r0, #32]
 800f834:	b90b      	cbnz	r3, 800f83a <_fflush_r+0x1a>
 800f836:	f7fc ff97 	bl	800c768 <__sinit>
 800f83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d0f3      	beq.n	800f82a <_fflush_r+0xa>
 800f842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f844:	07d0      	lsls	r0, r2, #31
 800f846:	d404      	bmi.n	800f852 <_fflush_r+0x32>
 800f848:	0599      	lsls	r1, r3, #22
 800f84a:	d402      	bmi.n	800f852 <_fflush_r+0x32>
 800f84c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f84e:	f7fd fa30 	bl	800ccb2 <__retarget_lock_acquire_recursive>
 800f852:	4628      	mov	r0, r5
 800f854:	4621      	mov	r1, r4
 800f856:	f7ff ff5f 	bl	800f718 <__sflush_r>
 800f85a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f85c:	07da      	lsls	r2, r3, #31
 800f85e:	4605      	mov	r5, r0
 800f860:	d4e4      	bmi.n	800f82c <_fflush_r+0xc>
 800f862:	89a3      	ldrh	r3, [r4, #12]
 800f864:	059b      	lsls	r3, r3, #22
 800f866:	d4e1      	bmi.n	800f82c <_fflush_r+0xc>
 800f868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f86a:	f7fd fa23 	bl	800ccb4 <__retarget_lock_release_recursive>
 800f86e:	e7dd      	b.n	800f82c <_fflush_r+0xc>

0800f870 <__swhatbuf_r>:
 800f870:	b570      	push	{r4, r5, r6, lr}
 800f872:	460c      	mov	r4, r1
 800f874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f878:	2900      	cmp	r1, #0
 800f87a:	b096      	sub	sp, #88	@ 0x58
 800f87c:	4615      	mov	r5, r2
 800f87e:	461e      	mov	r6, r3
 800f880:	da0d      	bge.n	800f89e <__swhatbuf_r+0x2e>
 800f882:	89a3      	ldrh	r3, [r4, #12]
 800f884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f888:	f04f 0100 	mov.w	r1, #0
 800f88c:	bf14      	ite	ne
 800f88e:	2340      	movne	r3, #64	@ 0x40
 800f890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f894:	2000      	movs	r0, #0
 800f896:	6031      	str	r1, [r6, #0]
 800f898:	602b      	str	r3, [r5, #0]
 800f89a:	b016      	add	sp, #88	@ 0x58
 800f89c:	bd70      	pop	{r4, r5, r6, pc}
 800f89e:	466a      	mov	r2, sp
 800f8a0:	f000 f874 	bl	800f98c <_fstat_r>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	dbec      	blt.n	800f882 <__swhatbuf_r+0x12>
 800f8a8:	9901      	ldr	r1, [sp, #4]
 800f8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f8b2:	4259      	negs	r1, r3
 800f8b4:	4159      	adcs	r1, r3
 800f8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8ba:	e7eb      	b.n	800f894 <__swhatbuf_r+0x24>

0800f8bc <__smakebuf_r>:
 800f8bc:	898b      	ldrh	r3, [r1, #12]
 800f8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8c0:	079d      	lsls	r5, r3, #30
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	460c      	mov	r4, r1
 800f8c6:	d507      	bpl.n	800f8d8 <__smakebuf_r+0x1c>
 800f8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	6123      	str	r3, [r4, #16]
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	6163      	str	r3, [r4, #20]
 800f8d4:	b003      	add	sp, #12
 800f8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8d8:	ab01      	add	r3, sp, #4
 800f8da:	466a      	mov	r2, sp
 800f8dc:	f7ff ffc8 	bl	800f870 <__swhatbuf_r>
 800f8e0:	9f00      	ldr	r7, [sp, #0]
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	4639      	mov	r1, r7
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f7fe f8ba 	bl	800da60 <_malloc_r>
 800f8ec:	b948      	cbnz	r0, 800f902 <__smakebuf_r+0x46>
 800f8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f2:	059a      	lsls	r2, r3, #22
 800f8f4:	d4ee      	bmi.n	800f8d4 <__smakebuf_r+0x18>
 800f8f6:	f023 0303 	bic.w	r3, r3, #3
 800f8fa:	f043 0302 	orr.w	r3, r3, #2
 800f8fe:	81a3      	strh	r3, [r4, #12]
 800f900:	e7e2      	b.n	800f8c8 <__smakebuf_r+0xc>
 800f902:	89a3      	ldrh	r3, [r4, #12]
 800f904:	6020      	str	r0, [r4, #0]
 800f906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f90a:	81a3      	strh	r3, [r4, #12]
 800f90c:	9b01      	ldr	r3, [sp, #4]
 800f90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f912:	b15b      	cbz	r3, 800f92c <__smakebuf_r+0x70>
 800f914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f918:	4630      	mov	r0, r6
 800f91a:	f000 f849 	bl	800f9b0 <_isatty_r>
 800f91e:	b128      	cbz	r0, 800f92c <__smakebuf_r+0x70>
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	f023 0303 	bic.w	r3, r3, #3
 800f926:	f043 0301 	orr.w	r3, r3, #1
 800f92a:	81a3      	strh	r3, [r4, #12]
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	431d      	orrs	r5, r3
 800f930:	81a5      	strh	r5, [r4, #12]
 800f932:	e7cf      	b.n	800f8d4 <__smakebuf_r+0x18>

0800f934 <memmove>:
 800f934:	4288      	cmp	r0, r1
 800f936:	b510      	push	{r4, lr}
 800f938:	eb01 0402 	add.w	r4, r1, r2
 800f93c:	d902      	bls.n	800f944 <memmove+0x10>
 800f93e:	4284      	cmp	r4, r0
 800f940:	4623      	mov	r3, r4
 800f942:	d807      	bhi.n	800f954 <memmove+0x20>
 800f944:	1e43      	subs	r3, r0, #1
 800f946:	42a1      	cmp	r1, r4
 800f948:	d008      	beq.n	800f95c <memmove+0x28>
 800f94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f952:	e7f8      	b.n	800f946 <memmove+0x12>
 800f954:	4402      	add	r2, r0
 800f956:	4601      	mov	r1, r0
 800f958:	428a      	cmp	r2, r1
 800f95a:	d100      	bne.n	800f95e <memmove+0x2a>
 800f95c:	bd10      	pop	{r4, pc}
 800f95e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f966:	e7f7      	b.n	800f958 <memmove+0x24>

0800f968 <strncmp>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	b16a      	cbz	r2, 800f988 <strncmp+0x20>
 800f96c:	3901      	subs	r1, #1
 800f96e:	1884      	adds	r4, r0, r2
 800f970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f974:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f978:	429a      	cmp	r2, r3
 800f97a:	d103      	bne.n	800f984 <strncmp+0x1c>
 800f97c:	42a0      	cmp	r0, r4
 800f97e:	d001      	beq.n	800f984 <strncmp+0x1c>
 800f980:	2a00      	cmp	r2, #0
 800f982:	d1f5      	bne.n	800f970 <strncmp+0x8>
 800f984:	1ad0      	subs	r0, r2, r3
 800f986:	bd10      	pop	{r4, pc}
 800f988:	4610      	mov	r0, r2
 800f98a:	e7fc      	b.n	800f986 <strncmp+0x1e>

0800f98c <_fstat_r>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4d07      	ldr	r5, [pc, #28]	@ (800f9ac <_fstat_r+0x20>)
 800f990:	2300      	movs	r3, #0
 800f992:	4604      	mov	r4, r0
 800f994:	4608      	mov	r0, r1
 800f996:	4611      	mov	r1, r2
 800f998:	602b      	str	r3, [r5, #0]
 800f99a:	f7f2 ff79 	bl	8002890 <_fstat>
 800f99e:	1c43      	adds	r3, r0, #1
 800f9a0:	d102      	bne.n	800f9a8 <_fstat_r+0x1c>
 800f9a2:	682b      	ldr	r3, [r5, #0]
 800f9a4:	b103      	cbz	r3, 800f9a8 <_fstat_r+0x1c>
 800f9a6:	6023      	str	r3, [r4, #0]
 800f9a8:	bd38      	pop	{r3, r4, r5, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20001be0 	.word	0x20001be0

0800f9b0 <_isatty_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4d06      	ldr	r5, [pc, #24]	@ (800f9cc <_isatty_r+0x1c>)
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	4608      	mov	r0, r1
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	f7f2 ff78 	bl	80028b0 <_isatty>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d102      	bne.n	800f9ca <_isatty_r+0x1a>
 800f9c4:	682b      	ldr	r3, [r5, #0]
 800f9c6:	b103      	cbz	r3, 800f9ca <_isatty_r+0x1a>
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	bd38      	pop	{r3, r4, r5, pc}
 800f9cc:	20001be0 	.word	0x20001be0

0800f9d0 <_sbrk_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4d06      	ldr	r5, [pc, #24]	@ (800f9ec <_sbrk_r+0x1c>)
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	4608      	mov	r0, r1
 800f9da:	602b      	str	r3, [r5, #0]
 800f9dc:	f7f2 ff80 	bl	80028e0 <_sbrk>
 800f9e0:	1c43      	adds	r3, r0, #1
 800f9e2:	d102      	bne.n	800f9ea <_sbrk_r+0x1a>
 800f9e4:	682b      	ldr	r3, [r5, #0]
 800f9e6:	b103      	cbz	r3, 800f9ea <_sbrk_r+0x1a>
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	bd38      	pop	{r3, r4, r5, pc}
 800f9ec:	20001be0 	.word	0x20001be0

0800f9f0 <nan>:
 800f9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9f8 <nan+0x8>
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	00000000 	.word	0x00000000
 800f9fc:	7ff80000 	.word	0x7ff80000

0800fa00 <__assert_func>:
 800fa00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa02:	4614      	mov	r4, r2
 800fa04:	461a      	mov	r2, r3
 800fa06:	4b09      	ldr	r3, [pc, #36]	@ (800fa2c <__assert_func+0x2c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4605      	mov	r5, r0
 800fa0c:	68d8      	ldr	r0, [r3, #12]
 800fa0e:	b954      	cbnz	r4, 800fa26 <__assert_func+0x26>
 800fa10:	4b07      	ldr	r3, [pc, #28]	@ (800fa30 <__assert_func+0x30>)
 800fa12:	461c      	mov	r4, r3
 800fa14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa18:	9100      	str	r1, [sp, #0]
 800fa1a:	462b      	mov	r3, r5
 800fa1c:	4905      	ldr	r1, [pc, #20]	@ (800fa34 <__assert_func+0x34>)
 800fa1e:	f000 fba7 	bl	8010170 <fiprintf>
 800fa22:	f000 fbb7 	bl	8010194 <abort>
 800fa26:	4b04      	ldr	r3, [pc, #16]	@ (800fa38 <__assert_func+0x38>)
 800fa28:	e7f4      	b.n	800fa14 <__assert_func+0x14>
 800fa2a:	bf00      	nop
 800fa2c:	20000028 	.word	0x20000028
 800fa30:	08010875 	.word	0x08010875
 800fa34:	08010847 	.word	0x08010847
 800fa38:	0801083a 	.word	0x0801083a

0800fa3c <_calloc_r>:
 800fa3c:	b570      	push	{r4, r5, r6, lr}
 800fa3e:	fba1 5402 	umull	r5, r4, r1, r2
 800fa42:	b93c      	cbnz	r4, 800fa54 <_calloc_r+0x18>
 800fa44:	4629      	mov	r1, r5
 800fa46:	f7fe f80b 	bl	800da60 <_malloc_r>
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	b928      	cbnz	r0, 800fa5a <_calloc_r+0x1e>
 800fa4e:	2600      	movs	r6, #0
 800fa50:	4630      	mov	r0, r6
 800fa52:	bd70      	pop	{r4, r5, r6, pc}
 800fa54:	220c      	movs	r2, #12
 800fa56:	6002      	str	r2, [r0, #0]
 800fa58:	e7f9      	b.n	800fa4e <_calloc_r+0x12>
 800fa5a:	462a      	mov	r2, r5
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	f7fd f855 	bl	800cb0c <memset>
 800fa62:	e7f5      	b.n	800fa50 <_calloc_r+0x14>

0800fa64 <rshift>:
 800fa64:	6903      	ldr	r3, [r0, #16]
 800fa66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa72:	f100 0414 	add.w	r4, r0, #20
 800fa76:	dd45      	ble.n	800fb04 <rshift+0xa0>
 800fa78:	f011 011f 	ands.w	r1, r1, #31
 800fa7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa84:	d10c      	bne.n	800faa0 <rshift+0x3c>
 800fa86:	f100 0710 	add.w	r7, r0, #16
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	42b1      	cmp	r1, r6
 800fa8e:	d334      	bcc.n	800fafa <rshift+0x96>
 800fa90:	1a9b      	subs	r3, r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	1eea      	subs	r2, r5, #3
 800fa96:	4296      	cmp	r6, r2
 800fa98:	bf38      	it	cc
 800fa9a:	2300      	movcc	r3, #0
 800fa9c:	4423      	add	r3, r4
 800fa9e:	e015      	b.n	800facc <rshift+0x68>
 800faa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800faa4:	f1c1 0820 	rsb	r8, r1, #32
 800faa8:	40cf      	lsrs	r7, r1
 800faaa:	f105 0e04 	add.w	lr, r5, #4
 800faae:	46a1      	mov	r9, r4
 800fab0:	4576      	cmp	r6, lr
 800fab2:	46f4      	mov	ip, lr
 800fab4:	d815      	bhi.n	800fae2 <rshift+0x7e>
 800fab6:	1a9a      	subs	r2, r3, r2
 800fab8:	0092      	lsls	r2, r2, #2
 800faba:	3a04      	subs	r2, #4
 800fabc:	3501      	adds	r5, #1
 800fabe:	42ae      	cmp	r6, r5
 800fac0:	bf38      	it	cc
 800fac2:	2200      	movcc	r2, #0
 800fac4:	18a3      	adds	r3, r4, r2
 800fac6:	50a7      	str	r7, [r4, r2]
 800fac8:	b107      	cbz	r7, 800facc <rshift+0x68>
 800faca:	3304      	adds	r3, #4
 800facc:	1b1a      	subs	r2, r3, r4
 800face:	42a3      	cmp	r3, r4
 800fad0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fad4:	bf08      	it	eq
 800fad6:	2300      	moveq	r3, #0
 800fad8:	6102      	str	r2, [r0, #16]
 800fada:	bf08      	it	eq
 800fadc:	6143      	streq	r3, [r0, #20]
 800fade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fae2:	f8dc c000 	ldr.w	ip, [ip]
 800fae6:	fa0c fc08 	lsl.w	ip, ip, r8
 800faea:	ea4c 0707 	orr.w	r7, ip, r7
 800faee:	f849 7b04 	str.w	r7, [r9], #4
 800faf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800faf6:	40cf      	lsrs	r7, r1
 800faf8:	e7da      	b.n	800fab0 <rshift+0x4c>
 800fafa:	f851 cb04 	ldr.w	ip, [r1], #4
 800fafe:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb02:	e7c3      	b.n	800fa8c <rshift+0x28>
 800fb04:	4623      	mov	r3, r4
 800fb06:	e7e1      	b.n	800facc <rshift+0x68>

0800fb08 <__hexdig_fun>:
 800fb08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fb0c:	2b09      	cmp	r3, #9
 800fb0e:	d802      	bhi.n	800fb16 <__hexdig_fun+0xe>
 800fb10:	3820      	subs	r0, #32
 800fb12:	b2c0      	uxtb	r0, r0
 800fb14:	4770      	bx	lr
 800fb16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fb1a:	2b05      	cmp	r3, #5
 800fb1c:	d801      	bhi.n	800fb22 <__hexdig_fun+0x1a>
 800fb1e:	3847      	subs	r0, #71	@ 0x47
 800fb20:	e7f7      	b.n	800fb12 <__hexdig_fun+0xa>
 800fb22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fb26:	2b05      	cmp	r3, #5
 800fb28:	d801      	bhi.n	800fb2e <__hexdig_fun+0x26>
 800fb2a:	3827      	subs	r0, #39	@ 0x27
 800fb2c:	e7f1      	b.n	800fb12 <__hexdig_fun+0xa>
 800fb2e:	2000      	movs	r0, #0
 800fb30:	4770      	bx	lr
	...

0800fb34 <__gethex>:
 800fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb38:	b085      	sub	sp, #20
 800fb3a:	468a      	mov	sl, r1
 800fb3c:	9302      	str	r3, [sp, #8]
 800fb3e:	680b      	ldr	r3, [r1, #0]
 800fb40:	9001      	str	r0, [sp, #4]
 800fb42:	4690      	mov	r8, r2
 800fb44:	1c9c      	adds	r4, r3, #2
 800fb46:	46a1      	mov	r9, r4
 800fb48:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb4c:	2830      	cmp	r0, #48	@ 0x30
 800fb4e:	d0fa      	beq.n	800fb46 <__gethex+0x12>
 800fb50:	eba9 0303 	sub.w	r3, r9, r3
 800fb54:	f1a3 0b02 	sub.w	fp, r3, #2
 800fb58:	f7ff ffd6 	bl	800fb08 <__hexdig_fun>
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d168      	bne.n	800fc34 <__gethex+0x100>
 800fb62:	49a0      	ldr	r1, [pc, #640]	@ (800fde4 <__gethex+0x2b0>)
 800fb64:	2201      	movs	r2, #1
 800fb66:	4648      	mov	r0, r9
 800fb68:	f7ff fefe 	bl	800f968 <strncmp>
 800fb6c:	4607      	mov	r7, r0
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d167      	bne.n	800fc42 <__gethex+0x10e>
 800fb72:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fb76:	4626      	mov	r6, r4
 800fb78:	f7ff ffc6 	bl	800fb08 <__hexdig_fun>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d062      	beq.n	800fc46 <__gethex+0x112>
 800fb80:	4623      	mov	r3, r4
 800fb82:	7818      	ldrb	r0, [r3, #0]
 800fb84:	2830      	cmp	r0, #48	@ 0x30
 800fb86:	4699      	mov	r9, r3
 800fb88:	f103 0301 	add.w	r3, r3, #1
 800fb8c:	d0f9      	beq.n	800fb82 <__gethex+0x4e>
 800fb8e:	f7ff ffbb 	bl	800fb08 <__hexdig_fun>
 800fb92:	fab0 f580 	clz	r5, r0
 800fb96:	096d      	lsrs	r5, r5, #5
 800fb98:	f04f 0b01 	mov.w	fp, #1
 800fb9c:	464a      	mov	r2, r9
 800fb9e:	4616      	mov	r6, r2
 800fba0:	3201      	adds	r2, #1
 800fba2:	7830      	ldrb	r0, [r6, #0]
 800fba4:	f7ff ffb0 	bl	800fb08 <__hexdig_fun>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d1f8      	bne.n	800fb9e <__gethex+0x6a>
 800fbac:	498d      	ldr	r1, [pc, #564]	@ (800fde4 <__gethex+0x2b0>)
 800fbae:	2201      	movs	r2, #1
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f7ff fed9 	bl	800f968 <strncmp>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d13f      	bne.n	800fc3a <__gethex+0x106>
 800fbba:	b944      	cbnz	r4, 800fbce <__gethex+0x9a>
 800fbbc:	1c74      	adds	r4, r6, #1
 800fbbe:	4622      	mov	r2, r4
 800fbc0:	4616      	mov	r6, r2
 800fbc2:	3201      	adds	r2, #1
 800fbc4:	7830      	ldrb	r0, [r6, #0]
 800fbc6:	f7ff ff9f 	bl	800fb08 <__hexdig_fun>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d1f8      	bne.n	800fbc0 <__gethex+0x8c>
 800fbce:	1ba4      	subs	r4, r4, r6
 800fbd0:	00a7      	lsls	r7, r4, #2
 800fbd2:	7833      	ldrb	r3, [r6, #0]
 800fbd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fbd8:	2b50      	cmp	r3, #80	@ 0x50
 800fbda:	d13e      	bne.n	800fc5a <__gethex+0x126>
 800fbdc:	7873      	ldrb	r3, [r6, #1]
 800fbde:	2b2b      	cmp	r3, #43	@ 0x2b
 800fbe0:	d033      	beq.n	800fc4a <__gethex+0x116>
 800fbe2:	2b2d      	cmp	r3, #45	@ 0x2d
 800fbe4:	d034      	beq.n	800fc50 <__gethex+0x11c>
 800fbe6:	1c71      	adds	r1, r6, #1
 800fbe8:	2400      	movs	r4, #0
 800fbea:	7808      	ldrb	r0, [r1, #0]
 800fbec:	f7ff ff8c 	bl	800fb08 <__hexdig_fun>
 800fbf0:	1e43      	subs	r3, r0, #1
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	2b18      	cmp	r3, #24
 800fbf6:	d830      	bhi.n	800fc5a <__gethex+0x126>
 800fbf8:	f1a0 0210 	sub.w	r2, r0, #16
 800fbfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc00:	f7ff ff82 	bl	800fb08 <__hexdig_fun>
 800fc04:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800fc08:	fa5f fc8c 	uxtb.w	ip, ip
 800fc0c:	f1bc 0f18 	cmp.w	ip, #24
 800fc10:	f04f 030a 	mov.w	r3, #10
 800fc14:	d91e      	bls.n	800fc54 <__gethex+0x120>
 800fc16:	b104      	cbz	r4, 800fc1a <__gethex+0xe6>
 800fc18:	4252      	negs	r2, r2
 800fc1a:	4417      	add	r7, r2
 800fc1c:	f8ca 1000 	str.w	r1, [sl]
 800fc20:	b1ed      	cbz	r5, 800fc5e <__gethex+0x12a>
 800fc22:	f1bb 0f00 	cmp.w	fp, #0
 800fc26:	bf0c      	ite	eq
 800fc28:	2506      	moveq	r5, #6
 800fc2a:	2500      	movne	r5, #0
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	b005      	add	sp, #20
 800fc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc34:	2500      	movs	r5, #0
 800fc36:	462c      	mov	r4, r5
 800fc38:	e7b0      	b.n	800fb9c <__gethex+0x68>
 800fc3a:	2c00      	cmp	r4, #0
 800fc3c:	d1c7      	bne.n	800fbce <__gethex+0x9a>
 800fc3e:	4627      	mov	r7, r4
 800fc40:	e7c7      	b.n	800fbd2 <__gethex+0x9e>
 800fc42:	464e      	mov	r6, r9
 800fc44:	462f      	mov	r7, r5
 800fc46:	2501      	movs	r5, #1
 800fc48:	e7c3      	b.n	800fbd2 <__gethex+0x9e>
 800fc4a:	2400      	movs	r4, #0
 800fc4c:	1cb1      	adds	r1, r6, #2
 800fc4e:	e7cc      	b.n	800fbea <__gethex+0xb6>
 800fc50:	2401      	movs	r4, #1
 800fc52:	e7fb      	b.n	800fc4c <__gethex+0x118>
 800fc54:	fb03 0002 	mla	r0, r3, r2, r0
 800fc58:	e7ce      	b.n	800fbf8 <__gethex+0xc4>
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	e7de      	b.n	800fc1c <__gethex+0xe8>
 800fc5e:	eba6 0309 	sub.w	r3, r6, r9
 800fc62:	3b01      	subs	r3, #1
 800fc64:	4629      	mov	r1, r5
 800fc66:	2b07      	cmp	r3, #7
 800fc68:	dc0a      	bgt.n	800fc80 <__gethex+0x14c>
 800fc6a:	9801      	ldr	r0, [sp, #4]
 800fc6c:	f7fd ff84 	bl	800db78 <_Balloc>
 800fc70:	4604      	mov	r4, r0
 800fc72:	b940      	cbnz	r0, 800fc86 <__gethex+0x152>
 800fc74:	4b5c      	ldr	r3, [pc, #368]	@ (800fde8 <__gethex+0x2b4>)
 800fc76:	4602      	mov	r2, r0
 800fc78:	21e4      	movs	r1, #228	@ 0xe4
 800fc7a:	485c      	ldr	r0, [pc, #368]	@ (800fdec <__gethex+0x2b8>)
 800fc7c:	f7ff fec0 	bl	800fa00 <__assert_func>
 800fc80:	3101      	adds	r1, #1
 800fc82:	105b      	asrs	r3, r3, #1
 800fc84:	e7ef      	b.n	800fc66 <__gethex+0x132>
 800fc86:	f100 0a14 	add.w	sl, r0, #20
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	4655      	mov	r5, sl
 800fc8e:	469b      	mov	fp, r3
 800fc90:	45b1      	cmp	r9, r6
 800fc92:	d337      	bcc.n	800fd04 <__gethex+0x1d0>
 800fc94:	f845 bb04 	str.w	fp, [r5], #4
 800fc98:	eba5 050a 	sub.w	r5, r5, sl
 800fc9c:	10ad      	asrs	r5, r5, #2
 800fc9e:	6125      	str	r5, [r4, #16]
 800fca0:	4658      	mov	r0, fp
 800fca2:	f7fe f85b 	bl	800dd5c <__hi0bits>
 800fca6:	016d      	lsls	r5, r5, #5
 800fca8:	f8d8 6000 	ldr.w	r6, [r8]
 800fcac:	1a2d      	subs	r5, r5, r0
 800fcae:	42b5      	cmp	r5, r6
 800fcb0:	dd54      	ble.n	800fd5c <__gethex+0x228>
 800fcb2:	1bad      	subs	r5, r5, r6
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	f7fe fbef 	bl	800e49a <__any_on>
 800fcbc:	4681      	mov	r9, r0
 800fcbe:	b178      	cbz	r0, 800fce0 <__gethex+0x1ac>
 800fcc0:	1e6b      	subs	r3, r5, #1
 800fcc2:	1159      	asrs	r1, r3, #5
 800fcc4:	f003 021f 	and.w	r2, r3, #31
 800fcc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fccc:	f04f 0901 	mov.w	r9, #1
 800fcd0:	fa09 f202 	lsl.w	r2, r9, r2
 800fcd4:	420a      	tst	r2, r1
 800fcd6:	d003      	beq.n	800fce0 <__gethex+0x1ac>
 800fcd8:	454b      	cmp	r3, r9
 800fcda:	dc36      	bgt.n	800fd4a <__gethex+0x216>
 800fcdc:	f04f 0902 	mov.w	r9, #2
 800fce0:	4629      	mov	r1, r5
 800fce2:	4620      	mov	r0, r4
 800fce4:	f7ff febe 	bl	800fa64 <rshift>
 800fce8:	442f      	add	r7, r5
 800fcea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcee:	42bb      	cmp	r3, r7
 800fcf0:	da42      	bge.n	800fd78 <__gethex+0x244>
 800fcf2:	9801      	ldr	r0, [sp, #4]
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	f7fd ff7f 	bl	800dbf8 <_Bfree>
 800fcfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	25a3      	movs	r5, #163	@ 0xa3
 800fd02:	e793      	b.n	800fc2c <__gethex+0xf8>
 800fd04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fd08:	2a2e      	cmp	r2, #46	@ 0x2e
 800fd0a:	d012      	beq.n	800fd32 <__gethex+0x1fe>
 800fd0c:	2b20      	cmp	r3, #32
 800fd0e:	d104      	bne.n	800fd1a <__gethex+0x1e6>
 800fd10:	f845 bb04 	str.w	fp, [r5], #4
 800fd14:	f04f 0b00 	mov.w	fp, #0
 800fd18:	465b      	mov	r3, fp
 800fd1a:	7830      	ldrb	r0, [r6, #0]
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	f7ff fef3 	bl	800fb08 <__hexdig_fun>
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	f000 000f 	and.w	r0, r0, #15
 800fd28:	4098      	lsls	r0, r3
 800fd2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd2e:	3304      	adds	r3, #4
 800fd30:	e7ae      	b.n	800fc90 <__gethex+0x15c>
 800fd32:	45b1      	cmp	r9, r6
 800fd34:	d8ea      	bhi.n	800fd0c <__gethex+0x1d8>
 800fd36:	492b      	ldr	r1, [pc, #172]	@ (800fde4 <__gethex+0x2b0>)
 800fd38:	9303      	str	r3, [sp, #12]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7ff fe13 	bl	800f968 <strncmp>
 800fd42:	9b03      	ldr	r3, [sp, #12]
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d1e1      	bne.n	800fd0c <__gethex+0x1d8>
 800fd48:	e7a2      	b.n	800fc90 <__gethex+0x15c>
 800fd4a:	1ea9      	subs	r1, r5, #2
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f7fe fba4 	bl	800e49a <__any_on>
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d0c2      	beq.n	800fcdc <__gethex+0x1a8>
 800fd56:	f04f 0903 	mov.w	r9, #3
 800fd5a:	e7c1      	b.n	800fce0 <__gethex+0x1ac>
 800fd5c:	da09      	bge.n	800fd72 <__gethex+0x23e>
 800fd5e:	1b75      	subs	r5, r6, r5
 800fd60:	4621      	mov	r1, r4
 800fd62:	9801      	ldr	r0, [sp, #4]
 800fd64:	462a      	mov	r2, r5
 800fd66:	f7fe f95f 	bl	800e028 <__lshift>
 800fd6a:	1b7f      	subs	r7, r7, r5
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	f100 0a14 	add.w	sl, r0, #20
 800fd72:	f04f 0900 	mov.w	r9, #0
 800fd76:	e7b8      	b.n	800fcea <__gethex+0x1b6>
 800fd78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fd7c:	42bd      	cmp	r5, r7
 800fd7e:	dd6f      	ble.n	800fe60 <__gethex+0x32c>
 800fd80:	1bed      	subs	r5, r5, r7
 800fd82:	42ae      	cmp	r6, r5
 800fd84:	dc34      	bgt.n	800fdf0 <__gethex+0x2bc>
 800fd86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d022      	beq.n	800fdd4 <__gethex+0x2a0>
 800fd8e:	2b03      	cmp	r3, #3
 800fd90:	d024      	beq.n	800fddc <__gethex+0x2a8>
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d115      	bne.n	800fdc2 <__gethex+0x28e>
 800fd96:	42ae      	cmp	r6, r5
 800fd98:	d113      	bne.n	800fdc2 <__gethex+0x28e>
 800fd9a:	2e01      	cmp	r6, #1
 800fd9c:	d10b      	bne.n	800fdb6 <__gethex+0x282>
 800fd9e:	9a02      	ldr	r2, [sp, #8]
 800fda0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fda4:	6013      	str	r3, [r2, #0]
 800fda6:	2301      	movs	r3, #1
 800fda8:	6123      	str	r3, [r4, #16]
 800fdaa:	f8ca 3000 	str.w	r3, [sl]
 800fdae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdb0:	2562      	movs	r5, #98	@ 0x62
 800fdb2:	601c      	str	r4, [r3, #0]
 800fdb4:	e73a      	b.n	800fc2c <__gethex+0xf8>
 800fdb6:	1e71      	subs	r1, r6, #1
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f7fe fb6e 	bl	800e49a <__any_on>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d1ed      	bne.n	800fd9e <__gethex+0x26a>
 800fdc2:	9801      	ldr	r0, [sp, #4]
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	f7fd ff17 	bl	800dbf8 <_Bfree>
 800fdca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fdcc:	2300      	movs	r3, #0
 800fdce:	6013      	str	r3, [r2, #0]
 800fdd0:	2550      	movs	r5, #80	@ 0x50
 800fdd2:	e72b      	b.n	800fc2c <__gethex+0xf8>
 800fdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1f3      	bne.n	800fdc2 <__gethex+0x28e>
 800fdda:	e7e0      	b.n	800fd9e <__gethex+0x26a>
 800fddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1dd      	bne.n	800fd9e <__gethex+0x26a>
 800fde2:	e7ee      	b.n	800fdc2 <__gethex+0x28e>
 800fde4:	080106c8 	.word	0x080106c8
 800fde8:	08010561 	.word	0x08010561
 800fdec:	08010876 	.word	0x08010876
 800fdf0:	1e6f      	subs	r7, r5, #1
 800fdf2:	f1b9 0f00 	cmp.w	r9, #0
 800fdf6:	d130      	bne.n	800fe5a <__gethex+0x326>
 800fdf8:	b127      	cbz	r7, 800fe04 <__gethex+0x2d0>
 800fdfa:	4639      	mov	r1, r7
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f7fe fb4c 	bl	800e49a <__any_on>
 800fe02:	4681      	mov	r9, r0
 800fe04:	117a      	asrs	r2, r7, #5
 800fe06:	2301      	movs	r3, #1
 800fe08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fe0c:	f007 071f 	and.w	r7, r7, #31
 800fe10:	40bb      	lsls	r3, r7
 800fe12:	4213      	tst	r3, r2
 800fe14:	4629      	mov	r1, r5
 800fe16:	4620      	mov	r0, r4
 800fe18:	bf18      	it	ne
 800fe1a:	f049 0902 	orrne.w	r9, r9, #2
 800fe1e:	f7ff fe21 	bl	800fa64 <rshift>
 800fe22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fe26:	1b76      	subs	r6, r6, r5
 800fe28:	2502      	movs	r5, #2
 800fe2a:	f1b9 0f00 	cmp.w	r9, #0
 800fe2e:	d047      	beq.n	800fec0 <__gethex+0x38c>
 800fe30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d015      	beq.n	800fe64 <__gethex+0x330>
 800fe38:	2b03      	cmp	r3, #3
 800fe3a:	d017      	beq.n	800fe6c <__gethex+0x338>
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d109      	bne.n	800fe54 <__gethex+0x320>
 800fe40:	f019 0f02 	tst.w	r9, #2
 800fe44:	d006      	beq.n	800fe54 <__gethex+0x320>
 800fe46:	f8da 3000 	ldr.w	r3, [sl]
 800fe4a:	ea49 0903 	orr.w	r9, r9, r3
 800fe4e:	f019 0f01 	tst.w	r9, #1
 800fe52:	d10e      	bne.n	800fe72 <__gethex+0x33e>
 800fe54:	f045 0510 	orr.w	r5, r5, #16
 800fe58:	e032      	b.n	800fec0 <__gethex+0x38c>
 800fe5a:	f04f 0901 	mov.w	r9, #1
 800fe5e:	e7d1      	b.n	800fe04 <__gethex+0x2d0>
 800fe60:	2501      	movs	r5, #1
 800fe62:	e7e2      	b.n	800fe2a <__gethex+0x2f6>
 800fe64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe66:	f1c3 0301 	rsb	r3, r3, #1
 800fe6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d0f0      	beq.n	800fe54 <__gethex+0x320>
 800fe72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe76:	f104 0314 	add.w	r3, r4, #20
 800fe7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe82:	f04f 0c00 	mov.w	ip, #0
 800fe86:	4618      	mov	r0, r3
 800fe88:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe8c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800fe90:	d01b      	beq.n	800feca <__gethex+0x396>
 800fe92:	3201      	adds	r2, #1
 800fe94:	6002      	str	r2, [r0, #0]
 800fe96:	2d02      	cmp	r5, #2
 800fe98:	f104 0314 	add.w	r3, r4, #20
 800fe9c:	d13c      	bne.n	800ff18 <__gethex+0x3e4>
 800fe9e:	f8d8 2000 	ldr.w	r2, [r8]
 800fea2:	3a01      	subs	r2, #1
 800fea4:	42b2      	cmp	r2, r6
 800fea6:	d109      	bne.n	800febc <__gethex+0x388>
 800fea8:	1171      	asrs	r1, r6, #5
 800feaa:	2201      	movs	r2, #1
 800feac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800feb0:	f006 061f 	and.w	r6, r6, #31
 800feb4:	fa02 f606 	lsl.w	r6, r2, r6
 800feb8:	421e      	tst	r6, r3
 800feba:	d13a      	bne.n	800ff32 <__gethex+0x3fe>
 800febc:	f045 0520 	orr.w	r5, r5, #32
 800fec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fec2:	601c      	str	r4, [r3, #0]
 800fec4:	9b02      	ldr	r3, [sp, #8]
 800fec6:	601f      	str	r7, [r3, #0]
 800fec8:	e6b0      	b.n	800fc2c <__gethex+0xf8>
 800feca:	4299      	cmp	r1, r3
 800fecc:	f843 cc04 	str.w	ip, [r3, #-4]
 800fed0:	d8d9      	bhi.n	800fe86 <__gethex+0x352>
 800fed2:	68a3      	ldr	r3, [r4, #8]
 800fed4:	459b      	cmp	fp, r3
 800fed6:	db17      	blt.n	800ff08 <__gethex+0x3d4>
 800fed8:	6861      	ldr	r1, [r4, #4]
 800feda:	9801      	ldr	r0, [sp, #4]
 800fedc:	3101      	adds	r1, #1
 800fede:	f7fd fe4b 	bl	800db78 <_Balloc>
 800fee2:	4681      	mov	r9, r0
 800fee4:	b918      	cbnz	r0, 800feee <__gethex+0x3ba>
 800fee6:	4b1a      	ldr	r3, [pc, #104]	@ (800ff50 <__gethex+0x41c>)
 800fee8:	4602      	mov	r2, r0
 800feea:	2184      	movs	r1, #132	@ 0x84
 800feec:	e6c5      	b.n	800fc7a <__gethex+0x146>
 800feee:	6922      	ldr	r2, [r4, #16]
 800fef0:	3202      	adds	r2, #2
 800fef2:	f104 010c 	add.w	r1, r4, #12
 800fef6:	0092      	lsls	r2, r2, #2
 800fef8:	300c      	adds	r0, #12
 800fefa:	f7fc fedc 	bl	800ccb6 <memcpy>
 800fefe:	4621      	mov	r1, r4
 800ff00:	9801      	ldr	r0, [sp, #4]
 800ff02:	f7fd fe79 	bl	800dbf8 <_Bfree>
 800ff06:	464c      	mov	r4, r9
 800ff08:	6923      	ldr	r3, [r4, #16]
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff10:	6122      	str	r2, [r4, #16]
 800ff12:	2201      	movs	r2, #1
 800ff14:	615a      	str	r2, [r3, #20]
 800ff16:	e7be      	b.n	800fe96 <__gethex+0x362>
 800ff18:	6922      	ldr	r2, [r4, #16]
 800ff1a:	455a      	cmp	r2, fp
 800ff1c:	dd0b      	ble.n	800ff36 <__gethex+0x402>
 800ff1e:	2101      	movs	r1, #1
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7ff fd9f 	bl	800fa64 <rshift>
 800ff26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff2a:	3701      	adds	r7, #1
 800ff2c:	42bb      	cmp	r3, r7
 800ff2e:	f6ff aee0 	blt.w	800fcf2 <__gethex+0x1be>
 800ff32:	2501      	movs	r5, #1
 800ff34:	e7c2      	b.n	800febc <__gethex+0x388>
 800ff36:	f016 061f 	ands.w	r6, r6, #31
 800ff3a:	d0fa      	beq.n	800ff32 <__gethex+0x3fe>
 800ff3c:	4453      	add	r3, sl
 800ff3e:	f1c6 0620 	rsb	r6, r6, #32
 800ff42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff46:	f7fd ff09 	bl	800dd5c <__hi0bits>
 800ff4a:	42b0      	cmp	r0, r6
 800ff4c:	dbe7      	blt.n	800ff1e <__gethex+0x3ea>
 800ff4e:	e7f0      	b.n	800ff32 <__gethex+0x3fe>
 800ff50:	08010561 	.word	0x08010561

0800ff54 <L_shift>:
 800ff54:	f1c2 0208 	rsb	r2, r2, #8
 800ff58:	0092      	lsls	r2, r2, #2
 800ff5a:	b570      	push	{r4, r5, r6, lr}
 800ff5c:	f1c2 0620 	rsb	r6, r2, #32
 800ff60:	6843      	ldr	r3, [r0, #4]
 800ff62:	6804      	ldr	r4, [r0, #0]
 800ff64:	fa03 f506 	lsl.w	r5, r3, r6
 800ff68:	432c      	orrs	r4, r5
 800ff6a:	40d3      	lsrs	r3, r2
 800ff6c:	6004      	str	r4, [r0, #0]
 800ff6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff72:	4288      	cmp	r0, r1
 800ff74:	d3f4      	bcc.n	800ff60 <L_shift+0xc>
 800ff76:	bd70      	pop	{r4, r5, r6, pc}

0800ff78 <__match>:
 800ff78:	b530      	push	{r4, r5, lr}
 800ff7a:	6803      	ldr	r3, [r0, #0]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff82:	b914      	cbnz	r4, 800ff8a <__match+0x12>
 800ff84:	6003      	str	r3, [r0, #0]
 800ff86:	2001      	movs	r0, #1
 800ff88:	bd30      	pop	{r4, r5, pc}
 800ff8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ff92:	2d19      	cmp	r5, #25
 800ff94:	bf98      	it	ls
 800ff96:	3220      	addls	r2, #32
 800ff98:	42a2      	cmp	r2, r4
 800ff9a:	d0f0      	beq.n	800ff7e <__match+0x6>
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	e7f3      	b.n	800ff88 <__match+0x10>

0800ffa0 <__hexnan>:
 800ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	680b      	ldr	r3, [r1, #0]
 800ffa6:	6801      	ldr	r1, [r0, #0]
 800ffa8:	115e      	asrs	r6, r3, #5
 800ffaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ffae:	f013 031f 	ands.w	r3, r3, #31
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	bf18      	it	ne
 800ffb6:	3604      	addne	r6, #4
 800ffb8:	2500      	movs	r5, #0
 800ffba:	1f37      	subs	r7, r6, #4
 800ffbc:	4682      	mov	sl, r0
 800ffbe:	4690      	mov	r8, r2
 800ffc0:	9301      	str	r3, [sp, #4]
 800ffc2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ffc6:	46b9      	mov	r9, r7
 800ffc8:	463c      	mov	r4, r7
 800ffca:	9502      	str	r5, [sp, #8]
 800ffcc:	46ab      	mov	fp, r5
 800ffce:	784a      	ldrb	r2, [r1, #1]
 800ffd0:	1c4b      	adds	r3, r1, #1
 800ffd2:	9303      	str	r3, [sp, #12]
 800ffd4:	b342      	cbz	r2, 8010028 <__hexnan+0x88>
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	9105      	str	r1, [sp, #20]
 800ffda:	9204      	str	r2, [sp, #16]
 800ffdc:	f7ff fd94 	bl	800fb08 <__hexdig_fun>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d151      	bne.n	8010088 <__hexnan+0xe8>
 800ffe4:	9a04      	ldr	r2, [sp, #16]
 800ffe6:	9905      	ldr	r1, [sp, #20]
 800ffe8:	2a20      	cmp	r2, #32
 800ffea:	d818      	bhi.n	801001e <__hexnan+0x7e>
 800ffec:	9b02      	ldr	r3, [sp, #8]
 800ffee:	459b      	cmp	fp, r3
 800fff0:	dd13      	ble.n	801001a <__hexnan+0x7a>
 800fff2:	454c      	cmp	r4, r9
 800fff4:	d206      	bcs.n	8010004 <__hexnan+0x64>
 800fff6:	2d07      	cmp	r5, #7
 800fff8:	dc04      	bgt.n	8010004 <__hexnan+0x64>
 800fffa:	462a      	mov	r2, r5
 800fffc:	4649      	mov	r1, r9
 800fffe:	4620      	mov	r0, r4
 8010000:	f7ff ffa8 	bl	800ff54 <L_shift>
 8010004:	4544      	cmp	r4, r8
 8010006:	d952      	bls.n	80100ae <__hexnan+0x10e>
 8010008:	2300      	movs	r3, #0
 801000a:	f1a4 0904 	sub.w	r9, r4, #4
 801000e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010012:	f8cd b008 	str.w	fp, [sp, #8]
 8010016:	464c      	mov	r4, r9
 8010018:	461d      	mov	r5, r3
 801001a:	9903      	ldr	r1, [sp, #12]
 801001c:	e7d7      	b.n	800ffce <__hexnan+0x2e>
 801001e:	2a29      	cmp	r2, #41	@ 0x29
 8010020:	d157      	bne.n	80100d2 <__hexnan+0x132>
 8010022:	3102      	adds	r1, #2
 8010024:	f8ca 1000 	str.w	r1, [sl]
 8010028:	f1bb 0f00 	cmp.w	fp, #0
 801002c:	d051      	beq.n	80100d2 <__hexnan+0x132>
 801002e:	454c      	cmp	r4, r9
 8010030:	d206      	bcs.n	8010040 <__hexnan+0xa0>
 8010032:	2d07      	cmp	r5, #7
 8010034:	dc04      	bgt.n	8010040 <__hexnan+0xa0>
 8010036:	462a      	mov	r2, r5
 8010038:	4649      	mov	r1, r9
 801003a:	4620      	mov	r0, r4
 801003c:	f7ff ff8a 	bl	800ff54 <L_shift>
 8010040:	4544      	cmp	r4, r8
 8010042:	d936      	bls.n	80100b2 <__hexnan+0x112>
 8010044:	f1a8 0204 	sub.w	r2, r8, #4
 8010048:	4623      	mov	r3, r4
 801004a:	f853 1b04 	ldr.w	r1, [r3], #4
 801004e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010052:	429f      	cmp	r7, r3
 8010054:	d2f9      	bcs.n	801004a <__hexnan+0xaa>
 8010056:	1b3b      	subs	r3, r7, r4
 8010058:	f023 0303 	bic.w	r3, r3, #3
 801005c:	3304      	adds	r3, #4
 801005e:	3401      	adds	r4, #1
 8010060:	3e03      	subs	r6, #3
 8010062:	42b4      	cmp	r4, r6
 8010064:	bf88      	it	hi
 8010066:	2304      	movhi	r3, #4
 8010068:	4443      	add	r3, r8
 801006a:	2200      	movs	r2, #0
 801006c:	f843 2b04 	str.w	r2, [r3], #4
 8010070:	429f      	cmp	r7, r3
 8010072:	d2fb      	bcs.n	801006c <__hexnan+0xcc>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	b91b      	cbnz	r3, 8010080 <__hexnan+0xe0>
 8010078:	4547      	cmp	r7, r8
 801007a:	d128      	bne.n	80100ce <__hexnan+0x12e>
 801007c:	2301      	movs	r3, #1
 801007e:	603b      	str	r3, [r7, #0]
 8010080:	2005      	movs	r0, #5
 8010082:	b007      	add	sp, #28
 8010084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010088:	3501      	adds	r5, #1
 801008a:	2d08      	cmp	r5, #8
 801008c:	f10b 0b01 	add.w	fp, fp, #1
 8010090:	dd06      	ble.n	80100a0 <__hexnan+0x100>
 8010092:	4544      	cmp	r4, r8
 8010094:	d9c1      	bls.n	801001a <__hexnan+0x7a>
 8010096:	2300      	movs	r3, #0
 8010098:	f844 3c04 	str.w	r3, [r4, #-4]
 801009c:	2501      	movs	r5, #1
 801009e:	3c04      	subs	r4, #4
 80100a0:	6822      	ldr	r2, [r4, #0]
 80100a2:	f000 000f 	and.w	r0, r0, #15
 80100a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80100aa:	6020      	str	r0, [r4, #0]
 80100ac:	e7b5      	b.n	801001a <__hexnan+0x7a>
 80100ae:	2508      	movs	r5, #8
 80100b0:	e7b3      	b.n	801001a <__hexnan+0x7a>
 80100b2:	9b01      	ldr	r3, [sp, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d0dd      	beq.n	8010074 <__hexnan+0xd4>
 80100b8:	f1c3 0320 	rsb	r3, r3, #32
 80100bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100c0:	40da      	lsrs	r2, r3
 80100c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80100c6:	4013      	ands	r3, r2
 80100c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80100cc:	e7d2      	b.n	8010074 <__hexnan+0xd4>
 80100ce:	3f04      	subs	r7, #4
 80100d0:	e7d0      	b.n	8010074 <__hexnan+0xd4>
 80100d2:	2004      	movs	r0, #4
 80100d4:	e7d5      	b.n	8010082 <__hexnan+0xe2>

080100d6 <__ascii_mbtowc>:
 80100d6:	b082      	sub	sp, #8
 80100d8:	b901      	cbnz	r1, 80100dc <__ascii_mbtowc+0x6>
 80100da:	a901      	add	r1, sp, #4
 80100dc:	b142      	cbz	r2, 80100f0 <__ascii_mbtowc+0x1a>
 80100de:	b14b      	cbz	r3, 80100f4 <__ascii_mbtowc+0x1e>
 80100e0:	7813      	ldrb	r3, [r2, #0]
 80100e2:	600b      	str	r3, [r1, #0]
 80100e4:	7812      	ldrb	r2, [r2, #0]
 80100e6:	1e10      	subs	r0, r2, #0
 80100e8:	bf18      	it	ne
 80100ea:	2001      	movne	r0, #1
 80100ec:	b002      	add	sp, #8
 80100ee:	4770      	bx	lr
 80100f0:	4610      	mov	r0, r2
 80100f2:	e7fb      	b.n	80100ec <__ascii_mbtowc+0x16>
 80100f4:	f06f 0001 	mvn.w	r0, #1
 80100f8:	e7f8      	b.n	80100ec <__ascii_mbtowc+0x16>

080100fa <_realloc_r>:
 80100fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100fe:	4680      	mov	r8, r0
 8010100:	4615      	mov	r5, r2
 8010102:	460c      	mov	r4, r1
 8010104:	b921      	cbnz	r1, 8010110 <_realloc_r+0x16>
 8010106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801010a:	4611      	mov	r1, r2
 801010c:	f7fd bca8 	b.w	800da60 <_malloc_r>
 8010110:	b92a      	cbnz	r2, 801011e <_realloc_r+0x24>
 8010112:	f7fd fc31 	bl	800d978 <_free_r>
 8010116:	2400      	movs	r4, #0
 8010118:	4620      	mov	r0, r4
 801011a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011e:	f000 f840 	bl	80101a2 <_malloc_usable_size_r>
 8010122:	4285      	cmp	r5, r0
 8010124:	4606      	mov	r6, r0
 8010126:	d802      	bhi.n	801012e <_realloc_r+0x34>
 8010128:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801012c:	d8f4      	bhi.n	8010118 <_realloc_r+0x1e>
 801012e:	4629      	mov	r1, r5
 8010130:	4640      	mov	r0, r8
 8010132:	f7fd fc95 	bl	800da60 <_malloc_r>
 8010136:	4607      	mov	r7, r0
 8010138:	2800      	cmp	r0, #0
 801013a:	d0ec      	beq.n	8010116 <_realloc_r+0x1c>
 801013c:	42b5      	cmp	r5, r6
 801013e:	462a      	mov	r2, r5
 8010140:	4621      	mov	r1, r4
 8010142:	bf28      	it	cs
 8010144:	4632      	movcs	r2, r6
 8010146:	f7fc fdb6 	bl	800ccb6 <memcpy>
 801014a:	4621      	mov	r1, r4
 801014c:	4640      	mov	r0, r8
 801014e:	f7fd fc13 	bl	800d978 <_free_r>
 8010152:	463c      	mov	r4, r7
 8010154:	e7e0      	b.n	8010118 <_realloc_r+0x1e>

08010156 <__ascii_wctomb>:
 8010156:	4603      	mov	r3, r0
 8010158:	4608      	mov	r0, r1
 801015a:	b141      	cbz	r1, 801016e <__ascii_wctomb+0x18>
 801015c:	2aff      	cmp	r2, #255	@ 0xff
 801015e:	d904      	bls.n	801016a <__ascii_wctomb+0x14>
 8010160:	228a      	movs	r2, #138	@ 0x8a
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010168:	4770      	bx	lr
 801016a:	700a      	strb	r2, [r1, #0]
 801016c:	2001      	movs	r0, #1
 801016e:	4770      	bx	lr

08010170 <fiprintf>:
 8010170:	b40e      	push	{r1, r2, r3}
 8010172:	b503      	push	{r0, r1, lr}
 8010174:	4601      	mov	r1, r0
 8010176:	ab03      	add	r3, sp, #12
 8010178:	4805      	ldr	r0, [pc, #20]	@ (8010190 <fiprintf+0x20>)
 801017a:	f853 2b04 	ldr.w	r2, [r3], #4
 801017e:	6800      	ldr	r0, [r0, #0]
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	f7ff f9b1 	bl	800f4e8 <_vfiprintf_r>
 8010186:	b002      	add	sp, #8
 8010188:	f85d eb04 	ldr.w	lr, [sp], #4
 801018c:	b003      	add	sp, #12
 801018e:	4770      	bx	lr
 8010190:	20000028 	.word	0x20000028

08010194 <abort>:
 8010194:	b508      	push	{r3, lr}
 8010196:	2006      	movs	r0, #6
 8010198:	f000 f834 	bl	8010204 <raise>
 801019c:	2001      	movs	r0, #1
 801019e:	f7f2 fb27 	bl	80027f0 <_exit>

080101a2 <_malloc_usable_size_r>:
 80101a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101a6:	1f18      	subs	r0, r3, #4
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	bfbc      	itt	lt
 80101ac:	580b      	ldrlt	r3, [r1, r0]
 80101ae:	18c0      	addlt	r0, r0, r3
 80101b0:	4770      	bx	lr

080101b2 <_raise_r>:
 80101b2:	291f      	cmp	r1, #31
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4605      	mov	r5, r0
 80101b8:	460c      	mov	r4, r1
 80101ba:	d904      	bls.n	80101c6 <_raise_r+0x14>
 80101bc:	2316      	movs	r3, #22
 80101be:	6003      	str	r3, [r0, #0]
 80101c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101c4:	bd38      	pop	{r3, r4, r5, pc}
 80101c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80101c8:	b112      	cbz	r2, 80101d0 <_raise_r+0x1e>
 80101ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101ce:	b94b      	cbnz	r3, 80101e4 <_raise_r+0x32>
 80101d0:	4628      	mov	r0, r5
 80101d2:	f000 f831 	bl	8010238 <_getpid_r>
 80101d6:	4622      	mov	r2, r4
 80101d8:	4601      	mov	r1, r0
 80101da:	4628      	mov	r0, r5
 80101dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101e0:	f000 b818 	b.w	8010214 <_kill_r>
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d00a      	beq.n	80101fe <_raise_r+0x4c>
 80101e8:	1c59      	adds	r1, r3, #1
 80101ea:	d103      	bne.n	80101f4 <_raise_r+0x42>
 80101ec:	2316      	movs	r3, #22
 80101ee:	6003      	str	r3, [r0, #0]
 80101f0:	2001      	movs	r0, #1
 80101f2:	e7e7      	b.n	80101c4 <_raise_r+0x12>
 80101f4:	2100      	movs	r1, #0
 80101f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80101fa:	4620      	mov	r0, r4
 80101fc:	4798      	blx	r3
 80101fe:	2000      	movs	r0, #0
 8010200:	e7e0      	b.n	80101c4 <_raise_r+0x12>
	...

08010204 <raise>:
 8010204:	4b02      	ldr	r3, [pc, #8]	@ (8010210 <raise+0xc>)
 8010206:	4601      	mov	r1, r0
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	f7ff bfd2 	b.w	80101b2 <_raise_r>
 801020e:	bf00      	nop
 8010210:	20000028 	.word	0x20000028

08010214 <_kill_r>:
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	4d07      	ldr	r5, [pc, #28]	@ (8010234 <_kill_r+0x20>)
 8010218:	2300      	movs	r3, #0
 801021a:	4604      	mov	r4, r0
 801021c:	4608      	mov	r0, r1
 801021e:	4611      	mov	r1, r2
 8010220:	602b      	str	r3, [r5, #0]
 8010222:	f7f2 fad5 	bl	80027d0 <_kill>
 8010226:	1c43      	adds	r3, r0, #1
 8010228:	d102      	bne.n	8010230 <_kill_r+0x1c>
 801022a:	682b      	ldr	r3, [r5, #0]
 801022c:	b103      	cbz	r3, 8010230 <_kill_r+0x1c>
 801022e:	6023      	str	r3, [r4, #0]
 8010230:	bd38      	pop	{r3, r4, r5, pc}
 8010232:	bf00      	nop
 8010234:	20001be0 	.word	0x20001be0

08010238 <_getpid_r>:
 8010238:	f7f2 bac2 	b.w	80027c0 <_getpid>

0801023c <_init>:
 801023c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801023e:	bf00      	nop
 8010240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010242:	bc08      	pop	{r3}
 8010244:	469e      	mov	lr, r3
 8010246:	4770      	bx	lr

08010248 <_fini>:
 8010248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024a:	bf00      	nop
 801024c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801024e:	bc08      	pop	{r3}
 8010250:	469e      	mov	lr, r3
 8010252:	4770      	bx	lr
